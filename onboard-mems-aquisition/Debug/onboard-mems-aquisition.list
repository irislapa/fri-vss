
onboard-mems-aquisition.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051a0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005438  08005438  00015438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005470  08005470  00015470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005478  08005478  00015478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800547c  0800547c  0001547c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  08005480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002a0  2400006c  080054ec  0002006c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400030c  080054ec  0002030c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY
 11 .debug_info   00011f4d  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002699  00000000  00000000  0003202a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000be0  00000000  00000000  000346c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000090b  00000000  00000000  000352a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000381bc  00000000  00000000  00035bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000129e1  00000000  00000000  0006dd6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0015da95  00000000  00000000  00080750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00003644  00000000  00000000  001de1e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000071  00000000  00000000  001e182c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400006c 	.word	0x2400006c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005420 	.word	0x08005420

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000070 	.word	0x24000070
 80002d4:	08005420 	.word	0x08005420

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 fb08 	bl	8000bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f80e 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_CRC_Init();
 80005e0:	f000 f88c 	bl	80006fc <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  USART3_Init();
 80005e4:	f000 fa44 	bl	8000a70 <USART3_Init>


  while (1)
  {
    /* USER CODE END WHILE */
	     printf("Hello World\r\n");
 80005e8:	4803      	ldr	r0, [pc, #12]	; (80005f8 <main+0x24>)
 80005ea:	f004 fac5 	bl	8004b78 <puts>
	     HAL_Delay(1000);
 80005ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f2:	f000 fb8d 	bl	8000d10 <HAL_Delay>
	     printf("Hello World\r\n");
 80005f6:	e7f7      	b.n	80005e8 <main+0x14>
 80005f8:	08005438 	.word	0x08005438

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b09c      	sub	sp, #112	; 0x70
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000606:	224c      	movs	r2, #76	; 0x4c
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f004 fc4a 	bl	8004ea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2220      	movs	r2, #32
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f004 fc44 	bl	8004ea4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800061c:	2002      	movs	r0, #2
 800061e:	f001 fe57 	bl	80022d0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000622:	2300      	movs	r3, #0
 8000624:	603b      	str	r3, [r7, #0]
 8000626:	4b33      	ldr	r3, [pc, #204]	; (80006f4 <SystemClock_Config+0xf8>)
 8000628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800062a:	4a32      	ldr	r2, [pc, #200]	; (80006f4 <SystemClock_Config+0xf8>)
 800062c:	f023 0301 	bic.w	r3, r3, #1
 8000630:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000632:	4b30      	ldr	r3, [pc, #192]	; (80006f4 <SystemClock_Config+0xf8>)
 8000634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	4b2e      	ldr	r3, [pc, #184]	; (80006f8 <SystemClock_Config+0xfc>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000644:	4a2c      	ldr	r2, [pc, #176]	; (80006f8 <SystemClock_Config+0xfc>)
 8000646:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064a:	6193      	str	r3, [r2, #24]
 800064c:	4b2a      	ldr	r3, [pc, #168]	; (80006f8 <SystemClock_Config+0xfc>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000658:	bf00      	nop
 800065a:	4b27      	ldr	r3, [pc, #156]	; (80006f8 <SystemClock_Config+0xfc>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000666:	d1f8      	bne.n	800065a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000668:	2303      	movs	r3, #3
 800066a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800066c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000670:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000672:	2301      	movs	r3, #1
 8000674:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000676:	2340      	movs	r3, #64	; 0x40
 8000678:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067e:	2302      	movs	r3, #2
 8000680:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 8000682:	2316      	movs	r3, #22
 8000684:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 8000686:	23a9      	movs	r3, #169	; 0xa9
 8000688:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800068a:	2302      	movs	r3, #2
 800068c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800068e:	2304      	movs	r3, #4
 8000690:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000692:	2302      	movs	r3, #2
 8000694:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8000696:	2300      	movs	r3, #0
 8000698:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800069a:	2300      	movs	r3, #0
 800069c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 fe4c 	bl	8002344 <HAL_RCC_OscConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006b2:	f000 f84d 	bl	8000750 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	233f      	movs	r3, #63	; 0x3f
 80006b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2101      	movs	r1, #1
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 fa8c 	bl	8002bf8 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xee>
  {
    Error_Handler();
 80006e6:	f000 f833 	bl	8000750 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3770      	adds	r7, #112	; 0x70
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	58000400 	.word	0x58000400
 80006f8:	58024800 	.word	0x58024800

080006fc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_CRC_Init+0x4c>)
 8000702:	4a12      	ldr	r2, [pc, #72]	; (800074c <MX_CRC_Init+0x50>)
 8000704:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <MX_CRC_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800070c:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_CRC_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000712:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <MX_CRC_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000718:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_CRC_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800071e:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <MX_CRC_Init+0x4c>)
 8000720:	2201      	movs	r2, #1
 8000722:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000724:	4808      	ldr	r0, [pc, #32]	; (8000748 <MX_CRC_Init+0x4c>)
 8000726:	f000 fc07 	bl	8000f38 <HAL_CRC_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000730:	f000 f80e 	bl	8000750 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <MX_CRC_Init+0x4c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	689a      	ldr	r2, [r3, #8]
 800073a:	4b03      	ldr	r3, [pc, #12]	; (8000748 <MX_CRC_Init+0x4c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f042 0201 	orr.w	r2, r2, #1
 8000742:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	24000100 	.word	0x24000100
 800074c:	58024c00 	.word	0x58024c00

08000750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000754:	b672      	cpsid	i
}
 8000756:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000758:	e7fe      	b.n	8000758 <Error_Handler+0x8>
	...

0800075c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <HAL_MspInit+0x30>)
 8000764:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000768:	4a08      	ldr	r2, [pc, #32]	; (800078c <HAL_MspInit+0x30>)
 800076a:	f043 0302 	orr.w	r3, r3, #2
 800076e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_MspInit+0x30>)
 8000774:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000778:	f003 0302 	and.w	r3, r3, #2
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	58024400 	.word	0x58024400

08000790 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a0b      	ldr	r2, [pc, #44]	; (80007cc <HAL_CRC_MspInit+0x3c>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d10e      	bne.n	80007c0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <HAL_CRC_MspInit+0x40>)
 80007a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a8:	4a09      	ldr	r2, [pc, #36]	; (80007d0 <HAL_CRC_MspInit+0x40>)
 80007aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007b2:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <HAL_CRC_MspInit+0x40>)
 80007b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80007c0:	bf00      	nop
 80007c2:	3714      	adds	r7, #20
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	58024c00 	.word	0x58024c00
 80007d0:	58024400 	.word	0x58024400

080007d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]


}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007ec:	e7fe      	b.n	80007ec <NMI_Handler+0x4>

080007ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <HardFault_Handler+0x4>

080007f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <MemManage_Handler+0x4>

080007fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <BusFault_Handler+0x4>

08000800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <UsageFault_Handler+0x4>

08000806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000834:	f000 fa4c 	bl	8000cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}

0800083c <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_saia4);
 8000840:	4802      	ldr	r0, [pc, #8]	; (800084c <BDMA_Channel0_IRQHandler+0x10>)
 8000842:	f000 fc6b 	bl	800111c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	24000088 	.word	0x24000088

08000850 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	e00a      	b.n	8000878 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000862:	f3af 8000 	nop.w
 8000866:	4601      	mov	r1, r0
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	1c5a      	adds	r2, r3, #1
 800086c:	60ba      	str	r2, [r7, #8]
 800086e:	b2ca      	uxtb	r2, r1
 8000870:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	3301      	adds	r3, #1
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	697a      	ldr	r2, [r7, #20]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	429a      	cmp	r2, r3
 800087e:	dbf0      	blt.n	8000862 <_read+0x12>
  }

  return len;
 8000880:	687b      	ldr	r3, [r7, #4]
}
 8000882:	4618      	mov	r0, r3
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <_close>:
  }
  return len;
}

int _close(int file)
{
 800088a:	b480      	push	{r7}
 800088c:	b083      	sub	sp, #12
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000896:	4618      	mov	r0, r3
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008a2:	b480      	push	{r7}
 80008a4:	b083      	sub	sp, #12
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
 80008aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008b2:	605a      	str	r2, [r3, #4]
  return 0;
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <_isatty>:

int _isatty(int file)
{
 80008c2:	b480      	push	{r7}
 80008c4:	b083      	sub	sp, #12
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008ca:	2301      	movs	r3, #1
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3714      	adds	r7, #20
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
	...

080008f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008fc:	4a14      	ldr	r2, [pc, #80]	; (8000950 <_sbrk+0x5c>)
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <_sbrk+0x60>)
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000908:	4b13      	ldr	r3, [pc, #76]	; (8000958 <_sbrk+0x64>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d102      	bne.n	8000916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <_sbrk+0x64>)
 8000912:	4a12      	ldr	r2, [pc, #72]	; (800095c <_sbrk+0x68>)
 8000914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <_sbrk+0x64>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	429a      	cmp	r2, r3
 8000922:	d207      	bcs.n	8000934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000924:	f004 fb0c 	bl	8004f40 <__errno>
 8000928:	4603      	mov	r3, r0
 800092a:	220c      	movs	r2, #12
 800092c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800092e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000932:	e009      	b.n	8000948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <_sbrk+0x64>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800093a:	4b07      	ldr	r3, [pc, #28]	; (8000958 <_sbrk+0x64>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	4a05      	ldr	r2, [pc, #20]	; (8000958 <_sbrk+0x64>)
 8000944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000946:	68fb      	ldr	r3, [r7, #12]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	24080000 	.word	0x24080000
 8000954:	00000400 	.word	0x00000400
 8000958:	24000124 	.word	0x24000124
 800095c:	24000310 	.word	0x24000310

08000960 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000964:	4b37      	ldr	r3, [pc, #220]	; (8000a44 <SystemInit+0xe4>)
 8000966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096a:	4a36      	ldr	r2, [pc, #216]	; (8000a44 <SystemInit+0xe4>)
 800096c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000974:	4b34      	ldr	r3, [pc, #208]	; (8000a48 <SystemInit+0xe8>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f003 030f 	and.w	r3, r3, #15
 800097c:	2b06      	cmp	r3, #6
 800097e:	d807      	bhi.n	8000990 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000980:	4b31      	ldr	r3, [pc, #196]	; (8000a48 <SystemInit+0xe8>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f023 030f 	bic.w	r3, r3, #15
 8000988:	4a2f      	ldr	r2, [pc, #188]	; (8000a48 <SystemInit+0xe8>)
 800098a:	f043 0307 	orr.w	r3, r3, #7
 800098e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000990:	4b2e      	ldr	r3, [pc, #184]	; (8000a4c <SystemInit+0xec>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a2d      	ldr	r2, [pc, #180]	; (8000a4c <SystemInit+0xec>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800099c:	4b2b      	ldr	r3, [pc, #172]	; (8000a4c <SystemInit+0xec>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80009a2:	4b2a      	ldr	r3, [pc, #168]	; (8000a4c <SystemInit+0xec>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	4929      	ldr	r1, [pc, #164]	; (8000a4c <SystemInit+0xec>)
 80009a8:	4b29      	ldr	r3, [pc, #164]	; (8000a50 <SystemInit+0xf0>)
 80009aa:	4013      	ands	r3, r2
 80009ac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009ae:	4b26      	ldr	r3, [pc, #152]	; (8000a48 <SystemInit+0xe8>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f003 0308 	and.w	r3, r3, #8
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d007      	beq.n	80009ca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009ba:	4b23      	ldr	r3, [pc, #140]	; (8000a48 <SystemInit+0xe8>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f023 030f 	bic.w	r3, r3, #15
 80009c2:	4a21      	ldr	r2, [pc, #132]	; (8000a48 <SystemInit+0xe8>)
 80009c4:	f043 0307 	orr.w	r3, r3, #7
 80009c8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009ca:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <SystemInit+0xec>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <SystemInit+0xec>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009d6:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <SystemInit+0xec>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <SystemInit+0xec>)
 80009de:	4a1d      	ldr	r2, [pc, #116]	; (8000a54 <SystemInit+0xf4>)
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <SystemInit+0xec>)
 80009e4:	4a1c      	ldr	r2, [pc, #112]	; (8000a58 <SystemInit+0xf8>)
 80009e6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <SystemInit+0xec>)
 80009ea:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <SystemInit+0xfc>)
 80009ec:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <SystemInit+0xec>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <SystemInit+0xec>)
 80009f6:	4a19      	ldr	r2, [pc, #100]	; (8000a5c <SystemInit+0xfc>)
 80009f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <SystemInit+0xec>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <SystemInit+0xec>)
 8000a02:	4a16      	ldr	r2, [pc, #88]	; (8000a5c <SystemInit+0xfc>)
 8000a04:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <SystemInit+0xec>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <SystemInit+0xec>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a0e      	ldr	r2, [pc, #56]	; (8000a4c <SystemInit+0xec>)
 8000a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a16:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <SystemInit+0xec>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <SystemInit+0x100>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <SystemInit+0x104>)
 8000a24:	4013      	ands	r3, r2
 8000a26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a2a:	d202      	bcs.n	8000a32 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <SystemInit+0x108>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <SystemInit+0x10c>)
 8000a34:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a38:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00
 8000a48:	52002000 	.word	0x52002000
 8000a4c:	58024400 	.word	0x58024400
 8000a50:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a54:	02020200 	.word	0x02020200
 8000a58:	01ff0000 	.word	0x01ff0000
 8000a5c:	01010280 	.word	0x01010280
 8000a60:	5c001000 	.word	0x5c001000
 8000a64:	ffff0000 	.word	0xffff0000
 8000a68:	51008108 	.word	0x51008108
 8000a6c:	52004000 	.word	0x52004000

08000a70 <USART3_Init>:
#include "usart3_debug.h"
#include "errors.h"
// Declare the UART Handle as static within this file so it's not accessible outside

UART_HandleTypeDef huart3 = {0};
void USART3_Init(void) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b0be      	sub	sp, #248	; 0xf8
 8000a74:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a86:	f107 0320 	add.w	r3, r7, #32
 8000a8a:	22c0      	movs	r2, #192	; 0xc0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f004 fa08 	bl	8004ea4 <memset>

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a94:	f04f 0202 	mov.w	r2, #2
 8000a98:	f04f 0300 	mov.w	r3, #0
 8000a9c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	4b2c      	ldr	r3, [pc, #176]	; (8000b58 <USART3_Init+0xe8>)
 8000aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aac:	4a2a      	ldr	r2, [pc, #168]	; (8000b58 <USART3_Init+0xe8>)
 8000aae:	f043 0302 	orr.w	r3, r3, #2
 8000ab2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab6:	4b28      	ldr	r3, [pc, #160]	; (8000b58 <USART3_Init+0xe8>)
 8000ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abc:	f003 0302 	and.w	r3, r3, #2
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitTypeDef init_structure;
	init_structure.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 8000ac4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ac8:	60fb      	str	r3, [r7, #12]
	init_structure.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	613b      	str	r3, [r7, #16]
	init_structure.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
	init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61bb      	str	r3, [r7, #24]
	init_structure.Alternate = GPIO_AF7_USART3;
 8000ad6:	2307      	movs	r3, #7
 8000ad8:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(GPIOB, &init_structure);
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	4619      	mov	r1, r3
 8000ae0:	481e      	ldr	r0, [pc, #120]	; (8000b5c <USART3_Init+0xec>)
 8000ae2:	f001 fa45 	bl	8001f70 <HAL_GPIO_Init>

	__HAL_RCC_USART3_CLK_ENABLE();
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <USART3_Init+0xe8>)
 8000ae8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000aec:	4a1a      	ldr	r2, [pc, #104]	; (8000b58 <USART3_Init+0xe8>)
 8000aee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000af2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <USART3_Init+0xe8>)
 8000af8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000afc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	687b      	ldr	r3, [r7, #4]
    // Initialize your UART here, similar to the given example but specific to your board's UART configuration
    huart3.Instance = USART3;
 8000b04:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <USART3_Init+0xf0>)
 8000b06:	4a17      	ldr	r2, [pc, #92]	; (8000b64 <USART3_Init+0xf4>)
 8000b08:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 115200;
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <USART3_Init+0xf0>)
 8000b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b10:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <USART3_Init+0xf0>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <USART3_Init+0xf0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <USART3_Init+0xf0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <USART3_Init+0xf0>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <USART3_Init+0xf0>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <USART3_Init+0xf0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
    huart3.Init.Mode = UART_MODE_TX_RX;
 8000b36:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <USART3_Init+0xf0>)
 8000b38:	220c      	movs	r2, #12
 8000b3a:	615a      	str	r2, [r3, #20]
    if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000b3c:	4808      	ldr	r0, [pc, #32]	; (8000b60 <USART3_Init+0xf0>)
 8000b3e:	f002 fea5 	bl	800388c <HAL_UART_Init>
        // Initialization Error
        //Error_Handler(UART_INIT_ERROR);
    }
    setbuf(stdout, NULL);
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <USART3_Init+0xf8>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f004 f81c 	bl	8004b88 <setbuf>
}
 8000b50:	bf00      	nop
 8000b52:	37f8      	adds	r7, #248	; 0xf8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	58024400 	.word	0x58024400
 8000b5c:	58020400 	.word	0x58020400
 8000b60:	24000128 	.word	0x24000128
 8000b64:	40004800 	.word	0x40004800
 8000b68:	24000068 	.word	0x24000068

08000b6c <_write>:

int _write(int file, char *ptr, int len) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
	// Implement your write code here, this is used by puts and printf for example
	if ((HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, 0xFFFF)) != HAL_OK) {
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b80:	68b9      	ldr	r1, [r7, #8]
 8000b82:	4804      	ldr	r0, [pc, #16]	; (8000b94 <_write+0x28>)
 8000b84:	f002 fed2 	bl	800392c <HAL_UART_Transmit>
		//handle_error(UART_TRANSMIT_ERR);
	}
	return len;
 8000b88:	687b      	ldr	r3, [r7, #4]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	24000128 	.word	0x24000128

08000b98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b9c:	f7ff fee0 	bl	8000960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba0:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ba2:	490d      	ldr	r1, [pc, #52]	; (8000bd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	; (8000bdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba8:	e002      	b.n	8000bb0 <LoopCopyDataInit>

08000baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bae:	3304      	adds	r3, #4

08000bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb4:	d3f9      	bcc.n	8000baa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bb8:	4c0a      	ldr	r4, [pc, #40]	; (8000be4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bbc:	e001      	b.n	8000bc2 <LoopFillZerobss>

08000bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc0:	3204      	adds	r2, #4

08000bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc4:	d3fb      	bcc.n	8000bbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bc6:	f004 f9c1 	bl	8004f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bca:	f7ff fd03 	bl	80005d4 <main>
  bx  lr
 8000bce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bd0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000bd4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000bd8:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8000bdc:	08005480 	.word	0x08005480
  ldr r2, =_sbss
 8000be0:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8000be4:	2400030c 	.word	0x2400030c

08000be8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <ADC3_IRQHandler>
	...

08000bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf2:	2003      	movs	r0, #3
 8000bf4:	f000 f96e 	bl	8000ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000bf8:	f002 f9b4 	bl	8002f64 <HAL_RCC_GetSysClockFreq>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <HAL_Init+0x68>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	0a1b      	lsrs	r3, r3, #8
 8000c04:	f003 030f 	and.w	r3, r3, #15
 8000c08:	4913      	ldr	r1, [pc, #76]	; (8000c58 <HAL_Init+0x6c>)
 8000c0a:	5ccb      	ldrb	r3, [r1, r3]
 8000c0c:	f003 031f 	and.w	r3, r3, #31
 8000c10:	fa22 f303 	lsr.w	r3, r2, r3
 8000c14:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <HAL_Init+0x68>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	f003 030f 	and.w	r3, r3, #15
 8000c1e:	4a0e      	ldr	r2, [pc, #56]	; (8000c58 <HAL_Init+0x6c>)
 8000c20:	5cd3      	ldrb	r3, [r2, r3]
 8000c22:	f003 031f 	and.w	r3, r3, #31
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	fa22 f303 	lsr.w	r3, r2, r3
 8000c2c:	4a0b      	ldr	r2, [pc, #44]	; (8000c5c <HAL_Init+0x70>)
 8000c2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c30:	4a0b      	ldr	r2, [pc, #44]	; (8000c60 <HAL_Init+0x74>)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c36:	2000      	movs	r0, #0
 8000c38:	f000 f814 	bl	8000c64 <HAL_InitTick>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e002      	b.n	8000c4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c46:	f7ff fd89 	bl	800075c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c4a:	2300      	movs	r3, #0
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	58024400 	.word	0x58024400
 8000c58:	08005448 	.word	0x08005448
 8000c5c:	24000004 	.word	0x24000004
 8000c60:	24000000 	.word	0x24000000

08000c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c6c:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <HAL_InitTick+0x60>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d101      	bne.n	8000c78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	e021      	b.n	8000cbc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <HAL_InitTick+0x64>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <HAL_InitTick+0x60>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4619      	mov	r1, r3
 8000c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 f945 	bl	8000f1e <HAL_SYSTICK_Config>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00e      	b.n	8000cbc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b0f      	cmp	r3, #15
 8000ca2:	d80a      	bhi.n	8000cba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 f91d 	bl	8000eea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb0:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <HAL_InitTick+0x68>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e000      	b.n	8000cbc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	2400000c 	.word	0x2400000c
 8000cc8:	24000000 	.word	0x24000000
 8000ccc:	24000008 	.word	0x24000008

08000cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_IncTick+0x20>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_IncTick+0x24>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <HAL_IncTick+0x24>)
 8000ce2:	6013      	str	r3, [r2, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	2400000c 	.word	0x2400000c
 8000cf4:	240001bc 	.word	0x240001bc

08000cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cfc:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <HAL_GetTick+0x14>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	240001bc 	.word	0x240001bc

08000d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d18:	f7ff ffee 	bl	8000cf8 <HAL_GetTick>
 8000d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d28:	d005      	beq.n	8000d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_Delay+0x44>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4413      	add	r3, r2
 8000d34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d36:	bf00      	nop
 8000d38:	f7ff ffde 	bl	8000cf8 <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d8f7      	bhi.n	8000d38 <HAL_Delay+0x28>
  {
  }
}
 8000d48:	bf00      	nop
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	2400000c 	.word	0x2400000c

08000d58 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <HAL_GetREVID+0x14>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	0c1b      	lsrs	r3, r3, #16
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	5c001000 	.word	0x5c001000

08000d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <__NVIC_SetPriorityGrouping+0x40>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d9e:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <__NVIC_SetPriorityGrouping+0x40>)
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	60d3      	str	r3, [r2, #12]
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00
 8000db4:	05fa0000 	.word	0x05fa0000

08000db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000de0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	db0a      	blt.n	8000dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	490c      	ldr	r1, [pc, #48]	; (8000e20 <__NVIC_SetPriority+0x4c>)
 8000dee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000df2:	0112      	lsls	r2, r2, #4
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	440b      	add	r3, r1
 8000df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dfc:	e00a      	b.n	8000e14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4908      	ldr	r1, [pc, #32]	; (8000e24 <__NVIC_SetPriority+0x50>)
 8000e04:	88fb      	ldrh	r3, [r7, #6]
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	3b04      	subs	r3, #4
 8000e0c:	0112      	lsls	r2, r2, #4
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	440b      	add	r3, r1
 8000e12:	761a      	strb	r2, [r3, #24]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	; 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f1c3 0307 	rsb	r3, r3, #7
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	bf28      	it	cs
 8000e46:	2304      	movcs	r3, #4
 8000e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	d902      	bls.n	8000e58 <NVIC_EncodePriority+0x30>
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3b03      	subs	r3, #3
 8000e56:	e000      	b.n	8000e5a <NVIC_EncodePriority+0x32>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43da      	mvns	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	43d9      	mvns	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	4313      	orrs	r3, r2
         );
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3724      	adds	r7, #36	; 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea0:	d301      	bcc.n	8000ea6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00f      	b.n	8000ec6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <SysTick_Config+0x40>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eae:	210f      	movs	r1, #15
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eb4:	f7ff ff8e 	bl	8000dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <SysTick_Config+0x40>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ebe:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <SysTick_Config+0x40>)
 8000ec0:	2207      	movs	r2, #7
 8000ec2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	e000e010 	.word	0xe000e010

08000ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f7ff ff47 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b086      	sub	sp, #24
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	60b9      	str	r1, [r7, #8]
 8000ef4:	607a      	str	r2, [r7, #4]
 8000ef6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef8:	f7ff ff5e 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000efc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	6978      	ldr	r0, [r7, #20]
 8000f04:	f7ff ff90 	bl	8000e28 <NVIC_EncodePriority>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff5f 	bl	8000dd4 <__NVIC_SetPriority>
}
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ffb2 	bl	8000e90 <SysTick_Config>
 8000f2c:	4603      	mov	r3, r0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d101      	bne.n	8000f4a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e054      	b.n	8000ff4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	7f5b      	ldrb	r3, [r3, #29]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d105      	bne.n	8000f60 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff fc18 	bl	8000790 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2202      	movs	r2, #2
 8000f64:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	791b      	ldrb	r3, [r3, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d10c      	bne.n	8000f88 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a22      	ldr	r2, [pc, #136]	; (8000ffc <HAL_CRC_Init+0xc4>)
 8000f74:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f022 0218 	bic.w	r2, r2, #24
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	e00c      	b.n	8000fa2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6899      	ldr	r1, [r3, #8]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	461a      	mov	r2, r3
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 f834 	bl	8001000 <HAL_CRCEx_Polynomial_Set>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e028      	b.n	8000ff4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	795b      	ldrb	r3, [r3, #5]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d105      	bne.n	8000fb6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fb2:	611a      	str	r2, [r3, #16]
 8000fb4:	e004      	b.n	8000fc0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	6912      	ldr	r2, [r2, #16]
 8000fbe:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	695a      	ldr	r2, [r3, #20]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	699a      	ldr	r2, [r3, #24]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	04c11db7 	.word	0x04c11db7

08001000 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800100c:	2300      	movs	r3, #0
 800100e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001010:	231f      	movs	r3, #31
 8001012:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	2b00      	cmp	r3, #0
 800101c:	d102      	bne.n	8001024 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	75fb      	strb	r3, [r7, #23]
 8001022:	e063      	b.n	80010ec <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001024:	bf00      	nop
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1e5a      	subs	r2, r3, #1
 800102a:	613a      	str	r2, [r7, #16]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d009      	beq.n	8001044 <HAL_CRCEx_Polynomial_Set+0x44>
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	f003 031f 	and.w	r3, r3, #31
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	fa22 f303 	lsr.w	r3, r2, r3
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0f0      	beq.n	8001026 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b18      	cmp	r3, #24
 8001048:	d846      	bhi.n	80010d8 <HAL_CRCEx_Polynomial_Set+0xd8>
 800104a:	a201      	add	r2, pc, #4	; (adr r2, 8001050 <HAL_CRCEx_Polynomial_Set+0x50>)
 800104c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001050:	080010df 	.word	0x080010df
 8001054:	080010d9 	.word	0x080010d9
 8001058:	080010d9 	.word	0x080010d9
 800105c:	080010d9 	.word	0x080010d9
 8001060:	080010d9 	.word	0x080010d9
 8001064:	080010d9 	.word	0x080010d9
 8001068:	080010d9 	.word	0x080010d9
 800106c:	080010d9 	.word	0x080010d9
 8001070:	080010cd 	.word	0x080010cd
 8001074:	080010d9 	.word	0x080010d9
 8001078:	080010d9 	.word	0x080010d9
 800107c:	080010d9 	.word	0x080010d9
 8001080:	080010d9 	.word	0x080010d9
 8001084:	080010d9 	.word	0x080010d9
 8001088:	080010d9 	.word	0x080010d9
 800108c:	080010d9 	.word	0x080010d9
 8001090:	080010c1 	.word	0x080010c1
 8001094:	080010d9 	.word	0x080010d9
 8001098:	080010d9 	.word	0x080010d9
 800109c:	080010d9 	.word	0x080010d9
 80010a0:	080010d9 	.word	0x080010d9
 80010a4:	080010d9 	.word	0x080010d9
 80010a8:	080010d9 	.word	0x080010d9
 80010ac:	080010d9 	.word	0x080010d9
 80010b0:	080010b5 	.word	0x080010b5
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	2b06      	cmp	r3, #6
 80010b8:	d913      	bls.n	80010e2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80010be:	e010      	b.n	80010e2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	2b07      	cmp	r3, #7
 80010c4:	d90f      	bls.n	80010e6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80010ca:	e00c      	b.n	80010e6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	2b0f      	cmp	r3, #15
 80010d0:	d90b      	bls.n	80010ea <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80010d6:	e008      	b.n	80010ea <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	75fb      	strb	r3, [r7, #23]
        break;
 80010dc:	e006      	b.n	80010ec <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80010de:	bf00      	nop
 80010e0:	e004      	b.n	80010ec <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80010e2:	bf00      	nop
 80010e4:	e002      	b.n	80010ec <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80010e6:	bf00      	nop
 80010e8:	e000      	b.n	80010ec <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80010ea:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80010ec:	7dfb      	ldrb	r3, [r7, #23]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d10d      	bne.n	800110e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f023 0118 	bic.w	r1, r3, #24
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	430a      	orrs	r2, r1
 800110c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800110e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001110:	4618      	mov	r0, r3
 8001112:	371c      	adds	r7, #28
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001128:	4b67      	ldr	r3, [pc, #412]	; (80012c8 <HAL_DMA_IRQHandler+0x1ac>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a67      	ldr	r2, [pc, #412]	; (80012cc <HAL_DMA_IRQHandler+0x1b0>)
 800112e:	fba2 2303 	umull	r2, r3, r2, r3
 8001132:	0a9b      	lsrs	r3, r3, #10
 8001134:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001140:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001142:	6a3b      	ldr	r3, [r7, #32]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a5f      	ldr	r2, [pc, #380]	; (80012d0 <HAL_DMA_IRQHandler+0x1b4>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d04a      	beq.n	80011ee <HAL_DMA_IRQHandler+0xd2>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a5d      	ldr	r2, [pc, #372]	; (80012d4 <HAL_DMA_IRQHandler+0x1b8>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d045      	beq.n	80011ee <HAL_DMA_IRQHandler+0xd2>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a5c      	ldr	r2, [pc, #368]	; (80012d8 <HAL_DMA_IRQHandler+0x1bc>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d040      	beq.n	80011ee <HAL_DMA_IRQHandler+0xd2>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a5a      	ldr	r2, [pc, #360]	; (80012dc <HAL_DMA_IRQHandler+0x1c0>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d03b      	beq.n	80011ee <HAL_DMA_IRQHandler+0xd2>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a59      	ldr	r2, [pc, #356]	; (80012e0 <HAL_DMA_IRQHandler+0x1c4>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d036      	beq.n	80011ee <HAL_DMA_IRQHandler+0xd2>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a57      	ldr	r2, [pc, #348]	; (80012e4 <HAL_DMA_IRQHandler+0x1c8>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d031      	beq.n	80011ee <HAL_DMA_IRQHandler+0xd2>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a56      	ldr	r2, [pc, #344]	; (80012e8 <HAL_DMA_IRQHandler+0x1cc>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d02c      	beq.n	80011ee <HAL_DMA_IRQHandler+0xd2>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a54      	ldr	r2, [pc, #336]	; (80012ec <HAL_DMA_IRQHandler+0x1d0>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d027      	beq.n	80011ee <HAL_DMA_IRQHandler+0xd2>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a53      	ldr	r2, [pc, #332]	; (80012f0 <HAL_DMA_IRQHandler+0x1d4>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d022      	beq.n	80011ee <HAL_DMA_IRQHandler+0xd2>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a51      	ldr	r2, [pc, #324]	; (80012f4 <HAL_DMA_IRQHandler+0x1d8>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d01d      	beq.n	80011ee <HAL_DMA_IRQHandler+0xd2>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a50      	ldr	r2, [pc, #320]	; (80012f8 <HAL_DMA_IRQHandler+0x1dc>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d018      	beq.n	80011ee <HAL_DMA_IRQHandler+0xd2>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a4e      	ldr	r2, [pc, #312]	; (80012fc <HAL_DMA_IRQHandler+0x1e0>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d013      	beq.n	80011ee <HAL_DMA_IRQHandler+0xd2>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a4d      	ldr	r2, [pc, #308]	; (8001300 <HAL_DMA_IRQHandler+0x1e4>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d00e      	beq.n	80011ee <HAL_DMA_IRQHandler+0xd2>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a4b      	ldr	r2, [pc, #300]	; (8001304 <HAL_DMA_IRQHandler+0x1e8>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d009      	beq.n	80011ee <HAL_DMA_IRQHandler+0xd2>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a4a      	ldr	r2, [pc, #296]	; (8001308 <HAL_DMA_IRQHandler+0x1ec>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d004      	beq.n	80011ee <HAL_DMA_IRQHandler+0xd2>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a48      	ldr	r2, [pc, #288]	; (800130c <HAL_DMA_IRQHandler+0x1f0>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d101      	bne.n	80011f2 <HAL_DMA_IRQHandler+0xd6>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <HAL_DMA_IRQHandler+0xd8>
 80011f2:	2300      	movs	r3, #0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f000 842b 	beq.w	8001a50 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011fe:	f003 031f 	and.w	r3, r3, #31
 8001202:	2208      	movs	r2, #8
 8001204:	409a      	lsls	r2, r3
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 80a2 	beq.w	8001354 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a2e      	ldr	r2, [pc, #184]	; (80012d0 <HAL_DMA_IRQHandler+0x1b4>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d04a      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x194>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a2d      	ldr	r2, [pc, #180]	; (80012d4 <HAL_DMA_IRQHandler+0x1b8>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d045      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x194>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a2b      	ldr	r2, [pc, #172]	; (80012d8 <HAL_DMA_IRQHandler+0x1bc>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d040      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x194>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a2a      	ldr	r2, [pc, #168]	; (80012dc <HAL_DMA_IRQHandler+0x1c0>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d03b      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x194>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a28      	ldr	r2, [pc, #160]	; (80012e0 <HAL_DMA_IRQHandler+0x1c4>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d036      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x194>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a27      	ldr	r2, [pc, #156]	; (80012e4 <HAL_DMA_IRQHandler+0x1c8>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d031      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x194>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a25      	ldr	r2, [pc, #148]	; (80012e8 <HAL_DMA_IRQHandler+0x1cc>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d02c      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x194>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a24      	ldr	r2, [pc, #144]	; (80012ec <HAL_DMA_IRQHandler+0x1d0>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d027      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x194>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a22      	ldr	r2, [pc, #136]	; (80012f0 <HAL_DMA_IRQHandler+0x1d4>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d022      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x194>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a21      	ldr	r2, [pc, #132]	; (80012f4 <HAL_DMA_IRQHandler+0x1d8>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d01d      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x194>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a1f      	ldr	r2, [pc, #124]	; (80012f8 <HAL_DMA_IRQHandler+0x1dc>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d018      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x194>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a1e      	ldr	r2, [pc, #120]	; (80012fc <HAL_DMA_IRQHandler+0x1e0>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d013      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x194>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a1c      	ldr	r2, [pc, #112]	; (8001300 <HAL_DMA_IRQHandler+0x1e4>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d00e      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x194>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a1b      	ldr	r2, [pc, #108]	; (8001304 <HAL_DMA_IRQHandler+0x1e8>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d009      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x194>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a19      	ldr	r2, [pc, #100]	; (8001308 <HAL_DMA_IRQHandler+0x1ec>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d004      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x194>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a18      	ldr	r2, [pc, #96]	; (800130c <HAL_DMA_IRQHandler+0x1f0>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d12f      	bne.n	8001310 <HAL_DMA_IRQHandler+0x1f4>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	bf14      	ite	ne
 80012be:	2301      	movne	r3, #1
 80012c0:	2300      	moveq	r3, #0
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	e02e      	b.n	8001324 <HAL_DMA_IRQHandler+0x208>
 80012c6:	bf00      	nop
 80012c8:	24000000 	.word	0x24000000
 80012cc:	1b4e81b5 	.word	0x1b4e81b5
 80012d0:	40020010 	.word	0x40020010
 80012d4:	40020028 	.word	0x40020028
 80012d8:	40020040 	.word	0x40020040
 80012dc:	40020058 	.word	0x40020058
 80012e0:	40020070 	.word	0x40020070
 80012e4:	40020088 	.word	0x40020088
 80012e8:	400200a0 	.word	0x400200a0
 80012ec:	400200b8 	.word	0x400200b8
 80012f0:	40020410 	.word	0x40020410
 80012f4:	40020428 	.word	0x40020428
 80012f8:	40020440 	.word	0x40020440
 80012fc:	40020458 	.word	0x40020458
 8001300:	40020470 	.word	0x40020470
 8001304:	40020488 	.word	0x40020488
 8001308:	400204a0 	.word	0x400204a0
 800130c:	400204b8 	.word	0x400204b8
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	2b00      	cmp	r3, #0
 800131c:	bf14      	ite	ne
 800131e:	2301      	movne	r3, #1
 8001320:	2300      	moveq	r3, #0
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d015      	beq.n	8001354 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 0204 	bic.w	r2, r2, #4
 8001336:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800133c:	f003 031f 	and.w	r3, r3, #31
 8001340:	2208      	movs	r2, #8
 8001342:	409a      	lsls	r2, r3
 8001344:	6a3b      	ldr	r3, [r7, #32]
 8001346:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800134c:	f043 0201 	orr.w	r2, r3, #1
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001358:	f003 031f 	and.w	r3, r3, #31
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	fa22 f303 	lsr.w	r3, r2, r3
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b00      	cmp	r3, #0
 8001368:	d06e      	beq.n	8001448 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a69      	ldr	r2, [pc, #420]	; (8001514 <HAL_DMA_IRQHandler+0x3f8>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d04a      	beq.n	800140a <HAL_DMA_IRQHandler+0x2ee>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a67      	ldr	r2, [pc, #412]	; (8001518 <HAL_DMA_IRQHandler+0x3fc>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d045      	beq.n	800140a <HAL_DMA_IRQHandler+0x2ee>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a66      	ldr	r2, [pc, #408]	; (800151c <HAL_DMA_IRQHandler+0x400>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d040      	beq.n	800140a <HAL_DMA_IRQHandler+0x2ee>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a64      	ldr	r2, [pc, #400]	; (8001520 <HAL_DMA_IRQHandler+0x404>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d03b      	beq.n	800140a <HAL_DMA_IRQHandler+0x2ee>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a63      	ldr	r2, [pc, #396]	; (8001524 <HAL_DMA_IRQHandler+0x408>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d036      	beq.n	800140a <HAL_DMA_IRQHandler+0x2ee>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a61      	ldr	r2, [pc, #388]	; (8001528 <HAL_DMA_IRQHandler+0x40c>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d031      	beq.n	800140a <HAL_DMA_IRQHandler+0x2ee>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a60      	ldr	r2, [pc, #384]	; (800152c <HAL_DMA_IRQHandler+0x410>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d02c      	beq.n	800140a <HAL_DMA_IRQHandler+0x2ee>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a5e      	ldr	r2, [pc, #376]	; (8001530 <HAL_DMA_IRQHandler+0x414>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d027      	beq.n	800140a <HAL_DMA_IRQHandler+0x2ee>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a5d      	ldr	r2, [pc, #372]	; (8001534 <HAL_DMA_IRQHandler+0x418>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d022      	beq.n	800140a <HAL_DMA_IRQHandler+0x2ee>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a5b      	ldr	r2, [pc, #364]	; (8001538 <HAL_DMA_IRQHandler+0x41c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d01d      	beq.n	800140a <HAL_DMA_IRQHandler+0x2ee>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a5a      	ldr	r2, [pc, #360]	; (800153c <HAL_DMA_IRQHandler+0x420>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d018      	beq.n	800140a <HAL_DMA_IRQHandler+0x2ee>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a58      	ldr	r2, [pc, #352]	; (8001540 <HAL_DMA_IRQHandler+0x424>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d013      	beq.n	800140a <HAL_DMA_IRQHandler+0x2ee>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a57      	ldr	r2, [pc, #348]	; (8001544 <HAL_DMA_IRQHandler+0x428>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d00e      	beq.n	800140a <HAL_DMA_IRQHandler+0x2ee>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a55      	ldr	r2, [pc, #340]	; (8001548 <HAL_DMA_IRQHandler+0x42c>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d009      	beq.n	800140a <HAL_DMA_IRQHandler+0x2ee>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a54      	ldr	r2, [pc, #336]	; (800154c <HAL_DMA_IRQHandler+0x430>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d004      	beq.n	800140a <HAL_DMA_IRQHandler+0x2ee>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a52      	ldr	r2, [pc, #328]	; (8001550 <HAL_DMA_IRQHandler+0x434>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d10a      	bne.n	8001420 <HAL_DMA_IRQHandler+0x304>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	695b      	ldr	r3, [r3, #20]
 8001410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001414:	2b00      	cmp	r3, #0
 8001416:	bf14      	ite	ne
 8001418:	2301      	movne	r3, #1
 800141a:	2300      	moveq	r3, #0
 800141c:	b2db      	uxtb	r3, r3
 800141e:	e003      	b.n	8001428 <HAL_DMA_IRQHandler+0x30c>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2300      	movs	r3, #0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00d      	beq.n	8001448 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001430:	f003 031f 	and.w	r3, r3, #31
 8001434:	2201      	movs	r2, #1
 8001436:	409a      	lsls	r2, r3
 8001438:	6a3b      	ldr	r3, [r7, #32]
 800143a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001440:	f043 0202 	orr.w	r2, r3, #2
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800144c:	f003 031f 	and.w	r3, r3, #31
 8001450:	2204      	movs	r2, #4
 8001452:	409a      	lsls	r2, r3
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 808f 	beq.w	800157c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a2c      	ldr	r2, [pc, #176]	; (8001514 <HAL_DMA_IRQHandler+0x3f8>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d04a      	beq.n	80014fe <HAL_DMA_IRQHandler+0x3e2>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a2a      	ldr	r2, [pc, #168]	; (8001518 <HAL_DMA_IRQHandler+0x3fc>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d045      	beq.n	80014fe <HAL_DMA_IRQHandler+0x3e2>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a29      	ldr	r2, [pc, #164]	; (800151c <HAL_DMA_IRQHandler+0x400>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d040      	beq.n	80014fe <HAL_DMA_IRQHandler+0x3e2>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a27      	ldr	r2, [pc, #156]	; (8001520 <HAL_DMA_IRQHandler+0x404>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d03b      	beq.n	80014fe <HAL_DMA_IRQHandler+0x3e2>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a26      	ldr	r2, [pc, #152]	; (8001524 <HAL_DMA_IRQHandler+0x408>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d036      	beq.n	80014fe <HAL_DMA_IRQHandler+0x3e2>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a24      	ldr	r2, [pc, #144]	; (8001528 <HAL_DMA_IRQHandler+0x40c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d031      	beq.n	80014fe <HAL_DMA_IRQHandler+0x3e2>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a23      	ldr	r2, [pc, #140]	; (800152c <HAL_DMA_IRQHandler+0x410>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d02c      	beq.n	80014fe <HAL_DMA_IRQHandler+0x3e2>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a21      	ldr	r2, [pc, #132]	; (8001530 <HAL_DMA_IRQHandler+0x414>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d027      	beq.n	80014fe <HAL_DMA_IRQHandler+0x3e2>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a20      	ldr	r2, [pc, #128]	; (8001534 <HAL_DMA_IRQHandler+0x418>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d022      	beq.n	80014fe <HAL_DMA_IRQHandler+0x3e2>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a1e      	ldr	r2, [pc, #120]	; (8001538 <HAL_DMA_IRQHandler+0x41c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d01d      	beq.n	80014fe <HAL_DMA_IRQHandler+0x3e2>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a1d      	ldr	r2, [pc, #116]	; (800153c <HAL_DMA_IRQHandler+0x420>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d018      	beq.n	80014fe <HAL_DMA_IRQHandler+0x3e2>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a1b      	ldr	r2, [pc, #108]	; (8001540 <HAL_DMA_IRQHandler+0x424>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d013      	beq.n	80014fe <HAL_DMA_IRQHandler+0x3e2>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a1a      	ldr	r2, [pc, #104]	; (8001544 <HAL_DMA_IRQHandler+0x428>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d00e      	beq.n	80014fe <HAL_DMA_IRQHandler+0x3e2>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a18      	ldr	r2, [pc, #96]	; (8001548 <HAL_DMA_IRQHandler+0x42c>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d009      	beq.n	80014fe <HAL_DMA_IRQHandler+0x3e2>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a17      	ldr	r2, [pc, #92]	; (800154c <HAL_DMA_IRQHandler+0x430>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d004      	beq.n	80014fe <HAL_DMA_IRQHandler+0x3e2>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a15      	ldr	r2, [pc, #84]	; (8001550 <HAL_DMA_IRQHandler+0x434>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d12a      	bne.n	8001554 <HAL_DMA_IRQHandler+0x438>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	bf14      	ite	ne
 800150c:	2301      	movne	r3, #1
 800150e:	2300      	moveq	r3, #0
 8001510:	b2db      	uxtb	r3, r3
 8001512:	e023      	b.n	800155c <HAL_DMA_IRQHandler+0x440>
 8001514:	40020010 	.word	0x40020010
 8001518:	40020028 	.word	0x40020028
 800151c:	40020040 	.word	0x40020040
 8001520:	40020058 	.word	0x40020058
 8001524:	40020070 	.word	0x40020070
 8001528:	40020088 	.word	0x40020088
 800152c:	400200a0 	.word	0x400200a0
 8001530:	400200b8 	.word	0x400200b8
 8001534:	40020410 	.word	0x40020410
 8001538:	40020428 	.word	0x40020428
 800153c:	40020440 	.word	0x40020440
 8001540:	40020458 	.word	0x40020458
 8001544:	40020470 	.word	0x40020470
 8001548:	40020488 	.word	0x40020488
 800154c:	400204a0 	.word	0x400204a0
 8001550:	400204b8 	.word	0x400204b8
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2300      	movs	r3, #0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00d      	beq.n	800157c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001564:	f003 031f 	and.w	r3, r3, #31
 8001568:	2204      	movs	r2, #4
 800156a:	409a      	lsls	r2, r3
 800156c:	6a3b      	ldr	r3, [r7, #32]
 800156e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001574:	f043 0204 	orr.w	r2, r3, #4
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001580:	f003 031f 	and.w	r3, r3, #31
 8001584:	2210      	movs	r2, #16
 8001586:	409a      	lsls	r2, r3
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 80a6 	beq.w	80016de <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a85      	ldr	r2, [pc, #532]	; (80017ac <HAL_DMA_IRQHandler+0x690>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d04a      	beq.n	8001632 <HAL_DMA_IRQHandler+0x516>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a83      	ldr	r2, [pc, #524]	; (80017b0 <HAL_DMA_IRQHandler+0x694>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d045      	beq.n	8001632 <HAL_DMA_IRQHandler+0x516>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a82      	ldr	r2, [pc, #520]	; (80017b4 <HAL_DMA_IRQHandler+0x698>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d040      	beq.n	8001632 <HAL_DMA_IRQHandler+0x516>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a80      	ldr	r2, [pc, #512]	; (80017b8 <HAL_DMA_IRQHandler+0x69c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d03b      	beq.n	8001632 <HAL_DMA_IRQHandler+0x516>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a7f      	ldr	r2, [pc, #508]	; (80017bc <HAL_DMA_IRQHandler+0x6a0>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d036      	beq.n	8001632 <HAL_DMA_IRQHandler+0x516>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a7d      	ldr	r2, [pc, #500]	; (80017c0 <HAL_DMA_IRQHandler+0x6a4>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d031      	beq.n	8001632 <HAL_DMA_IRQHandler+0x516>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a7c      	ldr	r2, [pc, #496]	; (80017c4 <HAL_DMA_IRQHandler+0x6a8>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d02c      	beq.n	8001632 <HAL_DMA_IRQHandler+0x516>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a7a      	ldr	r2, [pc, #488]	; (80017c8 <HAL_DMA_IRQHandler+0x6ac>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d027      	beq.n	8001632 <HAL_DMA_IRQHandler+0x516>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a79      	ldr	r2, [pc, #484]	; (80017cc <HAL_DMA_IRQHandler+0x6b0>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d022      	beq.n	8001632 <HAL_DMA_IRQHandler+0x516>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a77      	ldr	r2, [pc, #476]	; (80017d0 <HAL_DMA_IRQHandler+0x6b4>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d01d      	beq.n	8001632 <HAL_DMA_IRQHandler+0x516>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a76      	ldr	r2, [pc, #472]	; (80017d4 <HAL_DMA_IRQHandler+0x6b8>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d018      	beq.n	8001632 <HAL_DMA_IRQHandler+0x516>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a74      	ldr	r2, [pc, #464]	; (80017d8 <HAL_DMA_IRQHandler+0x6bc>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d013      	beq.n	8001632 <HAL_DMA_IRQHandler+0x516>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a73      	ldr	r2, [pc, #460]	; (80017dc <HAL_DMA_IRQHandler+0x6c0>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d00e      	beq.n	8001632 <HAL_DMA_IRQHandler+0x516>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a71      	ldr	r2, [pc, #452]	; (80017e0 <HAL_DMA_IRQHandler+0x6c4>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d009      	beq.n	8001632 <HAL_DMA_IRQHandler+0x516>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a70      	ldr	r2, [pc, #448]	; (80017e4 <HAL_DMA_IRQHandler+0x6c8>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d004      	beq.n	8001632 <HAL_DMA_IRQHandler+0x516>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a6e      	ldr	r2, [pc, #440]	; (80017e8 <HAL_DMA_IRQHandler+0x6cc>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d10a      	bne.n	8001648 <HAL_DMA_IRQHandler+0x52c>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0308 	and.w	r3, r3, #8
 800163c:	2b00      	cmp	r3, #0
 800163e:	bf14      	ite	ne
 8001640:	2301      	movne	r3, #1
 8001642:	2300      	moveq	r3, #0
 8001644:	b2db      	uxtb	r3, r3
 8001646:	e009      	b.n	800165c <HAL_DMA_IRQHandler+0x540>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	2b00      	cmp	r3, #0
 8001654:	bf14      	ite	ne
 8001656:	2301      	movne	r3, #1
 8001658:	2300      	moveq	r3, #0
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	d03e      	beq.n	80016de <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001664:	f003 031f 	and.w	r3, r3, #31
 8001668:	2210      	movs	r2, #16
 800166a:	409a      	lsls	r2, r3
 800166c:	6a3b      	ldr	r3, [r7, #32]
 800166e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d018      	beq.n	80016b0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d108      	bne.n	800169e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	2b00      	cmp	r3, #0
 8001692:	d024      	beq.n	80016de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	4798      	blx	r3
 800169c:	e01f      	b.n	80016de <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d01b      	beq.n	80016de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	4798      	blx	r3
 80016ae:	e016      	b.n	80016de <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d107      	bne.n	80016ce <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0208 	bic.w	r2, r2, #8
 80016cc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e2:	f003 031f 	and.w	r3, r3, #31
 80016e6:	2220      	movs	r2, #32
 80016e8:	409a      	lsls	r2, r3
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	4013      	ands	r3, r2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 8110 	beq.w	8001914 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a2c      	ldr	r2, [pc, #176]	; (80017ac <HAL_DMA_IRQHandler+0x690>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d04a      	beq.n	8001794 <HAL_DMA_IRQHandler+0x678>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a2b      	ldr	r2, [pc, #172]	; (80017b0 <HAL_DMA_IRQHandler+0x694>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d045      	beq.n	8001794 <HAL_DMA_IRQHandler+0x678>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a29      	ldr	r2, [pc, #164]	; (80017b4 <HAL_DMA_IRQHandler+0x698>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d040      	beq.n	8001794 <HAL_DMA_IRQHandler+0x678>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a28      	ldr	r2, [pc, #160]	; (80017b8 <HAL_DMA_IRQHandler+0x69c>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d03b      	beq.n	8001794 <HAL_DMA_IRQHandler+0x678>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a26      	ldr	r2, [pc, #152]	; (80017bc <HAL_DMA_IRQHandler+0x6a0>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d036      	beq.n	8001794 <HAL_DMA_IRQHandler+0x678>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a25      	ldr	r2, [pc, #148]	; (80017c0 <HAL_DMA_IRQHandler+0x6a4>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d031      	beq.n	8001794 <HAL_DMA_IRQHandler+0x678>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a23      	ldr	r2, [pc, #140]	; (80017c4 <HAL_DMA_IRQHandler+0x6a8>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d02c      	beq.n	8001794 <HAL_DMA_IRQHandler+0x678>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a22      	ldr	r2, [pc, #136]	; (80017c8 <HAL_DMA_IRQHandler+0x6ac>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d027      	beq.n	8001794 <HAL_DMA_IRQHandler+0x678>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a20      	ldr	r2, [pc, #128]	; (80017cc <HAL_DMA_IRQHandler+0x6b0>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d022      	beq.n	8001794 <HAL_DMA_IRQHandler+0x678>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a1f      	ldr	r2, [pc, #124]	; (80017d0 <HAL_DMA_IRQHandler+0x6b4>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d01d      	beq.n	8001794 <HAL_DMA_IRQHandler+0x678>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a1d      	ldr	r2, [pc, #116]	; (80017d4 <HAL_DMA_IRQHandler+0x6b8>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d018      	beq.n	8001794 <HAL_DMA_IRQHandler+0x678>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a1c      	ldr	r2, [pc, #112]	; (80017d8 <HAL_DMA_IRQHandler+0x6bc>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d013      	beq.n	8001794 <HAL_DMA_IRQHandler+0x678>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a1a      	ldr	r2, [pc, #104]	; (80017dc <HAL_DMA_IRQHandler+0x6c0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d00e      	beq.n	8001794 <HAL_DMA_IRQHandler+0x678>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a19      	ldr	r2, [pc, #100]	; (80017e0 <HAL_DMA_IRQHandler+0x6c4>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d009      	beq.n	8001794 <HAL_DMA_IRQHandler+0x678>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a17      	ldr	r2, [pc, #92]	; (80017e4 <HAL_DMA_IRQHandler+0x6c8>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d004      	beq.n	8001794 <HAL_DMA_IRQHandler+0x678>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a16      	ldr	r2, [pc, #88]	; (80017e8 <HAL_DMA_IRQHandler+0x6cc>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d12b      	bne.n	80017ec <HAL_DMA_IRQHandler+0x6d0>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0310 	and.w	r3, r3, #16
 800179e:	2b00      	cmp	r3, #0
 80017a0:	bf14      	ite	ne
 80017a2:	2301      	movne	r3, #1
 80017a4:	2300      	moveq	r3, #0
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	e02a      	b.n	8001800 <HAL_DMA_IRQHandler+0x6e4>
 80017aa:	bf00      	nop
 80017ac:	40020010 	.word	0x40020010
 80017b0:	40020028 	.word	0x40020028
 80017b4:	40020040 	.word	0x40020040
 80017b8:	40020058 	.word	0x40020058
 80017bc:	40020070 	.word	0x40020070
 80017c0:	40020088 	.word	0x40020088
 80017c4:	400200a0 	.word	0x400200a0
 80017c8:	400200b8 	.word	0x400200b8
 80017cc:	40020410 	.word	0x40020410
 80017d0:	40020428 	.word	0x40020428
 80017d4:	40020440 	.word	0x40020440
 80017d8:	40020458 	.word	0x40020458
 80017dc:	40020470 	.word	0x40020470
 80017e0:	40020488 	.word	0x40020488
 80017e4:	400204a0 	.word	0x400204a0
 80017e8:	400204b8 	.word	0x400204b8
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	bf14      	ite	ne
 80017fa:	2301      	movne	r3, #1
 80017fc:	2300      	moveq	r3, #0
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 8087 	beq.w	8001914 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180a:	f003 031f 	and.w	r3, r3, #31
 800180e:	2220      	movs	r2, #32
 8001810:	409a      	lsls	r2, r3
 8001812:	6a3b      	ldr	r3, [r7, #32]
 8001814:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b04      	cmp	r3, #4
 8001820:	d139      	bne.n	8001896 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 0216 	bic.w	r2, r2, #22
 8001830:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	695a      	ldr	r2, [r3, #20]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001840:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	2b00      	cmp	r3, #0
 8001848:	d103      	bne.n	8001852 <HAL_DMA_IRQHandler+0x736>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800184e:	2b00      	cmp	r3, #0
 8001850:	d007      	beq.n	8001862 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 0208 	bic.w	r2, r2, #8
 8001860:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001866:	f003 031f 	and.w	r3, r3, #31
 800186a:	223f      	movs	r2, #63	; 0x3f
 800186c:	409a      	lsls	r2, r3
 800186e:	6a3b      	ldr	r3, [r7, #32]
 8001870:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 834a 	beq.w	8001f20 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	4798      	blx	r3
          }
          return;
 8001894:	e344      	b.n	8001f20 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d018      	beq.n	80018d6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d108      	bne.n	80018c4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d02c      	beq.n	8001914 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	4798      	blx	r3
 80018c2:	e027      	b.n	8001914 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d023      	beq.n	8001914 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	4798      	blx	r3
 80018d4:	e01e      	b.n	8001914 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d10f      	bne.n	8001904 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 0210 	bic.w	r2, r2, #16
 80018f2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 8306 	beq.w	8001f2a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 8088 	beq.w	8001a3c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2204      	movs	r2, #4
 8001930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a7a      	ldr	r2, [pc, #488]	; (8001b24 <HAL_DMA_IRQHandler+0xa08>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d04a      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x8b8>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a79      	ldr	r2, [pc, #484]	; (8001b28 <HAL_DMA_IRQHandler+0xa0c>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d045      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x8b8>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a77      	ldr	r2, [pc, #476]	; (8001b2c <HAL_DMA_IRQHandler+0xa10>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d040      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x8b8>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a76      	ldr	r2, [pc, #472]	; (8001b30 <HAL_DMA_IRQHandler+0xa14>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d03b      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x8b8>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a74      	ldr	r2, [pc, #464]	; (8001b34 <HAL_DMA_IRQHandler+0xa18>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d036      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x8b8>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a73      	ldr	r2, [pc, #460]	; (8001b38 <HAL_DMA_IRQHandler+0xa1c>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d031      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x8b8>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a71      	ldr	r2, [pc, #452]	; (8001b3c <HAL_DMA_IRQHandler+0xa20>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d02c      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x8b8>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a70      	ldr	r2, [pc, #448]	; (8001b40 <HAL_DMA_IRQHandler+0xa24>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d027      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x8b8>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a6e      	ldr	r2, [pc, #440]	; (8001b44 <HAL_DMA_IRQHandler+0xa28>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d022      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x8b8>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a6d      	ldr	r2, [pc, #436]	; (8001b48 <HAL_DMA_IRQHandler+0xa2c>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d01d      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x8b8>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a6b      	ldr	r2, [pc, #428]	; (8001b4c <HAL_DMA_IRQHandler+0xa30>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d018      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x8b8>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a6a      	ldr	r2, [pc, #424]	; (8001b50 <HAL_DMA_IRQHandler+0xa34>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d013      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x8b8>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a68      	ldr	r2, [pc, #416]	; (8001b54 <HAL_DMA_IRQHandler+0xa38>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d00e      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x8b8>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a67      	ldr	r2, [pc, #412]	; (8001b58 <HAL_DMA_IRQHandler+0xa3c>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d009      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x8b8>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a65      	ldr	r2, [pc, #404]	; (8001b5c <HAL_DMA_IRQHandler+0xa40>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d004      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x8b8>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a64      	ldr	r2, [pc, #400]	; (8001b60 <HAL_DMA_IRQHandler+0xa44>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d108      	bne.n	80019e6 <HAL_DMA_IRQHandler+0x8ca>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0201 	bic.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	e007      	b.n	80019f6 <HAL_DMA_IRQHandler+0x8da>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0201 	bic.w	r2, r2, #1
 80019f4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	3301      	adds	r3, #1
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d307      	bcc.n	8001a12 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1f2      	bne.n	80019f6 <HAL_DMA_IRQHandler+0x8da>
 8001a10:	e000      	b.n	8001a14 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8001a12:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d004      	beq.n	8001a2c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2203      	movs	r2, #3
 8001a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001a2a:	e003      	b.n	8001a34 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 8272 	beq.w	8001f2a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	4798      	blx	r3
 8001a4e:	e26c      	b.n	8001f2a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a43      	ldr	r2, [pc, #268]	; (8001b64 <HAL_DMA_IRQHandler+0xa48>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d022      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0x984>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a42      	ldr	r2, [pc, #264]	; (8001b68 <HAL_DMA_IRQHandler+0xa4c>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d01d      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0x984>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a40      	ldr	r2, [pc, #256]	; (8001b6c <HAL_DMA_IRQHandler+0xa50>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d018      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0x984>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a3f      	ldr	r2, [pc, #252]	; (8001b70 <HAL_DMA_IRQHandler+0xa54>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d013      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0x984>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a3d      	ldr	r2, [pc, #244]	; (8001b74 <HAL_DMA_IRQHandler+0xa58>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d00e      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0x984>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a3c      	ldr	r2, [pc, #240]	; (8001b78 <HAL_DMA_IRQHandler+0xa5c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d009      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0x984>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a3a      	ldr	r2, [pc, #232]	; (8001b7c <HAL_DMA_IRQHandler+0xa60>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d004      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0x984>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a39      	ldr	r2, [pc, #228]	; (8001b80 <HAL_DMA_IRQHandler+0xa64>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d101      	bne.n	8001aa4 <HAL_DMA_IRQHandler+0x988>
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e000      	b.n	8001aa6 <HAL_DMA_IRQHandler+0x98a>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 823f 	beq.w	8001f2a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab8:	f003 031f 	and.w	r3, r3, #31
 8001abc:	2204      	movs	r2, #4
 8001abe:	409a      	lsls	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f000 80cd 	beq.w	8001c64 <HAL_DMA_IRQHandler+0xb48>
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 80c7 	beq.w	8001c64 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	2204      	movs	r2, #4
 8001ae0:	409a      	lsls	r2, r3
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d049      	beq.n	8001b84 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d109      	bne.n	8001b0e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 8210 	beq.w	8001f24 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001b0c:	e20a      	b.n	8001f24 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f000 8206 	beq.w	8001f24 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001b20:	e200      	b.n	8001f24 <HAL_DMA_IRQHandler+0xe08>
 8001b22:	bf00      	nop
 8001b24:	40020010 	.word	0x40020010
 8001b28:	40020028 	.word	0x40020028
 8001b2c:	40020040 	.word	0x40020040
 8001b30:	40020058 	.word	0x40020058
 8001b34:	40020070 	.word	0x40020070
 8001b38:	40020088 	.word	0x40020088
 8001b3c:	400200a0 	.word	0x400200a0
 8001b40:	400200b8 	.word	0x400200b8
 8001b44:	40020410 	.word	0x40020410
 8001b48:	40020428 	.word	0x40020428
 8001b4c:	40020440 	.word	0x40020440
 8001b50:	40020458 	.word	0x40020458
 8001b54:	40020470 	.word	0x40020470
 8001b58:	40020488 	.word	0x40020488
 8001b5c:	400204a0 	.word	0x400204a0
 8001b60:	400204b8 	.word	0x400204b8
 8001b64:	58025408 	.word	0x58025408
 8001b68:	5802541c 	.word	0x5802541c
 8001b6c:	58025430 	.word	0x58025430
 8001b70:	58025444 	.word	0x58025444
 8001b74:	58025458 	.word	0x58025458
 8001b78:	5802546c 	.word	0x5802546c
 8001b7c:	58025480 	.word	0x58025480
 8001b80:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	f003 0320 	and.w	r3, r3, #32
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d160      	bne.n	8001c50 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a7f      	ldr	r2, [pc, #508]	; (8001d90 <HAL_DMA_IRQHandler+0xc74>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d04a      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xb12>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a7d      	ldr	r2, [pc, #500]	; (8001d94 <HAL_DMA_IRQHandler+0xc78>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d045      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xb12>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a7c      	ldr	r2, [pc, #496]	; (8001d98 <HAL_DMA_IRQHandler+0xc7c>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d040      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xb12>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a7a      	ldr	r2, [pc, #488]	; (8001d9c <HAL_DMA_IRQHandler+0xc80>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d03b      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xb12>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a79      	ldr	r2, [pc, #484]	; (8001da0 <HAL_DMA_IRQHandler+0xc84>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d036      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xb12>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a77      	ldr	r2, [pc, #476]	; (8001da4 <HAL_DMA_IRQHandler+0xc88>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d031      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xb12>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a76      	ldr	r2, [pc, #472]	; (8001da8 <HAL_DMA_IRQHandler+0xc8c>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d02c      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xb12>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a74      	ldr	r2, [pc, #464]	; (8001dac <HAL_DMA_IRQHandler+0xc90>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d027      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xb12>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a73      	ldr	r2, [pc, #460]	; (8001db0 <HAL_DMA_IRQHandler+0xc94>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d022      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xb12>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a71      	ldr	r2, [pc, #452]	; (8001db4 <HAL_DMA_IRQHandler+0xc98>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d01d      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xb12>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a70      	ldr	r2, [pc, #448]	; (8001db8 <HAL_DMA_IRQHandler+0xc9c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d018      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xb12>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a6e      	ldr	r2, [pc, #440]	; (8001dbc <HAL_DMA_IRQHandler+0xca0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d013      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xb12>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a6d      	ldr	r2, [pc, #436]	; (8001dc0 <HAL_DMA_IRQHandler+0xca4>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d00e      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xb12>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a6b      	ldr	r2, [pc, #428]	; (8001dc4 <HAL_DMA_IRQHandler+0xca8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d009      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xb12>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a6a      	ldr	r2, [pc, #424]	; (8001dc8 <HAL_DMA_IRQHandler+0xcac>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d004      	beq.n	8001c2e <HAL_DMA_IRQHandler+0xb12>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a68      	ldr	r2, [pc, #416]	; (8001dcc <HAL_DMA_IRQHandler+0xcb0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d108      	bne.n	8001c40 <HAL_DMA_IRQHandler+0xb24>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0208 	bic.w	r2, r2, #8
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	e007      	b.n	8001c50 <HAL_DMA_IRQHandler+0xb34>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0204 	bic.w	r2, r2, #4
 8001c4e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 8165 	beq.w	8001f24 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001c62:	e15f      	b.n	8001f24 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c68:	f003 031f 	and.w	r3, r3, #31
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	409a      	lsls	r2, r3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 80c5 	beq.w	8001e04 <HAL_DMA_IRQHandler+0xce8>
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 80bf 	beq.w	8001e04 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8a:	f003 031f 	and.w	r3, r3, #31
 8001c8e:	2202      	movs	r2, #2
 8001c90:	409a      	lsls	r2, r3
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d018      	beq.n	8001cd2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d109      	bne.n	8001cbe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 813a 	beq.w	8001f28 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001cbc:	e134      	b.n	8001f28 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 8130 	beq.w	8001f28 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001cd0:	e12a      	b.n	8001f28 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	f003 0320 	and.w	r3, r3, #32
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f040 8089 	bne.w	8001df0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a2b      	ldr	r2, [pc, #172]	; (8001d90 <HAL_DMA_IRQHandler+0xc74>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d04a      	beq.n	8001d7e <HAL_DMA_IRQHandler+0xc62>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a29      	ldr	r2, [pc, #164]	; (8001d94 <HAL_DMA_IRQHandler+0xc78>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d045      	beq.n	8001d7e <HAL_DMA_IRQHandler+0xc62>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a28      	ldr	r2, [pc, #160]	; (8001d98 <HAL_DMA_IRQHandler+0xc7c>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d040      	beq.n	8001d7e <HAL_DMA_IRQHandler+0xc62>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a26      	ldr	r2, [pc, #152]	; (8001d9c <HAL_DMA_IRQHandler+0xc80>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d03b      	beq.n	8001d7e <HAL_DMA_IRQHandler+0xc62>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a25      	ldr	r2, [pc, #148]	; (8001da0 <HAL_DMA_IRQHandler+0xc84>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d036      	beq.n	8001d7e <HAL_DMA_IRQHandler+0xc62>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a23      	ldr	r2, [pc, #140]	; (8001da4 <HAL_DMA_IRQHandler+0xc88>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d031      	beq.n	8001d7e <HAL_DMA_IRQHandler+0xc62>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a22      	ldr	r2, [pc, #136]	; (8001da8 <HAL_DMA_IRQHandler+0xc8c>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d02c      	beq.n	8001d7e <HAL_DMA_IRQHandler+0xc62>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a20      	ldr	r2, [pc, #128]	; (8001dac <HAL_DMA_IRQHandler+0xc90>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d027      	beq.n	8001d7e <HAL_DMA_IRQHandler+0xc62>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a1f      	ldr	r2, [pc, #124]	; (8001db0 <HAL_DMA_IRQHandler+0xc94>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d022      	beq.n	8001d7e <HAL_DMA_IRQHandler+0xc62>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a1d      	ldr	r2, [pc, #116]	; (8001db4 <HAL_DMA_IRQHandler+0xc98>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d01d      	beq.n	8001d7e <HAL_DMA_IRQHandler+0xc62>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a1c      	ldr	r2, [pc, #112]	; (8001db8 <HAL_DMA_IRQHandler+0xc9c>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d018      	beq.n	8001d7e <HAL_DMA_IRQHandler+0xc62>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a1a      	ldr	r2, [pc, #104]	; (8001dbc <HAL_DMA_IRQHandler+0xca0>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d013      	beq.n	8001d7e <HAL_DMA_IRQHandler+0xc62>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a19      	ldr	r2, [pc, #100]	; (8001dc0 <HAL_DMA_IRQHandler+0xca4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d00e      	beq.n	8001d7e <HAL_DMA_IRQHandler+0xc62>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a17      	ldr	r2, [pc, #92]	; (8001dc4 <HAL_DMA_IRQHandler+0xca8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d009      	beq.n	8001d7e <HAL_DMA_IRQHandler+0xc62>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a16      	ldr	r2, [pc, #88]	; (8001dc8 <HAL_DMA_IRQHandler+0xcac>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d004      	beq.n	8001d7e <HAL_DMA_IRQHandler+0xc62>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a14      	ldr	r2, [pc, #80]	; (8001dcc <HAL_DMA_IRQHandler+0xcb0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d128      	bne.n	8001dd0 <HAL_DMA_IRQHandler+0xcb4>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0214 	bic.w	r2, r2, #20
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	e027      	b.n	8001de0 <HAL_DMA_IRQHandler+0xcc4>
 8001d90:	40020010 	.word	0x40020010
 8001d94:	40020028 	.word	0x40020028
 8001d98:	40020040 	.word	0x40020040
 8001d9c:	40020058 	.word	0x40020058
 8001da0:	40020070 	.word	0x40020070
 8001da4:	40020088 	.word	0x40020088
 8001da8:	400200a0 	.word	0x400200a0
 8001dac:	400200b8 	.word	0x400200b8
 8001db0:	40020410 	.word	0x40020410
 8001db4:	40020428 	.word	0x40020428
 8001db8:	40020440 	.word	0x40020440
 8001dbc:	40020458 	.word	0x40020458
 8001dc0:	40020470 	.word	0x40020470
 8001dc4:	40020488 	.word	0x40020488
 8001dc8:	400204a0 	.word	0x400204a0
 8001dcc:	400204b8 	.word	0x400204b8
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 020a 	bic.w	r2, r2, #10
 8001dde:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 8097 	beq.w	8001f28 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001e02:	e091      	b.n	8001f28 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	2208      	movs	r2, #8
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	4013      	ands	r3, r2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 8088 	beq.w	8001f2a <HAL_DMA_IRQHandler+0xe0e>
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	f003 0308 	and.w	r3, r3, #8
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 8082 	beq.w	8001f2a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a41      	ldr	r2, [pc, #260]	; (8001f30 <HAL_DMA_IRQHandler+0xe14>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d04a      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0xdaa>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a3f      	ldr	r2, [pc, #252]	; (8001f34 <HAL_DMA_IRQHandler+0xe18>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d045      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0xdaa>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a3e      	ldr	r2, [pc, #248]	; (8001f38 <HAL_DMA_IRQHandler+0xe1c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d040      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0xdaa>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a3c      	ldr	r2, [pc, #240]	; (8001f3c <HAL_DMA_IRQHandler+0xe20>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d03b      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0xdaa>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a3b      	ldr	r2, [pc, #236]	; (8001f40 <HAL_DMA_IRQHandler+0xe24>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d036      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0xdaa>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a39      	ldr	r2, [pc, #228]	; (8001f44 <HAL_DMA_IRQHandler+0xe28>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d031      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0xdaa>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a38      	ldr	r2, [pc, #224]	; (8001f48 <HAL_DMA_IRQHandler+0xe2c>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d02c      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0xdaa>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a36      	ldr	r2, [pc, #216]	; (8001f4c <HAL_DMA_IRQHandler+0xe30>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d027      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0xdaa>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a35      	ldr	r2, [pc, #212]	; (8001f50 <HAL_DMA_IRQHandler+0xe34>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d022      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0xdaa>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a33      	ldr	r2, [pc, #204]	; (8001f54 <HAL_DMA_IRQHandler+0xe38>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d01d      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0xdaa>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a32      	ldr	r2, [pc, #200]	; (8001f58 <HAL_DMA_IRQHandler+0xe3c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d018      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0xdaa>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a30      	ldr	r2, [pc, #192]	; (8001f5c <HAL_DMA_IRQHandler+0xe40>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d013      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0xdaa>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a2f      	ldr	r2, [pc, #188]	; (8001f60 <HAL_DMA_IRQHandler+0xe44>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d00e      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0xdaa>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a2d      	ldr	r2, [pc, #180]	; (8001f64 <HAL_DMA_IRQHandler+0xe48>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d009      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0xdaa>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a2c      	ldr	r2, [pc, #176]	; (8001f68 <HAL_DMA_IRQHandler+0xe4c>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d004      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0xdaa>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a2a      	ldr	r2, [pc, #168]	; (8001f6c <HAL_DMA_IRQHandler+0xe50>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d108      	bne.n	8001ed8 <HAL_DMA_IRQHandler+0xdbc>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 021c 	bic.w	r2, r2, #28
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	e007      	b.n	8001ee8 <HAL_DMA_IRQHandler+0xdcc>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 020e 	bic.w	r2, r2, #14
 8001ee6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eec:	f003 031f 	and.w	r3, r3, #31
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d009      	beq.n	8001f2a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	4798      	blx	r3
 8001f1e:	e004      	b.n	8001f2a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8001f20:	bf00      	nop
 8001f22:	e002      	b.n	8001f2a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001f24:	bf00      	nop
 8001f26:	e000      	b.n	8001f2a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001f28:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8001f2a:	3728      	adds	r7, #40	; 0x28
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40020010 	.word	0x40020010
 8001f34:	40020028 	.word	0x40020028
 8001f38:	40020040 	.word	0x40020040
 8001f3c:	40020058 	.word	0x40020058
 8001f40:	40020070 	.word	0x40020070
 8001f44:	40020088 	.word	0x40020088
 8001f48:	400200a0 	.word	0x400200a0
 8001f4c:	400200b8 	.word	0x400200b8
 8001f50:	40020410 	.word	0x40020410
 8001f54:	40020428 	.word	0x40020428
 8001f58:	40020440 	.word	0x40020440
 8001f5c:	40020458 	.word	0x40020458
 8001f60:	40020470 	.word	0x40020470
 8001f64:	40020488 	.word	0x40020488
 8001f68:	400204a0 	.word	0x400204a0
 8001f6c:	400204b8 	.word	0x400204b8

08001f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b089      	sub	sp, #36	; 0x24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f7e:	4b89      	ldr	r3, [pc, #548]	; (80021a4 <HAL_GPIO_Init+0x234>)
 8001f80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f82:	e194      	b.n	80022ae <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	2101      	movs	r1, #1
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f90:	4013      	ands	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 8186 	beq.w	80022a8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d005      	beq.n	8001fb4 <HAL_GPIO_Init+0x44>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d130      	bne.n	8002016 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	68da      	ldr	r2, [r3, #12]
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fea:	2201      	movs	r2, #1
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	091b      	lsrs	r3, r3, #4
 8002000:	f003 0201 	and.w	r2, r3, #1
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4313      	orrs	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b03      	cmp	r3, #3
 8002020:	d017      	beq.n	8002052 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	2203      	movs	r2, #3
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d123      	bne.n	80020a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	08da      	lsrs	r2, r3, #3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3208      	adds	r2, #8
 8002066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	220f      	movs	r2, #15
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	691a      	ldr	r2, [r3, #16]
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	08da      	lsrs	r2, r3, #3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3208      	adds	r2, #8
 80020a0:	69b9      	ldr	r1, [r7, #24]
 80020a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	2203      	movs	r2, #3
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4013      	ands	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 0203 	and.w	r2, r3, #3
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 80e0 	beq.w	80022a8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e8:	4b2f      	ldr	r3, [pc, #188]	; (80021a8 <HAL_GPIO_Init+0x238>)
 80020ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020ee:	4a2e      	ldr	r2, [pc, #184]	; (80021a8 <HAL_GPIO_Init+0x238>)
 80020f0:	f043 0302 	orr.w	r3, r3, #2
 80020f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80020f8:	4b2b      	ldr	r3, [pc, #172]	; (80021a8 <HAL_GPIO_Init+0x238>)
 80020fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002106:	4a29      	ldr	r2, [pc, #164]	; (80021ac <HAL_GPIO_Init+0x23c>)
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	089b      	lsrs	r3, r3, #2
 800210c:	3302      	adds	r3, #2
 800210e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	220f      	movs	r2, #15
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a20      	ldr	r2, [pc, #128]	; (80021b0 <HAL_GPIO_Init+0x240>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d052      	beq.n	80021d8 <HAL_GPIO_Init+0x268>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a1f      	ldr	r2, [pc, #124]	; (80021b4 <HAL_GPIO_Init+0x244>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d031      	beq.n	800219e <HAL_GPIO_Init+0x22e>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a1e      	ldr	r2, [pc, #120]	; (80021b8 <HAL_GPIO_Init+0x248>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d02b      	beq.n	800219a <HAL_GPIO_Init+0x22a>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a1d      	ldr	r2, [pc, #116]	; (80021bc <HAL_GPIO_Init+0x24c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d025      	beq.n	8002196 <HAL_GPIO_Init+0x226>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a1c      	ldr	r2, [pc, #112]	; (80021c0 <HAL_GPIO_Init+0x250>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d01f      	beq.n	8002192 <HAL_GPIO_Init+0x222>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a1b      	ldr	r2, [pc, #108]	; (80021c4 <HAL_GPIO_Init+0x254>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d019      	beq.n	800218e <HAL_GPIO_Init+0x21e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a1a      	ldr	r2, [pc, #104]	; (80021c8 <HAL_GPIO_Init+0x258>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d013      	beq.n	800218a <HAL_GPIO_Init+0x21a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a19      	ldr	r2, [pc, #100]	; (80021cc <HAL_GPIO_Init+0x25c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d00d      	beq.n	8002186 <HAL_GPIO_Init+0x216>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a18      	ldr	r2, [pc, #96]	; (80021d0 <HAL_GPIO_Init+0x260>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d007      	beq.n	8002182 <HAL_GPIO_Init+0x212>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a17      	ldr	r2, [pc, #92]	; (80021d4 <HAL_GPIO_Init+0x264>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d101      	bne.n	800217e <HAL_GPIO_Init+0x20e>
 800217a:	2309      	movs	r3, #9
 800217c:	e02d      	b.n	80021da <HAL_GPIO_Init+0x26a>
 800217e:	230a      	movs	r3, #10
 8002180:	e02b      	b.n	80021da <HAL_GPIO_Init+0x26a>
 8002182:	2308      	movs	r3, #8
 8002184:	e029      	b.n	80021da <HAL_GPIO_Init+0x26a>
 8002186:	2307      	movs	r3, #7
 8002188:	e027      	b.n	80021da <HAL_GPIO_Init+0x26a>
 800218a:	2306      	movs	r3, #6
 800218c:	e025      	b.n	80021da <HAL_GPIO_Init+0x26a>
 800218e:	2305      	movs	r3, #5
 8002190:	e023      	b.n	80021da <HAL_GPIO_Init+0x26a>
 8002192:	2304      	movs	r3, #4
 8002194:	e021      	b.n	80021da <HAL_GPIO_Init+0x26a>
 8002196:	2303      	movs	r3, #3
 8002198:	e01f      	b.n	80021da <HAL_GPIO_Init+0x26a>
 800219a:	2302      	movs	r3, #2
 800219c:	e01d      	b.n	80021da <HAL_GPIO_Init+0x26a>
 800219e:	2301      	movs	r3, #1
 80021a0:	e01b      	b.n	80021da <HAL_GPIO_Init+0x26a>
 80021a2:	bf00      	nop
 80021a4:	58000080 	.word	0x58000080
 80021a8:	58024400 	.word	0x58024400
 80021ac:	58000400 	.word	0x58000400
 80021b0:	58020000 	.word	0x58020000
 80021b4:	58020400 	.word	0x58020400
 80021b8:	58020800 	.word	0x58020800
 80021bc:	58020c00 	.word	0x58020c00
 80021c0:	58021000 	.word	0x58021000
 80021c4:	58021400 	.word	0x58021400
 80021c8:	58021800 	.word	0x58021800
 80021cc:	58021c00 	.word	0x58021c00
 80021d0:	58022000 	.word	0x58022000
 80021d4:	58022400 	.word	0x58022400
 80021d8:	2300      	movs	r3, #0
 80021da:	69fa      	ldr	r2, [r7, #28]
 80021dc:	f002 0203 	and.w	r2, r2, #3
 80021e0:	0092      	lsls	r2, r2, #2
 80021e2:	4093      	lsls	r3, r2
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021ea:	4938      	ldr	r1, [pc, #224]	; (80022cc <HAL_GPIO_Init+0x35c>)
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	089b      	lsrs	r3, r3, #2
 80021f0:	3302      	adds	r3, #2
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800221e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800224c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	3301      	adds	r3, #1
 80022ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	fa22 f303 	lsr.w	r3, r2, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f47f ae63 	bne.w	8001f84 <HAL_GPIO_Init+0x14>
  }
}
 80022be:	bf00      	nop
 80022c0:	bf00      	nop
 80022c2:	3724      	adds	r7, #36	; 0x24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	58000400 	.word	0x58000400

080022d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80022d8:	4b19      	ldr	r3, [pc, #100]	; (8002340 <HAL_PWREx_ConfigSupply+0x70>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d00a      	beq.n	80022fa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80022e4:	4b16      	ldr	r3, [pc, #88]	; (8002340 <HAL_PWREx_ConfigSupply+0x70>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d001      	beq.n	80022f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e01f      	b.n	8002336 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	e01d      	b.n	8002336 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80022fa:	4b11      	ldr	r3, [pc, #68]	; (8002340 <HAL_PWREx_ConfigSupply+0x70>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	f023 0207 	bic.w	r2, r3, #7
 8002302:	490f      	ldr	r1, [pc, #60]	; (8002340 <HAL_PWREx_ConfigSupply+0x70>)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4313      	orrs	r3, r2
 8002308:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800230a:	f7fe fcf5 	bl	8000cf8 <HAL_GetTick>
 800230e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002310:	e009      	b.n	8002326 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002312:	f7fe fcf1 	bl	8000cf8 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002320:	d901      	bls.n	8002326 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e007      	b.n	8002336 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002326:	4b06      	ldr	r3, [pc, #24]	; (8002340 <HAL_PWREx_ConfigSupply+0x70>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800232e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002332:	d1ee      	bne.n	8002312 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	58024800 	.word	0x58024800

08002344 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08c      	sub	sp, #48	; 0x30
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d102      	bne.n	8002358 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	f000 bc48 	b.w	8002be8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 8088 	beq.w	8002476 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002366:	4b99      	ldr	r3, [pc, #612]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800236e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002370:	4b96      	ldr	r3, [pc, #600]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 8002372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002374:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002378:	2b10      	cmp	r3, #16
 800237a:	d007      	beq.n	800238c <HAL_RCC_OscConfig+0x48>
 800237c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800237e:	2b18      	cmp	r3, #24
 8002380:	d111      	bne.n	80023a6 <HAL_RCC_OscConfig+0x62>
 8002382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d10c      	bne.n	80023a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800238c:	4b8f      	ldr	r3, [pc, #572]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d06d      	beq.n	8002474 <HAL_RCC_OscConfig+0x130>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d169      	bne.n	8002474 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	f000 bc21 	b.w	8002be8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ae:	d106      	bne.n	80023be <HAL_RCC_OscConfig+0x7a>
 80023b0:	4b86      	ldr	r3, [pc, #536]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a85      	ldr	r2, [pc, #532]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 80023b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	e02e      	b.n	800241c <HAL_RCC_OscConfig+0xd8>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10c      	bne.n	80023e0 <HAL_RCC_OscConfig+0x9c>
 80023c6:	4b81      	ldr	r3, [pc, #516]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a80      	ldr	r2, [pc, #512]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 80023cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	4b7e      	ldr	r3, [pc, #504]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a7d      	ldr	r2, [pc, #500]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 80023d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	e01d      	b.n	800241c <HAL_RCC_OscConfig+0xd8>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023e8:	d10c      	bne.n	8002404 <HAL_RCC_OscConfig+0xc0>
 80023ea:	4b78      	ldr	r3, [pc, #480]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a77      	ldr	r2, [pc, #476]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 80023f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	4b75      	ldr	r3, [pc, #468]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a74      	ldr	r2, [pc, #464]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 80023fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	e00b      	b.n	800241c <HAL_RCC_OscConfig+0xd8>
 8002404:	4b71      	ldr	r3, [pc, #452]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a70      	ldr	r2, [pc, #448]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 800240a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	4b6e      	ldr	r3, [pc, #440]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a6d      	ldr	r2, [pc, #436]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 8002416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800241a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d013      	beq.n	800244c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002424:	f7fe fc68 	bl	8000cf8 <HAL_GetTick>
 8002428:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800242c:	f7fe fc64 	bl	8000cf8 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b64      	cmp	r3, #100	; 0x64
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e3d4      	b.n	8002be8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800243e:	4b63      	ldr	r3, [pc, #396]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0xe8>
 800244a:	e014      	b.n	8002476 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244c:	f7fe fc54 	bl	8000cf8 <HAL_GetTick>
 8002450:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002454:	f7fe fc50 	bl	8000cf8 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b64      	cmp	r3, #100	; 0x64
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e3c0      	b.n	8002be8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002466:	4b59      	ldr	r3, [pc, #356]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0x110>
 8002472:	e000      	b.n	8002476 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 80ca 	beq.w	8002618 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002484:	4b51      	ldr	r3, [pc, #324]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800248c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800248e:	4b4f      	ldr	r3, [pc, #316]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 8002490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002492:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d007      	beq.n	80024aa <HAL_RCC_OscConfig+0x166>
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	2b18      	cmp	r3, #24
 800249e:	d156      	bne.n	800254e <HAL_RCC_OscConfig+0x20a>
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d151      	bne.n	800254e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024aa:	4b48      	ldr	r3, [pc, #288]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d005      	beq.n	80024c2 <HAL_RCC_OscConfig+0x17e>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e392      	b.n	8002be8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024c2:	4b42      	ldr	r3, [pc, #264]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f023 0219 	bic.w	r2, r3, #25
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	493f      	ldr	r1, [pc, #252]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d4:	f7fe fc10 	bl	8000cf8 <HAL_GetTick>
 80024d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024dc:	f7fe fc0c 	bl	8000cf8 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e37c      	b.n	8002be8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024ee:	4b37      	ldr	r3, [pc, #220]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fa:	f7fe fc2d 	bl	8000d58 <HAL_GetREVID>
 80024fe:	4603      	mov	r3, r0
 8002500:	f241 0203 	movw	r2, #4099	; 0x1003
 8002504:	4293      	cmp	r3, r2
 8002506:	d817      	bhi.n	8002538 <HAL_RCC_OscConfig+0x1f4>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	2b40      	cmp	r3, #64	; 0x40
 800250e:	d108      	bne.n	8002522 <HAL_RCC_OscConfig+0x1de>
 8002510:	4b2e      	ldr	r3, [pc, #184]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002518:	4a2c      	ldr	r2, [pc, #176]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 800251a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800251e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002520:	e07a      	b.n	8002618 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002522:	4b2a      	ldr	r3, [pc, #168]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	031b      	lsls	r3, r3, #12
 8002530:	4926      	ldr	r1, [pc, #152]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 8002532:	4313      	orrs	r3, r2
 8002534:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002536:	e06f      	b.n	8002618 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002538:	4b24      	ldr	r3, [pc, #144]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	061b      	lsls	r3, r3, #24
 8002546:	4921      	ldr	r1, [pc, #132]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 8002548:	4313      	orrs	r3, r2
 800254a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800254c:	e064      	b.n	8002618 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d047      	beq.n	80025e6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002556:	4b1d      	ldr	r3, [pc, #116]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f023 0219 	bic.w	r2, r3, #25
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	491a      	ldr	r1, [pc, #104]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 8002564:	4313      	orrs	r3, r2
 8002566:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002568:	f7fe fbc6 	bl	8000cf8 <HAL_GetTick>
 800256c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002570:	f7fe fbc2 	bl	8000cf8 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e332      	b.n	8002be8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002582:	4b12      	ldr	r3, [pc, #72]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0f0      	beq.n	8002570 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258e:	f7fe fbe3 	bl	8000d58 <HAL_GetREVID>
 8002592:	4603      	mov	r3, r0
 8002594:	f241 0203 	movw	r2, #4099	; 0x1003
 8002598:	4293      	cmp	r3, r2
 800259a:	d819      	bhi.n	80025d0 <HAL_RCC_OscConfig+0x28c>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	2b40      	cmp	r3, #64	; 0x40
 80025a2:	d108      	bne.n	80025b6 <HAL_RCC_OscConfig+0x272>
 80025a4:	4b09      	ldr	r3, [pc, #36]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80025ac:	4a07      	ldr	r2, [pc, #28]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 80025ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b2:	6053      	str	r3, [r2, #4]
 80025b4:	e030      	b.n	8002618 <HAL_RCC_OscConfig+0x2d4>
 80025b6:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	031b      	lsls	r3, r3, #12
 80025c4:	4901      	ldr	r1, [pc, #4]	; (80025cc <HAL_RCC_OscConfig+0x288>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	604b      	str	r3, [r1, #4]
 80025ca:	e025      	b.n	8002618 <HAL_RCC_OscConfig+0x2d4>
 80025cc:	58024400 	.word	0x58024400
 80025d0:	4b9a      	ldr	r3, [pc, #616]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	061b      	lsls	r3, r3, #24
 80025de:	4997      	ldr	r1, [pc, #604]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]
 80025e4:	e018      	b.n	8002618 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e6:	4b95      	ldr	r3, [pc, #596]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a94      	ldr	r2, [pc, #592]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 80025ec:	f023 0301 	bic.w	r3, r3, #1
 80025f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f2:	f7fe fb81 	bl	8000cf8 <HAL_GetTick>
 80025f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025fa:	f7fe fb7d 	bl	8000cf8 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e2ed      	b.n	8002be8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800260c:	4b8b      	ldr	r3, [pc, #556]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1f0      	bne.n	80025fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 80a9 	beq.w	8002778 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002626:	4b85      	ldr	r3, [pc, #532]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800262e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002630:	4b82      	ldr	r3, [pc, #520]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 8002632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002634:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	2b08      	cmp	r3, #8
 800263a:	d007      	beq.n	800264c <HAL_RCC_OscConfig+0x308>
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	2b18      	cmp	r3, #24
 8002640:	d13a      	bne.n	80026b8 <HAL_RCC_OscConfig+0x374>
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	2b01      	cmp	r3, #1
 800264a:	d135      	bne.n	80026b8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800264c:	4b7b      	ldr	r3, [pc, #492]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_RCC_OscConfig+0x320>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	2b80      	cmp	r3, #128	; 0x80
 800265e:	d001      	beq.n	8002664 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e2c1      	b.n	8002be8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002664:	f7fe fb78 	bl	8000d58 <HAL_GetREVID>
 8002668:	4603      	mov	r3, r0
 800266a:	f241 0203 	movw	r2, #4099	; 0x1003
 800266e:	4293      	cmp	r3, r2
 8002670:	d817      	bhi.n	80026a2 <HAL_RCC_OscConfig+0x35e>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	2b20      	cmp	r3, #32
 8002678:	d108      	bne.n	800268c <HAL_RCC_OscConfig+0x348>
 800267a:	4b70      	ldr	r3, [pc, #448]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002682:	4a6e      	ldr	r2, [pc, #440]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 8002684:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002688:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800268a:	e075      	b.n	8002778 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800268c:	4b6b      	ldr	r3, [pc, #428]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	069b      	lsls	r3, r3, #26
 800269a:	4968      	ldr	r1, [pc, #416]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 800269c:	4313      	orrs	r3, r2
 800269e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026a0:	e06a      	b.n	8002778 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026a2:	4b66      	ldr	r3, [pc, #408]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	061b      	lsls	r3, r3, #24
 80026b0:	4962      	ldr	r1, [pc, #392]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026b6:	e05f      	b.n	8002778 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d042      	beq.n	8002746 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80026c0:	4b5e      	ldr	r3, [pc, #376]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a5d      	ldr	r2, [pc, #372]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 80026c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026cc:	f7fe fb14 	bl	8000cf8 <HAL_GetTick>
 80026d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026d4:	f7fe fb10 	bl	8000cf8 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e280      	b.n	8002be8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026e6:	4b55      	ldr	r3, [pc, #340]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0f0      	beq.n	80026d4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026f2:	f7fe fb31 	bl	8000d58 <HAL_GetREVID>
 80026f6:	4603      	mov	r3, r0
 80026f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d817      	bhi.n	8002730 <HAL_RCC_OscConfig+0x3ec>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	2b20      	cmp	r3, #32
 8002706:	d108      	bne.n	800271a <HAL_RCC_OscConfig+0x3d6>
 8002708:	4b4c      	ldr	r3, [pc, #304]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002710:	4a4a      	ldr	r2, [pc, #296]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 8002712:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002716:	6053      	str	r3, [r2, #4]
 8002718:	e02e      	b.n	8002778 <HAL_RCC_OscConfig+0x434>
 800271a:	4b48      	ldr	r3, [pc, #288]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	069b      	lsls	r3, r3, #26
 8002728:	4944      	ldr	r1, [pc, #272]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 800272a:	4313      	orrs	r3, r2
 800272c:	604b      	str	r3, [r1, #4]
 800272e:	e023      	b.n	8002778 <HAL_RCC_OscConfig+0x434>
 8002730:	4b42      	ldr	r3, [pc, #264]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	061b      	lsls	r3, r3, #24
 800273e:	493f      	ldr	r1, [pc, #252]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 8002740:	4313      	orrs	r3, r2
 8002742:	60cb      	str	r3, [r1, #12]
 8002744:	e018      	b.n	8002778 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002746:	4b3d      	ldr	r3, [pc, #244]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a3c      	ldr	r2, [pc, #240]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 800274c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002750:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002752:	f7fe fad1 	bl	8000cf8 <HAL_GetTick>
 8002756:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800275a:	f7fe facd 	bl	8000cf8 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e23d      	b.n	8002be8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800276c:	4b33      	ldr	r3, [pc, #204]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1f0      	bne.n	800275a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0308 	and.w	r3, r3, #8
 8002780:	2b00      	cmp	r3, #0
 8002782:	d036      	beq.n	80027f2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d019      	beq.n	80027c0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800278c:	4b2b      	ldr	r3, [pc, #172]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 800278e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002790:	4a2a      	ldr	r2, [pc, #168]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 8002792:	f043 0301 	orr.w	r3, r3, #1
 8002796:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002798:	f7fe faae 	bl	8000cf8 <HAL_GetTick>
 800279c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a0:	f7fe faaa 	bl	8000cf8 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e21a      	b.n	8002be8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027b2:	4b22      	ldr	r3, [pc, #136]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 80027b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0x45c>
 80027be:	e018      	b.n	80027f2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027c0:	4b1e      	ldr	r3, [pc, #120]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 80027c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027c4:	4a1d      	ldr	r2, [pc, #116]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 80027c6:	f023 0301 	bic.w	r3, r3, #1
 80027ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027cc:	f7fe fa94 	bl	8000cf8 <HAL_GetTick>
 80027d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d4:	f7fe fa90 	bl	8000cf8 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e200      	b.n	8002be8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027e6:	4b15      	ldr	r3, [pc, #84]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 80027e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0320 	and.w	r3, r3, #32
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d039      	beq.n	8002872 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d01c      	beq.n	8002840 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002806:	4b0d      	ldr	r3, [pc, #52]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a0c      	ldr	r2, [pc, #48]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 800280c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002810:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002812:	f7fe fa71 	bl	8000cf8 <HAL_GetTick>
 8002816:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800281a:	f7fe fa6d 	bl	8000cf8 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e1dd      	b.n	8002be8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800282c:	4b03      	ldr	r3, [pc, #12]	; (800283c <HAL_RCC_OscConfig+0x4f8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0f0      	beq.n	800281a <HAL_RCC_OscConfig+0x4d6>
 8002838:	e01b      	b.n	8002872 <HAL_RCC_OscConfig+0x52e>
 800283a:	bf00      	nop
 800283c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002840:	4b9b      	ldr	r3, [pc, #620]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a9a      	ldr	r2, [pc, #616]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 8002846:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800284a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800284c:	f7fe fa54 	bl	8000cf8 <HAL_GetTick>
 8002850:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002854:	f7fe fa50 	bl	8000cf8 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e1c0      	b.n	8002be8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002866:	4b92      	ldr	r3, [pc, #584]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 8081 	beq.w	8002982 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002880:	4b8c      	ldr	r3, [pc, #560]	; (8002ab4 <HAL_RCC_OscConfig+0x770>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a8b      	ldr	r2, [pc, #556]	; (8002ab4 <HAL_RCC_OscConfig+0x770>)
 8002886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800288c:	f7fe fa34 	bl	8000cf8 <HAL_GetTick>
 8002890:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002894:	f7fe fa30 	bl	8000cf8 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b64      	cmp	r3, #100	; 0x64
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e1a0      	b.n	8002be8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028a6:	4b83      	ldr	r3, [pc, #524]	; (8002ab4 <HAL_RCC_OscConfig+0x770>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d106      	bne.n	80028c8 <HAL_RCC_OscConfig+0x584>
 80028ba:	4b7d      	ldr	r3, [pc, #500]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 80028bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028be:	4a7c      	ldr	r2, [pc, #496]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	6713      	str	r3, [r2, #112]	; 0x70
 80028c6:	e02d      	b.n	8002924 <HAL_RCC_OscConfig+0x5e0>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10c      	bne.n	80028ea <HAL_RCC_OscConfig+0x5a6>
 80028d0:	4b77      	ldr	r3, [pc, #476]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 80028d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d4:	4a76      	ldr	r2, [pc, #472]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 80028d6:	f023 0301 	bic.w	r3, r3, #1
 80028da:	6713      	str	r3, [r2, #112]	; 0x70
 80028dc:	4b74      	ldr	r3, [pc, #464]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 80028de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e0:	4a73      	ldr	r2, [pc, #460]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 80028e2:	f023 0304 	bic.w	r3, r3, #4
 80028e6:	6713      	str	r3, [r2, #112]	; 0x70
 80028e8:	e01c      	b.n	8002924 <HAL_RCC_OscConfig+0x5e0>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b05      	cmp	r3, #5
 80028f0:	d10c      	bne.n	800290c <HAL_RCC_OscConfig+0x5c8>
 80028f2:	4b6f      	ldr	r3, [pc, #444]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 80028f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f6:	4a6e      	ldr	r2, [pc, #440]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 80028f8:	f043 0304 	orr.w	r3, r3, #4
 80028fc:	6713      	str	r3, [r2, #112]	; 0x70
 80028fe:	4b6c      	ldr	r3, [pc, #432]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 8002900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002902:	4a6b      	ldr	r2, [pc, #428]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6713      	str	r3, [r2, #112]	; 0x70
 800290a:	e00b      	b.n	8002924 <HAL_RCC_OscConfig+0x5e0>
 800290c:	4b68      	ldr	r3, [pc, #416]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 800290e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002910:	4a67      	ldr	r2, [pc, #412]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 8002912:	f023 0301 	bic.w	r3, r3, #1
 8002916:	6713      	str	r3, [r2, #112]	; 0x70
 8002918:	4b65      	ldr	r3, [pc, #404]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 800291a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291c:	4a64      	ldr	r2, [pc, #400]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 800291e:	f023 0304 	bic.w	r3, r3, #4
 8002922:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d015      	beq.n	8002958 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292c:	f7fe f9e4 	bl	8000cf8 <HAL_GetTick>
 8002930:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002932:	e00a      	b.n	800294a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002934:	f7fe f9e0 	bl	8000cf8 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002942:	4293      	cmp	r3, r2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e14e      	b.n	8002be8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800294a:	4b59      	ldr	r3, [pc, #356]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 800294c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0ee      	beq.n	8002934 <HAL_RCC_OscConfig+0x5f0>
 8002956:	e014      	b.n	8002982 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002958:	f7fe f9ce 	bl	8000cf8 <HAL_GetTick>
 800295c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800295e:	e00a      	b.n	8002976 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002960:	f7fe f9ca 	bl	8000cf8 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	f241 3288 	movw	r2, #5000	; 0x1388
 800296e:	4293      	cmp	r3, r2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e138      	b.n	8002be8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002976:	4b4e      	ldr	r3, [pc, #312]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1ee      	bne.n	8002960 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 812d 	beq.w	8002be6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800298c:	4b48      	ldr	r3, [pc, #288]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002994:	2b18      	cmp	r3, #24
 8002996:	f000 80bd 	beq.w	8002b14 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	2b02      	cmp	r3, #2
 80029a0:	f040 809e 	bne.w	8002ae0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a4:	4b42      	ldr	r3, [pc, #264]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a41      	ldr	r2, [pc, #260]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 80029aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b0:	f7fe f9a2 	bl	8000cf8 <HAL_GetTick>
 80029b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b8:	f7fe f99e 	bl	8000cf8 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e10e      	b.n	8002be8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029ca:	4b39      	ldr	r3, [pc, #228]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029d6:	4b36      	ldr	r3, [pc, #216]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 80029d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029da:	4b37      	ldr	r3, [pc, #220]	; (8002ab8 <HAL_RCC_OscConfig+0x774>)
 80029dc:	4013      	ands	r3, r2
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80029e6:	0112      	lsls	r2, r2, #4
 80029e8:	430a      	orrs	r2, r1
 80029ea:	4931      	ldr	r1, [pc, #196]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	628b      	str	r3, [r1, #40]	; 0x28
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	3b01      	subs	r3, #1
 80029f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fe:	3b01      	subs	r3, #1
 8002a00:	025b      	lsls	r3, r3, #9
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	041b      	lsls	r3, r3, #16
 8002a0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	061b      	lsls	r3, r3, #24
 8002a1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002a20:	4923      	ldr	r1, [pc, #140]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a26:	4b22      	ldr	r3, [pc, #136]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2a:	4a21      	ldr	r2, [pc, #132]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 8002a2c:	f023 0301 	bic.w	r3, r3, #1
 8002a30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a32:	4b1f      	ldr	r3, [pc, #124]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 8002a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a36:	4b21      	ldr	r3, [pc, #132]	; (8002abc <HAL_RCC_OscConfig+0x778>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a3e:	00d2      	lsls	r2, r2, #3
 8002a40:	491b      	ldr	r1, [pc, #108]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a46:	4b1a      	ldr	r3, [pc, #104]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 8002a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4a:	f023 020c 	bic.w	r2, r3, #12
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	4917      	ldr	r1, [pc, #92]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a58:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	f023 0202 	bic.w	r2, r3, #2
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a64:	4912      	ldr	r1, [pc, #72]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a6a:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 8002a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6e:	4a10      	ldr	r2, [pc, #64]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 8002a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a76:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 8002a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7a:	4a0d      	ldr	r2, [pc, #52]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 8002a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a82:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 8002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a86:	4a0a      	ldr	r2, [pc, #40]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 8002a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002a8e:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 8002a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a92:	4a07      	ldr	r2, [pc, #28]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 8002a94:	f043 0301 	orr.w	r3, r3, #1
 8002a98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a9a:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a04      	ldr	r2, [pc, #16]	; (8002ab0 <HAL_RCC_OscConfig+0x76c>)
 8002aa0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa6:	f7fe f927 	bl	8000cf8 <HAL_GetTick>
 8002aaa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002aac:	e011      	b.n	8002ad2 <HAL_RCC_OscConfig+0x78e>
 8002aae:	bf00      	nop
 8002ab0:	58024400 	.word	0x58024400
 8002ab4:	58024800 	.word	0x58024800
 8002ab8:	fffffc0c 	.word	0xfffffc0c
 8002abc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac0:	f7fe f91a 	bl	8000cf8 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e08a      	b.n	8002be8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ad2:	4b47      	ldr	r3, [pc, #284]	; (8002bf0 <HAL_RCC_OscConfig+0x8ac>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0f0      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x77c>
 8002ade:	e082      	b.n	8002be6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae0:	4b43      	ldr	r3, [pc, #268]	; (8002bf0 <HAL_RCC_OscConfig+0x8ac>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a42      	ldr	r2, [pc, #264]	; (8002bf0 <HAL_RCC_OscConfig+0x8ac>)
 8002ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aec:	f7fe f904 	bl	8000cf8 <HAL_GetTick>
 8002af0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af4:	f7fe f900 	bl	8000cf8 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e070      	b.n	8002be8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b06:	4b3a      	ldr	r3, [pc, #232]	; (8002bf0 <HAL_RCC_OscConfig+0x8ac>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x7b0>
 8002b12:	e068      	b.n	8002be6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b14:	4b36      	ldr	r3, [pc, #216]	; (8002bf0 <HAL_RCC_OscConfig+0x8ac>)
 8002b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b18:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b1a:	4b35      	ldr	r3, [pc, #212]	; (8002bf0 <HAL_RCC_OscConfig+0x8ac>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d031      	beq.n	8002b8c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	f003 0203 	and.w	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d12a      	bne.n	8002b8c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	091b      	lsrs	r3, r3, #4
 8002b3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d122      	bne.n	8002b8c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d11a      	bne.n	8002b8c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	0a5b      	lsrs	r3, r3, #9
 8002b5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b62:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d111      	bne.n	8002b8c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	0c1b      	lsrs	r3, r3, #16
 8002b6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b74:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d108      	bne.n	8002b8c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	0e1b      	lsrs	r3, r3, #24
 8002b7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b86:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d001      	beq.n	8002b90 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e02b      	b.n	8002be8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002b90:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <HAL_RCC_OscConfig+0x8ac>)
 8002b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b94:	08db      	lsrs	r3, r3, #3
 8002b96:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b9a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d01f      	beq.n	8002be6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002ba6:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <HAL_RCC_OscConfig+0x8ac>)
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	4a11      	ldr	r2, [pc, #68]	; (8002bf0 <HAL_RCC_OscConfig+0x8ac>)
 8002bac:	f023 0301 	bic.w	r3, r3, #1
 8002bb0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bb2:	f7fe f8a1 	bl	8000cf8 <HAL_GetTick>
 8002bb6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002bb8:	bf00      	nop
 8002bba:	f7fe f89d 	bl	8000cf8 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d0f9      	beq.n	8002bba <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bc6:	4b0a      	ldr	r3, [pc, #40]	; (8002bf0 <HAL_RCC_OscConfig+0x8ac>)
 8002bc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bca:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <HAL_RCC_OscConfig+0x8b0>)
 8002bcc:	4013      	ands	r3, r2
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002bd2:	00d2      	lsls	r2, r2, #3
 8002bd4:	4906      	ldr	r1, [pc, #24]	; (8002bf0 <HAL_RCC_OscConfig+0x8ac>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002bda:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <HAL_RCC_OscConfig+0x8ac>)
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	4a04      	ldr	r2, [pc, #16]	; (8002bf0 <HAL_RCC_OscConfig+0x8ac>)
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3730      	adds	r7, #48	; 0x30
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	58024400 	.word	0x58024400
 8002bf4:	ffff0007 	.word	0xffff0007

08002bf8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e19c      	b.n	8002f46 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c0c:	4b8a      	ldr	r3, [pc, #552]	; (8002e38 <HAL_RCC_ClockConfig+0x240>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 030f 	and.w	r3, r3, #15
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d910      	bls.n	8002c3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1a:	4b87      	ldr	r3, [pc, #540]	; (8002e38 <HAL_RCC_ClockConfig+0x240>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f023 020f 	bic.w	r2, r3, #15
 8002c22:	4985      	ldr	r1, [pc, #532]	; (8002e38 <HAL_RCC_ClockConfig+0x240>)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2a:	4b83      	ldr	r3, [pc, #524]	; (8002e38 <HAL_RCC_ClockConfig+0x240>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e184      	b.n	8002f46 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d010      	beq.n	8002c6a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691a      	ldr	r2, [r3, #16]
 8002c4c:	4b7b      	ldr	r3, [pc, #492]	; (8002e3c <HAL_RCC_ClockConfig+0x244>)
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d908      	bls.n	8002c6a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c58:	4b78      	ldr	r3, [pc, #480]	; (8002e3c <HAL_RCC_ClockConfig+0x244>)
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	4975      	ldr	r1, [pc, #468]	; (8002e3c <HAL_RCC_ClockConfig+0x244>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d010      	beq.n	8002c98 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695a      	ldr	r2, [r3, #20]
 8002c7a:	4b70      	ldr	r3, [pc, #448]	; (8002e3c <HAL_RCC_ClockConfig+0x244>)
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d908      	bls.n	8002c98 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c86:	4b6d      	ldr	r3, [pc, #436]	; (8002e3c <HAL_RCC_ClockConfig+0x244>)
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	496a      	ldr	r1, [pc, #424]	; (8002e3c <HAL_RCC_ClockConfig+0x244>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0310 	and.w	r3, r3, #16
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d010      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	699a      	ldr	r2, [r3, #24]
 8002ca8:	4b64      	ldr	r3, [pc, #400]	; (8002e3c <HAL_RCC_ClockConfig+0x244>)
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d908      	bls.n	8002cc6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002cb4:	4b61      	ldr	r3, [pc, #388]	; (8002e3c <HAL_RCC_ClockConfig+0x244>)
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	495e      	ldr	r1, [pc, #376]	; (8002e3c <HAL_RCC_ClockConfig+0x244>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0320 	and.w	r3, r3, #32
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d010      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69da      	ldr	r2, [r3, #28]
 8002cd6:	4b59      	ldr	r3, [pc, #356]	; (8002e3c <HAL_RCC_ClockConfig+0x244>)
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d908      	bls.n	8002cf4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ce2:	4b56      	ldr	r3, [pc, #344]	; (8002e3c <HAL_RCC_ClockConfig+0x244>)
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	4953      	ldr	r1, [pc, #332]	; (8002e3c <HAL_RCC_ClockConfig+0x244>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d010      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	4b4d      	ldr	r3, [pc, #308]	; (8002e3c <HAL_RCC_ClockConfig+0x244>)
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	f003 030f 	and.w	r3, r3, #15
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d908      	bls.n	8002d22 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d10:	4b4a      	ldr	r3, [pc, #296]	; (8002e3c <HAL_RCC_ClockConfig+0x244>)
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	f023 020f 	bic.w	r2, r3, #15
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4947      	ldr	r1, [pc, #284]	; (8002e3c <HAL_RCC_ClockConfig+0x244>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d055      	beq.n	8002dda <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d2e:	4b43      	ldr	r3, [pc, #268]	; (8002e3c <HAL_RCC_ClockConfig+0x244>)
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	4940      	ldr	r1, [pc, #256]	; (8002e3c <HAL_RCC_ClockConfig+0x244>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d107      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d48:	4b3c      	ldr	r3, [pc, #240]	; (8002e3c <HAL_RCC_ClockConfig+0x244>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d121      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0f6      	b.n	8002f46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d107      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d60:	4b36      	ldr	r3, [pc, #216]	; (8002e3c <HAL_RCC_ClockConfig+0x244>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d115      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0ea      	b.n	8002f46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d107      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d78:	4b30      	ldr	r3, [pc, #192]	; (8002e3c <HAL_RCC_ClockConfig+0x244>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d109      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0de      	b.n	8002f46 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d88:	4b2c      	ldr	r3, [pc, #176]	; (8002e3c <HAL_RCC_ClockConfig+0x244>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e0d6      	b.n	8002f46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d98:	4b28      	ldr	r3, [pc, #160]	; (8002e3c <HAL_RCC_ClockConfig+0x244>)
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f023 0207 	bic.w	r2, r3, #7
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	4925      	ldr	r1, [pc, #148]	; (8002e3c <HAL_RCC_ClockConfig+0x244>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002daa:	f7fd ffa5 	bl	8000cf8 <HAL_GetTick>
 8002dae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db0:	e00a      	b.n	8002dc8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db2:	f7fd ffa1 	bl	8000cf8 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e0be      	b.n	8002f46 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc8:	4b1c      	ldr	r3, [pc, #112]	; (8002e3c <HAL_RCC_ClockConfig+0x244>)
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d1eb      	bne.n	8002db2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d010      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	4b14      	ldr	r3, [pc, #80]	; (8002e3c <HAL_RCC_ClockConfig+0x244>)
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d208      	bcs.n	8002e08 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df6:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <HAL_RCC_ClockConfig+0x244>)
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	f023 020f 	bic.w	r2, r3, #15
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	490e      	ldr	r1, [pc, #56]	; (8002e3c <HAL_RCC_ClockConfig+0x244>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e08:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <HAL_RCC_ClockConfig+0x240>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 030f 	and.w	r3, r3, #15
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d214      	bcs.n	8002e40 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e16:	4b08      	ldr	r3, [pc, #32]	; (8002e38 <HAL_RCC_ClockConfig+0x240>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 020f 	bic.w	r2, r3, #15
 8002e1e:	4906      	ldr	r1, [pc, #24]	; (8002e38 <HAL_RCC_ClockConfig+0x240>)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e26:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <HAL_RCC_ClockConfig+0x240>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d005      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e086      	b.n	8002f46 <HAL_RCC_ClockConfig+0x34e>
 8002e38:	52002000 	.word	0x52002000
 8002e3c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d010      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691a      	ldr	r2, [r3, #16]
 8002e50:	4b3f      	ldr	r3, [pc, #252]	; (8002f50 <HAL_RCC_ClockConfig+0x358>)
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d208      	bcs.n	8002e6e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e5c:	4b3c      	ldr	r3, [pc, #240]	; (8002f50 <HAL_RCC_ClockConfig+0x358>)
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	4939      	ldr	r1, [pc, #228]	; (8002f50 <HAL_RCC_ClockConfig+0x358>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d010      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	4b34      	ldr	r3, [pc, #208]	; (8002f50 <HAL_RCC_ClockConfig+0x358>)
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d208      	bcs.n	8002e9c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e8a:	4b31      	ldr	r3, [pc, #196]	; (8002f50 <HAL_RCC_ClockConfig+0x358>)
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	492e      	ldr	r1, [pc, #184]	; (8002f50 <HAL_RCC_ClockConfig+0x358>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0310 	and.w	r3, r3, #16
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d010      	beq.n	8002eca <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	699a      	ldr	r2, [r3, #24]
 8002eac:	4b28      	ldr	r3, [pc, #160]	; (8002f50 <HAL_RCC_ClockConfig+0x358>)
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d208      	bcs.n	8002eca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002eb8:	4b25      	ldr	r3, [pc, #148]	; (8002f50 <HAL_RCC_ClockConfig+0x358>)
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	4922      	ldr	r1, [pc, #136]	; (8002f50 <HAL_RCC_ClockConfig+0x358>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d010      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	69da      	ldr	r2, [r3, #28]
 8002eda:	4b1d      	ldr	r3, [pc, #116]	; (8002f50 <HAL_RCC_ClockConfig+0x358>)
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d208      	bcs.n	8002ef8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ee6:	4b1a      	ldr	r3, [pc, #104]	; (8002f50 <HAL_RCC_ClockConfig+0x358>)
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	4917      	ldr	r1, [pc, #92]	; (8002f50 <HAL_RCC_ClockConfig+0x358>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ef8:	f000 f834 	bl	8002f64 <HAL_RCC_GetSysClockFreq>
 8002efc:	4602      	mov	r2, r0
 8002efe:	4b14      	ldr	r3, [pc, #80]	; (8002f50 <HAL_RCC_ClockConfig+0x358>)
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	0a1b      	lsrs	r3, r3, #8
 8002f04:	f003 030f 	and.w	r3, r3, #15
 8002f08:	4912      	ldr	r1, [pc, #72]	; (8002f54 <HAL_RCC_ClockConfig+0x35c>)
 8002f0a:	5ccb      	ldrb	r3, [r1, r3]
 8002f0c:	f003 031f 	and.w	r3, r3, #31
 8002f10:	fa22 f303 	lsr.w	r3, r2, r3
 8002f14:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f16:	4b0e      	ldr	r3, [pc, #56]	; (8002f50 <HAL_RCC_ClockConfig+0x358>)
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	4a0d      	ldr	r2, [pc, #52]	; (8002f54 <HAL_RCC_ClockConfig+0x35c>)
 8002f20:	5cd3      	ldrb	r3, [r2, r3]
 8002f22:	f003 031f 	and.w	r3, r3, #31
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	fa22 f303 	lsr.w	r3, r2, r3
 8002f2c:	4a0a      	ldr	r2, [pc, #40]	; (8002f58 <HAL_RCC_ClockConfig+0x360>)
 8002f2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f30:	4a0a      	ldr	r2, [pc, #40]	; (8002f5c <HAL_RCC_ClockConfig+0x364>)
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f36:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <HAL_RCC_ClockConfig+0x368>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fd fe92 	bl	8000c64 <HAL_InitTick>
 8002f40:	4603      	mov	r3, r0
 8002f42:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	58024400 	.word	0x58024400
 8002f54:	08005448 	.word	0x08005448
 8002f58:	24000004 	.word	0x24000004
 8002f5c:	24000000 	.word	0x24000000
 8002f60:	24000008 	.word	0x24000008

08002f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b089      	sub	sp, #36	; 0x24
 8002f68:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f6a:	4bb3      	ldr	r3, [pc, #716]	; (8003238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f72:	2b18      	cmp	r3, #24
 8002f74:	f200 8155 	bhi.w	8003222 <HAL_RCC_GetSysClockFreq+0x2be>
 8002f78:	a201      	add	r2, pc, #4	; (adr r2, 8002f80 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7e:	bf00      	nop
 8002f80:	08002fe5 	.word	0x08002fe5
 8002f84:	08003223 	.word	0x08003223
 8002f88:	08003223 	.word	0x08003223
 8002f8c:	08003223 	.word	0x08003223
 8002f90:	08003223 	.word	0x08003223
 8002f94:	08003223 	.word	0x08003223
 8002f98:	08003223 	.word	0x08003223
 8002f9c:	08003223 	.word	0x08003223
 8002fa0:	0800300b 	.word	0x0800300b
 8002fa4:	08003223 	.word	0x08003223
 8002fa8:	08003223 	.word	0x08003223
 8002fac:	08003223 	.word	0x08003223
 8002fb0:	08003223 	.word	0x08003223
 8002fb4:	08003223 	.word	0x08003223
 8002fb8:	08003223 	.word	0x08003223
 8002fbc:	08003223 	.word	0x08003223
 8002fc0:	08003011 	.word	0x08003011
 8002fc4:	08003223 	.word	0x08003223
 8002fc8:	08003223 	.word	0x08003223
 8002fcc:	08003223 	.word	0x08003223
 8002fd0:	08003223 	.word	0x08003223
 8002fd4:	08003223 	.word	0x08003223
 8002fd8:	08003223 	.word	0x08003223
 8002fdc:	08003223 	.word	0x08003223
 8002fe0:	08003017 	.word	0x08003017
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fe4:	4b94      	ldr	r3, [pc, #592]	; (8003238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0320 	and.w	r3, r3, #32
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d009      	beq.n	8003004 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ff0:	4b91      	ldr	r3, [pc, #580]	; (8003238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	08db      	lsrs	r3, r3, #3
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	4a90      	ldr	r2, [pc, #576]	; (800323c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8003000:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003002:	e111      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003004:	4b8d      	ldr	r3, [pc, #564]	; (800323c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003006:	61bb      	str	r3, [r7, #24]
      break;
 8003008:	e10e      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800300a:	4b8d      	ldr	r3, [pc, #564]	; (8003240 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800300c:	61bb      	str	r3, [r7, #24]
      break;
 800300e:	e10b      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003010:	4b8c      	ldr	r3, [pc, #560]	; (8003244 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003012:	61bb      	str	r3, [r7, #24]
      break;
 8003014:	e108      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003016:	4b88      	ldr	r3, [pc, #544]	; (8003238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003020:	4b85      	ldr	r3, [pc, #532]	; (8003238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	091b      	lsrs	r3, r3, #4
 8003026:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800302a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800302c:	4b82      	ldr	r3, [pc, #520]	; (8003238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003036:	4b80      	ldr	r3, [pc, #512]	; (8003238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303a:	08db      	lsrs	r3, r3, #3
 800303c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	fb02 f303 	mul.w	r3, r2, r3
 8003046:	ee07 3a90 	vmov	s15, r3
 800304a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800304e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 80e1 	beq.w	800321c <HAL_RCC_GetSysClockFreq+0x2b8>
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2b02      	cmp	r3, #2
 800305e:	f000 8083 	beq.w	8003168 <HAL_RCC_GetSysClockFreq+0x204>
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b02      	cmp	r3, #2
 8003066:	f200 80a1 	bhi.w	80031ac <HAL_RCC_GetSysClockFreq+0x248>
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_RCC_GetSysClockFreq+0x114>
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d056      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003076:	e099      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003078:	4b6f      	ldr	r3, [pc, #444]	; (8003238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0320 	and.w	r3, r3, #32
 8003080:	2b00      	cmp	r3, #0
 8003082:	d02d      	beq.n	80030e0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003084:	4b6c      	ldr	r3, [pc, #432]	; (8003238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	08db      	lsrs	r3, r3, #3
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	4a6b      	ldr	r2, [pc, #428]	; (800323c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003090:	fa22 f303 	lsr.w	r3, r2, r3
 8003094:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	ee07 3a90 	vmov	s15, r3
 800309c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	ee07 3a90 	vmov	s15, r3
 80030a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ae:	4b62      	ldr	r3, [pc, #392]	; (8003238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030b6:	ee07 3a90 	vmov	s15, r3
 80030ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030be:	ed97 6a02 	vldr	s12, [r7, #8]
 80030c2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003248 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030da:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80030de:	e087      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	ee07 3a90 	vmov	s15, r3
 80030e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ea:	eddf 6a58 	vldr	s13, [pc, #352]	; 800324c <HAL_RCC_GetSysClockFreq+0x2e8>
 80030ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030f2:	4b51      	ldr	r3, [pc, #324]	; (8003238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030fa:	ee07 3a90 	vmov	s15, r3
 80030fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003102:	ed97 6a02 	vldr	s12, [r7, #8]
 8003106:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003248 <HAL_RCC_GetSysClockFreq+0x2e4>
 800310a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800310e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800311a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800311e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003122:	e065      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	ee07 3a90 	vmov	s15, r3
 800312a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800312e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003250 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003136:	4b40      	ldr	r3, [pc, #256]	; (8003238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800313e:	ee07 3a90 	vmov	s15, r3
 8003142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003146:	ed97 6a02 	vldr	s12, [r7, #8]
 800314a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003248 <HAL_RCC_GetSysClockFreq+0x2e4>
 800314e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800315a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800315e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003162:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003166:	e043      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	ee07 3a90 	vmov	s15, r3
 800316e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003172:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003254 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800317a:	4b2f      	ldr	r3, [pc, #188]	; (8003238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003182:	ee07 3a90 	vmov	s15, r3
 8003186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800318a:	ed97 6a02 	vldr	s12, [r7, #8]
 800318e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003248 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800319a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800319e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031aa:	e021      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	ee07 3a90 	vmov	s15, r3
 80031b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003250 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031be:	4b1e      	ldr	r3, [pc, #120]	; (8003238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031c6:	ee07 3a90 	vmov	s15, r3
 80031ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80031d2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003248 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031ee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80031f0:	4b11      	ldr	r3, [pc, #68]	; (8003238 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f4:	0a5b      	lsrs	r3, r3, #9
 80031f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031fa:	3301      	adds	r3, #1
 80031fc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	ee07 3a90 	vmov	s15, r3
 8003204:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003208:	edd7 6a07 	vldr	s13, [r7, #28]
 800320c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003214:	ee17 3a90 	vmov	r3, s15
 8003218:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800321a:	e005      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	61bb      	str	r3, [r7, #24]
      break;
 8003220:	e002      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003222:	4b07      	ldr	r3, [pc, #28]	; (8003240 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003224:	61bb      	str	r3, [r7, #24]
      break;
 8003226:	bf00      	nop
  }

  return sysclockfreq;
 8003228:	69bb      	ldr	r3, [r7, #24]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3724      	adds	r7, #36	; 0x24
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	58024400 	.word	0x58024400
 800323c:	03d09000 	.word	0x03d09000
 8003240:	003d0900 	.word	0x003d0900
 8003244:	017d7840 	.word	0x017d7840
 8003248:	46000000 	.word	0x46000000
 800324c:	4c742400 	.word	0x4c742400
 8003250:	4a742400 	.word	0x4a742400
 8003254:	4bbebc20 	.word	0x4bbebc20

08003258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800325e:	f7ff fe81 	bl	8002f64 <HAL_RCC_GetSysClockFreq>
 8003262:	4602      	mov	r2, r0
 8003264:	4b10      	ldr	r3, [pc, #64]	; (80032a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	0a1b      	lsrs	r3, r3, #8
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	490f      	ldr	r1, [pc, #60]	; (80032ac <HAL_RCC_GetHCLKFreq+0x54>)
 8003270:	5ccb      	ldrb	r3, [r1, r3]
 8003272:	f003 031f 	and.w	r3, r3, #31
 8003276:	fa22 f303 	lsr.w	r3, r2, r3
 800327a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800327c:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	4a09      	ldr	r2, [pc, #36]	; (80032ac <HAL_RCC_GetHCLKFreq+0x54>)
 8003286:	5cd3      	ldrb	r3, [r2, r3]
 8003288:	f003 031f 	and.w	r3, r3, #31
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	fa22 f303 	lsr.w	r3, r2, r3
 8003292:	4a07      	ldr	r2, [pc, #28]	; (80032b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003294:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003296:	4a07      	ldr	r2, [pc, #28]	; (80032b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800329c:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800329e:	681b      	ldr	r3, [r3, #0]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	58024400 	.word	0x58024400
 80032ac:	08005448 	.word	0x08005448
 80032b0:	24000004 	.word	0x24000004
 80032b4:	24000000 	.word	0x24000000

080032b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80032bc:	f7ff ffcc 	bl	8003258 <HAL_RCC_GetHCLKFreq>
 80032c0:	4602      	mov	r2, r0
 80032c2:	4b06      	ldr	r3, [pc, #24]	; (80032dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	091b      	lsrs	r3, r3, #4
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	4904      	ldr	r1, [pc, #16]	; (80032e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032ce:	5ccb      	ldrb	r3, [r1, r3]
 80032d0:	f003 031f 	and.w	r3, r3, #31
 80032d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80032d8:	4618      	mov	r0, r3
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	58024400 	.word	0x58024400
 80032e0:	08005448 	.word	0x08005448

080032e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80032e8:	f7ff ffb6 	bl	8003258 <HAL_RCC_GetHCLKFreq>
 80032ec:	4602      	mov	r2, r0
 80032ee:	4b06      	ldr	r3, [pc, #24]	; (8003308 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	0a1b      	lsrs	r3, r3, #8
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	4904      	ldr	r1, [pc, #16]	; (800330c <HAL_RCC_GetPCLK2Freq+0x28>)
 80032fa:	5ccb      	ldrb	r3, [r1, r3]
 80032fc:	f003 031f 	and.w	r3, r3, #31
 8003300:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003304:	4618      	mov	r0, r3
 8003306:	bd80      	pop	{r7, pc}
 8003308:	58024400 	.word	0x58024400
 800330c:	08005448 	.word	0x08005448

08003310 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003314:	f7ff ffa0 	bl	8003258 <HAL_RCC_GetHCLKFreq>
 8003318:	4602      	mov	r2, r0
 800331a:	4b06      	ldr	r3, [pc, #24]	; (8003334 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	091b      	lsrs	r3, r3, #4
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	4904      	ldr	r1, [pc, #16]	; (8003338 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003326:	5ccb      	ldrb	r3, [r1, r3]
 8003328:	f003 031f 	and.w	r3, r3, #31
 800332c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003330:	4618      	mov	r0, r3
 8003332:	bd80      	pop	{r7, pc}
 8003334:	58024400 	.word	0x58024400
 8003338:	08005448 	.word	0x08005448

0800333c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800333c:	b480      	push	{r7}
 800333e:	b089      	sub	sp, #36	; 0x24
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003344:	4ba1      	ldr	r3, [pc, #644]	; (80035cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003348:	f003 0303 	and.w	r3, r3, #3
 800334c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800334e:	4b9f      	ldr	r3, [pc, #636]	; (80035cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003352:	0b1b      	lsrs	r3, r3, #12
 8003354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003358:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800335a:	4b9c      	ldr	r3, [pc, #624]	; (80035cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335e:	091b      	lsrs	r3, r3, #4
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003366:	4b99      	ldr	r3, [pc, #612]	; (80035cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336a:	08db      	lsrs	r3, r3, #3
 800336c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	fb02 f303 	mul.w	r3, r2, r3
 8003376:	ee07 3a90 	vmov	s15, r3
 800337a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 8111 	beq.w	80035ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	2b02      	cmp	r3, #2
 800338e:	f000 8083 	beq.w	8003498 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	2b02      	cmp	r3, #2
 8003396:	f200 80a1 	bhi.w	80034dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d056      	beq.n	8003454 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80033a6:	e099      	b.n	80034dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033a8:	4b88      	ldr	r3, [pc, #544]	; (80035cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0320 	and.w	r3, r3, #32
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d02d      	beq.n	8003410 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80033b4:	4b85      	ldr	r3, [pc, #532]	; (80035cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	08db      	lsrs	r3, r3, #3
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	4a84      	ldr	r2, [pc, #528]	; (80035d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80033c0:	fa22 f303 	lsr.w	r3, r2, r3
 80033c4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	ee07 3a90 	vmov	s15, r3
 80033cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	ee07 3a90 	vmov	s15, r3
 80033d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033de:	4b7b      	ldr	r3, [pc, #492]	; (80035cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e6:	ee07 3a90 	vmov	s15, r3
 80033ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80033f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80035d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80033f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800340a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800340e:	e087      	b.n	8003520 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	ee07 3a90 	vmov	s15, r3
 8003416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800341a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80035d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800341e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003422:	4b6a      	ldr	r3, [pc, #424]	; (80035cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800342a:	ee07 3a90 	vmov	s15, r3
 800342e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003432:	ed97 6a03 	vldr	s12, [r7, #12]
 8003436:	eddf 5a67 	vldr	s11, [pc, #412]	; 80035d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800343a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800343e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800344a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800344e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003452:	e065      	b.n	8003520 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	ee07 3a90 	vmov	s15, r3
 800345a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800345e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80035dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003466:	4b59      	ldr	r3, [pc, #356]	; (80035cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800346e:	ee07 3a90 	vmov	s15, r3
 8003472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003476:	ed97 6a03 	vldr	s12, [r7, #12]
 800347a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80035d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800347e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800348a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800348e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003492:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003496:	e043      	b.n	8003520 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	ee07 3a90 	vmov	s15, r3
 800349e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80035e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80034a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034aa:	4b48      	ldr	r3, [pc, #288]	; (80035cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034b2:	ee07 3a90 	vmov	s15, r3
 80034b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80034be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80035d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80034c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034da:	e021      	b.n	8003520 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	ee07 3a90 	vmov	s15, r3
 80034e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80035dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80034ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034ee:	4b37      	ldr	r3, [pc, #220]	; (80035cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034f6:	ee07 3a90 	vmov	s15, r3
 80034fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003502:	eddf 5a34 	vldr	s11, [pc, #208]	; 80035d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800350a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800350e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800351a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800351e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003520:	4b2a      	ldr	r3, [pc, #168]	; (80035cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003524:	0a5b      	lsrs	r3, r3, #9
 8003526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800352a:	ee07 3a90 	vmov	s15, r3
 800352e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003532:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003536:	ee37 7a87 	vadd.f32	s14, s15, s14
 800353a:	edd7 6a07 	vldr	s13, [r7, #28]
 800353e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003542:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003546:	ee17 2a90 	vmov	r2, s15
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800354e:	4b1f      	ldr	r3, [pc, #124]	; (80035cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003552:	0c1b      	lsrs	r3, r3, #16
 8003554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003558:	ee07 3a90 	vmov	s15, r3
 800355c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003560:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003564:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003568:	edd7 6a07 	vldr	s13, [r7, #28]
 800356c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003574:	ee17 2a90 	vmov	r2, s15
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800357c:	4b13      	ldr	r3, [pc, #76]	; (80035cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800357e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003580:	0e1b      	lsrs	r3, r3, #24
 8003582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003586:	ee07 3a90 	vmov	s15, r3
 800358a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800358e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003592:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003596:	edd7 6a07 	vldr	s13, [r7, #28]
 800359a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800359e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035a2:	ee17 2a90 	vmov	r2, s15
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80035aa:	e008      	b.n	80035be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	609a      	str	r2, [r3, #8]
}
 80035be:	bf00      	nop
 80035c0:	3724      	adds	r7, #36	; 0x24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	58024400 	.word	0x58024400
 80035d0:	03d09000 	.word	0x03d09000
 80035d4:	46000000 	.word	0x46000000
 80035d8:	4c742400 	.word	0x4c742400
 80035dc:	4a742400 	.word	0x4a742400
 80035e0:	4bbebc20 	.word	0x4bbebc20

080035e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b089      	sub	sp, #36	; 0x24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80035ec:	4ba1      	ldr	r3, [pc, #644]	; (8003874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f0:	f003 0303 	and.w	r3, r3, #3
 80035f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80035f6:	4b9f      	ldr	r3, [pc, #636]	; (8003874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fa:	0d1b      	lsrs	r3, r3, #20
 80035fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003600:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003602:	4b9c      	ldr	r3, [pc, #624]	; (8003874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003606:	0a1b      	lsrs	r3, r3, #8
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800360e:	4b99      	ldr	r3, [pc, #612]	; (8003874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003612:	08db      	lsrs	r3, r3, #3
 8003614:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	fb02 f303 	mul.w	r3, r2, r3
 800361e:	ee07 3a90 	vmov	s15, r3
 8003622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003626:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 8111 	beq.w	8003854 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	2b02      	cmp	r3, #2
 8003636:	f000 8083 	beq.w	8003740 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	2b02      	cmp	r3, #2
 800363e:	f200 80a1 	bhi.w	8003784 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d056      	beq.n	80036fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800364e:	e099      	b.n	8003784 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003650:	4b88      	ldr	r3, [pc, #544]	; (8003874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	2b00      	cmp	r3, #0
 800365a:	d02d      	beq.n	80036b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800365c:	4b85      	ldr	r3, [pc, #532]	; (8003874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	08db      	lsrs	r3, r3, #3
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	4a84      	ldr	r2, [pc, #528]	; (8003878 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003668:	fa22 f303 	lsr.w	r3, r2, r3
 800366c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	ee07 3a90 	vmov	s15, r3
 8003674:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	ee07 3a90 	vmov	s15, r3
 800367e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003686:	4b7b      	ldr	r3, [pc, #492]	; (8003874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800368e:	ee07 3a90 	vmov	s15, r3
 8003692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003696:	ed97 6a03 	vldr	s12, [r7, #12]
 800369a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800387c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800369e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80036b6:	e087      	b.n	80037c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	ee07 3a90 	vmov	s15, r3
 80036be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003880 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80036c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ca:	4b6a      	ldr	r3, [pc, #424]	; (8003874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d2:	ee07 3a90 	vmov	s15, r3
 80036d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036da:	ed97 6a03 	vldr	s12, [r7, #12]
 80036de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800387c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80036e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036fa:	e065      	b.n	80037c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	ee07 3a90 	vmov	s15, r3
 8003702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003706:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003884 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800370a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800370e:	4b59      	ldr	r3, [pc, #356]	; (8003874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003716:	ee07 3a90 	vmov	s15, r3
 800371a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800371e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003722:	eddf 5a56 	vldr	s11, [pc, #344]	; 800387c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800372a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800372e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800373a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800373e:	e043      	b.n	80037c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	ee07 3a90 	vmov	s15, r3
 8003746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800374a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003888 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800374e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003752:	4b48      	ldr	r3, [pc, #288]	; (8003874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800375a:	ee07 3a90 	vmov	s15, r3
 800375e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003762:	ed97 6a03 	vldr	s12, [r7, #12]
 8003766:	eddf 5a45 	vldr	s11, [pc, #276]	; 800387c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800376a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800376e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800377a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800377e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003782:	e021      	b.n	80037c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	ee07 3a90 	vmov	s15, r3
 800378a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800378e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003884 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003796:	4b37      	ldr	r3, [pc, #220]	; (8003874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800379e:	ee07 3a90 	vmov	s15, r3
 80037a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80037aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800387c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80037ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80037c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80037c8:	4b2a      	ldr	r3, [pc, #168]	; (8003874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	0a5b      	lsrs	r3, r3, #9
 80037ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037d2:	ee07 3a90 	vmov	s15, r3
 80037d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80037e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037ee:	ee17 2a90 	vmov	r2, s15
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80037f6:	4b1f      	ldr	r3, [pc, #124]	; (8003874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	0c1b      	lsrs	r3, r3, #16
 80037fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003800:	ee07 3a90 	vmov	s15, r3
 8003804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003808:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800380c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003810:	edd7 6a07 	vldr	s13, [r7, #28]
 8003814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800381c:	ee17 2a90 	vmov	r2, s15
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003824:	4b13      	ldr	r3, [pc, #76]	; (8003874 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003828:	0e1b      	lsrs	r3, r3, #24
 800382a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800382e:	ee07 3a90 	vmov	s15, r3
 8003832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003836:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800383a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800383e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800384a:	ee17 2a90 	vmov	r2, s15
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003852:	e008      	b.n	8003866 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	609a      	str	r2, [r3, #8]
}
 8003866:	bf00      	nop
 8003868:	3724      	adds	r7, #36	; 0x24
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	58024400 	.word	0x58024400
 8003878:	03d09000 	.word	0x03d09000
 800387c:	46000000 	.word	0x46000000
 8003880:	4c742400 	.word	0x4c742400
 8003884:	4a742400 	.word	0x4a742400
 8003888:	4bbebc20 	.word	0x4bbebc20

0800388c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e042      	b.n	8003924 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d106      	bne.n	80038b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7fc ff8f 	bl	80007d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2224      	movs	r2, #36	; 0x24
 80038ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0201 	bic.w	r2, r2, #1
 80038cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f8ba 	bl	8003a48 <UART_SetConfig>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e022      	b.n	8003924 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fe16 	bl	8004518 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800390a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0201 	orr.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fe9d 	bl	800465c <UART_CheckIdleState>
 8003922:	4603      	mov	r3, r0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b08a      	sub	sp, #40	; 0x28
 8003930:	af02      	add	r7, sp, #8
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	4613      	mov	r3, r2
 800393a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003942:	2b20      	cmp	r3, #32
 8003944:	d17b      	bne.n	8003a3e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <HAL_UART_Transmit+0x26>
 800394c:	88fb      	ldrh	r3, [r7, #6]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e074      	b.n	8003a40 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2221      	movs	r2, #33	; 0x21
 8003962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003966:	f7fd f9c7 	bl	8000cf8 <HAL_GetTick>
 800396a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	88fa      	ldrh	r2, [r7, #6]
 8003970:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	88fa      	ldrh	r2, [r7, #6]
 8003978:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003984:	d108      	bne.n	8003998 <HAL_UART_Transmit+0x6c>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d104      	bne.n	8003998 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800398e:	2300      	movs	r3, #0
 8003990:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	61bb      	str	r3, [r7, #24]
 8003996:	e003      	b.n	80039a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800399c:	2300      	movs	r3, #0
 800399e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039a0:	e030      	b.n	8003a04 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2200      	movs	r2, #0
 80039aa:	2180      	movs	r1, #128	; 0x80
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 feff 	bl	80047b0 <UART_WaitOnFlagUntilTimeout>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d005      	beq.n	80039c4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e03d      	b.n	8003a40 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10b      	bne.n	80039e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	3302      	adds	r3, #2
 80039de:	61bb      	str	r3, [r7, #24]
 80039e0:	e007      	b.n	80039f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	781a      	ldrb	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	3301      	adds	r3, #1
 80039f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1c8      	bne.n	80039a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	2200      	movs	r2, #0
 8003a18:	2140      	movs	r1, #64	; 0x40
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 fec8 	bl	80047b0 <UART_WaitOnFlagUntilTimeout>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d005      	beq.n	8003a32 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e006      	b.n	8003a40 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	e000      	b.n	8003a40 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003a3e:	2302      	movs	r3, #2
  }
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3720      	adds	r7, #32
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a4c:	b092      	sub	sp, #72	; 0x48
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	431a      	orrs	r2, r3
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	431a      	orrs	r2, r3
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	4bbe      	ldr	r3, [pc, #760]	; (8003d70 <UART_SetConfig+0x328>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	6812      	ldr	r2, [r2, #0]
 8003a7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a80:	430b      	orrs	r3, r1
 8003a82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4ab3      	ldr	r2, [pc, #716]	; (8003d74 <UART_SetConfig+0x32c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d004      	beq.n	8003ab4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	4baf      	ldr	r3, [pc, #700]	; (8003d78 <UART_SetConfig+0x330>)
 8003abc:	4013      	ands	r3, r2
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	6812      	ldr	r2, [r2, #0]
 8003ac2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ac4:	430b      	orrs	r3, r1
 8003ac6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	f023 010f 	bic.w	r1, r3, #15
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4aa6      	ldr	r2, [pc, #664]	; (8003d7c <UART_SetConfig+0x334>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d177      	bne.n	8003bd8 <UART_SetConfig+0x190>
 8003ae8:	4ba5      	ldr	r3, [pc, #660]	; (8003d80 <UART_SetConfig+0x338>)
 8003aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003af0:	2b28      	cmp	r3, #40	; 0x28
 8003af2:	d86d      	bhi.n	8003bd0 <UART_SetConfig+0x188>
 8003af4:	a201      	add	r2, pc, #4	; (adr r2, 8003afc <UART_SetConfig+0xb4>)
 8003af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afa:	bf00      	nop
 8003afc:	08003ba1 	.word	0x08003ba1
 8003b00:	08003bd1 	.word	0x08003bd1
 8003b04:	08003bd1 	.word	0x08003bd1
 8003b08:	08003bd1 	.word	0x08003bd1
 8003b0c:	08003bd1 	.word	0x08003bd1
 8003b10:	08003bd1 	.word	0x08003bd1
 8003b14:	08003bd1 	.word	0x08003bd1
 8003b18:	08003bd1 	.word	0x08003bd1
 8003b1c:	08003ba9 	.word	0x08003ba9
 8003b20:	08003bd1 	.word	0x08003bd1
 8003b24:	08003bd1 	.word	0x08003bd1
 8003b28:	08003bd1 	.word	0x08003bd1
 8003b2c:	08003bd1 	.word	0x08003bd1
 8003b30:	08003bd1 	.word	0x08003bd1
 8003b34:	08003bd1 	.word	0x08003bd1
 8003b38:	08003bd1 	.word	0x08003bd1
 8003b3c:	08003bb1 	.word	0x08003bb1
 8003b40:	08003bd1 	.word	0x08003bd1
 8003b44:	08003bd1 	.word	0x08003bd1
 8003b48:	08003bd1 	.word	0x08003bd1
 8003b4c:	08003bd1 	.word	0x08003bd1
 8003b50:	08003bd1 	.word	0x08003bd1
 8003b54:	08003bd1 	.word	0x08003bd1
 8003b58:	08003bd1 	.word	0x08003bd1
 8003b5c:	08003bb9 	.word	0x08003bb9
 8003b60:	08003bd1 	.word	0x08003bd1
 8003b64:	08003bd1 	.word	0x08003bd1
 8003b68:	08003bd1 	.word	0x08003bd1
 8003b6c:	08003bd1 	.word	0x08003bd1
 8003b70:	08003bd1 	.word	0x08003bd1
 8003b74:	08003bd1 	.word	0x08003bd1
 8003b78:	08003bd1 	.word	0x08003bd1
 8003b7c:	08003bc1 	.word	0x08003bc1
 8003b80:	08003bd1 	.word	0x08003bd1
 8003b84:	08003bd1 	.word	0x08003bd1
 8003b88:	08003bd1 	.word	0x08003bd1
 8003b8c:	08003bd1 	.word	0x08003bd1
 8003b90:	08003bd1 	.word	0x08003bd1
 8003b94:	08003bd1 	.word	0x08003bd1
 8003b98:	08003bd1 	.word	0x08003bd1
 8003b9c:	08003bc9 	.word	0x08003bc9
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ba6:	e222      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003ba8:	2304      	movs	r3, #4
 8003baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003bae:	e21e      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003bb0:	2308      	movs	r3, #8
 8003bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003bb6:	e21a      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003bb8:	2310      	movs	r3, #16
 8003bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003bbe:	e216      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003bc0:	2320      	movs	r3, #32
 8003bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003bc6:	e212      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003bc8:	2340      	movs	r3, #64	; 0x40
 8003bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003bce:	e20e      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003bd0:	2380      	movs	r3, #128	; 0x80
 8003bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003bd6:	e20a      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a69      	ldr	r2, [pc, #420]	; (8003d84 <UART_SetConfig+0x33c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d130      	bne.n	8003c44 <UART_SetConfig+0x1fc>
 8003be2:	4b67      	ldr	r3, [pc, #412]	; (8003d80 <UART_SetConfig+0x338>)
 8003be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	2b05      	cmp	r3, #5
 8003bec:	d826      	bhi.n	8003c3c <UART_SetConfig+0x1f4>
 8003bee:	a201      	add	r2, pc, #4	; (adr r2, 8003bf4 <UART_SetConfig+0x1ac>)
 8003bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf4:	08003c0d 	.word	0x08003c0d
 8003bf8:	08003c15 	.word	0x08003c15
 8003bfc:	08003c1d 	.word	0x08003c1d
 8003c00:	08003c25 	.word	0x08003c25
 8003c04:	08003c2d 	.word	0x08003c2d
 8003c08:	08003c35 	.word	0x08003c35
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c12:	e1ec      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003c14:	2304      	movs	r3, #4
 8003c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c1a:	e1e8      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003c1c:	2308      	movs	r3, #8
 8003c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c22:	e1e4      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003c24:	2310      	movs	r3, #16
 8003c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c2a:	e1e0      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003c2c:	2320      	movs	r3, #32
 8003c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c32:	e1dc      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003c34:	2340      	movs	r3, #64	; 0x40
 8003c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c3a:	e1d8      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003c3c:	2380      	movs	r3, #128	; 0x80
 8003c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c42:	e1d4      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a4f      	ldr	r2, [pc, #316]	; (8003d88 <UART_SetConfig+0x340>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d130      	bne.n	8003cb0 <UART_SetConfig+0x268>
 8003c4e:	4b4c      	ldr	r3, [pc, #304]	; (8003d80 <UART_SetConfig+0x338>)
 8003c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	2b05      	cmp	r3, #5
 8003c58:	d826      	bhi.n	8003ca8 <UART_SetConfig+0x260>
 8003c5a:	a201      	add	r2, pc, #4	; (adr r2, 8003c60 <UART_SetConfig+0x218>)
 8003c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c60:	08003c79 	.word	0x08003c79
 8003c64:	08003c81 	.word	0x08003c81
 8003c68:	08003c89 	.word	0x08003c89
 8003c6c:	08003c91 	.word	0x08003c91
 8003c70:	08003c99 	.word	0x08003c99
 8003c74:	08003ca1 	.word	0x08003ca1
 8003c78:	2300      	movs	r3, #0
 8003c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c7e:	e1b6      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003c80:	2304      	movs	r3, #4
 8003c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c86:	e1b2      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003c88:	2308      	movs	r3, #8
 8003c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c8e:	e1ae      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003c90:	2310      	movs	r3, #16
 8003c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c96:	e1aa      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003c98:	2320      	movs	r3, #32
 8003c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c9e:	e1a6      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003ca0:	2340      	movs	r3, #64	; 0x40
 8003ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ca6:	e1a2      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003ca8:	2380      	movs	r3, #128	; 0x80
 8003caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003cae:	e19e      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a35      	ldr	r2, [pc, #212]	; (8003d8c <UART_SetConfig+0x344>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d130      	bne.n	8003d1c <UART_SetConfig+0x2d4>
 8003cba:	4b31      	ldr	r3, [pc, #196]	; (8003d80 <UART_SetConfig+0x338>)
 8003cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	2b05      	cmp	r3, #5
 8003cc4:	d826      	bhi.n	8003d14 <UART_SetConfig+0x2cc>
 8003cc6:	a201      	add	r2, pc, #4	; (adr r2, 8003ccc <UART_SetConfig+0x284>)
 8003cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ccc:	08003ce5 	.word	0x08003ce5
 8003cd0:	08003ced 	.word	0x08003ced
 8003cd4:	08003cf5 	.word	0x08003cf5
 8003cd8:	08003cfd 	.word	0x08003cfd
 8003cdc:	08003d05 	.word	0x08003d05
 8003ce0:	08003d0d 	.word	0x08003d0d
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003cea:	e180      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003cec:	2304      	movs	r3, #4
 8003cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003cf2:	e17c      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003cf4:	2308      	movs	r3, #8
 8003cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003cfa:	e178      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003cfc:	2310      	movs	r3, #16
 8003cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d02:	e174      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003d04:	2320      	movs	r3, #32
 8003d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d0a:	e170      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003d0c:	2340      	movs	r3, #64	; 0x40
 8003d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d12:	e16c      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003d14:	2380      	movs	r3, #128	; 0x80
 8003d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d1a:	e168      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a1b      	ldr	r2, [pc, #108]	; (8003d90 <UART_SetConfig+0x348>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d142      	bne.n	8003dac <UART_SetConfig+0x364>
 8003d26:	4b16      	ldr	r3, [pc, #88]	; (8003d80 <UART_SetConfig+0x338>)
 8003d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	2b05      	cmp	r3, #5
 8003d30:	d838      	bhi.n	8003da4 <UART_SetConfig+0x35c>
 8003d32:	a201      	add	r2, pc, #4	; (adr r2, 8003d38 <UART_SetConfig+0x2f0>)
 8003d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d38:	08003d51 	.word	0x08003d51
 8003d3c:	08003d59 	.word	0x08003d59
 8003d40:	08003d61 	.word	0x08003d61
 8003d44:	08003d69 	.word	0x08003d69
 8003d48:	08003d95 	.word	0x08003d95
 8003d4c:	08003d9d 	.word	0x08003d9d
 8003d50:	2300      	movs	r3, #0
 8003d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d56:	e14a      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003d58:	2304      	movs	r3, #4
 8003d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d5e:	e146      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003d60:	2308      	movs	r3, #8
 8003d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d66:	e142      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003d68:	2310      	movs	r3, #16
 8003d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d6e:	e13e      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003d70:	cfff69f3 	.word	0xcfff69f3
 8003d74:	58000c00 	.word	0x58000c00
 8003d78:	11fff4ff 	.word	0x11fff4ff
 8003d7c:	40011000 	.word	0x40011000
 8003d80:	58024400 	.word	0x58024400
 8003d84:	40004400 	.word	0x40004400
 8003d88:	40004800 	.word	0x40004800
 8003d8c:	40004c00 	.word	0x40004c00
 8003d90:	40005000 	.word	0x40005000
 8003d94:	2320      	movs	r3, #32
 8003d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d9a:	e128      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003d9c:	2340      	movs	r3, #64	; 0x40
 8003d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003da2:	e124      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003da4:	2380      	movs	r3, #128	; 0x80
 8003da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003daa:	e120      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4acb      	ldr	r2, [pc, #812]	; (80040e0 <UART_SetConfig+0x698>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d176      	bne.n	8003ea4 <UART_SetConfig+0x45c>
 8003db6:	4bcb      	ldr	r3, [pc, #812]	; (80040e4 <UART_SetConfig+0x69c>)
 8003db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dbe:	2b28      	cmp	r3, #40	; 0x28
 8003dc0:	d86c      	bhi.n	8003e9c <UART_SetConfig+0x454>
 8003dc2:	a201      	add	r2, pc, #4	; (adr r2, 8003dc8 <UART_SetConfig+0x380>)
 8003dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc8:	08003e6d 	.word	0x08003e6d
 8003dcc:	08003e9d 	.word	0x08003e9d
 8003dd0:	08003e9d 	.word	0x08003e9d
 8003dd4:	08003e9d 	.word	0x08003e9d
 8003dd8:	08003e9d 	.word	0x08003e9d
 8003ddc:	08003e9d 	.word	0x08003e9d
 8003de0:	08003e9d 	.word	0x08003e9d
 8003de4:	08003e9d 	.word	0x08003e9d
 8003de8:	08003e75 	.word	0x08003e75
 8003dec:	08003e9d 	.word	0x08003e9d
 8003df0:	08003e9d 	.word	0x08003e9d
 8003df4:	08003e9d 	.word	0x08003e9d
 8003df8:	08003e9d 	.word	0x08003e9d
 8003dfc:	08003e9d 	.word	0x08003e9d
 8003e00:	08003e9d 	.word	0x08003e9d
 8003e04:	08003e9d 	.word	0x08003e9d
 8003e08:	08003e7d 	.word	0x08003e7d
 8003e0c:	08003e9d 	.word	0x08003e9d
 8003e10:	08003e9d 	.word	0x08003e9d
 8003e14:	08003e9d 	.word	0x08003e9d
 8003e18:	08003e9d 	.word	0x08003e9d
 8003e1c:	08003e9d 	.word	0x08003e9d
 8003e20:	08003e9d 	.word	0x08003e9d
 8003e24:	08003e9d 	.word	0x08003e9d
 8003e28:	08003e85 	.word	0x08003e85
 8003e2c:	08003e9d 	.word	0x08003e9d
 8003e30:	08003e9d 	.word	0x08003e9d
 8003e34:	08003e9d 	.word	0x08003e9d
 8003e38:	08003e9d 	.word	0x08003e9d
 8003e3c:	08003e9d 	.word	0x08003e9d
 8003e40:	08003e9d 	.word	0x08003e9d
 8003e44:	08003e9d 	.word	0x08003e9d
 8003e48:	08003e8d 	.word	0x08003e8d
 8003e4c:	08003e9d 	.word	0x08003e9d
 8003e50:	08003e9d 	.word	0x08003e9d
 8003e54:	08003e9d 	.word	0x08003e9d
 8003e58:	08003e9d 	.word	0x08003e9d
 8003e5c:	08003e9d 	.word	0x08003e9d
 8003e60:	08003e9d 	.word	0x08003e9d
 8003e64:	08003e9d 	.word	0x08003e9d
 8003e68:	08003e95 	.word	0x08003e95
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e72:	e0bc      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003e74:	2304      	movs	r3, #4
 8003e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e7a:	e0b8      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003e7c:	2308      	movs	r3, #8
 8003e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e82:	e0b4      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003e84:	2310      	movs	r3, #16
 8003e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e8a:	e0b0      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003e8c:	2320      	movs	r3, #32
 8003e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e92:	e0ac      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003e94:	2340      	movs	r3, #64	; 0x40
 8003e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e9a:	e0a8      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003e9c:	2380      	movs	r3, #128	; 0x80
 8003e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ea2:	e0a4      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a8f      	ldr	r2, [pc, #572]	; (80040e8 <UART_SetConfig+0x6a0>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d130      	bne.n	8003f10 <UART_SetConfig+0x4c8>
 8003eae:	4b8d      	ldr	r3, [pc, #564]	; (80040e4 <UART_SetConfig+0x69c>)
 8003eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	2b05      	cmp	r3, #5
 8003eb8:	d826      	bhi.n	8003f08 <UART_SetConfig+0x4c0>
 8003eba:	a201      	add	r2, pc, #4	; (adr r2, 8003ec0 <UART_SetConfig+0x478>)
 8003ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec0:	08003ed9 	.word	0x08003ed9
 8003ec4:	08003ee1 	.word	0x08003ee1
 8003ec8:	08003ee9 	.word	0x08003ee9
 8003ecc:	08003ef1 	.word	0x08003ef1
 8003ed0:	08003ef9 	.word	0x08003ef9
 8003ed4:	08003f01 	.word	0x08003f01
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ede:	e086      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003ee0:	2304      	movs	r3, #4
 8003ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ee6:	e082      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003ee8:	2308      	movs	r3, #8
 8003eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003eee:	e07e      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003ef0:	2310      	movs	r3, #16
 8003ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ef6:	e07a      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003ef8:	2320      	movs	r3, #32
 8003efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003efe:	e076      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003f00:	2340      	movs	r3, #64	; 0x40
 8003f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f06:	e072      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003f08:	2380      	movs	r3, #128	; 0x80
 8003f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f0e:	e06e      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a75      	ldr	r2, [pc, #468]	; (80040ec <UART_SetConfig+0x6a4>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d130      	bne.n	8003f7c <UART_SetConfig+0x534>
 8003f1a:	4b72      	ldr	r3, [pc, #456]	; (80040e4 <UART_SetConfig+0x69c>)
 8003f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	2b05      	cmp	r3, #5
 8003f24:	d826      	bhi.n	8003f74 <UART_SetConfig+0x52c>
 8003f26:	a201      	add	r2, pc, #4	; (adr r2, 8003f2c <UART_SetConfig+0x4e4>)
 8003f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2c:	08003f45 	.word	0x08003f45
 8003f30:	08003f4d 	.word	0x08003f4d
 8003f34:	08003f55 	.word	0x08003f55
 8003f38:	08003f5d 	.word	0x08003f5d
 8003f3c:	08003f65 	.word	0x08003f65
 8003f40:	08003f6d 	.word	0x08003f6d
 8003f44:	2300      	movs	r3, #0
 8003f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f4a:	e050      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003f4c:	2304      	movs	r3, #4
 8003f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f52:	e04c      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003f54:	2308      	movs	r3, #8
 8003f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f5a:	e048      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003f5c:	2310      	movs	r3, #16
 8003f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f62:	e044      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003f64:	2320      	movs	r3, #32
 8003f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f6a:	e040      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003f6c:	2340      	movs	r3, #64	; 0x40
 8003f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f72:	e03c      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003f74:	2380      	movs	r3, #128	; 0x80
 8003f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f7a:	e038      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a5b      	ldr	r2, [pc, #364]	; (80040f0 <UART_SetConfig+0x6a8>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d130      	bne.n	8003fe8 <UART_SetConfig+0x5a0>
 8003f86:	4b57      	ldr	r3, [pc, #348]	; (80040e4 <UART_SetConfig+0x69c>)
 8003f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	2b05      	cmp	r3, #5
 8003f90:	d826      	bhi.n	8003fe0 <UART_SetConfig+0x598>
 8003f92:	a201      	add	r2, pc, #4	; (adr r2, 8003f98 <UART_SetConfig+0x550>)
 8003f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f98:	08003fb1 	.word	0x08003fb1
 8003f9c:	08003fb9 	.word	0x08003fb9
 8003fa0:	08003fc1 	.word	0x08003fc1
 8003fa4:	08003fc9 	.word	0x08003fc9
 8003fa8:	08003fd1 	.word	0x08003fd1
 8003fac:	08003fd9 	.word	0x08003fd9
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fb6:	e01a      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003fb8:	2304      	movs	r3, #4
 8003fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fbe:	e016      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003fc0:	2308      	movs	r3, #8
 8003fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fc6:	e012      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003fc8:	2310      	movs	r3, #16
 8003fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fce:	e00e      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003fd0:	2320      	movs	r3, #32
 8003fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fd6:	e00a      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003fd8:	2340      	movs	r3, #64	; 0x40
 8003fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fde:	e006      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003fe0:	2380      	movs	r3, #128	; 0x80
 8003fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fe6:	e002      	b.n	8003fee <UART_SetConfig+0x5a6>
 8003fe8:	2380      	movs	r3, #128	; 0x80
 8003fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a3f      	ldr	r2, [pc, #252]	; (80040f0 <UART_SetConfig+0x6a8>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	f040 80f8 	bne.w	80041ea <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ffa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003ffe:	2b20      	cmp	r3, #32
 8004000:	dc46      	bgt.n	8004090 <UART_SetConfig+0x648>
 8004002:	2b02      	cmp	r3, #2
 8004004:	f2c0 8082 	blt.w	800410c <UART_SetConfig+0x6c4>
 8004008:	3b02      	subs	r3, #2
 800400a:	2b1e      	cmp	r3, #30
 800400c:	d87e      	bhi.n	800410c <UART_SetConfig+0x6c4>
 800400e:	a201      	add	r2, pc, #4	; (adr r2, 8004014 <UART_SetConfig+0x5cc>)
 8004010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004014:	08004097 	.word	0x08004097
 8004018:	0800410d 	.word	0x0800410d
 800401c:	0800409f 	.word	0x0800409f
 8004020:	0800410d 	.word	0x0800410d
 8004024:	0800410d 	.word	0x0800410d
 8004028:	0800410d 	.word	0x0800410d
 800402c:	080040af 	.word	0x080040af
 8004030:	0800410d 	.word	0x0800410d
 8004034:	0800410d 	.word	0x0800410d
 8004038:	0800410d 	.word	0x0800410d
 800403c:	0800410d 	.word	0x0800410d
 8004040:	0800410d 	.word	0x0800410d
 8004044:	0800410d 	.word	0x0800410d
 8004048:	0800410d 	.word	0x0800410d
 800404c:	080040bf 	.word	0x080040bf
 8004050:	0800410d 	.word	0x0800410d
 8004054:	0800410d 	.word	0x0800410d
 8004058:	0800410d 	.word	0x0800410d
 800405c:	0800410d 	.word	0x0800410d
 8004060:	0800410d 	.word	0x0800410d
 8004064:	0800410d 	.word	0x0800410d
 8004068:	0800410d 	.word	0x0800410d
 800406c:	0800410d 	.word	0x0800410d
 8004070:	0800410d 	.word	0x0800410d
 8004074:	0800410d 	.word	0x0800410d
 8004078:	0800410d 	.word	0x0800410d
 800407c:	0800410d 	.word	0x0800410d
 8004080:	0800410d 	.word	0x0800410d
 8004084:	0800410d 	.word	0x0800410d
 8004088:	0800410d 	.word	0x0800410d
 800408c:	080040ff 	.word	0x080040ff
 8004090:	2b40      	cmp	r3, #64	; 0x40
 8004092:	d037      	beq.n	8004104 <UART_SetConfig+0x6bc>
 8004094:	e03a      	b.n	800410c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004096:	f7ff f93b 	bl	8003310 <HAL_RCCEx_GetD3PCLK1Freq>
 800409a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800409c:	e03c      	b.n	8004118 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800409e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7ff f94a 	bl	800333c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80040a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80040ac:	e034      	b.n	8004118 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80040ae:	f107 0318 	add.w	r3, r7, #24
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7ff fa96 	bl	80035e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80040bc:	e02c      	b.n	8004118 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040be:	4b09      	ldr	r3, [pc, #36]	; (80040e4 <UART_SetConfig+0x69c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0320 	and.w	r3, r3, #32
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d016      	beq.n	80040f8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80040ca:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <UART_SetConfig+0x69c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	08db      	lsrs	r3, r3, #3
 80040d0:	f003 0303 	and.w	r3, r3, #3
 80040d4:	4a07      	ldr	r2, [pc, #28]	; (80040f4 <UART_SetConfig+0x6ac>)
 80040d6:	fa22 f303 	lsr.w	r3, r2, r3
 80040da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80040dc:	e01c      	b.n	8004118 <UART_SetConfig+0x6d0>
 80040de:	bf00      	nop
 80040e0:	40011400 	.word	0x40011400
 80040e4:	58024400 	.word	0x58024400
 80040e8:	40007800 	.word	0x40007800
 80040ec:	40007c00 	.word	0x40007c00
 80040f0:	58000c00 	.word	0x58000c00
 80040f4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80040f8:	4b9d      	ldr	r3, [pc, #628]	; (8004370 <UART_SetConfig+0x928>)
 80040fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80040fc:	e00c      	b.n	8004118 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80040fe:	4b9d      	ldr	r3, [pc, #628]	; (8004374 <UART_SetConfig+0x92c>)
 8004100:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004102:	e009      	b.n	8004118 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004104:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004108:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800410a:	e005      	b.n	8004118 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004116:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 81de 	beq.w	80044dc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	4a94      	ldr	r2, [pc, #592]	; (8004378 <UART_SetConfig+0x930>)
 8004126:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800412a:	461a      	mov	r2, r3
 800412c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800412e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004132:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	4613      	mov	r3, r2
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	4413      	add	r3, r2
 800413e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004140:	429a      	cmp	r2, r3
 8004142:	d305      	bcc.n	8004150 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800414a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800414c:	429a      	cmp	r2, r3
 800414e:	d903      	bls.n	8004158 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004156:	e1c1      	b.n	80044dc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800415a:	2200      	movs	r2, #0
 800415c:	60bb      	str	r3, [r7, #8]
 800415e:	60fa      	str	r2, [r7, #12]
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	4a84      	ldr	r2, [pc, #528]	; (8004378 <UART_SetConfig+0x930>)
 8004166:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800416a:	b29b      	uxth	r3, r3
 800416c:	2200      	movs	r2, #0
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	607a      	str	r2, [r7, #4]
 8004172:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004176:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800417a:	f7fc f8ad 	bl	80002d8 <__aeabi_uldivmod>
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	4610      	mov	r0, r2
 8004184:	4619      	mov	r1, r3
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	f04f 0300 	mov.w	r3, #0
 800418e:	020b      	lsls	r3, r1, #8
 8004190:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004194:	0202      	lsls	r2, r0, #8
 8004196:	6979      	ldr	r1, [r7, #20]
 8004198:	6849      	ldr	r1, [r1, #4]
 800419a:	0849      	lsrs	r1, r1, #1
 800419c:	2000      	movs	r0, #0
 800419e:	460c      	mov	r4, r1
 80041a0:	4605      	mov	r5, r0
 80041a2:	eb12 0804 	adds.w	r8, r2, r4
 80041a6:	eb43 0905 	adc.w	r9, r3, r5
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	469a      	mov	sl, r3
 80041b2:	4693      	mov	fp, r2
 80041b4:	4652      	mov	r2, sl
 80041b6:	465b      	mov	r3, fp
 80041b8:	4640      	mov	r0, r8
 80041ba:	4649      	mov	r1, r9
 80041bc:	f7fc f88c 	bl	80002d8 <__aeabi_uldivmod>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4613      	mov	r3, r2
 80041c6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041ce:	d308      	bcc.n	80041e2 <UART_SetConfig+0x79a>
 80041d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041d6:	d204      	bcs.n	80041e2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041de:	60da      	str	r2, [r3, #12]
 80041e0:	e17c      	b.n	80044dc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80041e8:	e178      	b.n	80044dc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041f2:	f040 80c5 	bne.w	8004380 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80041f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80041fa:	2b20      	cmp	r3, #32
 80041fc:	dc48      	bgt.n	8004290 <UART_SetConfig+0x848>
 80041fe:	2b00      	cmp	r3, #0
 8004200:	db7b      	blt.n	80042fa <UART_SetConfig+0x8b2>
 8004202:	2b20      	cmp	r3, #32
 8004204:	d879      	bhi.n	80042fa <UART_SetConfig+0x8b2>
 8004206:	a201      	add	r2, pc, #4	; (adr r2, 800420c <UART_SetConfig+0x7c4>)
 8004208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420c:	08004297 	.word	0x08004297
 8004210:	0800429f 	.word	0x0800429f
 8004214:	080042fb 	.word	0x080042fb
 8004218:	080042fb 	.word	0x080042fb
 800421c:	080042a7 	.word	0x080042a7
 8004220:	080042fb 	.word	0x080042fb
 8004224:	080042fb 	.word	0x080042fb
 8004228:	080042fb 	.word	0x080042fb
 800422c:	080042b7 	.word	0x080042b7
 8004230:	080042fb 	.word	0x080042fb
 8004234:	080042fb 	.word	0x080042fb
 8004238:	080042fb 	.word	0x080042fb
 800423c:	080042fb 	.word	0x080042fb
 8004240:	080042fb 	.word	0x080042fb
 8004244:	080042fb 	.word	0x080042fb
 8004248:	080042fb 	.word	0x080042fb
 800424c:	080042c7 	.word	0x080042c7
 8004250:	080042fb 	.word	0x080042fb
 8004254:	080042fb 	.word	0x080042fb
 8004258:	080042fb 	.word	0x080042fb
 800425c:	080042fb 	.word	0x080042fb
 8004260:	080042fb 	.word	0x080042fb
 8004264:	080042fb 	.word	0x080042fb
 8004268:	080042fb 	.word	0x080042fb
 800426c:	080042fb 	.word	0x080042fb
 8004270:	080042fb 	.word	0x080042fb
 8004274:	080042fb 	.word	0x080042fb
 8004278:	080042fb 	.word	0x080042fb
 800427c:	080042fb 	.word	0x080042fb
 8004280:	080042fb 	.word	0x080042fb
 8004284:	080042fb 	.word	0x080042fb
 8004288:	080042fb 	.word	0x080042fb
 800428c:	080042ed 	.word	0x080042ed
 8004290:	2b40      	cmp	r3, #64	; 0x40
 8004292:	d02e      	beq.n	80042f2 <UART_SetConfig+0x8aa>
 8004294:	e031      	b.n	80042fa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004296:	f7ff f80f 	bl	80032b8 <HAL_RCC_GetPCLK1Freq>
 800429a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800429c:	e033      	b.n	8004306 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800429e:	f7ff f821 	bl	80032e4 <HAL_RCC_GetPCLK2Freq>
 80042a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80042a4:	e02f      	b.n	8004306 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80042a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff f846 	bl	800333c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80042b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80042b4:	e027      	b.n	8004306 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80042b6:	f107 0318 	add.w	r3, r7, #24
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7ff f992 	bl	80035e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80042c4:	e01f      	b.n	8004306 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042c6:	4b2d      	ldr	r3, [pc, #180]	; (800437c <UART_SetConfig+0x934>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0320 	and.w	r3, r3, #32
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d009      	beq.n	80042e6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80042d2:	4b2a      	ldr	r3, [pc, #168]	; (800437c <UART_SetConfig+0x934>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	08db      	lsrs	r3, r3, #3
 80042d8:	f003 0303 	and.w	r3, r3, #3
 80042dc:	4a24      	ldr	r2, [pc, #144]	; (8004370 <UART_SetConfig+0x928>)
 80042de:	fa22 f303 	lsr.w	r3, r2, r3
 80042e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80042e4:	e00f      	b.n	8004306 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80042e6:	4b22      	ldr	r3, [pc, #136]	; (8004370 <UART_SetConfig+0x928>)
 80042e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80042ea:	e00c      	b.n	8004306 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80042ec:	4b21      	ldr	r3, [pc, #132]	; (8004374 <UART_SetConfig+0x92c>)
 80042ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80042f0:	e009      	b.n	8004306 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80042f8:	e005      	b.n	8004306 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004304:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 80e7 	beq.w	80044dc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	4a19      	ldr	r2, [pc, #100]	; (8004378 <UART_SetConfig+0x930>)
 8004314:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004318:	461a      	mov	r2, r3
 800431a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800431c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004320:	005a      	lsls	r2, r3, #1
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	085b      	lsrs	r3, r3, #1
 8004328:	441a      	add	r2, r3
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004332:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004336:	2b0f      	cmp	r3, #15
 8004338:	d916      	bls.n	8004368 <UART_SetConfig+0x920>
 800433a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004340:	d212      	bcs.n	8004368 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004344:	b29b      	uxth	r3, r3
 8004346:	f023 030f 	bic.w	r3, r3, #15
 800434a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800434c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434e:	085b      	lsrs	r3, r3, #1
 8004350:	b29b      	uxth	r3, r3
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	b29a      	uxth	r2, r3
 8004358:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800435a:	4313      	orrs	r3, r2
 800435c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004364:	60da      	str	r2, [r3, #12]
 8004366:	e0b9      	b.n	80044dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800436e:	e0b5      	b.n	80044dc <UART_SetConfig+0xa94>
 8004370:	03d09000 	.word	0x03d09000
 8004374:	003d0900 	.word	0x003d0900
 8004378:	08005458 	.word	0x08005458
 800437c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004380:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004384:	2b20      	cmp	r3, #32
 8004386:	dc49      	bgt.n	800441c <UART_SetConfig+0x9d4>
 8004388:	2b00      	cmp	r3, #0
 800438a:	db7c      	blt.n	8004486 <UART_SetConfig+0xa3e>
 800438c:	2b20      	cmp	r3, #32
 800438e:	d87a      	bhi.n	8004486 <UART_SetConfig+0xa3e>
 8004390:	a201      	add	r2, pc, #4	; (adr r2, 8004398 <UART_SetConfig+0x950>)
 8004392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004396:	bf00      	nop
 8004398:	08004423 	.word	0x08004423
 800439c:	0800442b 	.word	0x0800442b
 80043a0:	08004487 	.word	0x08004487
 80043a4:	08004487 	.word	0x08004487
 80043a8:	08004433 	.word	0x08004433
 80043ac:	08004487 	.word	0x08004487
 80043b0:	08004487 	.word	0x08004487
 80043b4:	08004487 	.word	0x08004487
 80043b8:	08004443 	.word	0x08004443
 80043bc:	08004487 	.word	0x08004487
 80043c0:	08004487 	.word	0x08004487
 80043c4:	08004487 	.word	0x08004487
 80043c8:	08004487 	.word	0x08004487
 80043cc:	08004487 	.word	0x08004487
 80043d0:	08004487 	.word	0x08004487
 80043d4:	08004487 	.word	0x08004487
 80043d8:	08004453 	.word	0x08004453
 80043dc:	08004487 	.word	0x08004487
 80043e0:	08004487 	.word	0x08004487
 80043e4:	08004487 	.word	0x08004487
 80043e8:	08004487 	.word	0x08004487
 80043ec:	08004487 	.word	0x08004487
 80043f0:	08004487 	.word	0x08004487
 80043f4:	08004487 	.word	0x08004487
 80043f8:	08004487 	.word	0x08004487
 80043fc:	08004487 	.word	0x08004487
 8004400:	08004487 	.word	0x08004487
 8004404:	08004487 	.word	0x08004487
 8004408:	08004487 	.word	0x08004487
 800440c:	08004487 	.word	0x08004487
 8004410:	08004487 	.word	0x08004487
 8004414:	08004487 	.word	0x08004487
 8004418:	08004479 	.word	0x08004479
 800441c:	2b40      	cmp	r3, #64	; 0x40
 800441e:	d02e      	beq.n	800447e <UART_SetConfig+0xa36>
 8004420:	e031      	b.n	8004486 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004422:	f7fe ff49 	bl	80032b8 <HAL_RCC_GetPCLK1Freq>
 8004426:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004428:	e033      	b.n	8004492 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800442a:	f7fe ff5b 	bl	80032e4 <HAL_RCC_GetPCLK2Freq>
 800442e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004430:	e02f      	b.n	8004492 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004436:	4618      	mov	r0, r3
 8004438:	f7fe ff80 	bl	800333c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800443c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004440:	e027      	b.n	8004492 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004442:	f107 0318 	add.w	r3, r7, #24
 8004446:	4618      	mov	r0, r3
 8004448:	f7ff f8cc 	bl	80035e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004450:	e01f      	b.n	8004492 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004452:	4b2d      	ldr	r3, [pc, #180]	; (8004508 <UART_SetConfig+0xac0>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0320 	and.w	r3, r3, #32
 800445a:	2b00      	cmp	r3, #0
 800445c:	d009      	beq.n	8004472 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800445e:	4b2a      	ldr	r3, [pc, #168]	; (8004508 <UART_SetConfig+0xac0>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	08db      	lsrs	r3, r3, #3
 8004464:	f003 0303 	and.w	r3, r3, #3
 8004468:	4a28      	ldr	r2, [pc, #160]	; (800450c <UART_SetConfig+0xac4>)
 800446a:	fa22 f303 	lsr.w	r3, r2, r3
 800446e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004470:	e00f      	b.n	8004492 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004472:	4b26      	ldr	r3, [pc, #152]	; (800450c <UART_SetConfig+0xac4>)
 8004474:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004476:	e00c      	b.n	8004492 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004478:	4b25      	ldr	r3, [pc, #148]	; (8004510 <UART_SetConfig+0xac8>)
 800447a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800447c:	e009      	b.n	8004492 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800447e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004484:	e005      	b.n	8004492 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004486:	2300      	movs	r3, #0
 8004488:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004490:	bf00      	nop
    }

    if (pclk != 0U)
 8004492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004494:	2b00      	cmp	r3, #0
 8004496:	d021      	beq.n	80044dc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	4a1d      	ldr	r2, [pc, #116]	; (8004514 <UART_SetConfig+0xacc>)
 800449e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044a2:	461a      	mov	r2, r3
 80044a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	085b      	lsrs	r3, r3, #1
 80044b0:	441a      	add	r2, r3
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ba:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044be:	2b0f      	cmp	r3, #15
 80044c0:	d909      	bls.n	80044d6 <UART_SetConfig+0xa8e>
 80044c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c8:	d205      	bcs.n	80044d6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	60da      	str	r2, [r3, #12]
 80044d4:	e002      	b.n	80044dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	2201      	movs	r2, #1
 80044e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	2200      	movs	r2, #0
 80044f0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2200      	movs	r2, #0
 80044f6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80044f8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3748      	adds	r7, #72	; 0x48
 8004500:	46bd      	mov	sp, r7
 8004502:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004506:	bf00      	nop
 8004508:	58024400 	.word	0x58024400
 800450c:	03d09000 	.word	0x03d09000
 8004510:	003d0900 	.word	0x003d0900
 8004514:	08005458 	.word	0x08005458

08004518 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00a      	beq.n	8004542 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00a      	beq.n	8004586 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00a      	beq.n	80045a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ac:	f003 0310 	and.w	r3, r3, #16
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00a      	beq.n	80045ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ce:	f003 0320 	and.w	r3, r3, #32
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00a      	beq.n	80045ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d01a      	beq.n	800462e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004612:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004616:	d10a      	bne.n	800462e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	605a      	str	r2, [r3, #4]
  }
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b098      	sub	sp, #96	; 0x60
 8004660:	af02      	add	r7, sp, #8
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800466c:	f7fc fb44 	bl	8000cf8 <HAL_GetTick>
 8004670:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0308 	and.w	r3, r3, #8
 800467c:	2b08      	cmp	r3, #8
 800467e:	d12f      	bne.n	80046e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004680:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004688:	2200      	movs	r2, #0
 800468a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f88e 	bl	80047b0 <UART_WaitOnFlagUntilTimeout>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d022      	beq.n	80046e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a2:	e853 3f00 	ldrex	r3, [r3]
 80046a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046ae:	653b      	str	r3, [r7, #80]	; 0x50
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	461a      	mov	r2, r3
 80046b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046b8:	647b      	str	r3, [r7, #68]	; 0x44
 80046ba:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046c0:	e841 2300 	strex	r3, r2, [r1]
 80046c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1e6      	bne.n	800469a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2220      	movs	r2, #32
 80046d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e063      	b.n	80047a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d149      	bne.n	8004782 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046f6:	2200      	movs	r2, #0
 80046f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f857 	bl	80047b0 <UART_WaitOnFlagUntilTimeout>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d03c      	beq.n	8004782 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	e853 3f00 	ldrex	r3, [r3]
 8004714:	623b      	str	r3, [r7, #32]
   return(result);
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800471c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	461a      	mov	r2, r3
 8004724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004726:	633b      	str	r3, [r7, #48]	; 0x30
 8004728:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800472c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800472e:	e841 2300 	strex	r3, r2, [r1]
 8004732:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1e6      	bne.n	8004708 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	3308      	adds	r3, #8
 8004740:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	e853 3f00 	ldrex	r3, [r3]
 8004748:	60fb      	str	r3, [r7, #12]
   return(result);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f023 0301 	bic.w	r3, r3, #1
 8004750:	64bb      	str	r3, [r7, #72]	; 0x48
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	3308      	adds	r3, #8
 8004758:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800475a:	61fa      	str	r2, [r7, #28]
 800475c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475e:	69b9      	ldr	r1, [r7, #24]
 8004760:	69fa      	ldr	r2, [r7, #28]
 8004762:	e841 2300 	strex	r3, r2, [r1]
 8004766:	617b      	str	r3, [r7, #20]
   return(result);
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1e5      	bne.n	800473a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2220      	movs	r2, #32
 8004772:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e012      	b.n	80047a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2220      	movs	r2, #32
 8004786:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2220      	movs	r2, #32
 800478e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3758      	adds	r7, #88	; 0x58
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	603b      	str	r3, [r7, #0]
 80047bc:	4613      	mov	r3, r2
 80047be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c0:	e049      	b.n	8004856 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047c8:	d045      	beq.n	8004856 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ca:	f7fc fa95 	bl	8000cf8 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d302      	bcc.n	80047e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e048      	b.n	8004876 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0304 	and.w	r3, r3, #4
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d031      	beq.n	8004856 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	69db      	ldr	r3, [r3, #28]
 80047f8:	f003 0308 	and.w	r3, r3, #8
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d110      	bne.n	8004822 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2208      	movs	r2, #8
 8004806:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 f839 	bl	8004880 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2208      	movs	r2, #8
 8004812:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e029      	b.n	8004876 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800482c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004830:	d111      	bne.n	8004856 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800483a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 f81f 	bl	8004880 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2220      	movs	r2, #32
 8004846:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e00f      	b.n	8004876 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	69da      	ldr	r2, [r3, #28]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	4013      	ands	r3, r2
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	429a      	cmp	r2, r3
 8004864:	bf0c      	ite	eq
 8004866:	2301      	moveq	r3, #1
 8004868:	2300      	movne	r3, #0
 800486a:	b2db      	uxtb	r3, r3
 800486c:	461a      	mov	r2, r3
 800486e:	79fb      	ldrb	r3, [r7, #7]
 8004870:	429a      	cmp	r2, r3
 8004872:	d0a6      	beq.n	80047c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
	...

08004880 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004880:	b480      	push	{r7}
 8004882:	b095      	sub	sp, #84	; 0x54
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004890:	e853 3f00 	ldrex	r3, [r3]
 8004894:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004898:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800489c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	461a      	mov	r2, r3
 80048a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048a6:	643b      	str	r3, [r7, #64]	; 0x40
 80048a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048ae:	e841 2300 	strex	r3, r2, [r1]
 80048b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1e6      	bne.n	8004888 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	3308      	adds	r3, #8
 80048c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c2:	6a3b      	ldr	r3, [r7, #32]
 80048c4:	e853 3f00 	ldrex	r3, [r3]
 80048c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80048ca:	69fa      	ldr	r2, [r7, #28]
 80048cc:	4b1e      	ldr	r3, [pc, #120]	; (8004948 <UART_EndRxTransfer+0xc8>)
 80048ce:	4013      	ands	r3, r2
 80048d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	3308      	adds	r3, #8
 80048d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048e2:	e841 2300 	strex	r3, r2, [r1]
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1e5      	bne.n	80048ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d118      	bne.n	8004928 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	e853 3f00 	ldrex	r3, [r3]
 8004902:	60bb      	str	r3, [r7, #8]
   return(result);
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	f023 0310 	bic.w	r3, r3, #16
 800490a:	647b      	str	r3, [r7, #68]	; 0x44
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	461a      	mov	r2, r3
 8004912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004914:	61bb      	str	r3, [r7, #24]
 8004916:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004918:	6979      	ldr	r1, [r7, #20]
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	e841 2300 	strex	r3, r2, [r1]
 8004920:	613b      	str	r3, [r7, #16]
   return(result);
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1e6      	bne.n	80048f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2220      	movs	r2, #32
 800492c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800493c:	bf00      	nop
 800493e:	3754      	adds	r7, #84	; 0x54
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	effffffe 	.word	0xeffffffe

0800494c <std>:
 800494c:	2300      	movs	r3, #0
 800494e:	b510      	push	{r4, lr}
 8004950:	4604      	mov	r4, r0
 8004952:	e9c0 3300 	strd	r3, r3, [r0]
 8004956:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800495a:	6083      	str	r3, [r0, #8]
 800495c:	8181      	strh	r1, [r0, #12]
 800495e:	6643      	str	r3, [r0, #100]	; 0x64
 8004960:	81c2      	strh	r2, [r0, #14]
 8004962:	6183      	str	r3, [r0, #24]
 8004964:	4619      	mov	r1, r3
 8004966:	2208      	movs	r2, #8
 8004968:	305c      	adds	r0, #92	; 0x5c
 800496a:	f000 fa9b 	bl	8004ea4 <memset>
 800496e:	4b0d      	ldr	r3, [pc, #52]	; (80049a4 <std+0x58>)
 8004970:	6263      	str	r3, [r4, #36]	; 0x24
 8004972:	4b0d      	ldr	r3, [pc, #52]	; (80049a8 <std+0x5c>)
 8004974:	62a3      	str	r3, [r4, #40]	; 0x28
 8004976:	4b0d      	ldr	r3, [pc, #52]	; (80049ac <std+0x60>)
 8004978:	62e3      	str	r3, [r4, #44]	; 0x2c
 800497a:	4b0d      	ldr	r3, [pc, #52]	; (80049b0 <std+0x64>)
 800497c:	6323      	str	r3, [r4, #48]	; 0x30
 800497e:	4b0d      	ldr	r3, [pc, #52]	; (80049b4 <std+0x68>)
 8004980:	6224      	str	r4, [r4, #32]
 8004982:	429c      	cmp	r4, r3
 8004984:	d006      	beq.n	8004994 <std+0x48>
 8004986:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800498a:	4294      	cmp	r4, r2
 800498c:	d002      	beq.n	8004994 <std+0x48>
 800498e:	33d0      	adds	r3, #208	; 0xd0
 8004990:	429c      	cmp	r4, r3
 8004992:	d105      	bne.n	80049a0 <std+0x54>
 8004994:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800499c:	f000 bafa 	b.w	8004f94 <__retarget_lock_init_recursive>
 80049a0:	bd10      	pop	{r4, pc}
 80049a2:	bf00      	nop
 80049a4:	08004cf5 	.word	0x08004cf5
 80049a8:	08004d17 	.word	0x08004d17
 80049ac:	08004d4f 	.word	0x08004d4f
 80049b0:	08004d73 	.word	0x08004d73
 80049b4:	240001c0 	.word	0x240001c0

080049b8 <stdio_exit_handler>:
 80049b8:	4a02      	ldr	r2, [pc, #8]	; (80049c4 <stdio_exit_handler+0xc>)
 80049ba:	4903      	ldr	r1, [pc, #12]	; (80049c8 <stdio_exit_handler+0x10>)
 80049bc:	4803      	ldr	r0, [pc, #12]	; (80049cc <stdio_exit_handler+0x14>)
 80049be:	f000 b869 	b.w	8004a94 <_fwalk_sglue>
 80049c2:	bf00      	nop
 80049c4:	24000010 	.word	0x24000010
 80049c8:	080052a9 	.word	0x080052a9
 80049cc:	2400001c 	.word	0x2400001c

080049d0 <cleanup_stdio>:
 80049d0:	6841      	ldr	r1, [r0, #4]
 80049d2:	4b0c      	ldr	r3, [pc, #48]	; (8004a04 <cleanup_stdio+0x34>)
 80049d4:	4299      	cmp	r1, r3
 80049d6:	b510      	push	{r4, lr}
 80049d8:	4604      	mov	r4, r0
 80049da:	d001      	beq.n	80049e0 <cleanup_stdio+0x10>
 80049dc:	f000 fc64 	bl	80052a8 <_fflush_r>
 80049e0:	68a1      	ldr	r1, [r4, #8]
 80049e2:	4b09      	ldr	r3, [pc, #36]	; (8004a08 <cleanup_stdio+0x38>)
 80049e4:	4299      	cmp	r1, r3
 80049e6:	d002      	beq.n	80049ee <cleanup_stdio+0x1e>
 80049e8:	4620      	mov	r0, r4
 80049ea:	f000 fc5d 	bl	80052a8 <_fflush_r>
 80049ee:	68e1      	ldr	r1, [r4, #12]
 80049f0:	4b06      	ldr	r3, [pc, #24]	; (8004a0c <cleanup_stdio+0x3c>)
 80049f2:	4299      	cmp	r1, r3
 80049f4:	d004      	beq.n	8004a00 <cleanup_stdio+0x30>
 80049f6:	4620      	mov	r0, r4
 80049f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049fc:	f000 bc54 	b.w	80052a8 <_fflush_r>
 8004a00:	bd10      	pop	{r4, pc}
 8004a02:	bf00      	nop
 8004a04:	240001c0 	.word	0x240001c0
 8004a08:	24000228 	.word	0x24000228
 8004a0c:	24000290 	.word	0x24000290

08004a10 <global_stdio_init.part.0>:
 8004a10:	b510      	push	{r4, lr}
 8004a12:	4b0b      	ldr	r3, [pc, #44]	; (8004a40 <global_stdio_init.part.0+0x30>)
 8004a14:	4c0b      	ldr	r4, [pc, #44]	; (8004a44 <global_stdio_init.part.0+0x34>)
 8004a16:	4a0c      	ldr	r2, [pc, #48]	; (8004a48 <global_stdio_init.part.0+0x38>)
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2104      	movs	r1, #4
 8004a20:	f7ff ff94 	bl	800494c <std>
 8004a24:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004a28:	2201      	movs	r2, #1
 8004a2a:	2109      	movs	r1, #9
 8004a2c:	f7ff ff8e 	bl	800494c <std>
 8004a30:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004a34:	2202      	movs	r2, #2
 8004a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a3a:	2112      	movs	r1, #18
 8004a3c:	f7ff bf86 	b.w	800494c <std>
 8004a40:	240002f8 	.word	0x240002f8
 8004a44:	240001c0 	.word	0x240001c0
 8004a48:	080049b9 	.word	0x080049b9

08004a4c <__sfp_lock_acquire>:
 8004a4c:	4801      	ldr	r0, [pc, #4]	; (8004a54 <__sfp_lock_acquire+0x8>)
 8004a4e:	f000 baa2 	b.w	8004f96 <__retarget_lock_acquire_recursive>
 8004a52:	bf00      	nop
 8004a54:	24000301 	.word	0x24000301

08004a58 <__sfp_lock_release>:
 8004a58:	4801      	ldr	r0, [pc, #4]	; (8004a60 <__sfp_lock_release+0x8>)
 8004a5a:	f000 ba9d 	b.w	8004f98 <__retarget_lock_release_recursive>
 8004a5e:	bf00      	nop
 8004a60:	24000301 	.word	0x24000301

08004a64 <__sinit>:
 8004a64:	b510      	push	{r4, lr}
 8004a66:	4604      	mov	r4, r0
 8004a68:	f7ff fff0 	bl	8004a4c <__sfp_lock_acquire>
 8004a6c:	6a23      	ldr	r3, [r4, #32]
 8004a6e:	b11b      	cbz	r3, 8004a78 <__sinit+0x14>
 8004a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a74:	f7ff bff0 	b.w	8004a58 <__sfp_lock_release>
 8004a78:	4b04      	ldr	r3, [pc, #16]	; (8004a8c <__sinit+0x28>)
 8004a7a:	6223      	str	r3, [r4, #32]
 8004a7c:	4b04      	ldr	r3, [pc, #16]	; (8004a90 <__sinit+0x2c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1f5      	bne.n	8004a70 <__sinit+0xc>
 8004a84:	f7ff ffc4 	bl	8004a10 <global_stdio_init.part.0>
 8004a88:	e7f2      	b.n	8004a70 <__sinit+0xc>
 8004a8a:	bf00      	nop
 8004a8c:	080049d1 	.word	0x080049d1
 8004a90:	240002f8 	.word	0x240002f8

08004a94 <_fwalk_sglue>:
 8004a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a98:	4607      	mov	r7, r0
 8004a9a:	4688      	mov	r8, r1
 8004a9c:	4614      	mov	r4, r2
 8004a9e:	2600      	movs	r6, #0
 8004aa0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004aa4:	f1b9 0901 	subs.w	r9, r9, #1
 8004aa8:	d505      	bpl.n	8004ab6 <_fwalk_sglue+0x22>
 8004aaa:	6824      	ldr	r4, [r4, #0]
 8004aac:	2c00      	cmp	r4, #0
 8004aae:	d1f7      	bne.n	8004aa0 <_fwalk_sglue+0xc>
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ab6:	89ab      	ldrh	r3, [r5, #12]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d907      	bls.n	8004acc <_fwalk_sglue+0x38>
 8004abc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	d003      	beq.n	8004acc <_fwalk_sglue+0x38>
 8004ac4:	4629      	mov	r1, r5
 8004ac6:	4638      	mov	r0, r7
 8004ac8:	47c0      	blx	r8
 8004aca:	4306      	orrs	r6, r0
 8004acc:	3568      	adds	r5, #104	; 0x68
 8004ace:	e7e9      	b.n	8004aa4 <_fwalk_sglue+0x10>

08004ad0 <_puts_r>:
 8004ad0:	6a03      	ldr	r3, [r0, #32]
 8004ad2:	b570      	push	{r4, r5, r6, lr}
 8004ad4:	6884      	ldr	r4, [r0, #8]
 8004ad6:	4605      	mov	r5, r0
 8004ad8:	460e      	mov	r6, r1
 8004ada:	b90b      	cbnz	r3, 8004ae0 <_puts_r+0x10>
 8004adc:	f7ff ffc2 	bl	8004a64 <__sinit>
 8004ae0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ae2:	07db      	lsls	r3, r3, #31
 8004ae4:	d405      	bmi.n	8004af2 <_puts_r+0x22>
 8004ae6:	89a3      	ldrh	r3, [r4, #12]
 8004ae8:	0598      	lsls	r0, r3, #22
 8004aea:	d402      	bmi.n	8004af2 <_puts_r+0x22>
 8004aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004aee:	f000 fa52 	bl	8004f96 <__retarget_lock_acquire_recursive>
 8004af2:	89a3      	ldrh	r3, [r4, #12]
 8004af4:	0719      	lsls	r1, r3, #28
 8004af6:	d513      	bpl.n	8004b20 <_puts_r+0x50>
 8004af8:	6923      	ldr	r3, [r4, #16]
 8004afa:	b18b      	cbz	r3, 8004b20 <_puts_r+0x50>
 8004afc:	3e01      	subs	r6, #1
 8004afe:	68a3      	ldr	r3, [r4, #8]
 8004b00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b04:	3b01      	subs	r3, #1
 8004b06:	60a3      	str	r3, [r4, #8]
 8004b08:	b9e9      	cbnz	r1, 8004b46 <_puts_r+0x76>
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	da2e      	bge.n	8004b6c <_puts_r+0x9c>
 8004b0e:	4622      	mov	r2, r4
 8004b10:	210a      	movs	r1, #10
 8004b12:	4628      	mov	r0, r5
 8004b14:	f000 f931 	bl	8004d7a <__swbuf_r>
 8004b18:	3001      	adds	r0, #1
 8004b1a:	d007      	beq.n	8004b2c <_puts_r+0x5c>
 8004b1c:	250a      	movs	r5, #10
 8004b1e:	e007      	b.n	8004b30 <_puts_r+0x60>
 8004b20:	4621      	mov	r1, r4
 8004b22:	4628      	mov	r0, r5
 8004b24:	f000 f966 	bl	8004df4 <__swsetup_r>
 8004b28:	2800      	cmp	r0, #0
 8004b2a:	d0e7      	beq.n	8004afc <_puts_r+0x2c>
 8004b2c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004b30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b32:	07da      	lsls	r2, r3, #31
 8004b34:	d405      	bmi.n	8004b42 <_puts_r+0x72>
 8004b36:	89a3      	ldrh	r3, [r4, #12]
 8004b38:	059b      	lsls	r3, r3, #22
 8004b3a:	d402      	bmi.n	8004b42 <_puts_r+0x72>
 8004b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b3e:	f000 fa2b 	bl	8004f98 <__retarget_lock_release_recursive>
 8004b42:	4628      	mov	r0, r5
 8004b44:	bd70      	pop	{r4, r5, r6, pc}
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	da04      	bge.n	8004b54 <_puts_r+0x84>
 8004b4a:	69a2      	ldr	r2, [r4, #24]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	dc06      	bgt.n	8004b5e <_puts_r+0x8e>
 8004b50:	290a      	cmp	r1, #10
 8004b52:	d004      	beq.n	8004b5e <_puts_r+0x8e>
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	6022      	str	r2, [r4, #0]
 8004b5a:	7019      	strb	r1, [r3, #0]
 8004b5c:	e7cf      	b.n	8004afe <_puts_r+0x2e>
 8004b5e:	4622      	mov	r2, r4
 8004b60:	4628      	mov	r0, r5
 8004b62:	f000 f90a 	bl	8004d7a <__swbuf_r>
 8004b66:	3001      	adds	r0, #1
 8004b68:	d1c9      	bne.n	8004afe <_puts_r+0x2e>
 8004b6a:	e7df      	b.n	8004b2c <_puts_r+0x5c>
 8004b6c:	6823      	ldr	r3, [r4, #0]
 8004b6e:	250a      	movs	r5, #10
 8004b70:	1c5a      	adds	r2, r3, #1
 8004b72:	6022      	str	r2, [r4, #0]
 8004b74:	701d      	strb	r5, [r3, #0]
 8004b76:	e7db      	b.n	8004b30 <_puts_r+0x60>

08004b78 <puts>:
 8004b78:	4b02      	ldr	r3, [pc, #8]	; (8004b84 <puts+0xc>)
 8004b7a:	4601      	mov	r1, r0
 8004b7c:	6818      	ldr	r0, [r3, #0]
 8004b7e:	f7ff bfa7 	b.w	8004ad0 <_puts_r>
 8004b82:	bf00      	nop
 8004b84:	24000068 	.word	0x24000068

08004b88 <setbuf>:
 8004b88:	fab1 f281 	clz	r2, r1
 8004b8c:	0952      	lsrs	r2, r2, #5
 8004b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b92:	0052      	lsls	r2, r2, #1
 8004b94:	f000 b800 	b.w	8004b98 <setvbuf>

08004b98 <setvbuf>:
 8004b98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004b9c:	461d      	mov	r5, r3
 8004b9e:	4b54      	ldr	r3, [pc, #336]	; (8004cf0 <setvbuf+0x158>)
 8004ba0:	681f      	ldr	r7, [r3, #0]
 8004ba2:	4604      	mov	r4, r0
 8004ba4:	460e      	mov	r6, r1
 8004ba6:	4690      	mov	r8, r2
 8004ba8:	b127      	cbz	r7, 8004bb4 <setvbuf+0x1c>
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	b913      	cbnz	r3, 8004bb4 <setvbuf+0x1c>
 8004bae:	4638      	mov	r0, r7
 8004bb0:	f7ff ff58 	bl	8004a64 <__sinit>
 8004bb4:	f1b8 0f02 	cmp.w	r8, #2
 8004bb8:	d006      	beq.n	8004bc8 <setvbuf+0x30>
 8004bba:	f1b8 0f01 	cmp.w	r8, #1
 8004bbe:	f200 8094 	bhi.w	8004cea <setvbuf+0x152>
 8004bc2:	2d00      	cmp	r5, #0
 8004bc4:	f2c0 8091 	blt.w	8004cea <setvbuf+0x152>
 8004bc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bca:	07da      	lsls	r2, r3, #31
 8004bcc:	d405      	bmi.n	8004bda <setvbuf+0x42>
 8004bce:	89a3      	ldrh	r3, [r4, #12]
 8004bd0:	059b      	lsls	r3, r3, #22
 8004bd2:	d402      	bmi.n	8004bda <setvbuf+0x42>
 8004bd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bd6:	f000 f9de 	bl	8004f96 <__retarget_lock_acquire_recursive>
 8004bda:	4621      	mov	r1, r4
 8004bdc:	4638      	mov	r0, r7
 8004bde:	f000 fb63 	bl	80052a8 <_fflush_r>
 8004be2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004be4:	b141      	cbz	r1, 8004bf8 <setvbuf+0x60>
 8004be6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bea:	4299      	cmp	r1, r3
 8004bec:	d002      	beq.n	8004bf4 <setvbuf+0x5c>
 8004bee:	4638      	mov	r0, r7
 8004bf0:	f000 f9d4 	bl	8004f9c <_free_r>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	6363      	str	r3, [r4, #52]	; 0x34
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	61a3      	str	r3, [r4, #24]
 8004bfc:	6063      	str	r3, [r4, #4]
 8004bfe:	89a3      	ldrh	r3, [r4, #12]
 8004c00:	0618      	lsls	r0, r3, #24
 8004c02:	d503      	bpl.n	8004c0c <setvbuf+0x74>
 8004c04:	6921      	ldr	r1, [r4, #16]
 8004c06:	4638      	mov	r0, r7
 8004c08:	f000 f9c8 	bl	8004f9c <_free_r>
 8004c0c:	89a3      	ldrh	r3, [r4, #12]
 8004c0e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004c12:	f023 0303 	bic.w	r3, r3, #3
 8004c16:	f1b8 0f02 	cmp.w	r8, #2
 8004c1a:	81a3      	strh	r3, [r4, #12]
 8004c1c:	d05f      	beq.n	8004cde <setvbuf+0x146>
 8004c1e:	ab01      	add	r3, sp, #4
 8004c20:	466a      	mov	r2, sp
 8004c22:	4621      	mov	r1, r4
 8004c24:	4638      	mov	r0, r7
 8004c26:	f000 fb67 	bl	80052f8 <__swhatbuf_r>
 8004c2a:	89a3      	ldrh	r3, [r4, #12]
 8004c2c:	4318      	orrs	r0, r3
 8004c2e:	81a0      	strh	r0, [r4, #12]
 8004c30:	bb2d      	cbnz	r5, 8004c7e <setvbuf+0xe6>
 8004c32:	9d00      	ldr	r5, [sp, #0]
 8004c34:	4628      	mov	r0, r5
 8004c36:	f000 f9fd 	bl	8005034 <malloc>
 8004c3a:	4606      	mov	r6, r0
 8004c3c:	2800      	cmp	r0, #0
 8004c3e:	d150      	bne.n	8004ce2 <setvbuf+0x14a>
 8004c40:	f8dd 9000 	ldr.w	r9, [sp]
 8004c44:	45a9      	cmp	r9, r5
 8004c46:	d13e      	bne.n	8004cc6 <setvbuf+0x12e>
 8004c48:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	60a2      	str	r2, [r4, #8]
 8004c50:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004c54:	6022      	str	r2, [r4, #0]
 8004c56:	6122      	str	r2, [r4, #16]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c5e:	6162      	str	r2, [r4, #20]
 8004c60:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c62:	f043 0302 	orr.w	r3, r3, #2
 8004c66:	07d1      	lsls	r1, r2, #31
 8004c68:	81a3      	strh	r3, [r4, #12]
 8004c6a:	d404      	bmi.n	8004c76 <setvbuf+0xde>
 8004c6c:	059b      	lsls	r3, r3, #22
 8004c6e:	d402      	bmi.n	8004c76 <setvbuf+0xde>
 8004c70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c72:	f000 f991 	bl	8004f98 <__retarget_lock_release_recursive>
 8004c76:	4628      	mov	r0, r5
 8004c78:	b003      	add	sp, #12
 8004c7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c7e:	2e00      	cmp	r6, #0
 8004c80:	d0d8      	beq.n	8004c34 <setvbuf+0x9c>
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	b913      	cbnz	r3, 8004c8c <setvbuf+0xf4>
 8004c86:	4638      	mov	r0, r7
 8004c88:	f7ff feec 	bl	8004a64 <__sinit>
 8004c8c:	f1b8 0f01 	cmp.w	r8, #1
 8004c90:	bf08      	it	eq
 8004c92:	89a3      	ldrheq	r3, [r4, #12]
 8004c94:	6026      	str	r6, [r4, #0]
 8004c96:	bf04      	itt	eq
 8004c98:	f043 0301 	orreq.w	r3, r3, #1
 8004c9c:	81a3      	strheq	r3, [r4, #12]
 8004c9e:	89a3      	ldrh	r3, [r4, #12]
 8004ca0:	f013 0208 	ands.w	r2, r3, #8
 8004ca4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004ca8:	d01d      	beq.n	8004ce6 <setvbuf+0x14e>
 8004caa:	07da      	lsls	r2, r3, #31
 8004cac:	bf41      	itttt	mi
 8004cae:	2200      	movmi	r2, #0
 8004cb0:	426d      	negmi	r5, r5
 8004cb2:	60a2      	strmi	r2, [r4, #8]
 8004cb4:	61a5      	strmi	r5, [r4, #24]
 8004cb6:	bf58      	it	pl
 8004cb8:	60a5      	strpl	r5, [r4, #8]
 8004cba:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8004cbc:	f015 0501 	ands.w	r5, r5, #1
 8004cc0:	d0d4      	beq.n	8004c6c <setvbuf+0xd4>
 8004cc2:	2500      	movs	r5, #0
 8004cc4:	e7d7      	b.n	8004c76 <setvbuf+0xde>
 8004cc6:	4648      	mov	r0, r9
 8004cc8:	f000 f9b4 	bl	8005034 <malloc>
 8004ccc:	4606      	mov	r6, r0
 8004cce:	2800      	cmp	r0, #0
 8004cd0:	d0ba      	beq.n	8004c48 <setvbuf+0xb0>
 8004cd2:	89a3      	ldrh	r3, [r4, #12]
 8004cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cd8:	81a3      	strh	r3, [r4, #12]
 8004cda:	464d      	mov	r5, r9
 8004cdc:	e7d1      	b.n	8004c82 <setvbuf+0xea>
 8004cde:	2500      	movs	r5, #0
 8004ce0:	e7b4      	b.n	8004c4c <setvbuf+0xb4>
 8004ce2:	46a9      	mov	r9, r5
 8004ce4:	e7f5      	b.n	8004cd2 <setvbuf+0x13a>
 8004ce6:	60a2      	str	r2, [r4, #8]
 8004ce8:	e7e7      	b.n	8004cba <setvbuf+0x122>
 8004cea:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004cee:	e7c2      	b.n	8004c76 <setvbuf+0xde>
 8004cf0:	24000068 	.word	0x24000068

08004cf4 <__sread>:
 8004cf4:	b510      	push	{r4, lr}
 8004cf6:	460c      	mov	r4, r1
 8004cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cfc:	f000 f8fc 	bl	8004ef8 <_read_r>
 8004d00:	2800      	cmp	r0, #0
 8004d02:	bfab      	itete	ge
 8004d04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d06:	89a3      	ldrhlt	r3, [r4, #12]
 8004d08:	181b      	addge	r3, r3, r0
 8004d0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d0e:	bfac      	ite	ge
 8004d10:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d12:	81a3      	strhlt	r3, [r4, #12]
 8004d14:	bd10      	pop	{r4, pc}

08004d16 <__swrite>:
 8004d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d1a:	461f      	mov	r7, r3
 8004d1c:	898b      	ldrh	r3, [r1, #12]
 8004d1e:	05db      	lsls	r3, r3, #23
 8004d20:	4605      	mov	r5, r0
 8004d22:	460c      	mov	r4, r1
 8004d24:	4616      	mov	r6, r2
 8004d26:	d505      	bpl.n	8004d34 <__swrite+0x1e>
 8004d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f000 f8d0 	bl	8004ed4 <_lseek_r>
 8004d34:	89a3      	ldrh	r3, [r4, #12]
 8004d36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d3e:	81a3      	strh	r3, [r4, #12]
 8004d40:	4632      	mov	r2, r6
 8004d42:	463b      	mov	r3, r7
 8004d44:	4628      	mov	r0, r5
 8004d46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d4a:	f000 b8e7 	b.w	8004f1c <_write_r>

08004d4e <__sseek>:
 8004d4e:	b510      	push	{r4, lr}
 8004d50:	460c      	mov	r4, r1
 8004d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d56:	f000 f8bd 	bl	8004ed4 <_lseek_r>
 8004d5a:	1c43      	adds	r3, r0, #1
 8004d5c:	89a3      	ldrh	r3, [r4, #12]
 8004d5e:	bf15      	itete	ne
 8004d60:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d6a:	81a3      	strheq	r3, [r4, #12]
 8004d6c:	bf18      	it	ne
 8004d6e:	81a3      	strhne	r3, [r4, #12]
 8004d70:	bd10      	pop	{r4, pc}

08004d72 <__sclose>:
 8004d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d76:	f000 b89d 	b.w	8004eb4 <_close_r>

08004d7a <__swbuf_r>:
 8004d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7c:	460e      	mov	r6, r1
 8004d7e:	4614      	mov	r4, r2
 8004d80:	4605      	mov	r5, r0
 8004d82:	b118      	cbz	r0, 8004d8c <__swbuf_r+0x12>
 8004d84:	6a03      	ldr	r3, [r0, #32]
 8004d86:	b90b      	cbnz	r3, 8004d8c <__swbuf_r+0x12>
 8004d88:	f7ff fe6c 	bl	8004a64 <__sinit>
 8004d8c:	69a3      	ldr	r3, [r4, #24]
 8004d8e:	60a3      	str	r3, [r4, #8]
 8004d90:	89a3      	ldrh	r3, [r4, #12]
 8004d92:	071a      	lsls	r2, r3, #28
 8004d94:	d525      	bpl.n	8004de2 <__swbuf_r+0x68>
 8004d96:	6923      	ldr	r3, [r4, #16]
 8004d98:	b31b      	cbz	r3, 8004de2 <__swbuf_r+0x68>
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	6922      	ldr	r2, [r4, #16]
 8004d9e:	1a98      	subs	r0, r3, r2
 8004da0:	6963      	ldr	r3, [r4, #20]
 8004da2:	b2f6      	uxtb	r6, r6
 8004da4:	4283      	cmp	r3, r0
 8004da6:	4637      	mov	r7, r6
 8004da8:	dc04      	bgt.n	8004db4 <__swbuf_r+0x3a>
 8004daa:	4621      	mov	r1, r4
 8004dac:	4628      	mov	r0, r5
 8004dae:	f000 fa7b 	bl	80052a8 <_fflush_r>
 8004db2:	b9e0      	cbnz	r0, 8004dee <__swbuf_r+0x74>
 8004db4:	68a3      	ldr	r3, [r4, #8]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	60a3      	str	r3, [r4, #8]
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	6022      	str	r2, [r4, #0]
 8004dc0:	701e      	strb	r6, [r3, #0]
 8004dc2:	6962      	ldr	r2, [r4, #20]
 8004dc4:	1c43      	adds	r3, r0, #1
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d004      	beq.n	8004dd4 <__swbuf_r+0x5a>
 8004dca:	89a3      	ldrh	r3, [r4, #12]
 8004dcc:	07db      	lsls	r3, r3, #31
 8004dce:	d506      	bpl.n	8004dde <__swbuf_r+0x64>
 8004dd0:	2e0a      	cmp	r6, #10
 8004dd2:	d104      	bne.n	8004dde <__swbuf_r+0x64>
 8004dd4:	4621      	mov	r1, r4
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	f000 fa66 	bl	80052a8 <_fflush_r>
 8004ddc:	b938      	cbnz	r0, 8004dee <__swbuf_r+0x74>
 8004dde:	4638      	mov	r0, r7
 8004de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004de2:	4621      	mov	r1, r4
 8004de4:	4628      	mov	r0, r5
 8004de6:	f000 f805 	bl	8004df4 <__swsetup_r>
 8004dea:	2800      	cmp	r0, #0
 8004dec:	d0d5      	beq.n	8004d9a <__swbuf_r+0x20>
 8004dee:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004df2:	e7f4      	b.n	8004dde <__swbuf_r+0x64>

08004df4 <__swsetup_r>:
 8004df4:	b538      	push	{r3, r4, r5, lr}
 8004df6:	4b2a      	ldr	r3, [pc, #168]	; (8004ea0 <__swsetup_r+0xac>)
 8004df8:	4605      	mov	r5, r0
 8004dfa:	6818      	ldr	r0, [r3, #0]
 8004dfc:	460c      	mov	r4, r1
 8004dfe:	b118      	cbz	r0, 8004e08 <__swsetup_r+0x14>
 8004e00:	6a03      	ldr	r3, [r0, #32]
 8004e02:	b90b      	cbnz	r3, 8004e08 <__swsetup_r+0x14>
 8004e04:	f7ff fe2e 	bl	8004a64 <__sinit>
 8004e08:	89a3      	ldrh	r3, [r4, #12]
 8004e0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e0e:	0718      	lsls	r0, r3, #28
 8004e10:	d422      	bmi.n	8004e58 <__swsetup_r+0x64>
 8004e12:	06d9      	lsls	r1, r3, #27
 8004e14:	d407      	bmi.n	8004e26 <__swsetup_r+0x32>
 8004e16:	2309      	movs	r3, #9
 8004e18:	602b      	str	r3, [r5, #0]
 8004e1a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e1e:	81a3      	strh	r3, [r4, #12]
 8004e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e24:	e034      	b.n	8004e90 <__swsetup_r+0x9c>
 8004e26:	0758      	lsls	r0, r3, #29
 8004e28:	d512      	bpl.n	8004e50 <__swsetup_r+0x5c>
 8004e2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e2c:	b141      	cbz	r1, 8004e40 <__swsetup_r+0x4c>
 8004e2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e32:	4299      	cmp	r1, r3
 8004e34:	d002      	beq.n	8004e3c <__swsetup_r+0x48>
 8004e36:	4628      	mov	r0, r5
 8004e38:	f000 f8b0 	bl	8004f9c <_free_r>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	6363      	str	r3, [r4, #52]	; 0x34
 8004e40:	89a3      	ldrh	r3, [r4, #12]
 8004e42:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e46:	81a3      	strh	r3, [r4, #12]
 8004e48:	2300      	movs	r3, #0
 8004e4a:	6063      	str	r3, [r4, #4]
 8004e4c:	6923      	ldr	r3, [r4, #16]
 8004e4e:	6023      	str	r3, [r4, #0]
 8004e50:	89a3      	ldrh	r3, [r4, #12]
 8004e52:	f043 0308 	orr.w	r3, r3, #8
 8004e56:	81a3      	strh	r3, [r4, #12]
 8004e58:	6923      	ldr	r3, [r4, #16]
 8004e5a:	b94b      	cbnz	r3, 8004e70 <__swsetup_r+0x7c>
 8004e5c:	89a3      	ldrh	r3, [r4, #12]
 8004e5e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e66:	d003      	beq.n	8004e70 <__swsetup_r+0x7c>
 8004e68:	4621      	mov	r1, r4
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	f000 fa6a 	bl	8005344 <__smakebuf_r>
 8004e70:	89a0      	ldrh	r0, [r4, #12]
 8004e72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e76:	f010 0301 	ands.w	r3, r0, #1
 8004e7a:	d00a      	beq.n	8004e92 <__swsetup_r+0x9e>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	60a3      	str	r3, [r4, #8]
 8004e80:	6963      	ldr	r3, [r4, #20]
 8004e82:	425b      	negs	r3, r3
 8004e84:	61a3      	str	r3, [r4, #24]
 8004e86:	6923      	ldr	r3, [r4, #16]
 8004e88:	b943      	cbnz	r3, 8004e9c <__swsetup_r+0xa8>
 8004e8a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e8e:	d1c4      	bne.n	8004e1a <__swsetup_r+0x26>
 8004e90:	bd38      	pop	{r3, r4, r5, pc}
 8004e92:	0781      	lsls	r1, r0, #30
 8004e94:	bf58      	it	pl
 8004e96:	6963      	ldrpl	r3, [r4, #20]
 8004e98:	60a3      	str	r3, [r4, #8]
 8004e9a:	e7f4      	b.n	8004e86 <__swsetup_r+0x92>
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	e7f7      	b.n	8004e90 <__swsetup_r+0x9c>
 8004ea0:	24000068 	.word	0x24000068

08004ea4 <memset>:
 8004ea4:	4402      	add	r2, r0
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d100      	bne.n	8004eae <memset+0xa>
 8004eac:	4770      	bx	lr
 8004eae:	f803 1b01 	strb.w	r1, [r3], #1
 8004eb2:	e7f9      	b.n	8004ea8 <memset+0x4>

08004eb4 <_close_r>:
 8004eb4:	b538      	push	{r3, r4, r5, lr}
 8004eb6:	4d06      	ldr	r5, [pc, #24]	; (8004ed0 <_close_r+0x1c>)
 8004eb8:	2300      	movs	r3, #0
 8004eba:	4604      	mov	r4, r0
 8004ebc:	4608      	mov	r0, r1
 8004ebe:	602b      	str	r3, [r5, #0]
 8004ec0:	f7fb fce3 	bl	800088a <_close>
 8004ec4:	1c43      	adds	r3, r0, #1
 8004ec6:	d102      	bne.n	8004ece <_close_r+0x1a>
 8004ec8:	682b      	ldr	r3, [r5, #0]
 8004eca:	b103      	cbz	r3, 8004ece <_close_r+0x1a>
 8004ecc:	6023      	str	r3, [r4, #0]
 8004ece:	bd38      	pop	{r3, r4, r5, pc}
 8004ed0:	240002fc 	.word	0x240002fc

08004ed4 <_lseek_r>:
 8004ed4:	b538      	push	{r3, r4, r5, lr}
 8004ed6:	4d07      	ldr	r5, [pc, #28]	; (8004ef4 <_lseek_r+0x20>)
 8004ed8:	4604      	mov	r4, r0
 8004eda:	4608      	mov	r0, r1
 8004edc:	4611      	mov	r1, r2
 8004ede:	2200      	movs	r2, #0
 8004ee0:	602a      	str	r2, [r5, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f7fb fcf8 	bl	80008d8 <_lseek>
 8004ee8:	1c43      	adds	r3, r0, #1
 8004eea:	d102      	bne.n	8004ef2 <_lseek_r+0x1e>
 8004eec:	682b      	ldr	r3, [r5, #0]
 8004eee:	b103      	cbz	r3, 8004ef2 <_lseek_r+0x1e>
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	bd38      	pop	{r3, r4, r5, pc}
 8004ef4:	240002fc 	.word	0x240002fc

08004ef8 <_read_r>:
 8004ef8:	b538      	push	{r3, r4, r5, lr}
 8004efa:	4d07      	ldr	r5, [pc, #28]	; (8004f18 <_read_r+0x20>)
 8004efc:	4604      	mov	r4, r0
 8004efe:	4608      	mov	r0, r1
 8004f00:	4611      	mov	r1, r2
 8004f02:	2200      	movs	r2, #0
 8004f04:	602a      	str	r2, [r5, #0]
 8004f06:	461a      	mov	r2, r3
 8004f08:	f7fb fca2 	bl	8000850 <_read>
 8004f0c:	1c43      	adds	r3, r0, #1
 8004f0e:	d102      	bne.n	8004f16 <_read_r+0x1e>
 8004f10:	682b      	ldr	r3, [r5, #0]
 8004f12:	b103      	cbz	r3, 8004f16 <_read_r+0x1e>
 8004f14:	6023      	str	r3, [r4, #0]
 8004f16:	bd38      	pop	{r3, r4, r5, pc}
 8004f18:	240002fc 	.word	0x240002fc

08004f1c <_write_r>:
 8004f1c:	b538      	push	{r3, r4, r5, lr}
 8004f1e:	4d07      	ldr	r5, [pc, #28]	; (8004f3c <_write_r+0x20>)
 8004f20:	4604      	mov	r4, r0
 8004f22:	4608      	mov	r0, r1
 8004f24:	4611      	mov	r1, r2
 8004f26:	2200      	movs	r2, #0
 8004f28:	602a      	str	r2, [r5, #0]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	f7fb fe1e 	bl	8000b6c <_write>
 8004f30:	1c43      	adds	r3, r0, #1
 8004f32:	d102      	bne.n	8004f3a <_write_r+0x1e>
 8004f34:	682b      	ldr	r3, [r5, #0]
 8004f36:	b103      	cbz	r3, 8004f3a <_write_r+0x1e>
 8004f38:	6023      	str	r3, [r4, #0]
 8004f3a:	bd38      	pop	{r3, r4, r5, pc}
 8004f3c:	240002fc 	.word	0x240002fc

08004f40 <__errno>:
 8004f40:	4b01      	ldr	r3, [pc, #4]	; (8004f48 <__errno+0x8>)
 8004f42:	6818      	ldr	r0, [r3, #0]
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	24000068 	.word	0x24000068

08004f4c <__libc_init_array>:
 8004f4c:	b570      	push	{r4, r5, r6, lr}
 8004f4e:	4d0d      	ldr	r5, [pc, #52]	; (8004f84 <__libc_init_array+0x38>)
 8004f50:	4c0d      	ldr	r4, [pc, #52]	; (8004f88 <__libc_init_array+0x3c>)
 8004f52:	1b64      	subs	r4, r4, r5
 8004f54:	10a4      	asrs	r4, r4, #2
 8004f56:	2600      	movs	r6, #0
 8004f58:	42a6      	cmp	r6, r4
 8004f5a:	d109      	bne.n	8004f70 <__libc_init_array+0x24>
 8004f5c:	4d0b      	ldr	r5, [pc, #44]	; (8004f8c <__libc_init_array+0x40>)
 8004f5e:	4c0c      	ldr	r4, [pc, #48]	; (8004f90 <__libc_init_array+0x44>)
 8004f60:	f000 fa5e 	bl	8005420 <_init>
 8004f64:	1b64      	subs	r4, r4, r5
 8004f66:	10a4      	asrs	r4, r4, #2
 8004f68:	2600      	movs	r6, #0
 8004f6a:	42a6      	cmp	r6, r4
 8004f6c:	d105      	bne.n	8004f7a <__libc_init_array+0x2e>
 8004f6e:	bd70      	pop	{r4, r5, r6, pc}
 8004f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f74:	4798      	blx	r3
 8004f76:	3601      	adds	r6, #1
 8004f78:	e7ee      	b.n	8004f58 <__libc_init_array+0xc>
 8004f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f7e:	4798      	blx	r3
 8004f80:	3601      	adds	r6, #1
 8004f82:	e7f2      	b.n	8004f6a <__libc_init_array+0x1e>
 8004f84:	08005478 	.word	0x08005478
 8004f88:	08005478 	.word	0x08005478
 8004f8c:	08005478 	.word	0x08005478
 8004f90:	0800547c 	.word	0x0800547c

08004f94 <__retarget_lock_init_recursive>:
 8004f94:	4770      	bx	lr

08004f96 <__retarget_lock_acquire_recursive>:
 8004f96:	4770      	bx	lr

08004f98 <__retarget_lock_release_recursive>:
 8004f98:	4770      	bx	lr
	...

08004f9c <_free_r>:
 8004f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f9e:	2900      	cmp	r1, #0
 8004fa0:	d044      	beq.n	800502c <_free_r+0x90>
 8004fa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fa6:	9001      	str	r0, [sp, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f1a1 0404 	sub.w	r4, r1, #4
 8004fae:	bfb8      	it	lt
 8004fb0:	18e4      	addlt	r4, r4, r3
 8004fb2:	f000 f8e7 	bl	8005184 <__malloc_lock>
 8004fb6:	4a1e      	ldr	r2, [pc, #120]	; (8005030 <_free_r+0x94>)
 8004fb8:	9801      	ldr	r0, [sp, #4]
 8004fba:	6813      	ldr	r3, [r2, #0]
 8004fbc:	b933      	cbnz	r3, 8004fcc <_free_r+0x30>
 8004fbe:	6063      	str	r3, [r4, #4]
 8004fc0:	6014      	str	r4, [r2, #0]
 8004fc2:	b003      	add	sp, #12
 8004fc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fc8:	f000 b8e2 	b.w	8005190 <__malloc_unlock>
 8004fcc:	42a3      	cmp	r3, r4
 8004fce:	d908      	bls.n	8004fe2 <_free_r+0x46>
 8004fd0:	6825      	ldr	r5, [r4, #0]
 8004fd2:	1961      	adds	r1, r4, r5
 8004fd4:	428b      	cmp	r3, r1
 8004fd6:	bf01      	itttt	eq
 8004fd8:	6819      	ldreq	r1, [r3, #0]
 8004fda:	685b      	ldreq	r3, [r3, #4]
 8004fdc:	1949      	addeq	r1, r1, r5
 8004fde:	6021      	streq	r1, [r4, #0]
 8004fe0:	e7ed      	b.n	8004fbe <_free_r+0x22>
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	b10b      	cbz	r3, 8004fec <_free_r+0x50>
 8004fe8:	42a3      	cmp	r3, r4
 8004fea:	d9fa      	bls.n	8004fe2 <_free_r+0x46>
 8004fec:	6811      	ldr	r1, [r2, #0]
 8004fee:	1855      	adds	r5, r2, r1
 8004ff0:	42a5      	cmp	r5, r4
 8004ff2:	d10b      	bne.n	800500c <_free_r+0x70>
 8004ff4:	6824      	ldr	r4, [r4, #0]
 8004ff6:	4421      	add	r1, r4
 8004ff8:	1854      	adds	r4, r2, r1
 8004ffa:	42a3      	cmp	r3, r4
 8004ffc:	6011      	str	r1, [r2, #0]
 8004ffe:	d1e0      	bne.n	8004fc2 <_free_r+0x26>
 8005000:	681c      	ldr	r4, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	6053      	str	r3, [r2, #4]
 8005006:	440c      	add	r4, r1
 8005008:	6014      	str	r4, [r2, #0]
 800500a:	e7da      	b.n	8004fc2 <_free_r+0x26>
 800500c:	d902      	bls.n	8005014 <_free_r+0x78>
 800500e:	230c      	movs	r3, #12
 8005010:	6003      	str	r3, [r0, #0]
 8005012:	e7d6      	b.n	8004fc2 <_free_r+0x26>
 8005014:	6825      	ldr	r5, [r4, #0]
 8005016:	1961      	adds	r1, r4, r5
 8005018:	428b      	cmp	r3, r1
 800501a:	bf04      	itt	eq
 800501c:	6819      	ldreq	r1, [r3, #0]
 800501e:	685b      	ldreq	r3, [r3, #4]
 8005020:	6063      	str	r3, [r4, #4]
 8005022:	bf04      	itt	eq
 8005024:	1949      	addeq	r1, r1, r5
 8005026:	6021      	streq	r1, [r4, #0]
 8005028:	6054      	str	r4, [r2, #4]
 800502a:	e7ca      	b.n	8004fc2 <_free_r+0x26>
 800502c:	b003      	add	sp, #12
 800502e:	bd30      	pop	{r4, r5, pc}
 8005030:	24000304 	.word	0x24000304

08005034 <malloc>:
 8005034:	4b02      	ldr	r3, [pc, #8]	; (8005040 <malloc+0xc>)
 8005036:	4601      	mov	r1, r0
 8005038:	6818      	ldr	r0, [r3, #0]
 800503a:	f000 b823 	b.w	8005084 <_malloc_r>
 800503e:	bf00      	nop
 8005040:	24000068 	.word	0x24000068

08005044 <sbrk_aligned>:
 8005044:	b570      	push	{r4, r5, r6, lr}
 8005046:	4e0e      	ldr	r6, [pc, #56]	; (8005080 <sbrk_aligned+0x3c>)
 8005048:	460c      	mov	r4, r1
 800504a:	6831      	ldr	r1, [r6, #0]
 800504c:	4605      	mov	r5, r0
 800504e:	b911      	cbnz	r1, 8005056 <sbrk_aligned+0x12>
 8005050:	f000 f9d6 	bl	8005400 <_sbrk_r>
 8005054:	6030      	str	r0, [r6, #0]
 8005056:	4621      	mov	r1, r4
 8005058:	4628      	mov	r0, r5
 800505a:	f000 f9d1 	bl	8005400 <_sbrk_r>
 800505e:	1c43      	adds	r3, r0, #1
 8005060:	d00a      	beq.n	8005078 <sbrk_aligned+0x34>
 8005062:	1cc4      	adds	r4, r0, #3
 8005064:	f024 0403 	bic.w	r4, r4, #3
 8005068:	42a0      	cmp	r0, r4
 800506a:	d007      	beq.n	800507c <sbrk_aligned+0x38>
 800506c:	1a21      	subs	r1, r4, r0
 800506e:	4628      	mov	r0, r5
 8005070:	f000 f9c6 	bl	8005400 <_sbrk_r>
 8005074:	3001      	adds	r0, #1
 8005076:	d101      	bne.n	800507c <sbrk_aligned+0x38>
 8005078:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800507c:	4620      	mov	r0, r4
 800507e:	bd70      	pop	{r4, r5, r6, pc}
 8005080:	24000308 	.word	0x24000308

08005084 <_malloc_r>:
 8005084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005088:	1ccd      	adds	r5, r1, #3
 800508a:	f025 0503 	bic.w	r5, r5, #3
 800508e:	3508      	adds	r5, #8
 8005090:	2d0c      	cmp	r5, #12
 8005092:	bf38      	it	cc
 8005094:	250c      	movcc	r5, #12
 8005096:	2d00      	cmp	r5, #0
 8005098:	4607      	mov	r7, r0
 800509a:	db01      	blt.n	80050a0 <_malloc_r+0x1c>
 800509c:	42a9      	cmp	r1, r5
 800509e:	d905      	bls.n	80050ac <_malloc_r+0x28>
 80050a0:	230c      	movs	r3, #12
 80050a2:	603b      	str	r3, [r7, #0]
 80050a4:	2600      	movs	r6, #0
 80050a6:	4630      	mov	r0, r6
 80050a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005180 <_malloc_r+0xfc>
 80050b0:	f000 f868 	bl	8005184 <__malloc_lock>
 80050b4:	f8d8 3000 	ldr.w	r3, [r8]
 80050b8:	461c      	mov	r4, r3
 80050ba:	bb5c      	cbnz	r4, 8005114 <_malloc_r+0x90>
 80050bc:	4629      	mov	r1, r5
 80050be:	4638      	mov	r0, r7
 80050c0:	f7ff ffc0 	bl	8005044 <sbrk_aligned>
 80050c4:	1c43      	adds	r3, r0, #1
 80050c6:	4604      	mov	r4, r0
 80050c8:	d155      	bne.n	8005176 <_malloc_r+0xf2>
 80050ca:	f8d8 4000 	ldr.w	r4, [r8]
 80050ce:	4626      	mov	r6, r4
 80050d0:	2e00      	cmp	r6, #0
 80050d2:	d145      	bne.n	8005160 <_malloc_r+0xdc>
 80050d4:	2c00      	cmp	r4, #0
 80050d6:	d048      	beq.n	800516a <_malloc_r+0xe6>
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	4631      	mov	r1, r6
 80050dc:	4638      	mov	r0, r7
 80050de:	eb04 0903 	add.w	r9, r4, r3
 80050e2:	f000 f98d 	bl	8005400 <_sbrk_r>
 80050e6:	4581      	cmp	r9, r0
 80050e8:	d13f      	bne.n	800516a <_malloc_r+0xe6>
 80050ea:	6821      	ldr	r1, [r4, #0]
 80050ec:	1a6d      	subs	r5, r5, r1
 80050ee:	4629      	mov	r1, r5
 80050f0:	4638      	mov	r0, r7
 80050f2:	f7ff ffa7 	bl	8005044 <sbrk_aligned>
 80050f6:	3001      	adds	r0, #1
 80050f8:	d037      	beq.n	800516a <_malloc_r+0xe6>
 80050fa:	6823      	ldr	r3, [r4, #0]
 80050fc:	442b      	add	r3, r5
 80050fe:	6023      	str	r3, [r4, #0]
 8005100:	f8d8 3000 	ldr.w	r3, [r8]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d038      	beq.n	800517a <_malloc_r+0xf6>
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	42a2      	cmp	r2, r4
 800510c:	d12b      	bne.n	8005166 <_malloc_r+0xe2>
 800510e:	2200      	movs	r2, #0
 8005110:	605a      	str	r2, [r3, #4]
 8005112:	e00f      	b.n	8005134 <_malloc_r+0xb0>
 8005114:	6822      	ldr	r2, [r4, #0]
 8005116:	1b52      	subs	r2, r2, r5
 8005118:	d41f      	bmi.n	800515a <_malloc_r+0xd6>
 800511a:	2a0b      	cmp	r2, #11
 800511c:	d917      	bls.n	800514e <_malloc_r+0xca>
 800511e:	1961      	adds	r1, r4, r5
 8005120:	42a3      	cmp	r3, r4
 8005122:	6025      	str	r5, [r4, #0]
 8005124:	bf18      	it	ne
 8005126:	6059      	strne	r1, [r3, #4]
 8005128:	6863      	ldr	r3, [r4, #4]
 800512a:	bf08      	it	eq
 800512c:	f8c8 1000 	streq.w	r1, [r8]
 8005130:	5162      	str	r2, [r4, r5]
 8005132:	604b      	str	r3, [r1, #4]
 8005134:	4638      	mov	r0, r7
 8005136:	f104 060b 	add.w	r6, r4, #11
 800513a:	f000 f829 	bl	8005190 <__malloc_unlock>
 800513e:	f026 0607 	bic.w	r6, r6, #7
 8005142:	1d23      	adds	r3, r4, #4
 8005144:	1af2      	subs	r2, r6, r3
 8005146:	d0ae      	beq.n	80050a6 <_malloc_r+0x22>
 8005148:	1b9b      	subs	r3, r3, r6
 800514a:	50a3      	str	r3, [r4, r2]
 800514c:	e7ab      	b.n	80050a6 <_malloc_r+0x22>
 800514e:	42a3      	cmp	r3, r4
 8005150:	6862      	ldr	r2, [r4, #4]
 8005152:	d1dd      	bne.n	8005110 <_malloc_r+0x8c>
 8005154:	f8c8 2000 	str.w	r2, [r8]
 8005158:	e7ec      	b.n	8005134 <_malloc_r+0xb0>
 800515a:	4623      	mov	r3, r4
 800515c:	6864      	ldr	r4, [r4, #4]
 800515e:	e7ac      	b.n	80050ba <_malloc_r+0x36>
 8005160:	4634      	mov	r4, r6
 8005162:	6876      	ldr	r6, [r6, #4]
 8005164:	e7b4      	b.n	80050d0 <_malloc_r+0x4c>
 8005166:	4613      	mov	r3, r2
 8005168:	e7cc      	b.n	8005104 <_malloc_r+0x80>
 800516a:	230c      	movs	r3, #12
 800516c:	603b      	str	r3, [r7, #0]
 800516e:	4638      	mov	r0, r7
 8005170:	f000 f80e 	bl	8005190 <__malloc_unlock>
 8005174:	e797      	b.n	80050a6 <_malloc_r+0x22>
 8005176:	6025      	str	r5, [r4, #0]
 8005178:	e7dc      	b.n	8005134 <_malloc_r+0xb0>
 800517a:	605b      	str	r3, [r3, #4]
 800517c:	deff      	udf	#255	; 0xff
 800517e:	bf00      	nop
 8005180:	24000304 	.word	0x24000304

08005184 <__malloc_lock>:
 8005184:	4801      	ldr	r0, [pc, #4]	; (800518c <__malloc_lock+0x8>)
 8005186:	f7ff bf06 	b.w	8004f96 <__retarget_lock_acquire_recursive>
 800518a:	bf00      	nop
 800518c:	24000300 	.word	0x24000300

08005190 <__malloc_unlock>:
 8005190:	4801      	ldr	r0, [pc, #4]	; (8005198 <__malloc_unlock+0x8>)
 8005192:	f7ff bf01 	b.w	8004f98 <__retarget_lock_release_recursive>
 8005196:	bf00      	nop
 8005198:	24000300 	.word	0x24000300

0800519c <__sflush_r>:
 800519c:	898a      	ldrh	r2, [r1, #12]
 800519e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051a2:	4605      	mov	r5, r0
 80051a4:	0710      	lsls	r0, r2, #28
 80051a6:	460c      	mov	r4, r1
 80051a8:	d458      	bmi.n	800525c <__sflush_r+0xc0>
 80051aa:	684b      	ldr	r3, [r1, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	dc05      	bgt.n	80051bc <__sflush_r+0x20>
 80051b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	dc02      	bgt.n	80051bc <__sflush_r+0x20>
 80051b6:	2000      	movs	r0, #0
 80051b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051be:	2e00      	cmp	r6, #0
 80051c0:	d0f9      	beq.n	80051b6 <__sflush_r+0x1a>
 80051c2:	2300      	movs	r3, #0
 80051c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80051c8:	682f      	ldr	r7, [r5, #0]
 80051ca:	6a21      	ldr	r1, [r4, #32]
 80051cc:	602b      	str	r3, [r5, #0]
 80051ce:	d032      	beq.n	8005236 <__sflush_r+0x9a>
 80051d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80051d2:	89a3      	ldrh	r3, [r4, #12]
 80051d4:	075a      	lsls	r2, r3, #29
 80051d6:	d505      	bpl.n	80051e4 <__sflush_r+0x48>
 80051d8:	6863      	ldr	r3, [r4, #4]
 80051da:	1ac0      	subs	r0, r0, r3
 80051dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80051de:	b10b      	cbz	r3, 80051e4 <__sflush_r+0x48>
 80051e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051e2:	1ac0      	subs	r0, r0, r3
 80051e4:	2300      	movs	r3, #0
 80051e6:	4602      	mov	r2, r0
 80051e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80051ea:	6a21      	ldr	r1, [r4, #32]
 80051ec:	4628      	mov	r0, r5
 80051ee:	47b0      	blx	r6
 80051f0:	1c43      	adds	r3, r0, #1
 80051f2:	89a3      	ldrh	r3, [r4, #12]
 80051f4:	d106      	bne.n	8005204 <__sflush_r+0x68>
 80051f6:	6829      	ldr	r1, [r5, #0]
 80051f8:	291d      	cmp	r1, #29
 80051fa:	d82b      	bhi.n	8005254 <__sflush_r+0xb8>
 80051fc:	4a29      	ldr	r2, [pc, #164]	; (80052a4 <__sflush_r+0x108>)
 80051fe:	410a      	asrs	r2, r1
 8005200:	07d6      	lsls	r6, r2, #31
 8005202:	d427      	bmi.n	8005254 <__sflush_r+0xb8>
 8005204:	2200      	movs	r2, #0
 8005206:	6062      	str	r2, [r4, #4]
 8005208:	04d9      	lsls	r1, r3, #19
 800520a:	6922      	ldr	r2, [r4, #16]
 800520c:	6022      	str	r2, [r4, #0]
 800520e:	d504      	bpl.n	800521a <__sflush_r+0x7e>
 8005210:	1c42      	adds	r2, r0, #1
 8005212:	d101      	bne.n	8005218 <__sflush_r+0x7c>
 8005214:	682b      	ldr	r3, [r5, #0]
 8005216:	b903      	cbnz	r3, 800521a <__sflush_r+0x7e>
 8005218:	6560      	str	r0, [r4, #84]	; 0x54
 800521a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800521c:	602f      	str	r7, [r5, #0]
 800521e:	2900      	cmp	r1, #0
 8005220:	d0c9      	beq.n	80051b6 <__sflush_r+0x1a>
 8005222:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005226:	4299      	cmp	r1, r3
 8005228:	d002      	beq.n	8005230 <__sflush_r+0x94>
 800522a:	4628      	mov	r0, r5
 800522c:	f7ff feb6 	bl	8004f9c <_free_r>
 8005230:	2000      	movs	r0, #0
 8005232:	6360      	str	r0, [r4, #52]	; 0x34
 8005234:	e7c0      	b.n	80051b8 <__sflush_r+0x1c>
 8005236:	2301      	movs	r3, #1
 8005238:	4628      	mov	r0, r5
 800523a:	47b0      	blx	r6
 800523c:	1c41      	adds	r1, r0, #1
 800523e:	d1c8      	bne.n	80051d2 <__sflush_r+0x36>
 8005240:	682b      	ldr	r3, [r5, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d0c5      	beq.n	80051d2 <__sflush_r+0x36>
 8005246:	2b1d      	cmp	r3, #29
 8005248:	d001      	beq.n	800524e <__sflush_r+0xb2>
 800524a:	2b16      	cmp	r3, #22
 800524c:	d101      	bne.n	8005252 <__sflush_r+0xb6>
 800524e:	602f      	str	r7, [r5, #0]
 8005250:	e7b1      	b.n	80051b6 <__sflush_r+0x1a>
 8005252:	89a3      	ldrh	r3, [r4, #12]
 8005254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005258:	81a3      	strh	r3, [r4, #12]
 800525a:	e7ad      	b.n	80051b8 <__sflush_r+0x1c>
 800525c:	690f      	ldr	r7, [r1, #16]
 800525e:	2f00      	cmp	r7, #0
 8005260:	d0a9      	beq.n	80051b6 <__sflush_r+0x1a>
 8005262:	0793      	lsls	r3, r2, #30
 8005264:	680e      	ldr	r6, [r1, #0]
 8005266:	bf08      	it	eq
 8005268:	694b      	ldreq	r3, [r1, #20]
 800526a:	600f      	str	r7, [r1, #0]
 800526c:	bf18      	it	ne
 800526e:	2300      	movne	r3, #0
 8005270:	eba6 0807 	sub.w	r8, r6, r7
 8005274:	608b      	str	r3, [r1, #8]
 8005276:	f1b8 0f00 	cmp.w	r8, #0
 800527a:	dd9c      	ble.n	80051b6 <__sflush_r+0x1a>
 800527c:	6a21      	ldr	r1, [r4, #32]
 800527e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005280:	4643      	mov	r3, r8
 8005282:	463a      	mov	r2, r7
 8005284:	4628      	mov	r0, r5
 8005286:	47b0      	blx	r6
 8005288:	2800      	cmp	r0, #0
 800528a:	dc06      	bgt.n	800529a <__sflush_r+0xfe>
 800528c:	89a3      	ldrh	r3, [r4, #12]
 800528e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005292:	81a3      	strh	r3, [r4, #12]
 8005294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005298:	e78e      	b.n	80051b8 <__sflush_r+0x1c>
 800529a:	4407      	add	r7, r0
 800529c:	eba8 0800 	sub.w	r8, r8, r0
 80052a0:	e7e9      	b.n	8005276 <__sflush_r+0xda>
 80052a2:	bf00      	nop
 80052a4:	dfbffffe 	.word	0xdfbffffe

080052a8 <_fflush_r>:
 80052a8:	b538      	push	{r3, r4, r5, lr}
 80052aa:	690b      	ldr	r3, [r1, #16]
 80052ac:	4605      	mov	r5, r0
 80052ae:	460c      	mov	r4, r1
 80052b0:	b913      	cbnz	r3, 80052b8 <_fflush_r+0x10>
 80052b2:	2500      	movs	r5, #0
 80052b4:	4628      	mov	r0, r5
 80052b6:	bd38      	pop	{r3, r4, r5, pc}
 80052b8:	b118      	cbz	r0, 80052c2 <_fflush_r+0x1a>
 80052ba:	6a03      	ldr	r3, [r0, #32]
 80052bc:	b90b      	cbnz	r3, 80052c2 <_fflush_r+0x1a>
 80052be:	f7ff fbd1 	bl	8004a64 <__sinit>
 80052c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d0f3      	beq.n	80052b2 <_fflush_r+0xa>
 80052ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80052cc:	07d0      	lsls	r0, r2, #31
 80052ce:	d404      	bmi.n	80052da <_fflush_r+0x32>
 80052d0:	0599      	lsls	r1, r3, #22
 80052d2:	d402      	bmi.n	80052da <_fflush_r+0x32>
 80052d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052d6:	f7ff fe5e 	bl	8004f96 <__retarget_lock_acquire_recursive>
 80052da:	4628      	mov	r0, r5
 80052dc:	4621      	mov	r1, r4
 80052de:	f7ff ff5d 	bl	800519c <__sflush_r>
 80052e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052e4:	07da      	lsls	r2, r3, #31
 80052e6:	4605      	mov	r5, r0
 80052e8:	d4e4      	bmi.n	80052b4 <_fflush_r+0xc>
 80052ea:	89a3      	ldrh	r3, [r4, #12]
 80052ec:	059b      	lsls	r3, r3, #22
 80052ee:	d4e1      	bmi.n	80052b4 <_fflush_r+0xc>
 80052f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052f2:	f7ff fe51 	bl	8004f98 <__retarget_lock_release_recursive>
 80052f6:	e7dd      	b.n	80052b4 <_fflush_r+0xc>

080052f8 <__swhatbuf_r>:
 80052f8:	b570      	push	{r4, r5, r6, lr}
 80052fa:	460c      	mov	r4, r1
 80052fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005300:	2900      	cmp	r1, #0
 8005302:	b096      	sub	sp, #88	; 0x58
 8005304:	4615      	mov	r5, r2
 8005306:	461e      	mov	r6, r3
 8005308:	da0d      	bge.n	8005326 <__swhatbuf_r+0x2e>
 800530a:	89a3      	ldrh	r3, [r4, #12]
 800530c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005310:	f04f 0100 	mov.w	r1, #0
 8005314:	bf0c      	ite	eq
 8005316:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800531a:	2340      	movne	r3, #64	; 0x40
 800531c:	2000      	movs	r0, #0
 800531e:	6031      	str	r1, [r6, #0]
 8005320:	602b      	str	r3, [r5, #0]
 8005322:	b016      	add	sp, #88	; 0x58
 8005324:	bd70      	pop	{r4, r5, r6, pc}
 8005326:	466a      	mov	r2, sp
 8005328:	f000 f848 	bl	80053bc <_fstat_r>
 800532c:	2800      	cmp	r0, #0
 800532e:	dbec      	blt.n	800530a <__swhatbuf_r+0x12>
 8005330:	9901      	ldr	r1, [sp, #4]
 8005332:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005336:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800533a:	4259      	negs	r1, r3
 800533c:	4159      	adcs	r1, r3
 800533e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005342:	e7eb      	b.n	800531c <__swhatbuf_r+0x24>

08005344 <__smakebuf_r>:
 8005344:	898b      	ldrh	r3, [r1, #12]
 8005346:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005348:	079d      	lsls	r5, r3, #30
 800534a:	4606      	mov	r6, r0
 800534c:	460c      	mov	r4, r1
 800534e:	d507      	bpl.n	8005360 <__smakebuf_r+0x1c>
 8005350:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005354:	6023      	str	r3, [r4, #0]
 8005356:	6123      	str	r3, [r4, #16]
 8005358:	2301      	movs	r3, #1
 800535a:	6163      	str	r3, [r4, #20]
 800535c:	b002      	add	sp, #8
 800535e:	bd70      	pop	{r4, r5, r6, pc}
 8005360:	ab01      	add	r3, sp, #4
 8005362:	466a      	mov	r2, sp
 8005364:	f7ff ffc8 	bl	80052f8 <__swhatbuf_r>
 8005368:	9900      	ldr	r1, [sp, #0]
 800536a:	4605      	mov	r5, r0
 800536c:	4630      	mov	r0, r6
 800536e:	f7ff fe89 	bl	8005084 <_malloc_r>
 8005372:	b948      	cbnz	r0, 8005388 <__smakebuf_r+0x44>
 8005374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005378:	059a      	lsls	r2, r3, #22
 800537a:	d4ef      	bmi.n	800535c <__smakebuf_r+0x18>
 800537c:	f023 0303 	bic.w	r3, r3, #3
 8005380:	f043 0302 	orr.w	r3, r3, #2
 8005384:	81a3      	strh	r3, [r4, #12]
 8005386:	e7e3      	b.n	8005350 <__smakebuf_r+0xc>
 8005388:	89a3      	ldrh	r3, [r4, #12]
 800538a:	6020      	str	r0, [r4, #0]
 800538c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005390:	81a3      	strh	r3, [r4, #12]
 8005392:	9b00      	ldr	r3, [sp, #0]
 8005394:	6163      	str	r3, [r4, #20]
 8005396:	9b01      	ldr	r3, [sp, #4]
 8005398:	6120      	str	r0, [r4, #16]
 800539a:	b15b      	cbz	r3, 80053b4 <__smakebuf_r+0x70>
 800539c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053a0:	4630      	mov	r0, r6
 80053a2:	f000 f81d 	bl	80053e0 <_isatty_r>
 80053a6:	b128      	cbz	r0, 80053b4 <__smakebuf_r+0x70>
 80053a8:	89a3      	ldrh	r3, [r4, #12]
 80053aa:	f023 0303 	bic.w	r3, r3, #3
 80053ae:	f043 0301 	orr.w	r3, r3, #1
 80053b2:	81a3      	strh	r3, [r4, #12]
 80053b4:	89a3      	ldrh	r3, [r4, #12]
 80053b6:	431d      	orrs	r5, r3
 80053b8:	81a5      	strh	r5, [r4, #12]
 80053ba:	e7cf      	b.n	800535c <__smakebuf_r+0x18>

080053bc <_fstat_r>:
 80053bc:	b538      	push	{r3, r4, r5, lr}
 80053be:	4d07      	ldr	r5, [pc, #28]	; (80053dc <_fstat_r+0x20>)
 80053c0:	2300      	movs	r3, #0
 80053c2:	4604      	mov	r4, r0
 80053c4:	4608      	mov	r0, r1
 80053c6:	4611      	mov	r1, r2
 80053c8:	602b      	str	r3, [r5, #0]
 80053ca:	f7fb fa6a 	bl	80008a2 <_fstat>
 80053ce:	1c43      	adds	r3, r0, #1
 80053d0:	d102      	bne.n	80053d8 <_fstat_r+0x1c>
 80053d2:	682b      	ldr	r3, [r5, #0]
 80053d4:	b103      	cbz	r3, 80053d8 <_fstat_r+0x1c>
 80053d6:	6023      	str	r3, [r4, #0]
 80053d8:	bd38      	pop	{r3, r4, r5, pc}
 80053da:	bf00      	nop
 80053dc:	240002fc 	.word	0x240002fc

080053e0 <_isatty_r>:
 80053e0:	b538      	push	{r3, r4, r5, lr}
 80053e2:	4d06      	ldr	r5, [pc, #24]	; (80053fc <_isatty_r+0x1c>)
 80053e4:	2300      	movs	r3, #0
 80053e6:	4604      	mov	r4, r0
 80053e8:	4608      	mov	r0, r1
 80053ea:	602b      	str	r3, [r5, #0]
 80053ec:	f7fb fa69 	bl	80008c2 <_isatty>
 80053f0:	1c43      	adds	r3, r0, #1
 80053f2:	d102      	bne.n	80053fa <_isatty_r+0x1a>
 80053f4:	682b      	ldr	r3, [r5, #0]
 80053f6:	b103      	cbz	r3, 80053fa <_isatty_r+0x1a>
 80053f8:	6023      	str	r3, [r4, #0]
 80053fa:	bd38      	pop	{r3, r4, r5, pc}
 80053fc:	240002fc 	.word	0x240002fc

08005400 <_sbrk_r>:
 8005400:	b538      	push	{r3, r4, r5, lr}
 8005402:	4d06      	ldr	r5, [pc, #24]	; (800541c <_sbrk_r+0x1c>)
 8005404:	2300      	movs	r3, #0
 8005406:	4604      	mov	r4, r0
 8005408:	4608      	mov	r0, r1
 800540a:	602b      	str	r3, [r5, #0]
 800540c:	f7fb fa72 	bl	80008f4 <_sbrk>
 8005410:	1c43      	adds	r3, r0, #1
 8005412:	d102      	bne.n	800541a <_sbrk_r+0x1a>
 8005414:	682b      	ldr	r3, [r5, #0]
 8005416:	b103      	cbz	r3, 800541a <_sbrk_r+0x1a>
 8005418:	6023      	str	r3, [r4, #0]
 800541a:	bd38      	pop	{r3, r4, r5, pc}
 800541c:	240002fc 	.word	0x240002fc

08005420 <_init>:
 8005420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005422:	bf00      	nop
 8005424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005426:	bc08      	pop	{r3}
 8005428:	469e      	mov	lr, r3
 800542a:	4770      	bx	lr

0800542c <_fini>:
 800542c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542e:	bf00      	nop
 8005430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005432:	bc08      	pop	{r3}
 8005434:	469e      	mov	lr, r3
 8005436:	4770      	bx	lr
