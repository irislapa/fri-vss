# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  








  #[CONFIGURATION FOR BACK-END SERVER]
  config.vm.define "back" do |back|
    back.vm.box = "ubuntu/bionic64"
    back.vm.network "forwarded_port", guest: 8000, host: 8000
    #back.vm.network :private_network, ip: "192.168.56.10"
    back.vm.provision "file", source: "./back", destination: "$HOME"
    back.vm.provision "shell", inline: <<-SHELL
      sudo apt-get update
      sudo apt-get upgrade -y
      sudo apt-get install python3 -y
      sudo apt-get install python3-pip -y
      python3 -m pip install -r requirements.txt
    SHELL

    #back.vm.provision "file", source: "django.service", destination: "/etc/systemd/system", privileged: true
    #because provisioner for copying files from host to guest has no privileged attribute
    back.vm.provision "shell", privileged: true, inline: <<-SCRIPT 
sudo echo "[Unit]
Description=Django Server
After=network.target

[Service]
Type=simple
User=ubuntu
WorkingDirectory= /home/vagrant
ExecStart=/usr/bin/python3 /home/vagrant/manage.py runserver 0.0.0.0:8000
Restart=on-failure

[Install]
WantedBy=multi-user.target" >> /etc/systemd/system/django.service
SCRIPT

    back.vm.provision :shell, :inline => "sudo systemctl start django.service", privileged: true


  end







  #[CONFIGURATION FOR FRONT-END SERVER]
  config.vm.define "front" do |front|
    front.vm.box = "ubuntu/bionic64"
    front.vm.network "forwarded_port", guest: 3000, host: 5500
    #front.vm.network :private_network, ip: "192.168.56.11"
    front.vm.provision "file", source: "./front", destination: "$HOME"
    #front.vm.allow_hosts_modification = false
    front.vm.provision "shell", inline: <<-SHELL
      sudo apt-get update
      sudo apt-get upgrade -y
      sudo apt-get install nodejs -y
    SHELL

    front.vm.provision "shell", privileged: true, inline: <<-SCRIPT 
sudo echo "[Unit]
Description=Node.js Server
After=network.target

[Service]
Type=simple
User=ubuntu
WorkingDirectory= /home/vagrant
ExecStart=/usr/bin/node app.js
Restart=on-failure

[Install]
WantedBy=multi-user.target" >> /etc/systemd/system/node.service
SCRIPT

    front.vm.provision :shell, :inline => "sudo systemctl start node.service", privileged: true

  end  
   
  
  #config.vm.box = "ubuntu/focal64"
  #config.vm.hostname = "vm1"
  #config.vm.network "private_network", ip: "172.16.10"
  #config.vm.synced_folder "../data", "/home/vagrant/data"
  #config.vm.provision "file", source: "./copiedfile.txt", destination: "/home/vagrant/copiedfile.txt"
  #
  # 
  #
  #config.vm.provider :virtualbox do |vb|
  #  vb.costumize ["modifyvm", :id, "--memory", 1024]
  #  vb.costumize ["modifyvm", :id, "--cpus", 1]
  #end


end


  #  config.vm.define "web" do |web|
  #    web.vm.box = "ubuntu/focal64"
  #  end
  #
  #  config.vm.define "db" do |db|
  #    db.vm.box = "ubuntu/focal64"
  #  end
  #end
  























  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
