
guitar-tuner-with-BSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015ec4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005540  08016168  08016168  00026168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b6a8  0801b6a8  0002b6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b6b0  0801b6b0  0002b6b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801b6b4  0801b6b4  0002b6b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000005a8  24000000  0801b6b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RAM_D3       00000200  240005c0  0801bc60  000305c0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00007b50  240007c0  0801be60  000307c0  2**5
                  ALLOC
  9 ._user_heap_stack 00000600  24008310  0801be60  00038310  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000307c0  2**0
                  CONTENTS, READONLY
 11 .comment      000000c1  00000000  00000000  000307ee  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033cf5  00000000  00000000  000308af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057f6  00000000  00000000  000645a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d48  00000000  00000000  00069da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000230c  00000000  00000000  0006cae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00047524  00000000  00000000  0006edf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000347c9  00000000  00000000  000b6318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b8faf  00000000  00000000  000eaae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000cee0  00000000  00000000  002a3a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000051  00000000  00000000  002b0970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240007c0 	.word	0x240007c0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801614c 	.word	0x0801614c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240007c4 	.word	0x240007c4
 80002dc:	0801614c 	.word	0x0801614c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <AudioPlay_demo>:
  * @brief  Audio Play demo
  * @param  None
  * @retval None
  */
void AudioPlay_demo (void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 8000682:	af00      	add	r7, sp, #0
 uint32_t AudioState;




  AudioFreq_ptr = &AudioFreq[0]; /*96K*/
 8000684:	4bbd      	ldr	r3, [pc, #756]	; (800097c <AudioPlay_demo+0x300>)
 8000686:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
  ButtonState = 0;
 800068a:	4bbd      	ldr	r3, [pc, #756]	; (8000980 <AudioPlay_demo+0x304>)
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]

   uint8_t VolStr[256] = {0};
 8000690:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000694:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	3304      	adds	r3, #4
 800069e:	22fc      	movs	r2, #252	; 0xfc
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f014 fc4a 	bl	8014f3c <memset>
  uint8_t FreqStr[256] = {0};
 80006a8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80006ac:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	3304      	adds	r3, #4
 80006b6:	22fc      	movs	r2, #252	; 0xfc
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f014 fc3e 	bl	8014f3c <memset>
  uint8_t ts_status = BSP_ERROR_NONE;
 80006c0:	2300      	movs	r3, #0
 80006c2:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
  Point Points2[] = {{226, 196}, {265, 223}, {226, 248}};
 80006c6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80006ca:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80006ce:	4aad      	ldr	r2, [pc, #692]	; (8000984 <AudioPlay_demo+0x308>)
 80006d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80006d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  uwPauseEnabledStatus = 1; /* 0 when audio is running, 1 when Pause is on */
 80006d6:	4bac      	ldr	r3, [pc, #688]	; (8000988 <AudioPlay_demo+0x30c>)
 80006d8:	2201      	movs	r2, #1
 80006da:	601a      	str	r2, [r3, #0]
  uwVolume = 40;
 80006dc:	4bab      	ldr	r3, [pc, #684]	; (800098c <AudioPlay_demo+0x310>)
 80006de:	2228      	movs	r2, #40	; 0x28
 80006e0:	601a      	str	r2, [r3, #0]

  ButtonState = 0;
 80006e2:	4ba7      	ldr	r3, [pc, #668]	; (8000980 <AudioPlay_demo+0x304>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]


  /* Touchscreen initialization */

  AudioPlayInit.Device = AUDIO_OUT_DEVICE_HEADPHONE;
 80006e8:	4ba9      	ldr	r3, [pc, #676]	; (8000990 <AudioPlay_demo+0x314>)
 80006ea:	2202      	movs	r2, #2
 80006ec:	601a      	str	r2, [r3, #0]
  AudioPlayInit.ChannelsNbr = 2;
 80006ee:	4ba8      	ldr	r3, [pc, #672]	; (8000990 <AudioPlay_demo+0x314>)
 80006f0:	2202      	movs	r2, #2
 80006f2:	60da      	str	r2, [r3, #12]
  AudioPlayInit.SampleRate = *AudioFreq_ptr;
 80006f4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4aa5      	ldr	r2, [pc, #660]	; (8000990 <AudioPlay_demo+0x314>)
 80006fc:	6053      	str	r3, [r2, #4]
  AudioPlayInit.BitsPerSample = AUDIO_RESOLUTION_16B;
 80006fe:	4ba4      	ldr	r3, [pc, #656]	; (8000990 <AudioPlay_demo+0x314>)
 8000700:	2210      	movs	r2, #16
 8000702:	609a      	str	r2, [r3, #8]
  AudioPlayInit.Volume = uwVolume;
 8000704:	4ba1      	ldr	r3, [pc, #644]	; (800098c <AudioPlay_demo+0x310>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4aa1      	ldr	r2, [pc, #644]	; (8000990 <AudioPlay_demo+0x314>)
 800070a:	6113      	str	r3, [r2, #16]


  if(BSP_AUDIO_OUT_Init(0, &AudioPlayInit) != 0)
 800070c:	49a0      	ldr	r1, [pc, #640]	; (8000990 <AudioPlay_demo+0x314>)
 800070e:	2000      	movs	r0, #0
 8000710:	f003 fe66 	bl	80043e0 <BSP_AUDIO_OUT_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d004      	beq.n	8000724 <AudioPlay_demo+0xa8>
  Start playing the file from a circular buffer, once the DMA is enabled, it is
  always in running state. Application has to fill the buffer with the audio data
  using Transfer complete and/or half transfer complete interrupts callbacks
  (BSP_AUDIO_OUT_TransferComplete_CallBack() or BSP_AUDIO_OUT_HalfTransfer_CallBack()...
  */
  AUDIO_Start((uint32_t *)AUDIO_SRC_FILE_ADDRESS, (uint32_t)AUDIO_FILE_SIZE);
 800071a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800071e:	489d      	ldr	r0, [pc, #628]	; (8000994 <AudioPlay_demo+0x318>)
 8000720:	f000 f940 	bl	80009a4 <AUDIO_Start>

  /* Display the state on the screen */

  sprintf((char*)VolStr, "VOL:%lu", uwVolume);
 8000724:	4b99      	ldr	r3, [pc, #612]	; (800098c <AudioPlay_demo+0x310>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800072c:	499a      	ldr	r1, [pc, #616]	; (8000998 <AudioPlay_demo+0x31c>)
 800072e:	4618      	mov	r0, r3
 8000730:	f014 fb0c 	bl	8014d4c <siprintf>

  sprintf((char*)FreqStr, "FREQ:%lu", *AudioFreq_ptr);
 8000734:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	f107 030c 	add.w	r3, r7, #12
 800073e:	4997      	ldr	r1, [pc, #604]	; (800099c <AudioPlay_demo+0x320>)
 8000740:	4618      	mov	r0, r3
 8000742:	f014 fb03 	bl	8014d4c <siprintf>

  /* Infinite loop */
  while (1)
  {
    /* IMPORTANT: AUDIO_Process() should be called within a periodic process */
    AUDIO_Process();
 8000746:	f000 f98f 	bl	8000a68 <AUDIO_Process>
    BSP_TS_GetState(0, &TS_State);
 800074a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800074e:	4619      	mov	r1, r3
 8000750:	2000      	movs	r0, #0
 8000752:	f006 ffd9 	bl	8007708 <BSP_TS_GetState>
    if(TS_State.TouchDetected)
 8000756:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800075a:	2b00      	cmp	r3, #0
 800075c:	f000 80fa 	beq.w	8000954 <AudioPlay_demo+0x2d8>
    {
      x1 = TS_State.TouchX;
 8000760:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000764:	f8a7 3220 	strh.w	r3, [r7, #544]	; 0x220
      y1 = TS_State.TouchY;
 8000768:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800076c:	f8a7 321e 	strh.w	r3, [r7, #542]	; 0x21e
      if((y1<255)&&(y1>185))
 8000770:	f8b7 321e 	ldrh.w	r3, [r7, #542]	; 0x21e
 8000774:	2bfe      	cmp	r3, #254	; 0xfe
 8000776:	f200 8094 	bhi.w	80008a2 <AudioPlay_demo+0x226>
 800077a:	f8b7 321e 	ldrh.w	r3, [r7, #542]	; 0x21e
 800077e:	2bb9      	cmp	r3, #185	; 0xb9
 8000780:	f240 808f 	bls.w	80008a2 <AudioPlay_demo+0x226>
      {
        if((205<x1)&&(x1<275))
 8000784:	f8b7 3220 	ldrh.w	r3, [r7, #544]	; 0x220
 8000788:	2bcd      	cmp	r3, #205	; 0xcd
 800078a:	d91c      	bls.n	80007c6 <AudioPlay_demo+0x14a>
 800078c:	f8b7 3220 	ldrh.w	r3, [r7, #544]	; 0x220
 8000790:	f5b3 7f89 	cmp.w	r3, #274	; 0x112
 8000794:	d817      	bhi.n	80007c6 <AudioPlay_demo+0x14a>
        {
          /**Audio PLAY or AUDIO Resume*/
          BSP_AUDIO_OUT_GetState(0,&AudioState);
 8000796:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 800079a:	4619      	mov	r1, r3
 800079c:	2000      	movs	r0, #0
 800079e:	f004 faab 	bl	8004cf8 <BSP_AUDIO_OUT_GetState>

          if(AudioState==AUDIO_OUT_STATE_PLAYING)
 80007a2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d106      	bne.n	80007b8 <AudioPlay_demo+0x13c>
          {
            BSP_AUDIO_OUT_Pause(0);
 80007aa:	2000      	movs	r0, #0
 80007ac:	f004 f8d6 	bl	800495c <BSP_AUDIO_OUT_Pause>

            HAL_Delay(250);
 80007b0:	20fa      	movs	r0, #250	; 0xfa
 80007b2:	f007 f99b 	bl	8007aec <HAL_Delay>
          if(AudioState==AUDIO_OUT_STATE_PLAYING)
 80007b6:	e073      	b.n	80008a0 <AudioPlay_demo+0x224>
          }
          else
          {
            BSP_AUDIO_OUT_Resume(0);
 80007b8:	2000      	movs	r0, #0
 80007ba:	f004 f91b 	bl	80049f4 <BSP_AUDIO_OUT_Resume>

            HAL_Delay(250);
 80007be:	20fa      	movs	r0, #250	; 0xfa
 80007c0:	f007 f994 	bl	8007aec <HAL_Delay>
          if(AudioState==AUDIO_OUT_STATE_PLAYING)
 80007c4:	e06c      	b.n	80008a0 <AudioPlay_demo+0x224>
          }
        }
        else
        {
          if((y1<245)&&(y1>195))
 80007c6:	f8b7 321e 	ldrh.w	r3, [r7, #542]	; 0x21e
 80007ca:	2bf4      	cmp	r3, #244	; 0xf4
 80007cc:	f200 80c1 	bhi.w	8000952 <AudioPlay_demo+0x2d6>
 80007d0:	f8b7 321e 	ldrh.w	r3, [r7, #542]	; 0x21e
 80007d4:	2bc3      	cmp	r3, #195	; 0xc3
 80007d6:	f240 80bc 	bls.w	8000952 <AudioPlay_demo+0x2d6>
          {
            if((395<x1)&&(x1<445))
 80007da:	f8b7 3220 	ldrh.w	r3, [r7, #544]	; 0x220
 80007de:	f5b3 7fc6 	cmp.w	r3, #396	; 0x18c
 80007e2:	d323      	bcc.n	800082c <AudioPlay_demo+0x1b0>
 80007e4:	f8b7 3220 	ldrh.w	r3, [r7, #544]	; 0x220
 80007e8:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 80007ec:	d81e      	bhi.n	800082c <AudioPlay_demo+0x1b0>
            {
              /**VOL -*/
              if (uwVolume > 5)
 80007ee:	4b67      	ldr	r3, [pc, #412]	; (800098c <AudioPlay_demo+0x310>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b05      	cmp	r3, #5
 80007f4:	d905      	bls.n	8000802 <AudioPlay_demo+0x186>
              {
                uwVolume -= 5;
 80007f6:	4b65      	ldr	r3, [pc, #404]	; (800098c <AudioPlay_demo+0x310>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	3b05      	subs	r3, #5
 80007fc:	4a63      	ldr	r2, [pc, #396]	; (800098c <AudioPlay_demo+0x310>)
 80007fe:	6013      	str	r3, [r2, #0]
 8000800:	e002      	b.n	8000808 <AudioPlay_demo+0x18c>
              }
              else
              {
                uwVolume = 0;
 8000802:	4b62      	ldr	r3, [pc, #392]	; (800098c <AudioPlay_demo+0x310>)
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
              }

              sprintf((char*)VolStr, "VOL:%lu", uwVolume);
 8000808:	4b60      	ldr	r3, [pc, #384]	; (800098c <AudioPlay_demo+0x310>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000810:	4961      	ldr	r1, [pc, #388]	; (8000998 <AudioPlay_demo+0x31c>)
 8000812:	4618      	mov	r0, r3
 8000814:	f014 fa9a 	bl	8014d4c <siprintf>
              BSP_AUDIO_OUT_SetVolume(0, uwVolume);
 8000818:	4b5c      	ldr	r3, [pc, #368]	; (800098c <AudioPlay_demo+0x310>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4619      	mov	r1, r3
 800081e:	2000      	movs	r0, #0
 8000820:	f004 f996 	bl	8004b50 <BSP_AUDIO_OUT_SetVolume>
              HAL_Delay(250);
 8000824:	20fa      	movs	r0, #250	; 0xfa
 8000826:	f007 f961 	bl	8007aec <HAL_Delay>
 800082a:	e039      	b.n	80008a0 <AudioPlay_demo+0x224>
            }
            else
            {
              if((35<x1)&&(x1<85))
 800082c:	f8b7 3220 	ldrh.w	r3, [r7, #544]	; 0x220
 8000830:	2b23      	cmp	r3, #35	; 0x23
 8000832:	f240 808e 	bls.w	8000952 <AudioPlay_demo+0x2d6>
 8000836:	f8b7 3220 	ldrh.w	r3, [r7, #544]	; 0x220
 800083a:	2b54      	cmp	r3, #84	; 0x54
 800083c:	f200 8089 	bhi.w	8000952 <AudioPlay_demo+0x2d6>
              {
                /*FREQ -*/

                if((35<x1)&&(x1<85))
 8000840:	f8b7 3220 	ldrh.w	r3, [r7, #544]	; 0x220
 8000844:	2b23      	cmp	r3, #35	; 0x23
 8000846:	f240 8084 	bls.w	8000952 <AudioPlay_demo+0x2d6>
 800084a:	f8b7 3220 	ldrh.w	r3, [r7, #544]	; 0x220
 800084e:	2b54      	cmp	r3, #84	; 0x54
 8000850:	d87f      	bhi.n	8000952 <AudioPlay_demo+0x2d6>
                {
                  /*FREQ +*/
                  if (*AudioFreq_ptr != 8000)
 8000852:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800085c:	d013      	beq.n	8000886 <AudioPlay_demo+0x20a>
                  {
                    AudioFreq_ptr++;
 800085e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000862:	3304      	adds	r3, #4
 8000864:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
                    BSP_AUDIO_OUT_Stop(0);
 8000868:	2000      	movs	r0, #0
 800086a:	f004 f90f 	bl	8004a8c <BSP_AUDIO_OUT_Stop>
                    BSP_AUDIO_OUT_SetSampleRate(0, *AudioFreq_ptr);
 800086e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4619      	mov	r1, r3
 8000876:	2000      	movs	r0, #0
 8000878:	f004 f9c8 	bl	8004c0c <BSP_AUDIO_OUT_SetSampleRate>
                    AUDIO_Start((uint32_t *)AUDIO_SRC_FILE_ADDRESS, (uint32_t)AUDIO_FILE_SIZE);
 800087c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000880:	4844      	ldr	r0, [pc, #272]	; (8000994 <AudioPlay_demo+0x318>)
 8000882:	f000 f88f 	bl	80009a4 <AUDIO_Start>
                  }
                  sprintf((char*)FreqStr, "FREQ:%lu", *AudioFreq_ptr);
 8000886:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	4942      	ldr	r1, [pc, #264]	; (800099c <AudioPlay_demo+0x320>)
 8000892:	4618      	mov	r0, r3
 8000894:	f014 fa5a 	bl	8014d4c <siprintf>
                  HAL_Delay(250);
 8000898:	20fa      	movs	r0, #250	; 0xfa
 800089a:	f007 f927 	bl	8007aec <HAL_Delay>
        if((205<x1)&&(x1<275))
 800089e:	e058      	b.n	8000952 <AudioPlay_demo+0x2d6>
 80008a0:	e057      	b.n	8000952 <AudioPlay_demo+0x2d6>
        }
      }
      else
      {

        if((95<y1)&&(y1<145))
 80008a2:	f8b7 321e 	ldrh.w	r3, [r7, #542]	; 0x21e
 80008a6:	2b5f      	cmp	r3, #95	; 0x5f
 80008a8:	d954      	bls.n	8000954 <AudioPlay_demo+0x2d8>
 80008aa:	f8b7 321e 	ldrh.w	r3, [r7, #542]	; 0x21e
 80008ae:	2b90      	cmp	r3, #144	; 0x90
 80008b0:	d850      	bhi.n	8000954 <AudioPlay_demo+0x2d8>
        {
          if((395<x1)&&(x1<445))
 80008b2:	f8b7 3220 	ldrh.w	r3, [r7, #544]	; 0x220
 80008b6:	f5b3 7fc6 	cmp.w	r3, #396	; 0x18c
 80008ba:	d323      	bcc.n	8000904 <AudioPlay_demo+0x288>
 80008bc:	f8b7 3220 	ldrh.w	r3, [r7, #544]	; 0x220
 80008c0:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 80008c4:	d81e      	bhi.n	8000904 <AudioPlay_demo+0x288>
          {
            /**VOL +*/
            if (uwVolume < 95)
 80008c6:	4b31      	ldr	r3, [pc, #196]	; (800098c <AudioPlay_demo+0x310>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2b5e      	cmp	r3, #94	; 0x5e
 80008cc:	d805      	bhi.n	80008da <AudioPlay_demo+0x25e>
            {
              uwVolume += 5;
 80008ce:	4b2f      	ldr	r3, [pc, #188]	; (800098c <AudioPlay_demo+0x310>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	3305      	adds	r3, #5
 80008d4:	4a2d      	ldr	r2, [pc, #180]	; (800098c <AudioPlay_demo+0x310>)
 80008d6:	6013      	str	r3, [r2, #0]
 80008d8:	e002      	b.n	80008e0 <AudioPlay_demo+0x264>
            }
            else
            {
              uwVolume = 100;
 80008da:	4b2c      	ldr	r3, [pc, #176]	; (800098c <AudioPlay_demo+0x310>)
 80008dc:	2264      	movs	r2, #100	; 0x64
 80008de:	601a      	str	r2, [r3, #0]
            }
            sprintf((char*)VolStr, "VOL:%lu", uwVolume);
 80008e0:	4b2a      	ldr	r3, [pc, #168]	; (800098c <AudioPlay_demo+0x310>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80008e8:	492b      	ldr	r1, [pc, #172]	; (8000998 <AudioPlay_demo+0x31c>)
 80008ea:	4618      	mov	r0, r3
 80008ec:	f014 fa2e 	bl	8014d4c <siprintf>
            BSP_AUDIO_OUT_SetVolume(0, uwVolume);
 80008f0:	4b26      	ldr	r3, [pc, #152]	; (800098c <AudioPlay_demo+0x310>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4619      	mov	r1, r3
 80008f6:	2000      	movs	r0, #0
 80008f8:	f004 f92a 	bl	8004b50 <BSP_AUDIO_OUT_SetVolume>
            HAL_Delay(250);
 80008fc:	20fa      	movs	r0, #250	; 0xfa
 80008fe:	f007 f8f5 	bl	8007aec <HAL_Delay>
 8000902:	e027      	b.n	8000954 <AudioPlay_demo+0x2d8>
          }
          else
          {
            if (*AudioFreq_ptr != 96000)
 8000904:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a25      	ldr	r2, [pc, #148]	; (80009a0 <AudioPlay_demo+0x324>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d013      	beq.n	8000938 <AudioPlay_demo+0x2bc>
            {
              AudioFreq_ptr--;
 8000910:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000914:	3b04      	subs	r3, #4
 8000916:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
              BSP_AUDIO_OUT_Stop(0);
 800091a:	2000      	movs	r0, #0
 800091c:	f004 f8b6 	bl	8004a8c <BSP_AUDIO_OUT_Stop>
              BSP_AUDIO_OUT_SetSampleRate(0, *AudioFreq_ptr);
 8000920:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4619      	mov	r1, r3
 8000928:	2000      	movs	r0, #0
 800092a:	f004 f96f 	bl	8004c0c <BSP_AUDIO_OUT_SetSampleRate>
              AUDIO_Start((uint32_t *)AUDIO_SRC_FILE_ADDRESS, (uint32_t)AUDIO_FILE_SIZE);
 800092e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000932:	4818      	ldr	r0, [pc, #96]	; (8000994 <AudioPlay_demo+0x318>)
 8000934:	f000 f836 	bl	80009a4 <AUDIO_Start>
            }
            sprintf((char*)FreqStr, "FREQ:%lu", *AudioFreq_ptr);
 8000938:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	4916      	ldr	r1, [pc, #88]	; (800099c <AudioPlay_demo+0x320>)
 8000944:	4618      	mov	r0, r3
 8000946:	f014 fa01 	bl	8014d4c <siprintf>
            HAL_Delay(250);
 800094a:	20fa      	movs	r0, #250	; 0xfa
 800094c:	f007 f8ce 	bl	8007aec <HAL_Delay>
 8000950:	e000      	b.n	8000954 <AudioPlay_demo+0x2d8>
        if((205<x1)&&(x1<275))
 8000952:	bf00      	nop
        }
        else
        {}
      }
    }
    if (CheckForUserInput() > 0)
 8000954:	f001 f8ac 	bl	8001ab0 <CheckForUserInput>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	f43f aef3 	beq.w	8000746 <AudioPlay_demo+0xca>
    {
      ButtonState = 0;
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <AudioPlay_demo+0x304>)
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
      BSP_AUDIO_OUT_Stop(0);
 8000966:	2000      	movs	r0, #0
 8000968:	f004 f890 	bl	8004a8c <BSP_AUDIO_OUT_Stop>
      BSP_AUDIO_OUT_DeInit(0);
 800096c:	2000      	movs	r0, #0
 800096e:	f003 fe2f 	bl	80045d0 <BSP_AUDIO_OUT_DeInit>
      return;
 8000972:	bf00      	nop
    }
  }
}
 8000974:	f507 770a 	add.w	r7, r7, #552	; 0x228
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	24000404 	.word	0x24000404
 8000980:	240070c8 	.word	0x240070c8
 8000984:	0801617c 	.word	0x0801617c
 8000988:	24000ff4 	.word	0x24000ff4
 800098c:	24000400 	.word	0x24000400
 8000990:	24000ff8 	.word	0x24000ff8
 8000994:	90080000 	.word	0x90080000
 8000998:	08016168 	.word	0x08016168
 800099c:	08016170 	.word	0x08016170
 80009a0:	00017700 	.word	0x00017700

080009a4 <AUDIO_Start>:
  * @brief  Starts Audio streaming.
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_Start(uint32_t *psrc_address, uint32_t file_size)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
  uint32_t bytesread;

  buffer_ctl.state = BUFFER_OFFSET_NONE;
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <AUDIO_Start+0x60>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
  buffer_ctl.AudioFileSize = file_size;
 80009b6:	4a13      	ldr	r2, [pc, #76]	; (8000a04 <AUDIO_Start+0x60>)
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	f8c2 3808 	str.w	r3, [r2, #2056]	; 0x808
  buffer_ctl.SrcAddress = psrc_address;
 80009be:	4a11      	ldr	r2, [pc, #68]	; (8000a04 <AUDIO_Start+0x60>)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f8c2 380c 	str.w	r3, [r2, #2060]	; 0x80c

  bytesread = GetData( (void *)psrc_address,
 80009c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009ca:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <AUDIO_Start+0x60>)
 80009cc:	2100      	movs	r1, #0
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f000 f81c 	bl	8000a0c <GetData>
 80009d4:	60f8      	str	r0, [r7, #12]
                       0,
                       &buffer_ctl.buff[0],
                       AUDIO_BUFFER_SIZE);
  if(bytesread > 0)
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d00e      	beq.n	80009fa <AUDIO_Start+0x56>
  {
    BSP_AUDIO_OUT_Play(0,(uint8_t *)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE);
 80009dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009e0:	4908      	ldr	r1, [pc, #32]	; (8000a04 <AUDIO_Start+0x60>)
 80009e2:	2000      	movs	r0, #0
 80009e4:	f003 ff4e 	bl	8004884 <BSP_AUDIO_OUT_Play>
    audio_state = AUDIO_STATE_PLAYING;
 80009e8:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <AUDIO_Start+0x64>)
 80009ea:	2202      	movs	r2, #2
 80009ec:	701a      	strb	r2, [r3, #0]
    buffer_ctl.fptr = bytesread;
 80009ee:	4a05      	ldr	r2, [pc, #20]	; (8000a04 <AUDIO_Start+0x60>)
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
    return AUDIO_ERROR_NONE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	e000      	b.n	80009fc <AUDIO_Start+0x58>
  }
  return AUDIO_ERROR_IO;
 80009fa:	2302      	movs	r3, #2
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	240007e0 	.word	0x240007e0
 8000a08:	24000ff0 	.word	0x24000ff0

08000a0c <GetData>:
  * @brief  Gets Data from storage unit.
  * @param  None
  * @retval None
  */
static uint32_t GetData(void *pdata, uint32_t offset, uint8_t *pbuf, uint32_t NbrOfData)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b087      	sub	sp, #28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
 8000a18:	603b      	str	r3, [r7, #0]
  uint8_t *lptr = pdata;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	613b      	str	r3, [r7, #16]
  uint32_t ReadDataNbr;

  ReadDataNbr = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 8000a22:	e00c      	b.n	8000a3e <GetData+0x32>
  {
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 8000a24:	68ba      	ldr	r2, [r7, #8]
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	4413      	add	r3, r2
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	441a      	add	r2, r3
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	440b      	add	r3, r1
 8000a34:	7812      	ldrb	r2, [r2, #0]
 8000a36:	701a      	strb	r2, [r3, #0]
    ReadDataNbr++;
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	617b      	str	r3, [r7, #20]
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	441a      	add	r2, r3
 8000a44:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <GetData+0x58>)
 8000a46:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d203      	bcs.n	8000a56 <GetData+0x4a>
 8000a4e:	697a      	ldr	r2, [r7, #20]
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d3e6      	bcc.n	8000a24 <GetData+0x18>
  }

  return ReadDataNbr;
 8000a56:	697b      	ldr	r3, [r7, #20]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	371c      	adds	r7, #28
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	240007e0 	.word	0x240007e0

08000a68 <AUDIO_Process>:
  * @brief  Manages Audio process.
  * @param  None
  * @retval Audio error
  */
uint8_t AUDIO_Process(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af00      	add	r7, sp, #0
  uint32_t bytesread;
  AUDIO_ErrorTypeDef error_state = AUDIO_ERROR_NONE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  switch(audio_state)
 8000a74:	4b56      	ldr	r3, [pc, #344]	; (8000bd0 <AUDIO_Process+0x168>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	f040 809e 	bne.w	8000bba <AUDIO_Process+0x152>
  {
  case AUDIO_STATE_PLAYING:

    if(buffer_ctl.fptr >= buffer_ctl.AudioFileSize)
 8000a7e:	4b55      	ldr	r3, [pc, #340]	; (8000bd4 <AUDIO_Process+0x16c>)
 8000a80:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8000a84:	4b53      	ldr	r3, [pc, #332]	; (8000bd4 <AUDIO_Process+0x16c>)
 8000a86:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d306      	bcc.n	8000a9c <AUDIO_Process+0x34>
    {
      /* Play audio sample again ... */
      buffer_ctl.fptr = 0;
 8000a8e:	4b51      	ldr	r3, [pc, #324]	; (8000bd4 <AUDIO_Process+0x16c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
      error_state = AUDIO_ERROR_EOF;
 8000a96:	2303      	movs	r3, #3
 8000a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* 1st half buffer played; so fill it and continue playing from bottom*/
    if(buffer_ctl.state == BUFFER_OFFSET_HALF)
 8000a9c:	4b4d      	ldr	r3, [pc, #308]	; (8000bd4 <AUDIO_Process+0x16c>)
 8000a9e:	f893 3804 	ldrb.w	r3, [r3, #2052]	; 0x804
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d141      	bne.n	8000b2a <AUDIO_Process+0xc2>
    {
      bytesread = GetData((void *)buffer_ctl.SrcAddress,
 8000aa6:	4b4b      	ldr	r3, [pc, #300]	; (8000bd4 <AUDIO_Process+0x16c>)
 8000aa8:	f8d3 080c 	ldr.w	r0, [r3, #2060]	; 0x80c
 8000aac:	4b49      	ldr	r3, [pc, #292]	; (8000bd4 <AUDIO_Process+0x16c>)
 8000aae:	f8d3 1800 	ldr.w	r1, [r3, #2048]	; 0x800
 8000ab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ab6:	4a47      	ldr	r2, [pc, #284]	; (8000bd4 <AUDIO_Process+0x16c>)
 8000ab8:	f7ff ffa8 	bl	8000a0c <GetData>
 8000abc:	6238      	str	r0, [r7, #32]
                          buffer_ctl.fptr,
                          &buffer_ctl.buff[0],
                          AUDIO_BUFFER_SIZE /2);

      if( bytesread >0)
 8000abe:	6a3b      	ldr	r3, [r7, #32]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d032      	beq.n	8000b2a <AUDIO_Process+0xc2>
      {
        buffer_ctl.state = BUFFER_OFFSET_NONE;
 8000ac4:	4b43      	ldr	r3, [pc, #268]	; (8000bd4 <AUDIO_Process+0x16c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
        buffer_ctl.fptr += bytesread;
 8000acc:	4b41      	ldr	r3, [pc, #260]	; (8000bd4 <AUDIO_Process+0x16c>)
 8000ace:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8000ad2:	6a3b      	ldr	r3, [r7, #32]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	4a3f      	ldr	r2, [pc, #252]	; (8000bd4 <AUDIO_Process+0x16c>)
 8000ad8:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 8000adc:	4b3d      	ldr	r3, [pc, #244]	; (8000bd4 <AUDIO_Process+0x16c>)
 8000ade:	61fb      	str	r3, [r7, #28]
 8000ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae4:	61bb      	str	r3, [r7, #24]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	dd1d      	ble.n	8000b28 <AUDIO_Process+0xc0>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	f003 021f 	and.w	r2, r3, #31
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	4413      	add	r3, r2
 8000af6:	617b      	str	r3, [r7, #20]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	613b      	str	r3, [r7, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000afc:	f3bf 8f4f 	dsb	sy
}
 8000b00:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000b02:	4a35      	ldr	r2, [pc, #212]	; (8000bd8 <AUDIO_Process+0x170>)
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	3320      	adds	r3, #32
 8000b0e:	613b      	str	r3, [r7, #16]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	3b20      	subs	r3, #32
 8000b14:	617b      	str	r3, [r7, #20]
      } while ( op_size > 0 );
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	dcf2      	bgt.n	8000b02 <AUDIO_Process+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8000b1c:	f3bf 8f4f 	dsb	sy
}
 8000b20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b22:	f3bf 8f6f 	isb	sy
}
 8000b26:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8000b28:	bf00      	nop
      SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE/2);
      }
    }

    /* 2nd half buffer played; so fill it and continue playing from top */
    if(buffer_ctl.state == BUFFER_OFFSET_FULL)
 8000b2a:	4b2a      	ldr	r3, [pc, #168]	; (8000bd4 <AUDIO_Process+0x16c>)
 8000b2c:	f893 3804 	ldrb.w	r3, [r3, #2052]	; 0x804
 8000b30:	2b02      	cmp	r3, #2
 8000b32:	d146      	bne.n	8000bc2 <AUDIO_Process+0x15a>
    {
      bytesread = GetData((void *)buffer_ctl.SrcAddress,
 8000b34:	4b27      	ldr	r3, [pc, #156]	; (8000bd4 <AUDIO_Process+0x16c>)
 8000b36:	f8d3 080c 	ldr.w	r0, [r3, #2060]	; 0x80c
 8000b3a:	4b26      	ldr	r3, [pc, #152]	; (8000bd4 <AUDIO_Process+0x16c>)
 8000b3c:	f8d3 1800 	ldr.w	r1, [r3, #2048]	; 0x800
 8000b40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b44:	4a25      	ldr	r2, [pc, #148]	; (8000bdc <AUDIO_Process+0x174>)
 8000b46:	f7ff ff61 	bl	8000a0c <GetData>
 8000b4a:	6238      	str	r0, [r7, #32]
                          buffer_ctl.fptr,
                          &buffer_ctl.buff[AUDIO_BUFFER_SIZE /2],
                          AUDIO_BUFFER_SIZE /2);
      if( bytesread > 0)
 8000b4c:	6a3b      	ldr	r3, [r7, #32]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d037      	beq.n	8000bc2 <AUDIO_Process+0x15a>
      {
        buffer_ctl.state = BUFFER_OFFSET_NONE;
 8000b52:	4b20      	ldr	r3, [pc, #128]	; (8000bd4 <AUDIO_Process+0x16c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
        buffer_ctl.fptr += bytesread;
 8000b5a:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <AUDIO_Process+0x16c>)
 8000b5c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8000b60:	6a3b      	ldr	r3, [r7, #32]
 8000b62:	4413      	add	r3, r2
 8000b64:	4a1b      	ldr	r2, [pc, #108]	; (8000bd4 <AUDIO_Process+0x16c>)
 8000b66:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <AUDIO_Process+0x174>)
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b72:	60bb      	str	r3, [r7, #8]
    if ( dsize > 0 ) { 
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	dd1d      	ble.n	8000bb6 <AUDIO_Process+0x14e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	f003 021f 	and.w	r2, r3, #31
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	4413      	add	r3, r2
 8000b84:	607b      	str	r3, [r7, #4]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	603b      	str	r3, [r7, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b8a:	f3bf 8f4f 	dsb	sy
}
 8000b8e:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000b90:	4a11      	ldr	r2, [pc, #68]	; (8000bd8 <AUDIO_Process+0x170>)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	3320      	adds	r3, #32
 8000b9c:	603b      	str	r3, [r7, #0]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	3b20      	subs	r3, #32
 8000ba2:	607b      	str	r3, [r7, #4]
      } while ( op_size > 0 );
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	dcf2      	bgt.n	8000b90 <AUDIO_Process+0x128>
  __ASM volatile ("dsb 0xF":::"memory");
 8000baa:	f3bf 8f4f 	dsb	sy
}
 8000bae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bb0:	f3bf 8f6f 	isb	sy
}
 8000bb4:	bf00      	nop
}
 8000bb6:	bf00      	nop
      /* Clean Data Cache to update the content of the SRAM */
      SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2);
      }
    }
    break;
 8000bb8:	e003      	b.n	8000bc2 <AUDIO_Process+0x15a>

  default:
    error_state = AUDIO_ERROR_NOTREADY;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    break;
 8000bc0:	e000      	b.n	8000bc4 <AUDIO_Process+0x15c>
    break;
 8000bc2:	bf00      	nop
  }
  return (uint8_t) error_state;
 8000bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3728      	adds	r7, #40	; 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	24000ff0 	.word	0x24000ff0
 8000bd4:	240007e0 	.word	0x240007e0
 8000bd8:	e000ed00 	.word	0xe000ed00
 8000bdc:	24000be0 	.word	0x24000be0

08000be0 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Manages the full Transfer complete event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_TransferComplete_CallBack(uint32_t Interface)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if(audio_state == AUDIO_STATE_PLAYING)
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x24>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d103      	bne.n	8000bf8 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x18>
  {
    /* allows AUDIO_Process() to refill 2nd part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_FULL;
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x28>)
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	24000ff0 	.word	0x24000ff0
 8000c08:	240007e0 	.word	0x240007e0

08000c0c <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_HalfTransfer_CallBack(uint32_t Interface)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  if(audio_state == AUDIO_STATE_PLAYING)
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d103      	bne.n	8000c24 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x18>
  {
    /* allows AUDIO_Process() to refill 1st part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_HALF;
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x28>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
  }
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	24000ff0 	.word	0x24000ff0
 8000c34:	240007e0 	.word	0x240007e0

08000c38 <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_Error_CallBack(uint32_t Interface)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]

  /* Stop the program with an infinite loop */
  while (BSP_PB_GetState(BUTTON_USER) != RESET)
 8000c40:	bf00      	nop
 8000c42:	2000      	movs	r0, #0
 8000c44:	f003 fbae 	bl	80043a4 <BSP_PB_GetState>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
  {
    return;
 8000c4c:	bf00      	nop
  }

  /* could also generate a system reset to recover from the error */
  /* .... */
}
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <AudioRecord_demo>:
  *          - Audio OUT instance: 0 (SAI)
  *          - Audio OUT Device  : HDMI
  * @retval None
  */
void AudioRecord_demo(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af02      	add	r7, sp, #8
  printf("record demo\n\r");
 8000c5a:	4854      	ldr	r0, [pc, #336]	; (8000dac <AudioRecord_demo+0x158>)
 8000c5c:	f013 ff52 	bl	8014b04 <iprintf>
   uint32_t channel_nbr = 2;
 8000c60:	2302      	movs	r3, #2
 8000c62:	60fb      	str	r3, [r7, #12]

  uint32_t x_size, y_size;

  BSP_LCD_GetXSize(0, &x_size);
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	4619      	mov	r1, r3
 8000c68:	2000      	movs	r0, #0
 8000c6a:	f005 fea7 	bl	80069bc <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 8000c6e:	463b      	mov	r3, r7
 8000c70:	4619      	mov	r1, r3
 8000c72:	2000      	movs	r0, #0
 8000c74:	f005 fec0 	bl	80069f8 <BSP_LCD_GetYSize>

  /* Clear the LCD */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f000 faf2 	bl	8001264 <UTIL_LCD_Clear>
  /* Set Audio Demo description */
  UTIL_LCD_FillRect(0, 0, x_size, 90, UTIL_LCD_COLOR_BLUE);
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	4b4b      	ldr	r3, [pc, #300]	; (8000db0 <AudioRecord_demo+0x15c>)
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	235a      	movs	r3, #90	; 0x5a
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f000 fc24 	bl	80014d8 <UTIL_LCD_FillRect>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c94:	f000 fa22 	bl	80010dc <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 8000c98:	4845      	ldr	r0, [pc, #276]	; (8000db0 <AudioRecord_demo+0x15c>)
 8000c9a:	f000 fa33 	bl	8001104 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font24);
 8000c9e:	4845      	ldr	r0, [pc, #276]	; (8000db4 <AudioRecord_demo+0x160>)
 8000ca0:	f000 fa44 	bl	800112c <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"AUDIO RECORD SAI PDM EXAMPLE", CENTER_MODE);
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	4a44      	ldr	r2, [pc, #272]	; (8000db8 <AudioRecord_demo+0x164>)
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2000      	movs	r0, #0
 8000cac:	f000 fb26 	bl	80012fc <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_SetFont(&Font16);
 8000cb0:	4842      	ldr	r0, [pc, #264]	; (8000dbc <AudioRecord_demo+0x168>)
 8000cb2:	f000 fa3b 	bl	800112c <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 24, (uint8_t *)"Make sure the SW2 is in position PDM ", CENTER_MODE);
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	4a41      	ldr	r2, [pc, #260]	; (8000dc0 <AudioRecord_demo+0x16c>)
 8000cba:	2118      	movs	r1, #24
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f000 fb1d 	bl	80012fc <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 40,  (uint8_t *)"Press User button for next menu", CENTER_MODE);
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	4a3f      	ldr	r2, [pc, #252]	; (8000dc4 <AudioRecord_demo+0x170>)
 8000cc6:	2128      	movs	r1, #40	; 0x28
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f000 fb17 	bl	80012fc <UTIL_LCD_DisplayStringAt>
  /* Set the LCD Text Color */
  UTIL_LCD_DrawRect(10, 100, x_size - 20, y_size - 110, UTIL_LCD_COLOR_BLUE);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f1a3 0214 	sub.w	r2, r3, #20
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	3b6e      	subs	r3, #110	; 0x6e
 8000cd8:	4935      	ldr	r1, [pc, #212]	; (8000db0 <AudioRecord_demo+0x15c>)
 8000cda:	9100      	str	r1, [sp, #0]
 8000cdc:	2164      	movs	r1, #100	; 0x64
 8000cde:	200a      	movs	r0, #10
 8000ce0:	f000 fbba 	bl	8001458 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(11, 101, x_size - 22, y_size - 112, UTIL_LCD_COLOR_BLUE);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f1a3 0216 	sub.w	r2, r3, #22
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	3b70      	subs	r3, #112	; 0x70
 8000cee:	4930      	ldr	r1, [pc, #192]	; (8000db0 <AudioRecord_demo+0x15c>)
 8000cf0:	9100      	str	r1, [sp, #0]
 8000cf2:	2165      	movs	r1, #101	; 0x65
 8000cf4:	200b      	movs	r0, #11
 8000cf6:	f000 fbaf 	bl	8001458 <UTIL_LCD_DrawRect>

  AudioFreq_ptr = AudioFreq+2; /* AUDIO_FREQUENCY_16K; */
 8000cfa:	4a33      	ldr	r2, [pc, #204]	; (8000dc8 <AudioRecord_demo+0x174>)
 8000cfc:	4b33      	ldr	r3, [pc, #204]	; (8000dcc <AudioRecord_demo+0x178>)
 8000cfe:	601a      	str	r2, [r3, #0]

  AudioOutInit.Device = AUDIO_OUT_DEVICE_HEADPHONE;
 8000d00:	4b33      	ldr	r3, [pc, #204]	; (8000dd0 <AudioRecord_demo+0x17c>)
 8000d02:	2202      	movs	r2, #2
 8000d04:	601a      	str	r2, [r3, #0]
  AudioOutInit.ChannelsNbr = channel_nbr;
 8000d06:	4a32      	ldr	r2, [pc, #200]	; (8000dd0 <AudioRecord_demo+0x17c>)
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	60d3      	str	r3, [r2, #12]
  AudioOutInit.SampleRate = *AudioFreq_ptr;
 8000d0c:	4b2f      	ldr	r3, [pc, #188]	; (8000dcc <AudioRecord_demo+0x178>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a2f      	ldr	r2, [pc, #188]	; (8000dd0 <AudioRecord_demo+0x17c>)
 8000d14:	6053      	str	r3, [r2, #4]
  AudioOutInit.BitsPerSample = AUDIO_RESOLUTION_16B;
 8000d16:	4b2e      	ldr	r3, [pc, #184]	; (8000dd0 <AudioRecord_demo+0x17c>)
 8000d18:	2210      	movs	r2, #16
 8000d1a:	609a      	str	r2, [r3, #8]
  AudioOutInit.Volume = VolumeLevel;
 8000d1c:	4b2d      	ldr	r3, [pc, #180]	; (8000dd4 <AudioRecord_demo+0x180>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a2b      	ldr	r2, [pc, #172]	; (8000dd0 <AudioRecord_demo+0x17c>)
 8000d22:	6113      	str	r3, [r2, #16]

  AudioInInit.Device = AUDIO_IN_DEVICE_DIGITAL_MIC;
 8000d24:	4b2c      	ldr	r3, [pc, #176]	; (8000dd8 <AudioRecord_demo+0x184>)
 8000d26:	2230      	movs	r2, #48	; 0x30
 8000d28:	601a      	str	r2, [r3, #0]
  AudioInInit.ChannelsNbr = channel_nbr;
 8000d2a:	4a2b      	ldr	r2, [pc, #172]	; (8000dd8 <AudioRecord_demo+0x184>)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	60d3      	str	r3, [r2, #12]
  AudioInInit.SampleRate = *AudioFreq_ptr;
 8000d30:	4b26      	ldr	r3, [pc, #152]	; (8000dcc <AudioRecord_demo+0x178>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a28      	ldr	r2, [pc, #160]	; (8000dd8 <AudioRecord_demo+0x184>)
 8000d38:	6053      	str	r3, [r2, #4]
  AudioInInit.BitsPerSample = AUDIO_RESOLUTION_16B;
 8000d3a:	4b27      	ldr	r3, [pc, #156]	; (8000dd8 <AudioRecord_demo+0x184>)
 8000d3c:	2210      	movs	r2, #16
 8000d3e:	609a      	str	r2, [r3, #8]
  AudioInInit.Volume = VolumeLevel;
 8000d40:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <AudioRecord_demo+0x180>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a24      	ldr	r2, [pc, #144]	; (8000dd8 <AudioRecord_demo+0x184>)
 8000d46:	6113      	str	r3, [r2, #16]

  /* Initialize Audio Recorder with 2 channels to be used */
  BSP_AUDIO_IN_Init(1, &AudioInInit);
 8000d48:	4923      	ldr	r1, [pc, #140]	; (8000dd8 <AudioRecord_demo+0x184>)
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f004 f836 	bl	8004dbc <BSP_AUDIO_IN_Init>
  BSP_AUDIO_IN_GetState(1, &InState);
 8000d50:	4922      	ldr	r1, [pc, #136]	; (8000ddc <AudioRecord_demo+0x188>)
 8000d52:	2001      	movs	r0, #1
 8000d54:	f004 fc8a 	bl	800566c <BSP_AUDIO_IN_GetState>


  /* Start Recording */
  UTIL_LCD_DisplayStringAt(0, 190, (uint8_t *)"Started recording", CENTER_MODE);
 8000d58:	2301      	movs	r3, #1
 8000d5a:	4a21      	ldr	r2, [pc, #132]	; (8000de0 <AudioRecord_demo+0x18c>)
 8000d5c:	21be      	movs	r1, #190	; 0xbe
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f000 facc 	bl	80012fc <UTIL_LCD_DisplayStringAt>
  int32_t status = BSP_AUDIO_IN_RecordPDM(1, (uint8_t*)&recordPDMBuf, 2*AUDIO_IN_PDM_BUFFER_SIZE);
 8000d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d68:	491e      	ldr	r1, [pc, #120]	; (8000de4 <AudioRecord_demo+0x190>)
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	f004 fc4c 	bl	8005608 <BSP_AUDIO_IN_RecordPDM>
 8000d70:	60b8      	str	r0, [r7, #8]
  printf("%d\n\r", (int) status);
 8000d72:	68b9      	ldr	r1, [r7, #8]
 8000d74:	481c      	ldr	r0, [pc, #112]	; (8000de8 <AudioRecord_demo+0x194>)
 8000d76:	f013 fec5 	bl	8014b04 <iprintf>

  while (1)
  {
    UTIL_LCD_DisplayStringAt(0, 190, (uint8_t *)"checking for ui", CENTER_MODE);
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	4a1b      	ldr	r2, [pc, #108]	; (8000dec <AudioRecord_demo+0x198>)
 8000d7e:	21be      	movs	r1, #190	; 0xbe
 8000d80:	2000      	movs	r0, #0
 8000d82:	f000 fabb 	bl	80012fc <UTIL_LCD_DisplayStringAt>

    if (CheckForUserInput() > 0)
 8000d86:	f000 fe93 	bl	8001ab0 <CheckForUserInput>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d0f4      	beq.n	8000d7a <AudioRecord_demo+0x126>
    {
      ButtonState = 0;
 8000d90:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <AudioRecord_demo+0x19c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
      BSP_AUDIO_IN_Stop(1);
 8000d96:	2001      	movs	r0, #1
 8000d98:	f004 fbf4 	bl	8005584 <BSP_AUDIO_IN_Stop>
      BSP_AUDIO_IN_DeInit(1);
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f004 f99f 	bl	80050e0 <BSP_AUDIO_IN_DeInit>
      return;
 8000da2:	bf00      	nop
    }
  }
}
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	080162a0 	.word	0x080162a0
 8000db0:	ff0000ff 	.word	0xff0000ff
 8000db4:	2400044c 	.word	0x2400044c
 8000db8:	080162b0 	.word	0x080162b0
 8000dbc:	24000454 	.word	0x24000454
 8000dc0:	080162d0 	.word	0x080162d0
 8000dc4:	080162f8 	.word	0x080162f8
 8000dc8:	2400042c 	.word	0x2400042c
 8000dcc:	24007054 	.word	0x24007054
 8000dd0:	24007040 	.word	0x24007040
 8000dd4:	24000448 	.word	0x24000448
 8000dd8:	2400702c 	.word	0x2400702c
 8000ddc:	24007024 	.word	0x24007024
 8000de0:	08016318 	.word	0x08016318
 8000de4:	240005c0 	.word	0x240005c0
 8000de8:	0801632c 	.word	0x0801632c
 8000dec:	08016334 	.word	0x08016334
 8000df0:	240070c8 	.word	0x240070c8

08000df4 <BSP_AUDIO_IN_TransferComplete_CallBack>:
/**
  * @brief Calculates the remaining file size and new position of the pointer.
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  UTIL_LCD_DisplayStringAt(0, 190, (uint8_t *)"bsp audio in tcc", CENTER_MODE);
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	4a41      	ldr	r2, [pc, #260]	; (8000f04 <BSP_AUDIO_IN_TransferComplete_CallBack+0x110>)
 8000e00:	21be      	movs	r1, #190	; 0xbe
 8000e02:	2000      	movs	r0, #0
 8000e04:	f000 fa7a 	bl	80012fc <UTIL_LCD_DisplayStringAt>

  printf("callback was called\r\n");
 8000e08:	483f      	ldr	r0, [pc, #252]	; (8000f08 <BSP_AUDIO_IN_TransferComplete_CallBack+0x114>)
 8000e0a:	f013 fee1 	bl	8014bd0 <puts>
  if(Instance == 1U)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d170      	bne.n	8000ef6 <BSP_AUDIO_IN_TransferComplete_CallBack+0x102>
 8000e14:	4b3d      	ldr	r3, [pc, #244]	; (8000f0c <BSP_AUDIO_IN_TransferComplete_CallBack+0x118>)
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e1c:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	dd1d      	ble.n	8000e60 <BSP_AUDIO_IN_TransferComplete_CallBack+0x6c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	f003 021f 	and.w	r2, r3, #31
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e34:	f3bf 8f4f 	dsb	sy
}
 8000e38:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000e3a:	4a35      	ldr	r2, [pc, #212]	; (8000f10 <BSP_AUDIO_IN_TransferComplete_CallBack+0x11c>)
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	3320      	adds	r3, #32
 8000e46:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	3b20      	subs	r3, #32
 8000e4c:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	dcf2      	bgt.n	8000e3a <BSP_AUDIO_IN_TransferComplete_CallBack+0x46>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e54:	f3bf 8f4f 	dsb	sy
}
 8000e58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e5a:	f3bf 8f6f 	isb	sy
}
 8000e5e:	bf00      	nop
}
 8000e60:	bf00      	nop
  {

        /* Invalidate Data Cache to get the updated content of the SRAM*/
    SCB_InvalidateDCache_by_Addr((uint32_t *)&recordPDMBuf[AUDIO_IN_PDM_BUFFER_SIZE/2], AUDIO_IN_PDM_BUFFER_SIZE*2);

    BSP_AUDIO_IN_PDMToPCM(Instance, (uint16_t*)&recordPDMBuf[AUDIO_IN_PDM_BUFFER_SIZE/2], &RecPlayback[playbackPtr]);
 8000e62:	4b2c      	ldr	r3, [pc, #176]	; (8000f14 <BSP_AUDIO_IN_TransferComplete_CallBack+0x120>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	4a2b      	ldr	r2, [pc, #172]	; (8000f18 <BSP_AUDIO_IN_TransferComplete_CallBack+0x124>)
 8000e6a:	4413      	add	r3, r2
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4927      	ldr	r1, [pc, #156]	; (8000f0c <BSP_AUDIO_IN_TransferComplete_CallBack+0x118>)
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f004 fb4d 	bl	8005510 <BSP_AUDIO_IN_PDMToPCM>

    /* Clean Data Cache to update the content of the SRAM */
    SCB_CleanDCache_by_Addr((uint32_t*)&RecPlayback[playbackPtr], AUDIO_IN_PDM_BUFFER_SIZE/4);
 8000e76:	4b27      	ldr	r3, [pc, #156]	; (8000f14 <BSP_AUDIO_IN_TransferComplete_CallBack+0x120>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	4a26      	ldr	r2, [pc, #152]	; (8000f18 <BSP_AUDIO_IN_TransferComplete_CallBack+0x124>)
 8000e7e:	4413      	add	r3, r2
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
 8000e82:	2340      	movs	r3, #64	; 0x40
 8000e84:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8000e86:	6a3b      	ldr	r3, [r7, #32]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	dd1d      	ble.n	8000ec8 <BSP_AUDIO_IN_TransferComplete_CallBack+0xd4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8e:	f003 021f 	and.w	r2, r3, #31
 8000e92:	6a3b      	ldr	r3, [r7, #32]
 8000e94:	4413      	add	r3, r2
 8000e96:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e9c:	f3bf 8f4f 	dsb	sy
}
 8000ea0:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000ea2:	4a1b      	ldr	r2, [pc, #108]	; (8000f10 <BSP_AUDIO_IN_TransferComplete_CallBack+0x11c>)
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	3320      	adds	r3, #32
 8000eae:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	3b20      	subs	r3, #32
 8000eb4:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	dcf2      	bgt.n	8000ea2 <BSP_AUDIO_IN_TransferComplete_CallBack+0xae>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ebc:	f3bf 8f4f 	dsb	sy
}
 8000ec0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ec2:	f3bf 8f6f 	isb	sy
}
 8000ec6:	bf00      	nop
}
 8000ec8:	bf00      	nop

    micTest = RecPlayback[0];
 8000eca:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <BSP_AUDIO_IN_TransferComplete_CallBack+0x124>)
 8000ecc:	881a      	ldrh	r2, [r3, #0]
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <BSP_AUDIO_IN_TransferComplete_CallBack+0x128>)
 8000ed0:	801a      	strh	r2, [r3, #0]
    micTest2 = PlaybackBuffer[0];
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <BSP_AUDIO_IN_TransferComplete_CallBack+0x12c>)
 8000ed4:	881a      	ldrh	r2, [r3, #0]
 8000ed6:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <BSP_AUDIO_IN_TransferComplete_CallBack+0x130>)
 8000ed8:	801a      	strh	r2, [r3, #0]

    playbackPtr += AUDIO_IN_PDM_BUFFER_SIZE/4/2;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <BSP_AUDIO_IN_TransferComplete_CallBack+0x120>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	3320      	adds	r3, #32
 8000ee0:	4a0c      	ldr	r2, [pc, #48]	; (8000f14 <BSP_AUDIO_IN_TransferComplete_CallBack+0x120>)
 8000ee2:	6013      	str	r3, [r2, #0]
    if(playbackPtr >= AUDIO_BUFF_SIZE)
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <BSP_AUDIO_IN_TransferComplete_CallBack+0x120>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000eec:	d306      	bcc.n	8000efc <BSP_AUDIO_IN_TransferComplete_CallBack+0x108>
    {  playbackPtr = 0;
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <BSP_AUDIO_IN_TransferComplete_CallBack+0x120>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
  }
  else
  {
    AudioBufferOffset = BUFFER_OFFSET_FULL;
  }
}
 8000ef4:	e002      	b.n	8000efc <BSP_AUDIO_IN_TransferComplete_CallBack+0x108>
    AudioBufferOffset = BUFFER_OFFSET_FULL;
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <BSP_AUDIO_IN_TransferComplete_CallBack+0x134>)
 8000ef8:	2202      	movs	r2, #2
 8000efa:	601a      	str	r2, [r3, #0]
}
 8000efc:	bf00      	nop
 8000efe:	3728      	adds	r7, #40	; 0x28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	08016344 	.word	0x08016344
 8000f08:	08016358 	.word	0x08016358
 8000f0c:	240006c0 	.word	0x240006c0
 8000f10:	e000ed00 	.word	0xe000ed00
 8000f14:	24007020 	.word	0x24007020
 8000f18:	24001020 	.word	0x24001020
 8000f1c:	2400100c 	.word	0x2400100c
 8000f20:	24003020 	.word	0x24003020
 8000f24:	2400100e 	.word	0x2400100e
 8000f28:	24007028 	.word	0x24007028

08000f2c <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08a      	sub	sp, #40	; 0x28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  if(Instance == 1U)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d168      	bne.n	800100c <BSP_AUDIO_IN_HalfTransfer_CallBack+0xe0>
 8000f3a:	4b38      	ldr	r3, [pc, #224]	; (800101c <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf0>)
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f42:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	dd1d      	ble.n	8000f86 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	f003 021f 	and.w	r2, r3, #31
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4413      	add	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f5a:	f3bf 8f4f 	dsb	sy
}
 8000f5e:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000f60:	4a2f      	ldr	r2, [pc, #188]	; (8001020 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf4>)
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	3320      	adds	r3, #32
 8000f6c:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	3b20      	subs	r3, #32
 8000f72:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	dcf2      	bgt.n	8000f60 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f7a:	f3bf 8f4f 	dsb	sy
}
 8000f7e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f80:	f3bf 8f6f 	isb	sy
}
 8000f84:	bf00      	nop
}
 8000f86:	bf00      	nop
  {
        /* Invalidate Data Cache to get the updated content of the SRAM*/
    SCB_InvalidateDCache_by_Addr((uint32_t *)&recordPDMBuf[0], AUDIO_IN_PDM_BUFFER_SIZE*2);

    BSP_AUDIO_IN_PDMToPCM(Instance, (uint16_t*)&recordPDMBuf[0], &RecPlayback[playbackPtr]);
 8000f88:	4b26      	ldr	r3, [pc, #152]	; (8001024 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf8>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	4a26      	ldr	r2, [pc, #152]	; (8001028 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xfc>)
 8000f90:	4413      	add	r3, r2
 8000f92:	461a      	mov	r2, r3
 8000f94:	4921      	ldr	r1, [pc, #132]	; (800101c <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf0>)
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f004 faba 	bl	8005510 <BSP_AUDIO_IN_PDMToPCM>

    /* Clean Data Cache to update the content of the SRAM */
    SCB_CleanDCache_by_Addr((uint32_t*)&RecPlayback[playbackPtr], AUDIO_IN_PDM_BUFFER_SIZE/4);
 8000f9c:	4b21      	ldr	r3, [pc, #132]	; (8001024 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf8>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	4a21      	ldr	r2, [pc, #132]	; (8001028 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xfc>)
 8000fa4:	4413      	add	r3, r2
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8000fa8:	2340      	movs	r3, #64	; 0x40
 8000faa:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	dd1d      	ble.n	8000fee <BSP_AUDIO_IN_HalfTransfer_CallBack+0xc2>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb4:	f003 021f 	and.w	r2, r3, #31
 8000fb8:	6a3b      	ldr	r3, [r7, #32]
 8000fba:	4413      	add	r3, r2
 8000fbc:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fc2:	f3bf 8f4f 	dsb	sy
}
 8000fc6:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000fc8:	4a15      	ldr	r2, [pc, #84]	; (8001020 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf4>)
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	3320      	adds	r3, #32
 8000fd4:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3b20      	subs	r3, #32
 8000fda:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	dcf2      	bgt.n	8000fc8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x9c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe2:	f3bf 8f4f 	dsb	sy
}
 8000fe6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fe8:	f3bf 8f6f 	isb	sy
}
 8000fec:	bf00      	nop
}
 8000fee:	bf00      	nop

    playbackPtr += AUDIO_IN_PDM_BUFFER_SIZE/4/2;
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf8>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	3320      	adds	r3, #32
 8000ff6:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf8>)
 8000ff8:	6013      	str	r3, [r2, #0]
    if(playbackPtr >= AUDIO_BUFF_SIZE)
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001002:	d306      	bcc.n	8001012 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xe6>
    {
      playbackPtr = 0;
 8001004:	4b07      	ldr	r3, [pc, #28]	; (8001024 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf8>)
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
  }
  else
  {
    AudioBufferOffset = BUFFER_OFFSET_HALF;
  }
}
 800100a:	e002      	b.n	8001012 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xe6>
    AudioBufferOffset = BUFFER_OFFSET_HALF;
 800100c:	4b07      	ldr	r3, [pc, #28]	; (800102c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x100>)
 800100e:	2201      	movs	r2, #1
 8001010:	601a      	str	r2, [r3, #0]
}
 8001012:	bf00      	nop
 8001014:	3728      	adds	r7, #40	; 0x28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	240005c0 	.word	0x240005c0
 8001020:	e000ed00 	.word	0xe000ed00
 8001024:	24007020 	.word	0x24007020
 8001028:	24001020 	.word	0x24001020
 800102c:	24007028 	.word	0x24007028

08001030 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a22      	ldr	r2, [pc, #136]	; (80010c8 <UTIL_LCD_SetFuncDriver+0x98>)
 800103e:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	4a20      	ldr	r2, [pc, #128]	; (80010c8 <UTIL_LCD_SetFuncDriver+0x98>)
 8001046:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	4a1e      	ldr	r2, [pc, #120]	; (80010c8 <UTIL_LCD_SetFuncDriver+0x98>)
 800104e:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	4a1c      	ldr	r2, [pc, #112]	; (80010c8 <UTIL_LCD_SetFuncDriver+0x98>)
 8001056:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	4a1a      	ldr	r2, [pc, #104]	; (80010c8 <UTIL_LCD_SetFuncDriver+0x98>)
 800105e:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	4a18      	ldr	r2, [pc, #96]	; (80010c8 <UTIL_LCD_SetFuncDriver+0x98>)
 8001066:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	4a16      	ldr	r2, [pc, #88]	; (80010c8 <UTIL_LCD_SetFuncDriver+0x98>)
 800106e:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	69db      	ldr	r3, [r3, #28]
 8001074:	4a14      	ldr	r2, [pc, #80]	; (80010c8 <UTIL_LCD_SetFuncDriver+0x98>)
 8001076:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <UTIL_LCD_SetFuncDriver+0x98>)
 800107e:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001084:	4a10      	ldr	r2, [pc, #64]	; (80010c8 <UTIL_LCD_SetFuncDriver+0x98>)
 8001086:	6253      	str	r3, [r2, #36]	; 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108c:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <UTIL_LCD_SetFuncDriver+0x98>)
 800108e:	6293      	str	r3, [r2, #40]	; 0x28

  DrawProp->LcdLayer = 0;
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <UTIL_LCD_SetFuncDriver+0x9c>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <UTIL_LCD_SetFuncDriver+0x9c>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <UTIL_LCD_SetFuncDriver+0x98>)
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	4a0b      	ldr	r2, [pc, #44]	; (80010d0 <UTIL_LCD_SetFuncDriver+0xa0>)
 80010a2:	4611      	mov	r1, r2
 80010a4:	2000      	movs	r0, #0
 80010a6:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <UTIL_LCD_SetFuncDriver+0x98>)
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	4a09      	ldr	r2, [pc, #36]	; (80010d4 <UTIL_LCD_SetFuncDriver+0xa4>)
 80010ae:	4611      	mov	r1, r2
 80010b0:	2000      	movs	r0, #0
 80010b2:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <UTIL_LCD_SetFuncDriver+0x98>)
 80010b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b8:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <UTIL_LCD_SetFuncDriver+0xa8>)
 80010ba:	4611      	mov	r1, r2
 80010bc:	2000      	movs	r0, #0
 80010be:	4798      	blx	r3
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	24007098 	.word	0x24007098
 80010cc:	24007058 	.word	0x24007058
 80010d0:	2400706c 	.word	0x2400706c
 80010d4:	24007070 	.word	0x24007070
 80010d8:	24007074 	.word	0x24007074

080010dc <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <UTIL_LCD_SetTextColor+0x24>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	4a05      	ldr	r2, [pc, #20]	; (8001100 <UTIL_LCD_SetTextColor+0x24>)
 80010ea:	015b      	lsls	r3, r3, #5
 80010ec:	4413      	add	r3, r2
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	601a      	str	r2, [r3, #0]
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	24007058 	.word	0x24007058

08001104 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <UTIL_LCD_SetBackColor+0x24>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	4a05      	ldr	r2, [pc, #20]	; (8001128 <UTIL_LCD_SetBackColor+0x24>)
 8001112:	015b      	lsls	r3, r3, #5
 8001114:	4413      	add	r3, r2
 8001116:	3304      	adds	r3, #4
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	601a      	str	r2, [r3, #0]
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	24007058 	.word	0x24007058

0800112c <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <UTIL_LCD_SetFont+0x24>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	4a05      	ldr	r2, [pc, #20]	; (8001150 <UTIL_LCD_SetFont+0x24>)
 800113a:	015b      	lsls	r3, r3, #5
 800113c:	4413      	add	r3, r2
 800113e:	3308      	adds	r3, #8
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	601a      	str	r2, [r3, #0]
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	24007058 	.word	0x24007058

08001154 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b087      	sub	sp, #28
 8001158:	af02      	add	r7, sp, #8
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
 8001160:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <UTIL_LCD_FillRGBRect+0x30>)
 8001164:	685c      	ldr	r4, [r3, #4]
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <UTIL_LCD_FillRGBRect+0x34>)
 8001168:	6918      	ldr	r0, [r3, #16]
 800116a:	6a3b      	ldr	r3, [r7, #32]
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68ba      	ldr	r2, [r7, #8]
 8001176:	68f9      	ldr	r1, [r7, #12]
 8001178:	47a0      	blx	r4
}
 800117a:	bf00      	nop
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	bd90      	pop	{r4, r7, pc}
 8001182:	bf00      	nop
 8001184:	24007098 	.word	0x24007098
 8001188:	24007058 	.word	0x24007058

0800118c <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b087      	sub	sp, #28
 8001190:	af02      	add	r7, sp, #8
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
 8001198:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <UTIL_LCD_DrawHLine+0x64>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d118      	bne.n	80011d4 <UTIL_LCD_DrawHLine+0x48>
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <UTIL_LCD_DrawHLine+0x68>)
 80011a4:	689c      	ldr	r4, [r3, #8]
 80011a6:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <UTIL_LCD_DrawHLine+0x64>)
 80011a8:	6918      	ldr	r0, [r3, #16]
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	08db      	lsrs	r3, r3, #3
 80011ae:	f003 021f 	and.w	r2, r3, #31
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	0a9b      	lsrs	r3, r3, #10
 80011b6:	015b      	lsls	r3, r3, #5
 80011b8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80011bc:	431a      	orrs	r2, r3
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	0cdb      	lsrs	r3, r3, #19
 80011c2:	02db      	lsls	r3, r3, #11
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	4313      	orrs	r3, r2
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	68f9      	ldr	r1, [r7, #12]
 80011d0:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 80011d2:	e009      	b.n	80011e8 <UTIL_LCD_DrawHLine+0x5c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <UTIL_LCD_DrawHLine+0x68>)
 80011d6:	689c      	ldr	r4, [r3, #8]
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <UTIL_LCD_DrawHLine+0x64>)
 80011da:	6918      	ldr	r0, [r3, #16]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	68f9      	ldr	r1, [r7, #12]
 80011e6:	47a0      	blx	r4
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd90      	pop	{r4, r7, pc}
 80011f0:	24007058 	.word	0x24007058
 80011f4:	24007098 	.word	0x24007098

080011f8 <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b087      	sub	sp, #28
 80011fc:	af02      	add	r7, sp, #8
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <UTIL_LCD_DrawVLine+0x64>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d118      	bne.n	8001240 <UTIL_LCD_DrawVLine+0x48>
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 800120e:	4b14      	ldr	r3, [pc, #80]	; (8001260 <UTIL_LCD_DrawVLine+0x68>)
 8001210:	68dc      	ldr	r4, [r3, #12]
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <UTIL_LCD_DrawVLine+0x64>)
 8001214:	6918      	ldr	r0, [r3, #16]
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	08db      	lsrs	r3, r3, #3
 800121a:	f003 021f 	and.w	r2, r3, #31
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	0a9b      	lsrs	r3, r3, #10
 8001222:	015b      	lsls	r3, r3, #5
 8001224:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001228:	431a      	orrs	r2, r3
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	0cdb      	lsrs	r3, r3, #19
 800122e:	02db      	lsls	r3, r3, #11
 8001230:	b29b      	uxth	r3, r3
 8001232:	4313      	orrs	r3, r2
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68ba      	ldr	r2, [r7, #8]
 800123a:	68f9      	ldr	r1, [r7, #12]
 800123c:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 800123e:	e009      	b.n	8001254 <UTIL_LCD_DrawVLine+0x5c>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8001240:	4b07      	ldr	r3, [pc, #28]	; (8001260 <UTIL_LCD_DrawVLine+0x68>)
 8001242:	68dc      	ldr	r4, [r3, #12]
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <UTIL_LCD_DrawVLine+0x64>)
 8001246:	6918      	ldr	r0, [r3, #16]
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	68f9      	ldr	r1, [r7, #12]
 8001252:	47a0      	blx	r4
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	bd90      	pop	{r4, r7, pc}
 800125c:	24007058 	.word	0x24007058
 8001260:	24007098 	.word	0x24007098

08001264 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af02      	add	r7, sp, #8
 800126a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 800126c:	4b07      	ldr	r3, [pc, #28]	; (800128c <UTIL_LCD_Clear+0x28>)
 800126e:	695a      	ldr	r2, [r3, #20]
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <UTIL_LCD_Clear+0x28>)
 8001272:	6999      	ldr	r1, [r3, #24]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	460b      	mov	r3, r1
 800127a:	2100      	movs	r1, #0
 800127c:	2000      	movs	r0, #0
 800127e:	f000 f92b 	bl	80014d8 <UTIL_LCD_FillRect>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	24007058 	.word	0x24007058

08001290 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	4613      	mov	r3, r2
 800129c:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 800129e:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <UTIL_LCD_DisplayChar+0x68>)
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	4a15      	ldr	r2, [pc, #84]	; (80012f8 <UTIL_LCD_DisplayChar+0x68>)
 80012a4:	015b      	lsls	r3, r3, #5
 80012a6:	4413      	add	r3, r2
 80012a8:	3308      	adds	r3, #8
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 80012b2:	4911      	ldr	r1, [pc, #68]	; (80012f8 <UTIL_LCD_DisplayChar+0x68>)
 80012b4:	68c9      	ldr	r1, [r1, #12]
 80012b6:	4810      	ldr	r0, [pc, #64]	; (80012f8 <UTIL_LCD_DisplayChar+0x68>)
 80012b8:	0149      	lsls	r1, r1, #5
 80012ba:	4401      	add	r1, r0
 80012bc:	3108      	adds	r1, #8
 80012be:	6809      	ldr	r1, [r1, #0]
 80012c0:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80012c2:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 80012c6:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <UTIL_LCD_DisplayChar+0x68>)
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	480b      	ldr	r0, [pc, #44]	; (80012f8 <UTIL_LCD_DisplayChar+0x68>)
 80012cc:	015b      	lsls	r3, r3, #5
 80012ce:	4403      	add	r3, r0
 80012d0:	3308      	adds	r3, #8
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	889b      	ldrh	r3, [r3, #4]
 80012d6:	3307      	adds	r3, #7
 80012d8:	2b00      	cmp	r3, #0
 80012da:	da00      	bge.n	80012de <UTIL_LCD_DisplayChar+0x4e>
 80012dc:	3307      	adds	r3, #7
 80012de:	10db      	asrs	r3, r3, #3
 80012e0:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80012e4:	4413      	add	r3, r2
 80012e6:	461a      	mov	r2, r3
 80012e8:	68b9      	ldr	r1, [r7, #8]
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f000 f92e 	bl	800154c <DrawChar>
}
 80012f0:	bf00      	nop
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	24007058 	.word	0x24007058

080012fc <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	; 0x28
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
 8001308:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 800130a:	2301      	movs	r3, #1
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
 800130e:	2300      	movs	r3, #0
 8001310:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 800131e:	e002      	b.n	8001326 <UTIL_LCD_DisplayStringAt+0x2a>
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	3301      	adds	r3, #1
 8001324:	61fb      	str	r3, [r7, #28]
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	1c5a      	adds	r2, r3, #1
 800132a:	61ba      	str	r2, [r7, #24]
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f6      	bne.n	8001320 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 8001332:	4b48      	ldr	r3, [pc, #288]	; (8001454 <UTIL_LCD_DisplayStringAt+0x158>)
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	4a47      	ldr	r2, [pc, #284]	; (8001454 <UTIL_LCD_DisplayStringAt+0x158>)
 8001338:	68d2      	ldr	r2, [r2, #12]
 800133a:	4946      	ldr	r1, [pc, #280]	; (8001454 <UTIL_LCD_DisplayStringAt+0x158>)
 800133c:	0152      	lsls	r2, r2, #5
 800133e:	440a      	add	r2, r1
 8001340:	3208      	adds	r2, #8
 8001342:	6812      	ldr	r2, [r2, #0]
 8001344:	8892      	ldrh	r2, [r2, #4]
 8001346:	fbb3 f3f2 	udiv	r3, r3, r2
 800134a:	617b      	str	r3, [r7, #20]

  switch (Mode)
 800134c:	78fb      	ldrb	r3, [r7, #3]
 800134e:	2b03      	cmp	r3, #3
 8001350:	d018      	beq.n	8001384 <UTIL_LCD_DisplayStringAt+0x88>
 8001352:	2b03      	cmp	r3, #3
 8001354:	dc2a      	bgt.n	80013ac <UTIL_LCD_DisplayStringAt+0xb0>
 8001356:	2b01      	cmp	r3, #1
 8001358:	d002      	beq.n	8001360 <UTIL_LCD_DisplayStringAt+0x64>
 800135a:	2b02      	cmp	r3, #2
 800135c:	d015      	beq.n	800138a <UTIL_LCD_DisplayStringAt+0x8e>
 800135e:	e025      	b.n	80013ac <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	4a3b      	ldr	r2, [pc, #236]	; (8001454 <UTIL_LCD_DisplayStringAt+0x158>)
 8001368:	68d2      	ldr	r2, [r2, #12]
 800136a:	493a      	ldr	r1, [pc, #232]	; (8001454 <UTIL_LCD_DisplayStringAt+0x158>)
 800136c:	0152      	lsls	r2, r2, #5
 800136e:	440a      	add	r2, r1
 8001370:	3208      	adds	r2, #8
 8001372:	6812      	ldr	r2, [r2, #0]
 8001374:	8892      	ldrh	r2, [r2, #4]
 8001376:	fb02 f303 	mul.w	r3, r2, r3
 800137a:	085b      	lsrs	r3, r3, #1
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	4413      	add	r3, r2
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001382:	e016      	b.n	80013b2 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001388:	e013      	b.n	80013b2 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	4a30      	ldr	r2, [pc, #192]	; (8001454 <UTIL_LCD_DisplayStringAt+0x158>)
 8001392:	68d2      	ldr	r2, [r2, #12]
 8001394:	492f      	ldr	r1, [pc, #188]	; (8001454 <UTIL_LCD_DisplayStringAt+0x158>)
 8001396:	0152      	lsls	r2, r2, #5
 8001398:	440a      	add	r2, r1
 800139a:	3208      	adds	r2, #8
 800139c:	6812      	ldr	r2, [r2, #0]
 800139e:	8892      	ldrh	r2, [r2, #4]
 80013a0:	fb03 f202 	mul.w	r2, r3, r2
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80013aa:	e002      	b.n	80013b2 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80013b0:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <UTIL_LCD_DisplayStringAt+0xc4>
 80013b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013be:	d31b      	bcc.n	80013f8 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 80013c0:	2301      	movs	r3, #1
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 80013c4:	e018      	b.n	80013f8 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	68b9      	ldr	r1, [r7, #8]
 80013ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013d0:	f7ff ff5e 	bl	8001290 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 80013d4:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <UTIL_LCD_DisplayStringAt+0x158>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	4a1e      	ldr	r2, [pc, #120]	; (8001454 <UTIL_LCD_DisplayStringAt+0x158>)
 80013da:	015b      	lsls	r3, r3, #5
 80013dc:	4413      	add	r3, r2
 80013de:	3308      	adds	r3, #8
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	889b      	ldrh	r3, [r3, #4]
 80013e4:	461a      	mov	r2, r3
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	4413      	add	r3, r2
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24

    /* Point on the next character */
    Text++;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3301      	adds	r3, #1
 80013f0:	607b      	str	r3, [r7, #4]
    i++;
 80013f2:	6a3b      	ldr	r3, [r7, #32]
 80013f4:	3301      	adds	r3, #1
 80013f6:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	bf14      	ite	ne
 8001400:	2301      	movne	r3, #1
 8001402:	2300      	moveq	r3, #0
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <UTIL_LCD_DisplayStringAt+0x158>)
 8001408:	6959      	ldr	r1, [r3, #20]
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <UTIL_LCD_DisplayStringAt+0x158>)
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	4811      	ldr	r0, [pc, #68]	; (8001454 <UTIL_LCD_DisplayStringAt+0x158>)
 8001410:	015b      	lsls	r3, r3, #5
 8001412:	4403      	add	r3, r0
 8001414:	3308      	adds	r3, #8
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	889b      	ldrh	r3, [r3, #4]
 800141a:	4618      	mov	r0, r3
 800141c:	6a3b      	ldr	r3, [r7, #32]
 800141e:	fb00 f303 	mul.w	r3, r0, r3
 8001422:	1acb      	subs	r3, r1, r3
 8001424:	b29b      	uxth	r3, r3
 8001426:	490b      	ldr	r1, [pc, #44]	; (8001454 <UTIL_LCD_DisplayStringAt+0x158>)
 8001428:	68c9      	ldr	r1, [r1, #12]
 800142a:	480a      	ldr	r0, [pc, #40]	; (8001454 <UTIL_LCD_DisplayStringAt+0x158>)
 800142c:	0149      	lsls	r1, r1, #5
 800142e:	4401      	add	r1, r0
 8001430:	3108      	adds	r1, #8
 8001432:	6809      	ldr	r1, [r1, #0]
 8001434:	8889      	ldrh	r1, [r1, #4]
 8001436:	428b      	cmp	r3, r1
 8001438:	bf2c      	ite	cs
 800143a:	2301      	movcs	r3, #1
 800143c:	2300      	movcc	r3, #0
 800143e:	b2db      	uxtb	r3, r3
 8001440:	4013      	ands	r3, r2
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1be      	bne.n	80013c6 <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	3728      	adds	r7, #40	; 0x28
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	24007058 	.word	0x24007058

08001458 <UTIL_LCD_DrawRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_DrawRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
 8001464:	603b      	str	r3, [r7, #0]
  /* Draw horizontal lines */
  UTIL_LCD_DrawHLine(Xpos, Ypos, Width, Color);
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	68b9      	ldr	r1, [r7, #8]
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	f7ff fe8d 	bl	800118c <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	4413      	add	r3, r2
 8001478:	1e59      	subs	r1, r3, #1
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f7ff fe84 	bl	800118c <UTIL_LCD_DrawHLine>

  /* Draw vertical lines */
  UTIL_LCD_DrawVLine(Xpos, Ypos, Height, Color);
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	68b9      	ldr	r1, [r7, #8]
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f7ff feb4 	bl	80011f8 <UTIL_LCD_DrawVLine>
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	1e58      	subs	r0, r3, #1
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	68b9      	ldr	r1, [r7, #8]
 800149e:	f7ff feab 	bl	80011f8 <UTIL_LCD_DrawVLine>
}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <UTIL_LCD_DrawBitmap>:
  * @param  Xpos  Bmp X position in the LCD
  * @param  Ypos  Bmp Y position in the LCD
  * @param  pData Pointer to Bmp picture address in the internal Flash
  */
void UTIL_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pData)
{
 80014ac:	b590      	push	{r4, r7, lr}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  FuncDriver.DrawBitmap(DrawProp->LcdDevice, Xpos, Ypos, pData);
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <UTIL_LCD_DrawBitmap+0x24>)
 80014ba:	681c      	ldr	r4, [r3, #0]
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <UTIL_LCD_DrawBitmap+0x28>)
 80014be:	6918      	ldr	r0, [r3, #16]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	68f9      	ldr	r1, [r7, #12]
 80014c6:	47a0      	blx	r4
}
 80014c8:	bf00      	nop
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd90      	pop	{r4, r7, pc}
 80014d0:	24007098 	.word	0x24007098
 80014d4:	24007058 	.word	0x24007058

080014d8 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b087      	sub	sp, #28
 80014dc:	af02      	add	r7, sp, #8
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
 80014e4:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <UTIL_LCD_FillRect+0x6c>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d11a      	bne.n	8001524 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 80014ee:	4b16      	ldr	r3, [pc, #88]	; (8001548 <UTIL_LCD_FillRect+0x70>)
 80014f0:	691c      	ldr	r4, [r3, #16]
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <UTIL_LCD_FillRect+0x6c>)
 80014f4:	6918      	ldr	r0, [r3, #16]
 80014f6:	6a3b      	ldr	r3, [r7, #32]
 80014f8:	08db      	lsrs	r3, r3, #3
 80014fa:	f003 021f 	and.w	r2, r3, #31
 80014fe:	6a3b      	ldr	r3, [r7, #32]
 8001500:	0a9b      	lsrs	r3, r3, #10
 8001502:	015b      	lsls	r3, r3, #5
 8001504:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001508:	431a      	orrs	r2, r3
 800150a:	6a3b      	ldr	r3, [r7, #32]
 800150c:	0cdb      	lsrs	r3, r3, #19
 800150e:	02db      	lsls	r3, r3, #11
 8001510:	b29b      	uxth	r3, r3
 8001512:	4313      	orrs	r3, r2
 8001514:	9301      	str	r3, [sp, #4]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68ba      	ldr	r2, [r7, #8]
 800151e:	68f9      	ldr	r1, [r7, #12]
 8001520:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 8001522:	e00b      	b.n	800153c <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <UTIL_LCD_FillRect+0x70>)
 8001526:	691c      	ldr	r4, [r3, #16]
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <UTIL_LCD_FillRect+0x6c>)
 800152a:	6918      	ldr	r0, [r3, #16]
 800152c:	6a3b      	ldr	r3, [r7, #32]
 800152e:	9301      	str	r3, [sp, #4]
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68ba      	ldr	r2, [r7, #8]
 8001538:	68f9      	ldr	r1, [r7, #12]
 800153a:	47a0      	blx	r4
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	bd90      	pop	{r4, r7, pc}
 8001544:	24007058 	.word	0x24007058
 8001548:	24007098 	.word	0x24007098

0800154c <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b0b2      	sub	sp, #200	; 0xc8
 8001550:	af02      	add	r7, sp, #8
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 8001558:	2300      	movs	r3, #0
 800155a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800155e:	2300      	movs	r3, #0
 8001560:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 8001564:	4ba5      	ldr	r3, [pc, #660]	; (80017fc <DrawChar+0x2b0>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	4aa4      	ldr	r2, [pc, #656]	; (80017fc <DrawChar+0x2b0>)
 800156a:	015b      	lsls	r3, r3, #5
 800156c:	4413      	add	r3, r2
 800156e:	3308      	adds	r3, #8
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	88db      	ldrh	r3, [r3, #6]
 8001574:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 8001578:	4ba0      	ldr	r3, [pc, #640]	; (80017fc <DrawChar+0x2b0>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	4a9f      	ldr	r2, [pc, #636]	; (80017fc <DrawChar+0x2b0>)
 800157e:	015b      	lsls	r3, r3, #5
 8001580:	4413      	add	r3, r2
 8001582:	3308      	adds	r3, #8
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	889b      	ldrh	r3, [r3, #4]
 8001588:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 800158c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001590:	3307      	adds	r3, #7
 8001592:	f023 0207 	bic.w	r2, r3, #7
 8001596:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  for(i = 0; i < height; i++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80015a6:	e11c      	b.n	80017e2 <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 80015a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015ac:	3307      	adds	r3, #7
 80015ae:	08db      	lsrs	r3, r3, #3
 80015b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015b4:	fb02 f303 	mul.w	r3, r2, r3
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	4413      	add	r3, r2
 80015bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    switch(((width + 7)/8))
 80015c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015c4:	3307      	adds	r3, #7
 80015c6:	08db      	lsrs	r3, r3, #3
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d002      	beq.n	80015d2 <DrawChar+0x86>
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d006      	beq.n	80015de <DrawChar+0x92>
 80015d0:	e011      	b.n	80015f6 <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 80015d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 80015dc:	e01d      	b.n	800161a <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80015de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	021b      	lsls	r3, r3, #8
 80015e6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80015ea:	3201      	adds	r2, #1
 80015ec:	7812      	ldrb	r2, [r2, #0]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 80015f4:	e011      	b.n	800161a <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80015f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	041a      	lsls	r2, r3, #16
 80015fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001602:	3301      	adds	r3, #1
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	021b      	lsls	r3, r3, #8
 8001608:	4313      	orrs	r3, r2
 800160a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800160e:	3202      	adds	r2, #2
 8001610:	7812      	ldrb	r2, [r2, #0]
 8001612:	4313      	orrs	r3, r2
 8001614:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 8001618:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800161a:	4b78      	ldr	r3, [pc, #480]	; (80017fc <DrawChar+0x2b0>)
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	4a77      	ldr	r2, [pc, #476]	; (80017fc <DrawChar+0x2b0>)
 8001620:	015b      	lsls	r3, r3, #5
 8001622:	4413      	add	r3, r2
 8001624:	331c      	adds	r3, #28
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b02      	cmp	r3, #2
 800162a:	f040 808c 	bne.w	8001746 <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 800162e:	2300      	movs	r3, #0
 8001630:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001634:	e074      	b.n	8001720 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 8001636:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800163a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800163e:	1ad2      	subs	r2, r2, r3
 8001640:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001644:	4413      	add	r3, r2
 8001646:	3b01      	subs	r3, #1
 8001648:	2201      	movs	r2, #1
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	461a      	mov	r2, r3
 8001650:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001654:	4013      	ands	r3, r2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d02d      	beq.n	80016b6 <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 800165a:	4b68      	ldr	r3, [pc, #416]	; (80017fc <DrawChar+0x2b0>)
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	4a67      	ldr	r2, [pc, #412]	; (80017fc <DrawChar+0x2b0>)
 8001660:	015b      	lsls	r3, r3, #5
 8001662:	4413      	add	r3, r2
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	08db      	lsrs	r3, r3, #3
 8001668:	b29b      	uxth	r3, r3
 800166a:	f003 031f 	and.w	r3, r3, #31
 800166e:	b29a      	uxth	r2, r3
 8001670:	4b62      	ldr	r3, [pc, #392]	; (80017fc <DrawChar+0x2b0>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	4961      	ldr	r1, [pc, #388]	; (80017fc <DrawChar+0x2b0>)
 8001676:	015b      	lsls	r3, r3, #5
 8001678:	440b      	add	r3, r1
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	0a9b      	lsrs	r3, r3, #10
 800167e:	b29b      	uxth	r3, r3
 8001680:	015b      	lsls	r3, r3, #5
 8001682:	b29b      	uxth	r3, r3
 8001684:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001688:	b29b      	uxth	r3, r3
 800168a:	4313      	orrs	r3, r2
 800168c:	b29a      	uxth	r2, r3
 800168e:	4b5b      	ldr	r3, [pc, #364]	; (80017fc <DrawChar+0x2b0>)
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	495a      	ldr	r1, [pc, #360]	; (80017fc <DrawChar+0x2b0>)
 8001694:	015b      	lsls	r3, r3, #5
 8001696:	440b      	add	r3, r1
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	0cdb      	lsrs	r3, r3, #19
 800169c:	b29b      	uxth	r3, r3
 800169e:	02db      	lsls	r3, r3, #11
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	4313      	orrs	r3, r2
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	33c0      	adds	r3, #192	; 0xc0
 80016ae:	443b      	add	r3, r7
 80016b0:	f823 2c4c 	strh.w	r2, [r3, #-76]
 80016b4:	e02f      	b.n	8001716 <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 80016b6:	4b51      	ldr	r3, [pc, #324]	; (80017fc <DrawChar+0x2b0>)
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	4a50      	ldr	r2, [pc, #320]	; (80017fc <DrawChar+0x2b0>)
 80016bc:	015b      	lsls	r3, r3, #5
 80016be:	4413      	add	r3, r2
 80016c0:	3304      	adds	r3, #4
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	08db      	lsrs	r3, r3, #3
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	f003 031f 	and.w	r3, r3, #31
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	4b4b      	ldr	r3, [pc, #300]	; (80017fc <DrawChar+0x2b0>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	494a      	ldr	r1, [pc, #296]	; (80017fc <DrawChar+0x2b0>)
 80016d4:	015b      	lsls	r3, r3, #5
 80016d6:	440b      	add	r3, r1
 80016d8:	3304      	adds	r3, #4
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	0a9b      	lsrs	r3, r3, #10
 80016de:	b29b      	uxth	r3, r3
 80016e0:	015b      	lsls	r3, r3, #5
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	4313      	orrs	r3, r2
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	4b43      	ldr	r3, [pc, #268]	; (80017fc <DrawChar+0x2b0>)
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	4942      	ldr	r1, [pc, #264]	; (80017fc <DrawChar+0x2b0>)
 80016f4:	015b      	lsls	r3, r3, #5
 80016f6:	440b      	add	r3, r1
 80016f8:	3304      	adds	r3, #4
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	0cdb      	lsrs	r3, r3, #19
 80016fe:	b29b      	uxth	r3, r3
 8001700:	02db      	lsls	r3, r3, #11
 8001702:	b29b      	uxth	r3, r3
 8001704:	4313      	orrs	r3, r2
 8001706:	b29a      	uxth	r2, r3
 8001708:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	33c0      	adds	r3, #192	; 0xc0
 8001710:	443b      	add	r3, r7
 8001712:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 8001716:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800171a:	3301      	adds	r3, #1
 800171c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001720:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001724:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001728:	429a      	cmp	r2, r3
 800172a:	d384      	bcc.n	8001636 <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 800172c:	68b9      	ldr	r1, [r7, #8]
 800172e:	1c4b      	adds	r3, r1, #1
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001736:	2301      	movs	r3, #1
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f7ff fd08 	bl	8001154 <UTIL_LCD_FillRGBRect>
 8001744:	e048      	b.n	80017d8 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 8001746:	2300      	movs	r3, #0
 8001748:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800174c:	e032      	b.n	80017b4 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 800174e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001752:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001756:	1ad2      	subs	r2, r2, r3
 8001758:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800175c:	4413      	add	r3, r2
 800175e:	3b01      	subs	r3, #1
 8001760:	2201      	movs	r2, #1
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	461a      	mov	r2, r3
 8001768:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800176c:	4013      	ands	r3, r2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00d      	beq.n	800178e <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 8001772:	4b22      	ldr	r3, [pc, #136]	; (80017fc <DrawChar+0x2b0>)
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	4a21      	ldr	r2, [pc, #132]	; (80017fc <DrawChar+0x2b0>)
 8001778:	015b      	lsls	r3, r3, #5
 800177a:	4413      	add	r3, r2
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	33c0      	adds	r3, #192	; 0xc0
 8001786:	443b      	add	r3, r7
 8001788:	f843 2cac 	str.w	r2, [r3, #-172]
 800178c:	e00d      	b.n	80017aa <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 800178e:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <DrawChar+0x2b0>)
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	4a1a      	ldr	r2, [pc, #104]	; (80017fc <DrawChar+0x2b0>)
 8001794:	015b      	lsls	r3, r3, #5
 8001796:	4413      	add	r3, r2
 8001798:	3304      	adds	r3, #4
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	33c0      	adds	r3, #192	; 0xc0
 80017a4:	443b      	add	r3, r7
 80017a6:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 80017aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80017ae:	3301      	adds	r3, #1
 80017b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80017b4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80017b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017bc:	429a      	cmp	r2, r3
 80017be:	d3c6      	bcc.n	800174e <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 80017c0:	68b9      	ldr	r1, [r7, #8]
 80017c2:	1c4b      	adds	r3, r1, #1
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	f107 0214 	add.w	r2, r7, #20
 80017ca:	2301      	movs	r3, #1
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f7ff fcbe 	bl	8001154 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 80017d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80017dc:	3301      	adds	r3, #1
 80017de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80017e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80017ea:	429a      	cmp	r2, r3
 80017ec:	f4ff aedc 	bcc.w	80015a8 <DrawChar+0x5c>
    }
  }
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	37c0      	adds	r7, #192	; 0xc0
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	24007058 	.word	0x24007058

08001800 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* System Init, System clock, voltage scaling and L1-Cache configuration are done by CPU1 (Cortex-M7)
     in the meantime Domain D2 is put in STOP mode(Cortex-M4 in deep-sleep)
  */

  /* Configure the MPU attributes as Write Through */
  MPU_Config();
 8001804:	f000 f97a 	bl	8001afc <MPU_Config>

  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 8001808:	f000 f9a0 	bl	8001b4c <CPU_CACHE_Enable>
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 800180c:	f006 f8d4 	bl	80079b8 <HAL_Init>

  /* Configure the system clock to 400 MHz */
  SystemClock_Config();
 8001810:	f000 f828 	bl	8001864 <SystemClock_Config>

  /* When system initialization is finished, Cortex-M7 could wakeup (when needed) the Cortex-M4  by means of
     HSEM notification or by any D2 wakeup source (SEV,EXTI..)   */

  /* Configure the User push-button in EXTI Mode */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8001814:	2101      	movs	r1, #1
 8001816:	2000      	movs	r0, #0
 8001818:	f002 fd52 	bl	80042c0 <BSP_PB_Init>

  BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 800181c:	2101      	movs	r1, #1
 800181e:	2000      	movs	r0, #0
 8001820:	f004 fef0 	bl	8006604 <BSP_LCD_Init>
  UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8001824:	480b      	ldr	r0, [pc, #44]	; (8001854 <main+0x54>)
 8001826:	f7ff fc03 	bl	8001030 <UTIL_LCD_SetFuncDriver>
  Display_DemoDescription();
 800182a:	f000 f8b1 	bl	8001990 <Display_DemoDescription>
  AudioRecord_demo();
 800182e:	f7ff fa11 	bl	8000c54 <AudioRecord_demo>
  USART3_Init();
 8001832:	f000 fb5d 	bl	8001ef0 <USART3_Init>

  BSP_examples[1].DemoFunc();
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <main+0x58>)
 8001838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800183a:	4798      	blx	r3



  while(1) {
	  printf("Mic_test is = %d\r", micTest);
 800183c:	4b07      	ldr	r3, [pc, #28]	; (800185c <main+0x5c>)
 800183e:	881b      	ldrh	r3, [r3, #0]
 8001840:	4619      	mov	r1, r3
 8001842:	4807      	ldr	r0, [pc, #28]	; (8001860 <main+0x60>)
 8001844:	f013 f95e 	bl	8014b04 <iprintf>
	  HAL_Delay(1000);
 8001848:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800184c:	f006 f94e 	bl	8007aec <HAL_Delay>
	  printf("Mic_test is = %d\r", micTest);
 8001850:	e7f4      	b.n	800183c <main+0x3c>
 8001852:	bf00      	nop
 8001854:	0801b3b8 	.word	0x0801b3b8
 8001858:	24000464 	.word	0x24000464
 800185c:	2400100c 	.word	0x2400100c
 8001860:	08016370 	.word	0x08016370

08001864 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b09e      	sub	sp, #120	; 0x78
 8001868:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 800186a:	2300      	movs	r3, #0
 800186c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001870:	2002      	movs	r0, #2
 8001872:	f00b f941 	bl	800caf8 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	4b42      	ldr	r3, [pc, #264]	; (8001984 <SystemClock_Config+0x120>)
 800187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187e:	4a41      	ldr	r2, [pc, #260]	; (8001984 <SystemClock_Config+0x120>)
 8001880:	f023 0301 	bic.w	r3, r3, #1
 8001884:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001886:	4b3f      	ldr	r3, [pc, #252]	; (8001984 <SystemClock_Config+0x120>)
 8001888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	4b3d      	ldr	r3, [pc, #244]	; (8001988 <SystemClock_Config+0x124>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	4a3c      	ldr	r2, [pc, #240]	; (8001988 <SystemClock_Config+0x124>)
 8001896:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800189a:	6193      	str	r3, [r2, #24]
 800189c:	4b3a      	ldr	r3, [pc, #232]	; (8001988 <SystemClock_Config+0x124>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018a4:	607b      	str	r3, [r7, #4]
 80018a6:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80018a8:	bf00      	nop
 80018aa:	4b37      	ldr	r3, [pc, #220]	; (8001988 <SystemClock_Config+0x124>)
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018b6:	d1f8      	bne.n	80018aa <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018b8:	2301      	movs	r3, #1
 80018ba:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018c0:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ca:	2302      	movs	r3, #2
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018ce:	2302      	movs	r3, #2
 80018d0:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 80018d2:	2305      	movs	r3, #5
 80018d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 80018d6:	23a0      	movs	r3, #160	; 0xa0
 80018d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 80018de:	2302      	movs	r3, #2
 80018e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018e2:	2302      	movs	r3, #2
 80018e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018e6:	2304      	movs	r3, #4
 80018e8:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80018ee:	2308      	movs	r3, #8
 80018f0:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80018f2:	f107 0308 	add.w	r3, r7, #8
 80018f6:	4618      	mov	r0, r3
 80018f8:	f00b f938 	bl	800cb6c <HAL_RCC_OscConfig>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8001902:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800190a:	f000 f8f1 	bl	8001af0 <Error_Handler>
  }

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 800190e:	233f      	movs	r3, #63	; 0x3f
 8001910:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001912:	2303      	movs	r3, #3
 8001914:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001916:	2300      	movs	r3, #0
 8001918:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800191a:	2308      	movs	r3, #8
 800191c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800191e:	2340      	movs	r3, #64	; 0x40
 8001920:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001922:	2340      	movs	r3, #64	; 0x40
 8001924:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800192a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800192c:	2340      	movs	r3, #64	; 0x40
 800192e:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8001930:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001934:	2104      	movs	r1, #4
 8001936:	4618      	mov	r0, r3
 8001938:	f00b fd72 	bl	800d420 <HAL_RCC_ClockConfig>
 800193c:	4603      	mov	r3, r0
 800193e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 8001942:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800194a:	f000 f8d1 	bl	8001af0 <Error_Handler>
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
 */

  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
 800194e:	4b0f      	ldr	r3, [pc, #60]	; (800198c <SystemClock_Config+0x128>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a0e      	ldr	r2, [pc, #56]	; (800198c <SystemClock_Config+0x128>)
 8001954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001958:	6013      	str	r3, [r2, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 800195a:	4b0c      	ldr	r3, [pc, #48]	; (800198c <SystemClock_Config+0x128>)
 800195c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001960:	4a0a      	ldr	r2, [pc, #40]	; (800198c <SystemClock_Config+0x128>)
 8001962:	f043 0302 	orr.w	r3, r3, #2
 8001966:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <SystemClock_Config+0x128>)
 800196c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	603b      	str	r3, [r7, #0]
 8001976:	683b      	ldr	r3, [r7, #0]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
 8001978:	f006 f8e8 	bl	8007b4c <HAL_EnableCompensationCell>
}
 800197c:	bf00      	nop
 800197e:	3778      	adds	r7, #120	; 0x78
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	58000400 	.word	0x58000400
 8001988:	58024800 	.word	0x58024800
 800198c:	58024400 	.word	0x58024400

08001990 <Display_DemoDescription>:
  * @brief  Display main demo messages
  * @param  None
  * @retval None
  */
static void Display_DemoDescription(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b094      	sub	sp, #80	; 0x50
 8001994:	af02      	add	r7, sp, #8
  char desc[64];
  uint32_t x_size;
  uint32_t y_size;

  UTIL_LCD_SetFont(&UTIL_LCD_DEFAULT_FONT);
 8001996:	4839      	ldr	r0, [pc, #228]	; (8001a7c <Display_DemoDescription+0xec>)
 8001998:	f7ff fbc8 	bl	800112c <UTIL_LCD_SetFont>

  /* Clear the LCD */
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 800199c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019a0:	f7ff fbb0 	bl	8001104 <UTIL_LCD_SetBackColor>
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 80019a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019a8:	f7ff fc5c 	bl	8001264 <UTIL_LCD_Clear>

  /* Set the LCD Text Color */
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_DARKBLUE);
 80019ac:	4834      	ldr	r0, [pc, #208]	; (8001a80 <Display_DemoDescription+0xf0>)
 80019ae:	f7ff fb95 	bl	80010dc <UTIL_LCD_SetTextColor>

  /* Display LCD messages */
  UTIL_LCD_DisplayStringAt(0, 10, (uint8_t *)"STM32H750B BSP", CENTER_MODE);
 80019b2:	2301      	movs	r3, #1
 80019b4:	4a33      	ldr	r2, [pc, #204]	; (8001a84 <Display_DemoDescription+0xf4>)
 80019b6:	210a      	movs	r1, #10
 80019b8:	2000      	movs	r0, #0
 80019ba:	f7ff fc9f 	bl	80012fc <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 35, (uint8_t *)"Drivers examples", CENTER_MODE);
 80019be:	2301      	movs	r3, #1
 80019c0:	4a31      	ldr	r2, [pc, #196]	; (8001a88 <Display_DemoDescription+0xf8>)
 80019c2:	2123      	movs	r1, #35	; 0x23
 80019c4:	2000      	movs	r0, #0
 80019c6:	f7ff fc99 	bl	80012fc <UTIL_LCD_DisplayStringAt>

  BSP_LCD_GetXSize(0, &x_size);
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	4619      	mov	r1, r3
 80019ce:	2000      	movs	r0, #0
 80019d0:	f004 fff4 	bl	80069bc <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 80019d4:	463b      	mov	r3, r7
 80019d6:	4619      	mov	r1, r3
 80019d8:	2000      	movs	r0, #0
 80019da:	f005 f80d 	bl	80069f8 <BSP_LCD_GetYSize>

  /* Draw Bitmap */
  UTIL_LCD_DrawBitmap((x_size - 80)/2, 65, (uint8_t *)stlogo);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3b50      	subs	r3, #80	; 0x50
 80019e2:	085b      	lsrs	r3, r3, #1
 80019e4:	4a29      	ldr	r2, [pc, #164]	; (8001a8c <Display_DemoDescription+0xfc>)
 80019e6:	2141      	movs	r1, #65	; 0x41
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fd5f 	bl	80014ac <UTIL_LCD_DrawBitmap>

  UTIL_LCD_SetFont(&Font12);
 80019ee:	4828      	ldr	r0, [pc, #160]	; (8001a90 <Display_DemoDescription+0x100>)
 80019f0:	f7ff fb9c 	bl	800112c <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, y_size - 20, (uint8_t *)"Copyright (c) STMicroelectronics 2019", CENTER_MODE);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	f1a3 0114 	sub.w	r1, r3, #20
 80019fa:	2301      	movs	r3, #1
 80019fc:	4a25      	ldr	r2, [pc, #148]	; (8001a94 <Display_DemoDescription+0x104>)
 80019fe:	2000      	movs	r0, #0
 8001a00:	f7ff fc7c 	bl	80012fc <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_SetFont(&Font16);
 8001a04:	4824      	ldr	r0, [pc, #144]	; (8001a98 <Display_DemoDescription+0x108>)
 8001a06:	f7ff fb91 	bl	800112c <UTIL_LCD_SetFont>
  BSP_LCD_FillRect(0, 0, y_size/2 - 15, x_size, 100, UTIL_LCD_COLOR_BLUE);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	085b      	lsrs	r3, r3, #1
 8001a0e:	f1a3 020f 	sub.w	r2, r3, #15
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4921      	ldr	r1, [pc, #132]	; (8001a9c <Display_DemoDescription+0x10c>)
 8001a16:	9101      	str	r1, [sp, #4]
 8001a18:	2164      	movs	r1, #100	; 0x64
 8001a1a:	9100      	str	r1, [sp, #0]
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f005 f9b8 	bl	8006d94 <BSP_LCD_FillRect>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a28:	f7ff fb58 	bl	80010dc <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 8001a2c:	481b      	ldr	r0, [pc, #108]	; (8001a9c <Display_DemoDescription+0x10c>)
 8001a2e:	f7ff fb69 	bl	8001104 <UTIL_LCD_SetBackColor>
  UTIL_LCD_DisplayStringAt(0, y_size / 2 , (uint8_t *)"Press TAMPER button to start :", CENTER_MODE);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	0859      	lsrs	r1, r3, #1
 8001a36:	2301      	movs	r3, #1
 8001a38:	4a19      	ldr	r2, [pc, #100]	; (8001aa0 <Display_DemoDescription+0x110>)
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f7ff fc5e 	bl	80012fc <UTIL_LCD_DisplayStringAt>
  sprintf(desc,"%s example", BSP_examples[DemoIndex].DemoName);
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <Display_DemoDescription+0x114>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	4613      	mov	r3, r2
 8001a48:	011b      	lsls	r3, r3, #4
 8001a4a:	1a9b      	subs	r3, r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4a16      	ldr	r2, [pc, #88]	; (8001aa8 <Display_DemoDescription+0x118>)
 8001a50:	4413      	add	r3, r2
 8001a52:	1d1a      	adds	r2, r3, #4
 8001a54:	f107 0308 	add.w	r3, r7, #8
 8001a58:	4914      	ldr	r1, [pc, #80]	; (8001aac <Display_DemoDescription+0x11c>)
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f013 f976 	bl	8014d4c <siprintf>
  UTIL_LCD_DisplayStringAt(0, y_size/2 + 15, (uint8_t *)desc, CENTER_MODE);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	085b      	lsrs	r3, r3, #1
 8001a64:	f103 010f 	add.w	r1, r3, #15
 8001a68:	f107 0208 	add.w	r2, r7, #8
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f7ff fc44 	bl	80012fc <UTIL_LCD_DisplayStringAt>
}
 8001a74:	bf00      	nop
 8001a76:	3748      	adds	r7, #72	; 0x48
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	2400044c 	.word	0x2400044c
 8001a80:	ff000080 	.word	0xff000080
 8001a84:	08016384 	.word	0x08016384
 8001a88:	08016394 	.word	0x08016394
 8001a8c:	08018f40 	.word	0x08018f40
 8001a90:	2400045c 	.word	0x2400045c
 8001a94:	080163a8 	.word	0x080163a8
 8001a98:	24000454 	.word	0x24000454
 8001a9c:	ff0000ff 	.word	0xff0000ff
 8001aa0:	080163d0 	.word	0x080163d0
 8001aa4:	240070c4 	.word	0x240070c4
 8001aa8:	24000464 	.word	0x24000464
 8001aac:	080163f0 	.word	0x080163f0

08001ab0 <CheckForUserInput>:
  * @brief  Check for user input
  * @param  None
  * @retval Input state (1 : active / 0 : Inactive)
  */
uint8_t CheckForUserInput(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return ButtonState;
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <CheckForUserInput+0x14>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	b2db      	uxtb	r3, r3
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	240070c8 	.word	0x240070c8

08001ac8 <BSP_PB_Callback>:
* @brief  EXTI line detection callbacks.
* @param  GPIO_Pin: Specifies the pins connected EXTI line
* @retval None
*/
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	71fb      	strb	r3, [r7, #7]
 if(Button == BUTTON_USER)
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d102      	bne.n	8001ade <BSP_PB_Callback+0x16>
  {
    ButtonState = 1;
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <BSP_PB_Callback+0x24>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	601a      	str	r2, [r3, #0]
  }
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	240070c8 	.word	0x240070c8

08001af0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* Turn LED REDon */
  BSP_LED_On(LED_RED);
 8001af4:	2001      	movs	r0, #1
 8001af6:	f002 fbc5 	bl	8004284 <BSP_LED_On>
  while(1)
 8001afa:	e7fe      	b.n	8001afa <Error_Handler+0xa>

08001afc <MPU_Config>:
  * @brief  Configure the MPU attributes
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
    MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 8001b02:	f006 f975 	bl	8007df0 <HAL_MPU_Disable>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001b06:	2301      	movs	r3, #1
 8001b08:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
 8001b0a:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001b0e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16MB;
 8001b10:	2317      	movs	r3, #23
 8001b12:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001b14:	2303      	movs	r3, #3
 8001b16:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8001b24:	2303      	movs	r3, #3
 8001b26:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001b34:	463b      	mov	r3, r7
 8001b36:	4618      	mov	r0, r3
 8001b38:	f006 f992 	bl	8007e60 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001b3c:	2004      	movs	r0, #4
 8001b3e:	f006 f96f 	bl	8007e20 <HAL_MPU_Enable>

}
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001b52:	4b34      	ldr	r3, [pc, #208]	; (8001c24 <CPU_CACHE_Enable+0xd8>)
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d11b      	bne.n	8001b96 <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 8001b5e:	f3bf 8f4f 	dsb	sy
}
 8001b62:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b64:	f3bf 8f6f 	isb	sy
}
 8001b68:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001b6a:	4b2e      	ldr	r3, [pc, #184]	; (8001c24 <CPU_CACHE_Enable+0xd8>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001b72:	f3bf 8f4f 	dsb	sy
}
 8001b76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b78:	f3bf 8f6f 	isb	sy
}
 8001b7c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001b7e:	4b29      	ldr	r3, [pc, #164]	; (8001c24 <CPU_CACHE_Enable+0xd8>)
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	4a28      	ldr	r2, [pc, #160]	; (8001c24 <CPU_CACHE_Enable+0xd8>)
 8001b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b88:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b8a:	f3bf 8f4f 	dsb	sy
}
 8001b8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b90:	f3bf 8f6f 	isb	sy
}
 8001b94:	e000      	b.n	8001b98 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001b96:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001b98:	4b22      	ldr	r3, [pc, #136]	; (8001c24 <CPU_CACHE_Enable+0xd8>)
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d138      	bne.n	8001c16 <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001ba4:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <CPU_CACHE_Enable+0xd8>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001bac:	f3bf 8f4f 	dsb	sy
}
 8001bb0:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8001bb2:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <CPU_CACHE_Enable+0xd8>)
 8001bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bb8:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	0b5b      	lsrs	r3, r3, #13
 8001bbe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001bc2:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	08db      	lsrs	r3, r3, #3
 8001bc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bcc:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	015a      	lsls	r2, r3, #5
 8001bd2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001bd6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001bdc:	4911      	ldr	r1, [pc, #68]	; (8001c24 <CPU_CACHE_Enable+0xd8>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	1e5a      	subs	r2, r3, #1
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1ef      	bne.n	8001bce <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	1e5a      	subs	r2, r3, #1
 8001bf2:	60ba      	str	r2, [r7, #8]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1e5      	bne.n	8001bc4 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8001bf8:	f3bf 8f4f 	dsb	sy
}
 8001bfc:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <CPU_CACHE_Enable+0xd8>)
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	4a08      	ldr	r2, [pc, #32]	; (8001c24 <CPU_CACHE_Enable+0xd8>)
 8001c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c08:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001c0a:	f3bf 8f4f 	dsb	sy
}
 8001c0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c10:	f3bf 8f6f 	isb	sy
}
 8001c14:	e000      	b.n	8001c18 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001c16:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c2c:	e7fe      	b.n	8001c2c <NMI_Handler+0x4>
	...

08001c30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  static volatile int junk = 0;
  while (!junk)
 8001c34:	bf00      	nop
 8001c36:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <HardFault_Handler+0x1c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0fb      	beq.n	8001c36 <HardFault_Handler+0x6>
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}
 8001c3e:	bf00      	nop
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	240070cc 	.word	0x240070cc

08001c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <MemManage_Handler+0x4>

08001c56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5a:	e7fe      	b.n	8001c5a <BusFault_Handler+0x4>

08001c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <UsageFault_Handler+0x4>

08001c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c90:	f005 ff0c 	bl	8007aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <DMA2_Stream1_IRQHandler>:
  * @brief  This function handles DMA2 Stream 1 interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  BSP_AUDIO_OUT_IRQHandler(0);
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f003 f84d 	bl	8004d3c <BSP_AUDIO_OUT_IRQHandler>
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <DMA2_Stream4_IRQHandler>:
  * @brief  This function handles DMA2 Stream 4 for SAI1B interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <DMA2_Stream4_IRQHandler+0x14>)
 8001cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f007 fbb2 	bl	800941c <HAL_DMA_IRQHandler>
}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	240072e8 	.word	0x240072e8

08001cc0 <BDMA_Channel1_IRQHandler>:
  * @brief  This function handles BDMA Channel 1 for SAI_PDM interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAI_PDMx_DMAx_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
   BSP_AUDIO_IN_IRQHandler(1, AUDIO_IN_DEVICE_DIGITAL_MIC);
 8001cc4:	2130      	movs	r1, #48	; 0x30
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	f003 fcf2 	bl	80056b0 <BSP_AUDIO_IN_IRQHandler>
}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	e00a      	b.n	8001cf8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ce2:	f3af 8000 	nop.w
 8001ce6:	4601      	mov	r1, r0
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	60ba      	str	r2, [r7, #8]
 8001cee:	b2ca      	uxtb	r2, r1
 8001cf0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	dbf0      	blt.n	8001ce2 <_read+0x12>
  }

  return len;
 8001d00:	687b      	ldr	r3, [r7, #4]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <_close>:
  }
  return len;
}

int _close(int file)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d32:	605a      	str	r2, [r3, #4]
  return 0;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <_isatty>:

int _isatty(int file)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d4a:	2301      	movs	r3, #1
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d7c:	4a14      	ldr	r2, [pc, #80]	; (8001dd0 <_sbrk+0x5c>)
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <_sbrk+0x60>)
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d88:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <_sbrk+0x64>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d102      	bne.n	8001d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <_sbrk+0x64>)
 8001d92:	4a12      	ldr	r2, [pc, #72]	; (8001ddc <_sbrk+0x68>)
 8001d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <_sbrk+0x64>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d207      	bcs.n	8001db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da4:	f013 f918 	bl	8014fd8 <__errno>
 8001da8:	4603      	mov	r3, r0
 8001daa:	220c      	movs	r2, #12
 8001dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001db2:	e009      	b.n	8001dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <_sbrk+0x64>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dba:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <_sbrk+0x64>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <_sbrk+0x64>)
 8001dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	24080000 	.word	0x24080000
 8001dd4:	00000400 	.word	0x00000400
 8001dd8:	240070d0 	.word	0x240070d0
 8001ddc:	24008310 	.word	0x24008310

08001de0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001de4:	4b37      	ldr	r3, [pc, #220]	; (8001ec4 <SystemInit+0xe4>)
 8001de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dea:	4a36      	ldr	r2, [pc, #216]	; (8001ec4 <SystemInit+0xe4>)
 8001dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001df4:	4b34      	ldr	r3, [pc, #208]	; (8001ec8 <SystemInit+0xe8>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	2b06      	cmp	r3, #6
 8001dfe:	d807      	bhi.n	8001e10 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e00:	4b31      	ldr	r3, [pc, #196]	; (8001ec8 <SystemInit+0xe8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f023 030f 	bic.w	r3, r3, #15
 8001e08:	4a2f      	ldr	r2, [pc, #188]	; (8001ec8 <SystemInit+0xe8>)
 8001e0a:	f043 0307 	orr.w	r3, r3, #7
 8001e0e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001e10:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <SystemInit+0xec>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a2d      	ldr	r2, [pc, #180]	; (8001ecc <SystemInit+0xec>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e1c:	4b2b      	ldr	r3, [pc, #172]	; (8001ecc <SystemInit+0xec>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001e22:	4b2a      	ldr	r3, [pc, #168]	; (8001ecc <SystemInit+0xec>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	4929      	ldr	r1, [pc, #164]	; (8001ecc <SystemInit+0xec>)
 8001e28:	4b29      	ldr	r3, [pc, #164]	; (8001ed0 <SystemInit+0xf0>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e2e:	4b26      	ldr	r3, [pc, #152]	; (8001ec8 <SystemInit+0xe8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d007      	beq.n	8001e4a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e3a:	4b23      	ldr	r3, [pc, #140]	; (8001ec8 <SystemInit+0xe8>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 030f 	bic.w	r3, r3, #15
 8001e42:	4a21      	ldr	r2, [pc, #132]	; (8001ec8 <SystemInit+0xe8>)
 8001e44:	f043 0307 	orr.w	r3, r3, #7
 8001e48:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001e4a:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <SystemInit+0xec>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001e50:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <SystemInit+0xec>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001e56:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <SystemInit+0xec>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <SystemInit+0xec>)
 8001e5e:	4a1d      	ldr	r2, [pc, #116]	; (8001ed4 <SystemInit+0xf4>)
 8001e60:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001e62:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <SystemInit+0xec>)
 8001e64:	4a1c      	ldr	r2, [pc, #112]	; (8001ed8 <SystemInit+0xf8>)
 8001e66:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001e68:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <SystemInit+0xec>)
 8001e6a:	4a1c      	ldr	r2, [pc, #112]	; (8001edc <SystemInit+0xfc>)
 8001e6c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001e6e:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <SystemInit+0xec>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001e74:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <SystemInit+0xec>)
 8001e76:	4a19      	ldr	r2, [pc, #100]	; (8001edc <SystemInit+0xfc>)
 8001e78:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001e7a:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <SystemInit+0xec>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001e80:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <SystemInit+0xec>)
 8001e82:	4a16      	ldr	r2, [pc, #88]	; (8001edc <SystemInit+0xfc>)
 8001e84:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001e86:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <SystemInit+0xec>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <SystemInit+0xec>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a0e      	ldr	r2, [pc, #56]	; (8001ecc <SystemInit+0xec>)
 8001e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e96:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <SystemInit+0xec>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <SystemInit+0x100>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <SystemInit+0x104>)
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001eaa:	d202      	bcs.n	8001eb2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001eac:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <SystemInit+0x108>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <SystemInit+0x10c>)
 8001eb4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001eb8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001eba:	bf00      	nop
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	e000ed00 	.word	0xe000ed00
 8001ec8:	52002000 	.word	0x52002000
 8001ecc:	58024400 	.word	0x58024400
 8001ed0:	eaf6ed7f 	.word	0xeaf6ed7f
 8001ed4:	02020200 	.word	0x02020200
 8001ed8:	01ff0000 	.word	0x01ff0000
 8001edc:	01010280 	.word	0x01010280
 8001ee0:	5c001000 	.word	0x5c001000
 8001ee4:	ffff0000 	.word	0xffff0000
 8001ee8:	51008108 	.word	0x51008108
 8001eec:	52004000 	.word	0x52004000

08001ef0 <USART3_Init>:
#include "usart3_debug.h"
// Declare the UART Handle as static within this file so it's not accessible outside

UART_HandleTypeDef huart3 = {0};
void USART3_Init(void) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b0b8      	sub	sp, #224	; 0xe0
 8001ef4:	af00      	add	r7, sp, #0

	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ef6:	f107 0320 	add.w	r3, r7, #32
 8001efa:	22c0      	movs	r2, #192	; 0xc0
 8001efc:	2100      	movs	r1, #0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f013 f81c 	bl	8014f3c <memset>

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f04:	f04f 0202 	mov.w	r2, #2
 8001f08:	f04f 0300 	mov.w	r3, #0
 8001f0c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f16:	4b30      	ldr	r3, [pc, #192]	; (8001fd8 <USART3_Init+0xe8>)
 8001f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f1c:	4a2e      	ldr	r2, [pc, #184]	; (8001fd8 <USART3_Init+0xe8>)
 8001f1e:	f043 0302 	orr.w	r3, r3, #2
 8001f22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f26:	4b2c      	ldr	r3, [pc, #176]	; (8001fd8 <USART3_Init+0xe8>)
 8001f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	68bb      	ldr	r3, [r7, #8]

	GPIO_InitTypeDef init_structure = {0};
 8001f34:	f107 030c 	add.w	r3, r7, #12
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
	init_structure.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 8001f44:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f48:	60fb      	str	r3, [r7, #12]
	init_structure.Mode = GPIO_MODE_AF_PP;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	613b      	str	r3, [r7, #16]
	init_structure.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
	init_structure.Speed = GPIO_SPEED_FREQ_LOW;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61bb      	str	r3, [r7, #24]
	init_structure.Alternate = GPIO_AF7_USART3;
 8001f56:	2307      	movs	r3, #7
 8001f58:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(GPIOB, &init_structure);
 8001f5a:	f107 030c 	add.w	r3, r7, #12
 8001f5e:	4619      	mov	r1, r3
 8001f60:	481e      	ldr	r0, [pc, #120]	; (8001fdc <USART3_Init+0xec>)
 8001f62:	f009 f883 	bl	800b06c <HAL_GPIO_Init>

	__HAL_RCC_USART3_CLK_ENABLE();
 8001f66:	4b1c      	ldr	r3, [pc, #112]	; (8001fd8 <USART3_Init+0xe8>)
 8001f68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f6c:	4a1a      	ldr	r2, [pc, #104]	; (8001fd8 <USART3_Init+0xe8>)
 8001f6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f76:	4b18      	ldr	r3, [pc, #96]	; (8001fd8 <USART3_Init+0xe8>)
 8001f78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f80:	607b      	str	r3, [r7, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
    // Initialize your UART here, similar to the given example but specific to your board's UART configuration
    huart3.Instance = USART3;
 8001f84:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <USART3_Init+0xf0>)
 8001f86:	4a17      	ldr	r2, [pc, #92]	; (8001fe4 <USART3_Init+0xf4>)
 8001f88:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 115200;
 8001f8a:	4b15      	ldr	r3, [pc, #84]	; (8001fe0 <USART3_Init+0xf0>)
 8001f8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f90:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f92:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <USART3_Init+0xf0>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <USART3_Init+0xf0>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 8001f9e:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <USART3_Init+0xf0>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <USART3_Init+0xf0>)
 8001fa6:	220c      	movs	r2, #12
 8001fa8:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001faa:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <USART3_Init+0xf0>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <USART3_Init+0xf0>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	61da      	str	r2, [r3, #28]
    huart3.Init.Mode = UART_MODE_TX_RX;
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <USART3_Init+0xf0>)
 8001fb8:	220c      	movs	r2, #12
 8001fba:	615a      	str	r2, [r3, #20]
    if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001fbc:	4808      	ldr	r0, [pc, #32]	; (8001fe0 <USART3_Init+0xf0>)
 8001fbe:	f00f fcad 	bl	801191c <HAL_UART_Init>
        // Initialization Error
        //Error_Handler(UART_INIT_ERROR);
    }
    setbuf(stdout, NULL);
 8001fc2:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <USART3_Init+0xf8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2100      	movs	r1, #0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f012 fe08 	bl	8014be0 <setbuf>
}
 8001fd0:	bf00      	nop
 8001fd2:	37e0      	adds	r7, #224	; 0xe0
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	58024400 	.word	0x58024400
 8001fdc:	58020400 	.word	0x58020400
 8001fe0:	240070d4 	.word	0x240070d4
 8001fe4:	40004800 	.word	0x40004800
 8001fe8:	240005a4 	.word	0x240005a4

08001fec <_write>:

int _write(int file, char *ptr, int len) {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
	// Implement your write code here, this is used by puts and printf for example
	if ((HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, 0xFFFF)) != HAL_OK) {
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002000:	68b9      	ldr	r1, [r7, #8]
 8002002:	4804      	ldr	r0, [pc, #16]	; (8002014 <_write+0x28>)
 8002004:	f00f fce4 	bl	80119d0 <HAL_UART_Transmit>
		//handle_error(UART_TRANSMIT_ERR);
	}
	return len;
 8002008:	687b      	ldr	r3, [r7, #4]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	240070d4 	.word	0x240070d4

08002018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002018:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002050 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800201c:	f7ff fee0 	bl	8001de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002020:	480c      	ldr	r0, [pc, #48]	; (8002054 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002022:	490d      	ldr	r1, [pc, #52]	; (8002058 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002024:	4a0d      	ldr	r2, [pc, #52]	; (800205c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002028:	e002      	b.n	8002030 <LoopCopyDataInit>

0800202a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800202a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800202c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800202e:	3304      	adds	r3, #4

08002030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002034:	d3f9      	bcc.n	800202a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002036:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002038:	4c0a      	ldr	r4, [pc, #40]	; (8002064 <LoopFillZerobss+0x22>)
  movs r3, #0
 800203a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800203c:	e001      	b.n	8002042 <LoopFillZerobss>

0800203e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800203e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002040:	3204      	adds	r2, #4

08002042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002044:	d3fb      	bcc.n	800203e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002046:	f012 ffcd 	bl	8014fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800204a:	f7ff fbd9 	bl	8001800 <main>
  bx  lr
 800204e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002050:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002054:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002058:	240005a8 	.word	0x240005a8
  ldr r2, =_sidata
 800205c:	0801b6b8 	.word	0x0801b6b8
  ldr r2, =_sbss
 8002060:	240007c0 	.word	0x240007c0
  ldr r4, =_ebss
 8002064:	24008310 	.word	0x24008310

08002068 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002068:	e7fe      	b.n	8002068 <ADC3_IRQHandler>
	...

0800206c <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d103      	bne.n	8002084 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 800207c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	e02c      	b.n	80020de <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	891a      	ldrh	r2, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	695a      	ldr	r2, [r3, #20]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a0c      	ldr	r2, [pc, #48]	; (80020e8 <FT5336_RegisterBusIO+0x7c>)
 80020b8:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a0b      	ldr	r2, [pc, #44]	; (80020ec <FT5336_RegisterBusIO+0x80>)
 80020be:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d004      	beq.n	80020d8 <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4798      	blx	r3
 80020d4:	60f8      	str	r0, [r7, #12]
 80020d6:	e002      	b.n	80020de <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 80020d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020dc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80020de:	68fb      	ldr	r3, [r7, #12]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	08002111 	.word	0x08002111
 80020ec:	08002145 	.word	0x08002145

080020f0 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3318      	adds	r3, #24
 80020fe:	6839      	ldr	r1, [r7, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f000 f850 	bl	80021a6 <ft5336_chip_id>
 8002106:	4603      	mov	r3, r0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8002110:	b590      	push	{r4, r7, lr}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	607a      	str	r2, [r7, #4]
 800211a:	461a      	mov	r2, r3
 800211c:	460b      	mov	r3, r1
 800211e:	72fb      	strb	r3, [r7, #11]
 8002120:	4613      	mov	r3, r2
 8002122:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	691c      	ldr	r4, [r3, #16]
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	8918      	ldrh	r0, [r3, #8]
 8002130:	7afb      	ldrb	r3, [r7, #11]
 8002132:	b299      	uxth	r1, r3
 8002134:	893b      	ldrh	r3, [r7, #8]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	47a0      	blx	r4
 800213a:	4603      	mov	r3, r0
}
 800213c:	4618      	mov	r0, r3
 800213e:	371c      	adds	r7, #28
 8002140:	46bd      	mov	sp, r7
 8002142:	bd90      	pop	{r4, r7, pc}

08002144 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8002144:	b590      	push	{r4, r7, lr}
 8002146:	b087      	sub	sp, #28
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	607a      	str	r2, [r7, #4]
 800214e:	461a      	mov	r2, r3
 8002150:	460b      	mov	r3, r1
 8002152:	72fb      	strb	r3, [r7, #11]
 8002154:	4613      	mov	r3, r2
 8002156:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	68dc      	ldr	r4, [r3, #12]
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	8918      	ldrh	r0, [r3, #8]
 8002164:	7afb      	ldrb	r3, [r7, #11]
 8002166:	b299      	uxth	r1, r3
 8002168:	893b      	ldrh	r3, [r7, #8]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	47a0      	blx	r4
 800216e:	4603      	mov	r3, r0
}
 8002170:	4618      	mov	r0, r3
 8002172:	371c      	adds	r7, #28
 8002174:	46bd      	mov	sp, r7
 8002176:	bd90      	pop	{r4, r7, pc}

08002178 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8002178:	b590      	push	{r4, r7, lr}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	607a      	str	r2, [r7, #4]
 8002182:	461a      	mov	r2, r3
 8002184:	460b      	mov	r3, r1
 8002186:	72fb      	strb	r3, [r7, #11]
 8002188:	4613      	mov	r3, r2
 800218a:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	685c      	ldr	r4, [r3, #4]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6898      	ldr	r0, [r3, #8]
 8002194:	893b      	ldrh	r3, [r7, #8]
 8002196:	7af9      	ldrb	r1, [r7, #11]
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	47a0      	blx	r4
 800219c:	4603      	mov	r3, r0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd90      	pop	{r4, r7, pc}

080021a6 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b084      	sub	sp, #16
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 80021b0:	2301      	movs	r3, #1
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	21a8      	movs	r1, #168	; 0xa8
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7ff ffde 	bl	8002178 <ft5336_read_reg>
 80021bc:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d107      	bne.n	80021d4 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	781a      	ldrb	r2, [r3, #0]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	781a      	ldrb	r2, [r3, #0]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 80021d4:	68fb      	ldr	r3, [r7, #12]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b084      	sub	sp, #16
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 80021e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021ec:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4619      	mov	r1, r3
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 f831 	bl	800225c <MT48LC4M32B2_ClockEnable>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d128      	bne.n	8002252 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 8002200:	2001      	movs	r0, #1
 8002202:	f000 f8e1 	bl	80023c8 <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4619      	mov	r1, r3
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f849 	bl	80022a4 <MT48LC4M32B2_Precharge>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d11c      	bne.n	8002252 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	6819      	ldr	r1, [r3, #0]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	461a      	mov	r2, r3
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f896 	bl	8002354 <MT48LC4M32B2_RefreshMode>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d111      	bne.n	8002252 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 800222e:	6839      	ldr	r1, [r7, #0]
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 f85b 	bl	80022ec <MT48LC4M32B2_ModeRegConfig>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10a      	bne.n	8002252 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	4619      	mov	r1, r3
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f8ac 	bl	80023a0 <MT48LC4M32B2_RefreshRate>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 8002252:	68fb      	ldr	r3, [r7, #12]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 8002266:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <MT48LC4M32B2_ClockEnable+0x44>)
 8002268:	2201      	movs	r2, #1
 800226a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800226c:	4a0c      	ldr	r2, [pc, #48]	; (80022a0 <MT48LC4M32B2_ClockEnable+0x44>)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8002272:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <MT48LC4M32B2_ClockEnable+0x44>)
 8002274:	2201      	movs	r2, #1
 8002276:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002278:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <MT48LC4M32B2_ClockEnable+0x44>)
 800227a:	2200      	movs	r2, #0
 800227c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800227e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002282:	4907      	ldr	r1, [pc, #28]	; (80022a0 <MT48LC4M32B2_ClockEnable+0x44>)
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f00f f98b 	bl	80115a0 <HAL_SDRAM_SendCommand>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d002      	beq.n	8002296 <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 8002290:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002294:	e000      	b.n	8002298 <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8002296:	2300      	movs	r3, #0
  }
}
 8002298:	4618      	mov	r0, r3
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	24007168 	.word	0x24007168

080022a4 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 80022ae:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <MT48LC4M32B2_Precharge+0x44>)
 80022b0:	2202      	movs	r2, #2
 80022b2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 80022b4:	4a0c      	ldr	r2, [pc, #48]	; (80022e8 <MT48LC4M32B2_Precharge+0x44>)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80022ba:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <MT48LC4M32B2_Precharge+0x44>)
 80022bc:	2201      	movs	r2, #1
 80022be:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80022c0:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <MT48LC4M32B2_Precharge+0x44>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 80022c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022ca:	4907      	ldr	r1, [pc, #28]	; (80022e8 <MT48LC4M32B2_Precharge+0x44>)
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f00f f967 	bl	80115a0 <HAL_SDRAM_SendCommand>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d002      	beq.n	80022de <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 80022d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022dc:	e000      	b.n	80022e0 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 80022de:	2300      	movs	r3, #0
  }
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	24007168 	.word	0x24007168

080022ec <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80022fe:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 8002304:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 800230a:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8002310:	4313      	orrs	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 8002314:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8002316:	2204      	movs	r2, #4
 8002318:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a0c      	ldr	r2, [pc, #48]	; (8002350 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8002320:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8002322:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8002324:	2201      	movs	r2, #1
 8002326:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002328:	4a09      	ldr	r2, [pc, #36]	; (8002350 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800232e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002332:	4907      	ldr	r1, [pc, #28]	; (8002350 <MT48LC4M32B2_ModeRegConfig+0x64>)
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f00f f933 	bl	80115a0 <HAL_SDRAM_SendCommand>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d002      	beq.n	8002346 <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 8002340:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002344:	e000      	b.n	8002348 <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8002346:	2300      	movs	r3, #0
  }
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	24007168 	.word	0x24007168

08002354 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8002360:	4a0e      	ldr	r2, [pc, #56]	; (800239c <MT48LC4M32B2_RefreshMode+0x48>)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8002366:	4a0d      	ldr	r2, [pc, #52]	; (800239c <MT48LC4M32B2_RefreshMode+0x48>)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <MT48LC4M32B2_RefreshMode+0x48>)
 800236e:	2208      	movs	r2, #8
 8002370:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <MT48LC4M32B2_RefreshMode+0x48>)
 8002374:	2200      	movs	r2, #0
 8002376:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 8002378:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800237c:	4907      	ldr	r1, [pc, #28]	; (800239c <MT48LC4M32B2_RefreshMode+0x48>)
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f00f f90e 	bl	80115a0 <HAL_SDRAM_SendCommand>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 800238a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800238e:	e000      	b.n	8002392 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 8002390:	2300      	movs	r3, #0
  }
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	24007168 	.word	0x24007168

080023a0 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 80023aa:	6839      	ldr	r1, [r7, #0]
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f00f f92c 	bl	801160a <HAL_SDRAM_ProgramRefreshRate>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d002      	beq.n	80023be <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 80023b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023bc:	e000      	b.n	80023c0 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 80023be:	2300      	movs	r3, #0
  }
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80023d0:	f005 fb80 	bl	8007ad4 <HAL_GetTick>
 80023d4:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80023d6:	bf00      	nop
 80023d8:	f005 fb7c 	bl	8007ad4 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d8f7      	bhi.n	80023d8 <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <WM8994_Init>:
  * @param pObj pointer to component object
  * @param pInit pointer de component init structure
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_Init(WM8994_Object_t *pObj, WM8994_Init_t *pInit)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  static uint8_t ColdStartup = 1;
  uint16_t tmp;
  
  /* wm8994 Errata Work-Arounds */
  tmp = 0x0003;
 80023fe:	2303      	movs	r3, #3
 8002400:	817b      	strh	r3, [r7, #10]
  ret = wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f103 0018 	add.w	r0, r3, #24
 8002408:	f107 020a 	add.w	r2, r7, #10
 800240c:	2302      	movs	r3, #2
 800240e:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002412:	f001 fdb9 	bl	8003f88 <wm8994_write_reg>
 8002416:	60f8      	str	r0, [r7, #12]
  tmp = 0x0000;
 8002418:	2300      	movs	r3, #0
 800241a:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, 0x817, &tmp, 2);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f103 0018 	add.w	r0, r3, #24
 8002422:	f107 020a 	add.w	r2, r7, #10
 8002426:	2302      	movs	r3, #2
 8002428:	f640 0117 	movw	r1, #2071	; 0x817
 800242c:	f001 fdac 	bl	8003f88 <wm8994_write_reg>
 8002430:	4602      	mov	r2, r0
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	4413      	add	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]
  ret += wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f103 0018 	add.w	r0, r3, #24
 800243e:	f107 020a 	add.w	r2, r7, #10
 8002442:	2302      	movs	r3, #2
 8002444:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002448:	f001 fd9e 	bl	8003f88 <wm8994_write_reg>
 800244c:	4602      	mov	r2, r0
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4413      	add	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled: 0x006C at reg 0x39 */
  /* Bias Enable */
  tmp = 0x006C;
 8002454:	236c      	movs	r3, #108	; 0x6c
 8002456:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANTIPOP2, &tmp, 2);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f103 0018 	add.w	r0, r3, #24
 800245e:	f107 020a 	add.w	r2, r7, #10
 8002462:	2302      	movs	r3, #2
 8002464:	2139      	movs	r1, #57	; 0x39
 8002466:	f001 fd8f 	bl	8003f88 <wm8994_write_reg>
 800246a:	4602      	mov	r2, r0
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4413      	add	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]
  
  /* Enable bias generator, Enable VMID */
  if (pInit->InputDevice != WM8994_IN_NONE)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00f      	beq.n	800249a <WM8994_Init+0xa6>
  {
    tmp = 0x0013;
 800247a:	2313      	movs	r3, #19
 800247c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);  
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f103 0018 	add.w	r0, r3, #24
 8002484:	f107 020a 	add.w	r2, r7, #10
 8002488:	2302      	movs	r3, #2
 800248a:	2101      	movs	r1, #1
 800248c:	f001 fd7c 	bl	8003f88 <wm8994_write_reg>
 8002490:	4602      	mov	r2, r0
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	4413      	add	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	e00e      	b.n	80024b8 <WM8994_Init+0xc4>
  }
  else
  { 
    tmp = 0x0003;
 800249a:	2303      	movs	r3, #3
 800249c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f103 0018 	add.w	r0, r3, #24
 80024a4:	f107 020a 	add.w	r2, r7, #10
 80024a8:	2302      	movs	r3, #2
 80024aa:	2101      	movs	r1, #1
 80024ac:	f001 fd6c 	bl	8003f88 <wm8994_write_reg>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4413      	add	r3, r2
 80024b6:	60fb      	str	r3, [r7, #12]
  }
  
  /* Add Delay */
  (void)WM8994_Delay(pObj, 50);
 80024b8:	2132      	movs	r1, #50	; 0x32
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f001 fcec 	bl	8003e98 <WM8994_Delay>
  
  /* Path Configurations for output */
  switch (pInit->OutputDevice)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	f200 8141 	bhi.w	800274c <WM8994_Init+0x358>
 80024ca:	a201      	add	r2, pc, #4	; (adr r2, 80024d0 <WM8994_Init+0xdc>)
 80024cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d0:	080027e7 	.word	0x080027e7
 80024d4:	080024e1 	.word	0x080024e1
 80024d8:	0800257b 	.word	0x0800257b
 80024dc:	08002615 	.word	0x08002615
  {
  case WM8994_OUT_SPEAKER: 
    /* Enable DAC1 (Left), Enable DAC1 (Right),
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    tmp = 0x0C0C;
 80024e0:	f640 430c 	movw	r3, #3084	; 0xc0c
 80024e4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f103 0018 	add.w	r0, r3, #24
 80024ec:	f107 020a 	add.w	r2, r7, #10
 80024f0:	2302      	movs	r3, #2
 80024f2:	2105      	movs	r1, #5
 80024f4:	f001 fd48 	bl	8003f88 <wm8994_write_reg>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4413      	add	r3, r2
 80024fe:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0000;
 8002500:	2300      	movs	r3, #0
 8002502:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f103 0018 	add.w	r0, r3, #24
 800250a:	f107 020a 	add.w	r2, r7, #10
 800250e:	2302      	movs	r3, #2
 8002510:	f240 6101 	movw	r1, #1537	; 0x601
 8002514:	f001 fd38 	bl	8003f88 <wm8994_write_reg>
 8002518:	4602      	mov	r2, r0
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4413      	add	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f103 0018 	add.w	r0, r3, #24
 8002526:	f107 020a 	add.w	r2, r7, #10
 800252a:	2302      	movs	r3, #2
 800252c:	f240 6102 	movw	r1, #1538	; 0x602
 8002530:	f001 fd2a 	bl	8003f88 <wm8994_write_reg>
 8002534:	4602      	mov	r2, r0
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	4413      	add	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0002;
 800253c:	2302      	movs	r3, #2
 800253e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f103 0018 	add.w	r0, r3, #24
 8002546:	f107 020a 	add.w	r2, r7, #10
 800254a:	2302      	movs	r3, #2
 800254c:	f240 6104 	movw	r1, #1540	; 0x604
 8002550:	f001 fd1a 	bl	8003f88 <wm8994_write_reg>
 8002554:	4602      	mov	r2, r0
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	4413      	add	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f103 0018 	add.w	r0, r3, #24
 8002562:	f107 020a 	add.w	r2, r7, #10
 8002566:	2302      	movs	r3, #2
 8002568:	f240 6105 	movw	r1, #1541	; 0x605
 800256c:	f001 fd0c 	bl	8003f88 <wm8994_write_reg>
 8002570:	4602      	mov	r2, r0
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4413      	add	r3, r2
 8002576:	60fb      	str	r3, [r7, #12]
    break;
 8002578:	e136      	b.n	80027e8 <WM8994_Init+0x3f4>
    
  case WM8994_OUT_HEADPHONE:    
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 800257a:	f240 3303 	movw	r3, #771	; 0x303
 800257e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f103 0018 	add.w	r0, r3, #24
 8002586:	f107 020a 	add.w	r2, r7, #10
 800258a:	2302      	movs	r3, #2
 800258c:	2105      	movs	r1, #5
 800258e:	f001 fcfb 	bl	8003f88 <wm8994_write_reg>
 8002592:	4602      	mov	r2, r0
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4413      	add	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 800259a:	2301      	movs	r3, #1
 800259c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f103 0018 	add.w	r0, r3, #24
 80025a4:	f107 020a 	add.w	r2, r7, #10
 80025a8:	2302      	movs	r3, #2
 80025aa:	f240 6101 	movw	r1, #1537	; 0x601
 80025ae:	f001 fceb 	bl	8003f88 <wm8994_write_reg>
 80025b2:	4602      	mov	r2, r0
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4413      	add	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f103 0018 	add.w	r0, r3, #24
 80025c0:	f107 020a 	add.w	r2, r7, #10
 80025c4:	2302      	movs	r3, #2
 80025c6:	f240 6102 	movw	r1, #1538	; 0x602
 80025ca:	f001 fcdd 	bl	8003f88 <wm8994_write_reg>
 80025ce:	4602      	mov	r2, r0
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4413      	add	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 80025d6:	2300      	movs	r3, #0
 80025d8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f103 0018 	add.w	r0, r3, #24
 80025e0:	f107 020a 	add.w	r2, r7, #10
 80025e4:	2302      	movs	r3, #2
 80025e6:	f240 6104 	movw	r1, #1540	; 0x604
 80025ea:	f001 fccd 	bl	8003f88 <wm8994_write_reg>
 80025ee:	4602      	mov	r2, r0
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4413      	add	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f103 0018 	add.w	r0, r3, #24
 80025fc:	f107 020a 	add.w	r2, r7, #10
 8002600:	2302      	movs	r3, #2
 8002602:	f240 6105 	movw	r1, #1541	; 0x605
 8002606:	f001 fcbf 	bl	8003f88 <wm8994_write_reg>
 800260a:	4602      	mov	r2, r0
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4413      	add	r3, r2
 8002610:	60fb      	str	r3, [r7, #12]
    break;
 8002612:	e0e9      	b.n	80027e8 <WM8994_Init+0x3f4>
    
  case WM8994_OUT_BOTH:
    if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b05      	cmp	r3, #5
 800261a:	d14a      	bne.n	80026b2 <WM8994_Init+0x2be>
    {
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      also Enable DAC2 (Left), Enable DAC2 (Right)*/
      tmp = 0x0F0F;
 800261c:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002620:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f103 0018 	add.w	r0, r3, #24
 8002628:	f107 020a 	add.w	r2, r7, #10
 800262c:	2302      	movs	r3, #2
 800262e:	2105      	movs	r1, #5
 8002630:	f001 fcaa 	bl	8003f88 <wm8994_write_reg>
 8002634:	4602      	mov	r2, r0
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4413      	add	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
      Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0003;
 800263c:	2303      	movs	r3, #3
 800263e:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f103 0018 	add.w	r0, r3, #24
 8002646:	f107 020a 	add.w	r2, r7, #10
 800264a:	2302      	movs	r3, #2
 800264c:	f240 6101 	movw	r1, #1537	; 0x601
 8002650:	f001 fc9a 	bl	8003f88 <wm8994_write_reg>
 8002654:	4602      	mov	r2, r0
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4413      	add	r3, r2
 800265a:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
      Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f103 0018 	add.w	r0, r3, #24
 8002662:	f107 020a 	add.w	r2, r7, #10
 8002666:	2302      	movs	r3, #2
 8002668:	f240 6102 	movw	r1, #1538	; 0x602
 800266c:	f001 fc8c 	bl	8003f88 <wm8994_write_reg>
 8002670:	4602      	mov	r2, r0
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	4413      	add	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
      Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f103 0018 	add.w	r0, r3, #24
 800267e:	f107 020a 	add.w	r2, r7, #10
 8002682:	2302      	movs	r3, #2
 8002684:	f240 6104 	movw	r1, #1540	; 0x604
 8002688:	f001 fc7e 	bl	8003f88 <wm8994_write_reg>
 800268c:	4602      	mov	r2, r0
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4413      	add	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
      Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */       
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f103 0018 	add.w	r0, r3, #24
 800269a:	f107 020a 	add.w	r2, r7, #10
 800269e:	2302      	movs	r3, #2
 80026a0:	f240 6105 	movw	r1, #1541	; 0x605
 80026a4:	f001 fc70 	bl	8003f88 <wm8994_write_reg>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4413      	add	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
      
      /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
    }
    break;
 80026b0:	e09a      	b.n	80027e8 <WM8994_Init+0x3f4>
      tmp = 0x0F0F;
 80026b2:	f640 730f 	movw	r3, #3855	; 0xf0f
 80026b6:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f103 0018 	add.w	r0, r3, #24
 80026be:	f107 020a 	add.w	r2, r7, #10
 80026c2:	2302      	movs	r3, #2
 80026c4:	2105      	movs	r1, #5
 80026c6:	f001 fc5f 	bl	8003f88 <wm8994_write_reg>
 80026ca:	4602      	mov	r2, r0
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4413      	add	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]
      tmp = 0x0001;
 80026d2:	2301      	movs	r3, #1
 80026d4:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f103 0018 	add.w	r0, r3, #24
 80026dc:	f107 020a 	add.w	r2, r7, #10
 80026e0:	2302      	movs	r3, #2
 80026e2:	f240 6101 	movw	r1, #1537	; 0x601
 80026e6:	f001 fc4f 	bl	8003f88 <wm8994_write_reg>
 80026ea:	4602      	mov	r2, r0
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4413      	add	r3, r2
 80026f0:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f103 0018 	add.w	r0, r3, #24
 80026f8:	f107 020a 	add.w	r2, r7, #10
 80026fc:	2302      	movs	r3, #2
 80026fe:	f240 6102 	movw	r1, #1538	; 0x602
 8002702:	f001 fc41 	bl	8003f88 <wm8994_write_reg>
 8002706:	4602      	mov	r2, r0
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4413      	add	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]
      tmp = 0x0002;
 800270e:	2302      	movs	r3, #2
 8002710:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f103 0018 	add.w	r0, r3, #24
 8002718:	f107 020a 	add.w	r2, r7, #10
 800271c:	2302      	movs	r3, #2
 800271e:	f240 6104 	movw	r1, #1540	; 0x604
 8002722:	f001 fc31 	bl	8003f88 <wm8994_write_reg>
 8002726:	4602      	mov	r2, r0
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4413      	add	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f103 0018 	add.w	r0, r3, #24
 8002734:	f107 020a 	add.w	r2, r7, #10
 8002738:	2302      	movs	r3, #2
 800273a:	f240 6105 	movw	r1, #1541	; 0x605
 800273e:	f001 fc23 	bl	8003f88 <wm8994_write_reg>
 8002742:	4602      	mov	r2, r0
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4413      	add	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
    break;
 800274a:	e04d      	b.n	80027e8 <WM8994_Init+0x3f4>
    break;
  case WM8994_OUT_AUTO :
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 800274c:	f240 3303 	movw	r3, #771	; 0x303
 8002750:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f103 0018 	add.w	r0, r3, #24
 8002758:	f107 020a 	add.w	r2, r7, #10
 800275c:	2302      	movs	r3, #2
 800275e:	2105      	movs	r1, #5
 8002760:	f001 fc12 	bl	8003f88 <wm8994_write_reg>
 8002764:	4602      	mov	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4413      	add	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 800276c:	2301      	movs	r3, #1
 800276e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f103 0018 	add.w	r0, r3, #24
 8002776:	f107 020a 	add.w	r2, r7, #10
 800277a:	2302      	movs	r3, #2
 800277c:	f240 6101 	movw	r1, #1537	; 0x601
 8002780:	f001 fc02 	bl	8003f88 <wm8994_write_reg>
 8002784:	4602      	mov	r2, r0
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4413      	add	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f103 0018 	add.w	r0, r3, #24
 8002792:	f107 020a 	add.w	r2, r7, #10
 8002796:	2302      	movs	r3, #2
 8002798:	f240 6102 	movw	r1, #1538	; 0x602
 800279c:	f001 fbf4 	bl	8003f88 <wm8994_write_reg>
 80027a0:	4602      	mov	r2, r0
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4413      	add	r3, r2
 80027a6:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 80027a8:	2300      	movs	r3, #0
 80027aa:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f103 0018 	add.w	r0, r3, #24
 80027b2:	f107 020a 	add.w	r2, r7, #10
 80027b6:	2302      	movs	r3, #2
 80027b8:	f240 6104 	movw	r1, #1540	; 0x604
 80027bc:	f001 fbe4 	bl	8003f88 <wm8994_write_reg>
 80027c0:	4602      	mov	r2, r0
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4413      	add	r3, r2
 80027c6:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f103 0018 	add.w	r0, r3, #24
 80027ce:	f107 020a 	add.w	r2, r7, #10
 80027d2:	2302      	movs	r3, #2
 80027d4:	f240 6105 	movw	r1, #1541	; 0x605
 80027d8:	f001 fbd6 	bl	8003f88 <wm8994_write_reg>
 80027dc:	4602      	mov	r2, r0
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4413      	add	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]
    break;
 80027e4:	e000      	b.n	80027e8 <WM8994_Init+0x3f4>
    break;
 80027e6:	bf00      	nop
  }
  
  /* Path Configurations for input */
  switch (pInit->InputDevice)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	3b01      	subs	r3, #1
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	f200 81e0 	bhi.w	8002bb4 <WM8994_Init+0x7c0>
 80027f4:	a201      	add	r2, pc, #4	; (adr r2, 80027fc <WM8994_Init+0x408>)
 80027f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fa:	bf00      	nop
 80027fc:	080029e5 	.word	0x080029e5
 8002800:	08002811 	.word	0x08002811
 8002804:	080028cf 	.word	0x080028cf
 8002808:	08002bb5 	.word	0x08002bb5
 800280c:	08002aa3 	.word	0x08002aa3
  {
  case WM8994_IN_MIC2 :
    /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
    * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0C30;
 8002810:	f44f 6343 	mov.w	r3, #3120	; 0xc30
 8002814:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f103 0018 	add.w	r0, r3, #24
 800281c:	f107 020a 	add.w	r2, r7, #10
 8002820:	2302      	movs	r3, #2
 8002822:	2104      	movs	r1, #4
 8002824:	f001 fbb0 	bl	8003f88 <wm8994_write_reg>
 8002828:	4602      	mov	r2, r0
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	4413      	add	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
    tmp = 0x00DB;
 8002830:	23db      	movs	r3, #219	; 0xdb
 8002832:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f103 0018 	add.w	r0, r3, #24
 800283a:	f107 020a 	add.w	r2, r7, #10
 800283e:	2302      	movs	r3, #2
 8002840:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8002844:	f001 fba0 	bl	8003f88 <wm8994_write_reg>
 8002848:	4602      	mov	r2, r0
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4413      	add	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]
    
    /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6000;
 8002850:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002854:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f103 0018 	add.w	r0, r3, #24
 800285c:	f107 020a 	add.w	r2, r7, #10
 8002860:	2302      	movs	r3, #2
 8002862:	2102      	movs	r1, #2
 8002864:	f001 fb90 	bl	8003f88 <wm8994_write_reg>
 8002868:	4602      	mov	r2, r0
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	4413      	add	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
    tmp = 0x0002;
 8002870:	2302      	movs	r3, #2
 8002872:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f103 0018 	add.w	r0, r3, #24
 800287a:	f107 020a 	add.w	r2, r7, #10
 800287e:	2302      	movs	r3, #2
 8002880:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8002884:	f001 fb80 	bl	8003f88 <wm8994_write_reg>
 8002888:	4602      	mov	r2, r0
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	4413      	add	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f103 0018 	add.w	r0, r3, #24
 8002896:	f107 020a 	add.w	r2, r7, #10
 800289a:	2302      	movs	r3, #2
 800289c:	f240 6109 	movw	r1, #1545	; 0x609
 80028a0:	f001 fb72 	bl	8003f88 <wm8994_write_reg>
 80028a4:	4602      	mov	r2, r0
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4413      	add	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
    tmp = 0x000E;
 80028ac:	230e      	movs	r3, #14
 80028ae:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f103 0018 	add.w	r0, r3, #24
 80028b6:	f107 020a 	add.w	r2, r7, #10
 80028ba:	2302      	movs	r3, #2
 80028bc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80028c0:	f001 fb62 	bl	8003f88 <wm8994_write_reg>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4413      	add	r3, r2
 80028ca:	60fb      	str	r3, [r7, #12]
    break;
 80028cc:	e173      	b.n	8002bb6 <WM8994_Init+0x7c2>
    
  case WM8994_IN_LINE1 :
    /* IN1LN_TO_IN1L, IN1RN_TO_IN1R */
    tmp = 0x0011;
 80028ce:	2311      	movs	r3, #17
 80028d0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_2, &tmp, 2);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f103 0018 	add.w	r0, r3, #24
 80028d8:	f107 020a 	add.w	r2, r7, #10
 80028dc:	2302      	movs	r3, #2
 80028de:	2128      	movs	r1, #40	; 0x28
 80028e0:	f001 fb52 	bl	8003f88 <wm8994_write_reg>
 80028e4:	4602      	mov	r2, r0
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	4413      	add	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]
    
    /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
    tmp = 0x0035;
 80028ec:	2335      	movs	r3, #53	; 0x35
 80028ee:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_3, &tmp, 2);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f103 0018 	add.w	r0, r3, #24
 80028f6:	f107 020a 	add.w	r2, r7, #10
 80028fa:	2302      	movs	r3, #2
 80028fc:	2129      	movs	r1, #41	; 0x29
 80028fe:	f001 fb43 	bl	8003f88 <wm8994_write_reg>
 8002902:	4602      	mov	r2, r0
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4413      	add	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]
    
    /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_4, &tmp, 2);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f103 0018 	add.w	r0, r3, #24
 8002910:	f107 020a 	add.w	r2, r7, #10
 8002914:	2302      	movs	r3, #2
 8002916:	212a      	movs	r1, #42	; 0x2a
 8002918:	f001 fb36 	bl	8003f88 <wm8994_write_reg>
 800291c:	4602      	mov	r2, r0
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	4413      	add	r3, r2
 8002922:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0303;
 8002924:	f240 3303 	movw	r3, #771	; 0x303
 8002928:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f103 0018 	add.w	r0, r3, #24
 8002930:	f107 020a 	add.w	r2, r7, #10
 8002934:	2302      	movs	r3, #2
 8002936:	2104      	movs	r1, #4
 8002938:	f001 fb26 	bl	8003f88 <wm8994_write_reg>
 800293c:	4602      	mov	r2, r0
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4413      	add	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    tmp = 0x00DB;
 8002944:	23db      	movs	r3, #219	; 0xdb
 8002946:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f103 0018 	add.w	r0, r3, #24
 800294e:	f107 020a 	add.w	r2, r7, #10
 8002952:	2302      	movs	r3, #2
 8002954:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8002958:	f001 fb16 	bl	8003f88 <wm8994_write_reg>
 800295c:	4602      	mov	r2, r0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	4413      	add	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]
    
    /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6350;
 8002964:	f246 3350 	movw	r3, #25424	; 0x6350
 8002968:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f103 0018 	add.w	r0, r3, #24
 8002970:	f107 020a 	add.w	r2, r7, #10
 8002974:	2302      	movs	r3, #2
 8002976:	2102      	movs	r1, #2
 8002978:	f001 fb06 	bl	8003f88 <wm8994_write_reg>
 800297c:	4602      	mov	r2, r0
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4413      	add	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8002984:	2302      	movs	r3, #2
 8002986:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f103 0018 	add.w	r0, r3, #24
 800298e:	f107 020a 	add.w	r2, r7, #10
 8002992:	2302      	movs	r3, #2
 8002994:	f240 6106 	movw	r1, #1542	; 0x606
 8002998:	f001 faf6 	bl	8003f88 <wm8994_write_reg>
 800299c:	4602      	mov	r2, r0
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	4413      	add	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f103 0018 	add.w	r0, r3, #24
 80029aa:	f107 020a 	add.w	r2, r7, #10
 80029ae:	2302      	movs	r3, #2
 80029b0:	f240 6107 	movw	r1, #1543	; 0x607
 80029b4:	f001 fae8 	bl	8003f88 <wm8994_write_reg>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	4413      	add	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x800D;
 80029c0:	f248 030d 	movw	r3, #32781	; 0x800d
 80029c4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f103 0018 	add.w	r0, r3, #24
 80029cc:	f107 020a 	add.w	r2, r7, #10
 80029d0:	2302      	movs	r3, #2
 80029d2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80029d6:	f001 fad7 	bl	8003f88 <wm8994_write_reg>
 80029da:	4602      	mov	r2, r0
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4413      	add	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]
    break;
 80029e2:	e0e8      	b.n	8002bb6 <WM8994_Init+0x7c2>
    
  case WM8994_IN_MIC1 :
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x030C;
 80029e4:	f44f 7343 	mov.w	r3, #780	; 0x30c
 80029e8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f103 0018 	add.w	r0, r3, #24
 80029f0:	f107 020a 	add.w	r2, r7, #10
 80029f4:	2302      	movs	r3, #2
 80029f6:	2104      	movs	r1, #4
 80029f8:	f001 fac6 	bl	8003f88 <wm8994_write_reg>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	4413      	add	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    tmp = 0x00DB;
 8002a04:	23db      	movs	r3, #219	; 0xdb
 8002a06:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f103 0018 	add.w	r0, r3, #24
 8002a0e:	f107 020a 	add.w	r2, r7, #10
 8002a12:	2302      	movs	r3, #2
 8002a14:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8002a18:	f001 fab6 	bl	8003f88 <wm8994_write_reg>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4413      	add	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]
    
    /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6350;
 8002a24:	f246 3350 	movw	r3, #25424	; 0x6350
 8002a28:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f103 0018 	add.w	r0, r3, #24
 8002a30:	f107 020a 	add.w	r2, r7, #10
 8002a34:	2302      	movs	r3, #2
 8002a36:	2102      	movs	r1, #2
 8002a38:	f001 faa6 	bl	8003f88 <wm8994_write_reg>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4413      	add	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8002a44:	2302      	movs	r3, #2
 8002a46:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f103 0018 	add.w	r0, r3, #24
 8002a4e:	f107 020a 	add.w	r2, r7, #10
 8002a52:	2302      	movs	r3, #2
 8002a54:	f240 6106 	movw	r1, #1542	; 0x606
 8002a58:	f001 fa96 	bl	8003f88 <wm8994_write_reg>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4413      	add	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f103 0018 	add.w	r0, r3, #24
 8002a6a:	f107 020a 	add.w	r2, r7, #10
 8002a6e:	2302      	movs	r3, #2
 8002a70:	f240 6107 	movw	r1, #1543	; 0x607
 8002a74:	f001 fa88 	bl	8003f88 <wm8994_write_reg>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;
 8002a80:	230d      	movs	r3, #13
 8002a82:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f103 0018 	add.w	r0, r3, #24
 8002a8a:	f107 020a 	add.w	r2, r7, #10
 8002a8e:	2302      	movs	r3, #2
 8002a90:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002a94:	f001 fa78 	bl	8003f88 <wm8994_write_reg>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]
    break;
 8002aa0:	e089      	b.n	8002bb6 <WM8994_Init+0x7c2>
    
  case WM8994_IN_MIC1_MIC2 :
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0F3C;
 8002aa2:	f640 733c 	movw	r3, #3900	; 0xf3c
 8002aa6:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f103 0018 	add.w	r0, r3, #24
 8002aae:	f107 020a 	add.w	r2, r7, #10
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	2104      	movs	r1, #4
 8002ab6:	f001 fa67 	bl	8003f88 <wm8994_write_reg>
 8002aba:	4602      	mov	r2, r0
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4413      	add	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
    tmp = 0x00DB;
 8002ac2:	23db      	movs	r3, #219	; 0xdb
 8002ac4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f103 0018 	add.w	r0, r3, #24
 8002acc:	f107 020a 	add.w	r2, r7, #10
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8002ad6:	f001 fa57 	bl	8003f88 <wm8994_write_reg>
 8002ada:	4602      	mov	r2, r0
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4413      	add	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f103 0018 	add.w	r0, r3, #24
 8002ae8:	f107 020a 	add.w	r2, r7, #10
 8002aec:	2302      	movs	r3, #2
 8002aee:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8002af2:	f001 fa49 	bl	8003f88 <wm8994_write_reg>
 8002af6:	4602      	mov	r2, r0
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4413      	add	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]
    
    /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
    tmp = 0x63A0;
 8002afe:	f246 33a0 	movw	r3, #25504	; 0x63a0
 8002b02:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f103 0018 	add.w	r0, r3, #24
 8002b0a:	f107 020a 	add.w	r2, r7, #10
 8002b0e:	2302      	movs	r3, #2
 8002b10:	2102      	movs	r1, #2
 8002b12:	f001 fa39 	bl	8003f88 <wm8994_write_reg>
 8002b16:	4602      	mov	r2, r0
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f103 0018 	add.w	r0, r3, #24
 8002b28:	f107 020a 	add.w	r2, r7, #10
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	f240 6106 	movw	r1, #1542	; 0x606
 8002b32:	f001 fa29 	bl	8003f88 <wm8994_write_reg>
 8002b36:	4602      	mov	r2, r0
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f103 0018 	add.w	r0, r3, #24
 8002b44:	f107 020a 	add.w	r2, r7, #10
 8002b48:	2302      	movs	r3, #2
 8002b4a:	f240 6107 	movw	r1, #1543	; 0x607
 8002b4e:	f001 fa1b 	bl	8003f88 <wm8994_write_reg>
 8002b52:	4602      	mov	r2, r0
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4413      	add	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f103 0018 	add.w	r0, r3, #24
 8002b60:	f107 020a 	add.w	r2, r7, #10
 8002b64:	2302      	movs	r3, #2
 8002b66:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8002b6a:	f001 fa0d 	bl	8003f88 <wm8994_write_reg>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4413      	add	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f103 0018 	add.w	r0, r3, #24
 8002b7c:	f107 020a 	add.w	r2, r7, #10
 8002b80:	2302      	movs	r3, #2
 8002b82:	f240 6109 	movw	r1, #1545	; 0x609
 8002b86:	f001 f9ff 	bl	8003f88 <wm8994_write_reg>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4413      	add	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;
 8002b92:	230d      	movs	r3, #13
 8002b94:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f103 0018 	add.w	r0, r3, #24
 8002b9c:	f107 020a 	add.w	r2, r7, #10
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002ba6:	f001 f9ef 	bl	8003f88 <wm8994_write_reg>
 8002baa:	4602      	mov	r2, r0
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4413      	add	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]
    
    break;    
 8002bb2:	e000      	b.n	8002bb6 <WM8994_Init+0x7c2>
  case WM8994_IN_LINE2 :
  case WM8994_IN_NONE:      
  default:
    /* Actually, no other input devices supported */
    break;
 8002bb4:	bf00      	nop
  }
  
  /*  Clock Configurations */
  ret += WM8994_SetFrequency(pObj, pInit->Frequency);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	4619      	mov	r1, r3
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 fff9 	bl	8003bb4 <WM8994_SetFrequency>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]
  
  if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2b05      	cmp	r3, #5
 8002bd0:	d11a      	bne.n	8002c08 <WM8994_Init+0x814>
  {
    /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
    ret += WM8994_SetResolution(pObj, WM8994_RESOLUTION_16b);
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 ff59 	bl	8003a8c <WM8994_SetResolution>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4413      	add	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]
    ret += WM8994_SetProtocol(pObj, WM8994_PROTOCOL_DSP);
 8002be2:	2103      	movs	r1, #3
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 ffab 	bl	8003b40 <WM8994_SetProtocol>
 8002bea:	4602      	mov	r2, r0
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4413      	add	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3318      	adds	r3, #24
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f001 faf3 	bl	80041e4 <wm8994_aif1_control1_adcr_src>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4413      	add	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	e01b      	b.n	8002c40 <WM8994_Init+0x84c>
  }
  else
  {
    /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
    ret += WM8994_SetResolution(pObj, pInit->Resolution);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 ff3c 	bl	8003a8c <WM8994_SetResolution>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	4413      	add	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]
    ret += WM8994_SetProtocol(pObj, WM8994_PROTOCOL_I2S);
 8002c1c:	2102      	movs	r1, #2
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 ff8e 	bl	8003b40 <WM8994_SetProtocol>
 8002c24:	4602      	mov	r2, r0
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	4413      	add	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3318      	adds	r3, #24
 8002c30:	2101      	movs	r1, #1
 8002c32:	4618      	mov	r0, r3
 8002c34:	f001 fad6 	bl	80041e4 <wm8994_aif1_control1_adcr_src>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]
  }
  
  /* slave mode */
  tmp = 0x0000;
 8002c40:	2300      	movs	r3, #0
 8002c42:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_MASTER_SLAVE, &tmp, 2);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f103 0018 	add.w	r0, r3, #24
 8002c4a:	f107 020a 	add.w	r2, r7, #10
 8002c4e:	2302      	movs	r3, #2
 8002c50:	f240 3102 	movw	r1, #770	; 0x302
 8002c54:	f001 f998 	bl	8003f88 <wm8994_write_reg>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  tmp = 0x000A;
 8002c60:	230a      	movs	r3, #10
 8002c62:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLOCKING1, &tmp, 2);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f103 0018 	add.w	r0, r3, #24
 8002c6a:	f107 020a 	add.w	r2, r7, #10
 8002c6e:	2302      	movs	r3, #2
 8002c70:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002c74:	f001 f988 	bl	8003f88 <wm8994_write_reg>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  tmp = 0x0001;
 8002c80:	2301      	movs	r3, #1
 8002c82:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_CLOCKING1, &tmp, 2);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f103 0018 	add.w	r0, r3, #24
 8002c8a:	f107 020a 	add.w	r2, r7, #10
 8002c8e:	2302      	movs	r3, #2
 8002c90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c94:	f001 f978 	bl	8003f88 <wm8994_write_reg>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	60fb      	str	r3, [r7, #12]
  
  if (pInit->OutputDevice != WM8994_OUT_NONE)  /* Audio output selected */  
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 81c6 	beq.w	8003036 <WM8994_Init+0xc42>
  {  
    if ((pInit->OutputDevice == WM8994_OUT_HEADPHONE) && (pInit->InputDevice == WM8994_IN_NONE))
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d164      	bne.n	8002d7c <WM8994_Init+0x988>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d160      	bne.n	8002d7c <WM8994_Init+0x988>
    {    
      tmp = 0x0100;
 8002cba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cbe:	817b      	strh	r3, [r7, #10]
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f103 0018 	add.w	r0, r3, #24
 8002cc6:	f107 020a 	add.w	r2, r7, #10
 8002cca:	2302      	movs	r3, #2
 8002ccc:	212d      	movs	r1, #45	; 0x2d
 8002cce:	f001 f95b 	bl	8003f88 <wm8994_write_reg>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f103 0018 	add.w	r0, r3, #24
 8002ce0:	f107 020a 	add.w	r2, r7, #10
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	212e      	movs	r1, #46	; 0x2e
 8002ce8:	f001 f94e 	bl	8003f88 <wm8994_write_reg>
 8002cec:	4602      	mov	r2, r0
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]
      
      /* Startup sequence for Headphone */
      if(ColdStartup == 1U)
 8002cf4:	4b52      	ldr	r3, [pc, #328]	; (8002e40 <WM8994_Init+0xa4c>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d119      	bne.n	8002d30 <WM8994_Init+0x93c>
      {
        /* Enable/Start the write sequencer */
        tmp = 0x8100;
 8002cfc:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8002d00:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f103 0018 	add.w	r0, r3, #24
 8002d08:	f107 020a 	add.w	r2, r7, #10
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002d12:	f001 f939 	bl	8003f88 <wm8994_write_reg>
 8002d16:	4602      	mov	r2, r0
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]
        
        ColdStartup=0;
 8002d1e:	4b48      	ldr	r3, [pc, #288]	; (8002e40 <WM8994_Init+0xa4c>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        (void)WM8994_Delay(pObj, 325);
 8002d24:	f240 1145 	movw	r1, #325	; 0x145
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f001 f8b5 	bl	8003e98 <WM8994_Delay>
 8002d2e:	e014      	b.n	8002d5a <WM8994_Init+0x966>
      }
      else 
      { 
        /* Headphone Warm Start-Up */
        tmp = 0x8108;
 8002d30:	f248 1308 	movw	r3, #33032	; 0x8108
 8002d34:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f103 0018 	add.w	r0, r3, #24
 8002d3c:	f107 020a 	add.w	r2, r7, #10
 8002d40:	2302      	movs	r3, #2
 8002d42:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002d46:	f001 f91f 	bl	8003f88 <wm8994_write_reg>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4413      	add	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]
        
        /* Add Delay */
        (void)WM8994_Delay(pObj, 50);
 8002d52:	2132      	movs	r1, #50	; 0x32
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f001 f89f 	bl	8003e98 <WM8994_Delay>
      }
      
      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      tmp = 0x0000;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f103 0018 	add.w	r0, r3, #24
 8002d64:	f107 020a 	add.w	r2, r7, #10
 8002d68:	2302      	movs	r3, #2
 8002d6a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8002d6e:	f001 f90b 	bl	8003f88 <wm8994_write_reg>
 8002d72:	4602      	mov	r2, r0
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4413      	add	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	e0f4      	b.n	8002f66 <WM8994_Init+0xb72>
    else
    {
      /* Analog Output Configuration */
      
      /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
      tmp = 0x0300;
 8002d7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d80:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f103 0018 	add.w	r0, r3, #24
 8002d88:	f107 020a 	add.w	r2, r7, #10
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	2103      	movs	r1, #3
 8002d90:	f001 f8fa 	bl	8003f88 <wm8994_write_reg>
 8002d94:	4602      	mov	r2, r0
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4413      	add	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]
      
      /* Left Speaker Mixer Volume = 0dB */
      tmp = 0x0000;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f103 0018 	add.w	r0, r3, #24
 8002da6:	f107 020a 	add.w	r2, r7, #10
 8002daa:	2302      	movs	r3, #2
 8002dac:	2122      	movs	r1, #34	; 0x22
 8002dae:	f001 f8eb 	bl	8003f88 <wm8994_write_reg>
 8002db2:	4602      	mov	r2, r0
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4413      	add	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]
      
      /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f103 0018 	add.w	r0, r3, #24
 8002dc0:	f107 020a 	add.w	r2, r7, #10
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	2123      	movs	r1, #35	; 0x23
 8002dc8:	f001 f8de 	bl	8003f88 <wm8994_write_reg>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]
      
      /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
      Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
      tmp = 0x0300;
 8002dd4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002dd8:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f103 0018 	add.w	r0, r3, #24
 8002de0:	f107 020a 	add.w	r2, r7, #10
 8002de4:	2302      	movs	r3, #2
 8002de6:	2136      	movs	r1, #54	; 0x36
 8002de8:	f001 f8ce 	bl	8003f88 <wm8994_write_reg>
 8002dec:	4602      	mov	r2, r0
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4413      	add	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]
      
      /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
      tmp = 0x3003;
 8002df4:	f243 0303 	movw	r3, #12291	; 0x3003
 8002df8:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f103 0018 	add.w	r0, r3, #24
 8002e00:	f107 020a 	add.w	r2, r7, #10
 8002e04:	2302      	movs	r3, #2
 8002e06:	2101      	movs	r1, #1
 8002e08:	f001 f8be 	bl	8003f88 <wm8994_write_reg>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	4413      	add	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]
      /* Headphone/Speaker Enable */
      
      if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2b05      	cmp	r3, #5
 8002e1a:	d113      	bne.n	8002e44 <WM8994_Init+0xa50>
      {
        /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
        tmp = 0x0205;
 8002e1c:	f240 2305 	movw	r3, #517	; 0x205
 8002e20:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2); 
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f103 0018 	add.w	r0, r3, #24
 8002e28:	f107 020a 	add.w	r2, r7, #10
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	2151      	movs	r1, #81	; 0x51
 8002e30:	f001 f8aa 	bl	8003f88 <wm8994_write_reg>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	4413      	add	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	e011      	b.n	8002e62 <WM8994_Init+0xa6e>
 8002e3e:	bf00      	nop
 8002e40:	2400052c 	.word	0x2400052c
      }
      else
      {
        /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
        tmp = 0x0005;
 8002e44:	2305      	movs	r3, #5
 8002e46:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f103 0018 	add.w	r0, r3, #24
 8002e4e:	f107 020a 	add.w	r2, r7, #10
 8002e52:	2302      	movs	r3, #2
 8002e54:	2151      	movs	r1, #81	; 0x51
 8002e56:	f001 f897 	bl	8003f88 <wm8994_write_reg>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4413      	add	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]
      }
      
      /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
      /* idem for Speaker */
      tmp = 0x3303;
 8002e62:	f243 3303 	movw	r3, #13059	; 0x3303
 8002e66:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f103 0018 	add.w	r0, r3, #24
 8002e6e:	f107 020a 	add.w	r2, r7, #10
 8002e72:	2302      	movs	r3, #2
 8002e74:	2101      	movs	r1, #1
 8002e76:	f001 f887 	bl	8003f88 <wm8994_write_reg>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4413      	add	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]
      
      /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
      tmp = 0x0022;
 8002e82:	2322      	movs	r3, #34	; 0x22
 8002e84:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f103 0018 	add.w	r0, r3, #24
 8002e8c:	f107 020a 	add.w	r2, r7, #10
 8002e90:	2302      	movs	r3, #2
 8002e92:	2160      	movs	r1, #96	; 0x60
 8002e94:	f001 f878 	bl	8003f88 <wm8994_write_reg>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]
      
      /* Enable Charge Pump */
      tmp = 0x9F25;
 8002ea0:	f649 7325 	movw	r3, #40741	; 0x9f25
 8002ea4:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f103 0018 	add.w	r0, r3, #24
 8002eac:	f107 020a 	add.w	r2, r7, #10
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	214c      	movs	r1, #76	; 0x4c
 8002eb4:	f001 f868 	bl	8003f88 <wm8994_write_reg>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]
      
      /* Add Delay */
      (void)WM8994_Delay(pObj, 15);
 8002ec0:	210f      	movs	r1, #15
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 ffe8 	bl	8003e98 <WM8994_Delay>
      
      tmp = 0x0001;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	817b      	strh	r3, [r7, #10]
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f103 0018 	add.w	r0, r3, #24
 8002ed2:	f107 020a 	add.w	r2, r7, #10
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	212d      	movs	r1, #45	; 0x2d
 8002eda:	f001 f855 	bl	8003f88 <wm8994_write_reg>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f103 0018 	add.w	r0, r3, #24
 8002eec:	f107 020a 	add.w	r2, r7, #10
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	212e      	movs	r1, #46	; 0x2e
 8002ef4:	f001 f848 	bl	8003f88 <wm8994_write_reg>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4413      	add	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]
      
      /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
      /* idem for SPKOUTL and SPKOUTR */
      tmp = 0x0330;
 8002f00:	f44f 734c 	mov.w	r3, #816	; 0x330
 8002f04:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f103 0018 	add.w	r0, r3, #24
 8002f0c:	f107 020a 	add.w	r2, r7, #10
 8002f10:	2302      	movs	r3, #2
 8002f12:	2103      	movs	r1, #3
 8002f14:	f001 f838 	bl	8003f88 <wm8994_write_reg>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]
      
      /* Enable DC Servo and trigger start-up mode on left and right channels */
      tmp = 0x0033;
 8002f20:	2333      	movs	r3, #51	; 0x33
 8002f22:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f103 0018 	add.w	r0, r3, #24
 8002f2a:	f107 020a 	add.w	r2, r7, #10
 8002f2e:	2302      	movs	r3, #2
 8002f30:	2154      	movs	r1, #84	; 0x54
 8002f32:	f001 f829 	bl	8003f88 <wm8994_write_reg>
 8002f36:	4602      	mov	r2, r0
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]
      
      /* Add Delay */
      (void)WM8994_Delay(pObj, 257);
 8002f3e:	f240 1101 	movw	r1, #257	; 0x101
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 ffa8 	bl	8003e98 <WM8994_Delay>
      
      /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
      tmp = 0x00EE;
 8002f48:	23ee      	movs	r3, #238	; 0xee
 8002f4a:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f103 0018 	add.w	r0, r3, #24
 8002f52:	f107 020a 	add.w	r2, r7, #10
 8002f56:	2302      	movs	r3, #2
 8002f58:	2160      	movs	r1, #96	; 0x60
 8002f5a:	f001 f815 	bl	8003f88 <wm8994_write_reg>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4413      	add	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]
    }
    
    /* Unmutes */
    
    /* Unmute DAC 1 (Left) */
    tmp = 0x00C0;
 8002f66:	23c0      	movs	r3, #192	; 0xc0
 8002f68:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_LEFT_VOL, &tmp, 2);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f103 0018 	add.w	r0, r3, #24
 8002f70:	f107 020a 	add.w	r2, r7, #10
 8002f74:	2302      	movs	r3, #2
 8002f76:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8002f7a:	f001 f805 	bl	8003f88 <wm8994_write_reg>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4413      	add	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 1 (Right) */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_RIGHT_VOL, &tmp, 2);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f103 0018 	add.w	r0, r3, #24
 8002f8c:	f107 020a 	add.w	r2, r7, #10
 8002f90:	2302      	movs	r3, #2
 8002f92:	f240 6111 	movw	r1, #1553	; 0x611
 8002f96:	f000 fff7 	bl	8003f88 <wm8994_write_reg>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 0 DAC path */
    tmp = 0x0010;
 8002fa2:	2310      	movs	r3, #16
 8002fa4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f103 0018 	add.w	r0, r3, #24
 8002fac:	f107 020a 	add.w	r2, r7, #10
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8002fb6:	f000 ffe7 	bl	8003f88 <wm8994_write_reg>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 2 (Left) */
    tmp = 0x00C0;
 8002fc2:	23c0      	movs	r3, #192	; 0xc0
 8002fc4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_LEFT_VOL, &tmp, 2);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f103 0018 	add.w	r0, r3, #24
 8002fcc:	f107 020a 	add.w	r2, r7, #10
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	f240 6112 	movw	r1, #1554	; 0x612
 8002fd6:	f000 ffd7 	bl	8003f88 <wm8994_write_reg>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4413      	add	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 2 (Right) */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_RIGHT_VOL, &tmp, 2);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f103 0018 	add.w	r0, r3, #24
 8002fe8:	f107 020a 	add.w	r2, r7, #10
 8002fec:	2302      	movs	r3, #2
 8002fee:	f240 6113 	movw	r1, #1555	; 0x613
 8002ff2:	f000 ffc9 	bl	8003f88 <wm8994_write_reg>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    tmp = 0x0010;
 8002ffe:	2310      	movs	r3, #16
 8003000:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f103 0018 	add.w	r0, r3, #24
 8003008:	f107 020a 	add.w	r2, r7, #10
 800300c:	2302      	movs	r3, #2
 800300e:	f240 4122 	movw	r1, #1058	; 0x422
 8003012:	f000 ffb9 	bl	8003f88 <wm8994_write_reg>
 8003016:	4602      	mov	r2, r0
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4413      	add	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]
    
    /* Volume Control */
    ret += WM8994_SetVolume(pObj, VOLUME_OUTPUT, (uint8_t)pInit->Volume); 
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	461a      	mov	r2, r3
 8003026:	2101      	movs	r1, #1
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f99f 	bl	800336c <WM8994_SetVolume>
 800302e:	4602      	mov	r2, r0
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4413      	add	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]
  }
  
  if (pInit->InputDevice != WM8994_IN_NONE) /* Audio input selected */
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 80b5 	beq.w	80031aa <WM8994_Init+0xdb6>
  {
    if ((pInit->InputDevice == WM8994_IN_MIC1) || (pInit->InputDevice == WM8994_IN_MIC2))
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d003      	beq.n	8003050 <WM8994_Init+0xc5c>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b02      	cmp	r3, #2
 800304e:	d130      	bne.n	80030b2 <WM8994_Init+0xcbe>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      tmp = 0x0013;
 8003050:	2313      	movs	r3, #19
 8003052:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f103 0018 	add.w	r0, r3, #24
 800305a:	f107 020a 	add.w	r2, r7, #10
 800305e:	2302      	movs	r3, #2
 8003060:	2101      	movs	r1, #1
 8003062:	f000 ff91 	bl	8003f88 <wm8994_write_reg>
 8003066:	4602      	mov	r2, r0
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4413      	add	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]
      
      /* ADC oversample enable */
      tmp = 0x0002;
 800306e:	2302      	movs	r3, #2
 8003070:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f103 0018 	add.w	r0, r3, #24
 8003078:	f107 020a 	add.w	r2, r7, #10
 800307c:	2302      	movs	r3, #2
 800307e:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8003082:	f000 ff81 	bl	8003f88 <wm8994_write_reg>
 8003086:	4602      	mov	r2, r0
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4413      	add	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x3800;
 800308e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003092:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f103 0018 	add.w	r0, r3, #24
 800309a:	f107 020a 	add.w	r2, r7, #10
 800309e:	2302      	movs	r3, #2
 80030a0:	f240 4111 	movw	r1, #1041	; 0x411
 80030a4:	f000 ff70 	bl	8003f88 <wm8994_write_reg>
 80030a8:	4602      	mov	r2, r0
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4413      	add	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	e06f      	b.n	8003192 <WM8994_Init+0xd9e>
    }
    else if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b05      	cmp	r3, #5
 80030b8:	d13e      	bne.n	8003138 <WM8994_Init+0xd44>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      tmp = 0x0013;
 80030ba:	2313      	movs	r3, #19
 80030bc:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f103 0018 	add.w	r0, r3, #24
 80030c4:	f107 020a 	add.w	r2, r7, #10
 80030c8:	2302      	movs	r3, #2
 80030ca:	2101      	movs	r1, #1
 80030cc:	f000 ff5c 	bl	8003f88 <wm8994_write_reg>
 80030d0:	4602      	mov	r2, r0
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4413      	add	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]
      
      /* ADC oversample enable */
      tmp = 0x0002;
 80030d8:	2302      	movs	r3, #2
 80030da:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f103 0018 	add.w	r0, r3, #24
 80030e2:	f107 020a 	add.w	r2, r7, #10
 80030e6:	2302      	movs	r3, #2
 80030e8:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80030ec:	f000 ff4c 	bl	8003f88 <wm8994_write_reg>
 80030f0:	4602      	mov	r2, r0
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4413      	add	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x1800;
 80030f8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80030fc:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f103 0018 	add.w	r0, r3, #24
 8003104:	f107 020a 	add.w	r2, r7, #10
 8003108:	2302      	movs	r3, #2
 800310a:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800310e:	f000 ff3b 	bl	8003f88 <wm8994_write_reg>
 8003112:	4602      	mov	r2, r0
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4413      	add	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f103 0018 	add.w	r0, r3, #24
 8003120:	f107 020a 	add.w	r2, r7, #10
 8003124:	2302      	movs	r3, #2
 8003126:	f240 4111 	movw	r1, #1041	; 0x411
 800312a:	f000 ff2d 	bl	8003f88 <wm8994_write_reg>
 800312e:	4602      	mov	r2, r0
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4413      	add	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	e02c      	b.n	8003192 <WM8994_Init+0xd9e>
    }    
    else /* ((pInit->InputDevice == WM8994_IN_LINE1) || (pInit->InputDevice == WM8994_IN_LINE2)) */
    {      
      /* Disable mute on IN1L, IN1L Volume = +0dB */
      tmp = 0x000B;
 8003138:	230b      	movs	r3, #11
 800313a:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_LINE_IN12_VOL, &tmp, 2);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f103 0018 	add.w	r0, r3, #24
 8003142:	f107 020a 	add.w	r2, r7, #10
 8003146:	2302      	movs	r3, #2
 8003148:	2118      	movs	r1, #24
 800314a:	f000 ff1d 	bl	8003f88 <wm8994_write_reg>
 800314e:	4602      	mov	r2, r0
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4413      	add	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]
      
      /* Disable mute on IN1R, IN1R Volume = +0dB */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_LINE_IN12_VOL, &tmp, 2);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f103 0018 	add.w	r0, r3, #24
 800315c:	f107 020a 	add.w	r2, r7, #10
 8003160:	2302      	movs	r3, #2
 8003162:	211a      	movs	r1, #26
 8003164:	f000 ff10 	bl	8003f88 <wm8994_write_reg>
 8003168:	4602      	mov	r2, r0
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4413      	add	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x1800;
 8003170:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003174:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f103 0018 	add.w	r0, r3, #24
 800317c:	f107 020a 	add.w	r2, r7, #10
 8003180:	2302      	movs	r3, #2
 8003182:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8003186:	f000 feff 	bl	8003f88 <wm8994_write_reg>
 800318a:	4602      	mov	r2, r0
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4413      	add	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]
    }
    /* Volume Control */
    ret += WM8994_SetVolume(pObj, VOLUME_INPUT, (uint8_t)pInit->Volume); 
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	b2db      	uxtb	r3, r3
 8003198:	461a      	mov	r2, r3
 800319a:	2100      	movs	r1, #0
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f8e5 	bl	800336c <WM8994_SetVolume>
 80031a2:	4602      	mov	r2, r0
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4413      	add	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <WM8994_Init+0xdc2>
  {
    ret = WM8994_ERROR;
 80031b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031b4:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80031b6:	68fb      	ldr	r3, [r7, #12]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <WM8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_DeInit(WM8994_Object_t *pObj)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* De-Initialize Audio Codec interface */
  return WM8994_Stop(pObj, WM8994_PDWN_HW);
 80031c8:	2100      	movs	r1, #0
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f861 	bl	8003292 <WM8994_Stop>
 80031d0:	4603      	mov	r3, r0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <WM8994_ReadID>:
  * @param  pObj pointer to component object
  * @param  Id component ID
  * @retval Component status 
  */
int32_t WM8994_ReadID(WM8994_Object_t *pObj, uint32_t *Id)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b084      	sub	sp, #16
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t wm8994_id;
  
  /* Initialize the Control interface of the Audio Codec */
  pObj->IO.Init();
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4798      	blx	r3
  /* Get ID from component */
  ret = wm8994_sw_reset_r(&pObj->Ctx, &wm8994_id);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3318      	adds	r3, #24
 80031ee:	f107 020a 	add.w	r2, r7, #10
 80031f2:	4611      	mov	r1, r2
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 ff00 	bl	8003ffa <wm8994_sw_reset_r>
 80031fa:	60f8      	str	r0, [r7, #12]
  
  *Id = wm8994_id;
 80031fc:	897b      	ldrh	r3, [r7, #10]
 80031fe:	461a      	mov	r2, r3
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	601a      	str	r2, [r3, #0]
  
  return ret;
 8003204:	68fb      	ldr	r3, [r7, #12]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <WM8994_Play>:
  * @note For this codec no Play options are required.
  * @param  pObj pointer to component object  
  * @retval Component status
  */
int32_t WM8994_Play(WM8994_Object_t *pObj)
{ 
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  return WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 8003216:	2100      	movs	r1, #0
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 f9d3 	bl	80035c4 <WM8994_SetMute>
 800321e:	4603      	mov	r3, r0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <WM8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param  pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_Pause(WM8994_Object_t *pObj)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint16_t tmp = 0x0001;
 8003230:	2301      	movs	r3, #1
 8003232:	817b      	strh	r3, [r7, #10]
  
  /* Pause the audio file playing */
  /* Mute the output first */
  if(WM8994_SetMute(pObj, WM8994_MUTE_ON) != WM8994_OK)
 8003234:	2101      	movs	r1, #1
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f9c4 	bl	80035c4 <WM8994_SetMute>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <WM8994_Pause+0x22>
  {
    ret  = WM8994_ERROR;
 8003242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	e011      	b.n	800326e <WM8994_Pause+0x46>
  }/* Put the Codec in Power save mode */
  else if(wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2) != WM8994_OK)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f103 0018 	add.w	r0, r3, #24
 8003250:	f107 020a 	add.w	r2, r7, #10
 8003254:	2302      	movs	r3, #2
 8003256:	2102      	movs	r1, #2
 8003258:	f000 fe96 	bl	8003f88 <wm8994_write_reg>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <WM8994_Pause+0x42>
  {
    ret  = WM8994_ERROR;
 8003262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	e001      	b.n	800326e <WM8994_Pause+0x46>
  }
  else
  {
    ret = WM8994_OK;
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800326e:	68fb      	ldr	r3, [r7, #12]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <WM8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param  pObj pointer to component object 
  * @retval Component status
  */
int32_t WM8994_Resume(WM8994_Object_t *pObj)
{  
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  return WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 8003280:	2100      	movs	r1, #0
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f99e 	bl	80035c4 <WM8994_SetMute>
 8003288:	4603      	mov	r3, r0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <WM8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_Stop(WM8994_Object_t *pObj, uint32_t CodecPdwnMode)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b084      	sub	sp, #16
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
 800329a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  /* Mute the output first */
  ret = WM8994_SetMute(pObj, WM8994_MUTE_ON);
 800329c:	2101      	movs	r1, #1
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f990 	bl	80035c4 <WM8994_SetMute>
 80032a4:	60f8      	str	r0, [r7, #12]
  
  if (CodecPdwnMode == WM8994_PDWN_SW)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d054      	beq.n	8003356 <WM8994_Stop+0xc4>
  {
    /* Only output mute required*/
  }
  else /* WM8994_PDWN_HW */
  {
    tmp = 0x0200;
 80032ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032b0:	817b      	strh	r3, [r7, #10]
    /* Mute the AIF1 Timeslot 0 DAC1 path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f103 0018 	add.w	r0, r3, #24
 80032b8:	f107 020a 	add.w	r2, r7, #10
 80032bc:	2302      	movs	r3, #2
 80032be:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80032c2:	f000 fe61 	bl	8003f88 <wm8994_write_reg>
 80032c6:	4602      	mov	r2, r0
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4413      	add	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
    
    /* Mute the AIF1 Timeslot 1 DAC2 path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f103 0018 	add.w	r0, r3, #24
 80032d4:	f107 020a 	add.w	r2, r7, #10
 80032d8:	2302      	movs	r3, #2
 80032da:	f240 4122 	movw	r1, #1058	; 0x422
 80032de:	f000 fe53 	bl	8003f88 <wm8994_write_reg>
 80032e2:	4602      	mov	r2, r0
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4413      	add	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
    
    tmp = 0x0000;
 80032ea:	2300      	movs	r3, #0
 80032ec:	817b      	strh	r3, [r7, #10]
    /* Disable DAC1L_TO_HPOUT1L */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f103 0018 	add.w	r0, r3, #24
 80032f4:	f107 020a 	add.w	r2, r7, #10
 80032f8:	2302      	movs	r3, #2
 80032fa:	212d      	movs	r1, #45	; 0x2d
 80032fc:	f000 fe44 	bl	8003f88 <wm8994_write_reg>
 8003300:	4602      	mov	r2, r0
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4413      	add	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]
    
    /* Disable DAC1R_TO_HPOUT1R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f103 0018 	add.w	r0, r3, #24
 800330e:	f107 020a 	add.w	r2, r7, #10
 8003312:	2302      	movs	r3, #2
 8003314:	212e      	movs	r1, #46	; 0x2e
 8003316:	f000 fe37 	bl	8003f88 <wm8994_write_reg>
 800331a:	4602      	mov	r2, r0
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4413      	add	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]
    
    /* Disable DAC1 and DAC2 */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f103 0018 	add.w	r0, r3, #24
 8003328:	f107 020a 	add.w	r2, r7, #10
 800332c:	2302      	movs	r3, #2
 800332e:	2105      	movs	r1, #5
 8003330:	f000 fe2a 	bl	8003f88 <wm8994_write_reg>
 8003334:	4602      	mov	r2, r0
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4413      	add	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]
    
    /* Reset Codec by writing in 0x0000 address register */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SW_RESET, &tmp, 2);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f103 0018 	add.w	r0, r3, #24
 8003342:	f107 020a 	add.w	r2, r7, #10
 8003346:	2302      	movs	r3, #2
 8003348:	2100      	movs	r1, #0
 800334a:	f000 fe1d 	bl	8003f88 <wm8994_write_reg>
 800334e:	4602      	mov	r2, r0
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4413      	add	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d002      	beq.n	8003362 <WM8994_Stop+0xd0>
  {
    ret = WM8994_ERROR;
 800335c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003360:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8003362:	68fb      	ldr	r3, [r7, #12]
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <WM8994_SetVolume>:
  * @param  Volume  a byte value from 0 to 63 for output and from 0 to 240 for input
  *         (refer to codec registers description for more details).
  * @retval Component status
  */
int32_t WM8994_SetVolume(WM8994_Object_t *pObj, uint32_t InputOutput, uint8_t Volume)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	4613      	mov	r3, r2
 8003378:	71fb      	strb	r3, [r7, #7]
  int32_t ret;  
  uint16_t tmp;
  
  /* Output volume */
  if (InputOutput == VOLUME_OUTPUT)
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b01      	cmp	r3, #1
 800337e:	f040 8089 	bne.w	8003494 <WM8994_SetVolume+0x128>
  {    
    if(Volume > 0x3EU)
 8003382:	79fb      	ldrb	r3, [r7, #7]
 8003384:	2b3e      	cmp	r3, #62	; 0x3e
 8003386:	d93c      	bls.n	8003402 <WM8994_SetVolume+0x96>
    {
      /* Unmute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 8003388:	2100      	movs	r1, #0
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 f91a 	bl	80035c4 <WM8994_SetMute>
 8003390:	6178      	str	r0, [r7, #20]
      tmp = 0x3FU | 0x140U;
 8003392:	f240 137f 	movw	r3, #383	; 0x17f
 8003396:	827b      	strh	r3, [r7, #18]
      
      /* Left Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f103 0018 	add.w	r0, r3, #24
 800339e:	f107 0212 	add.w	r2, r7, #18
 80033a2:	2302      	movs	r3, #2
 80033a4:	211c      	movs	r1, #28
 80033a6:	f000 fdef 	bl	8003f88 <wm8994_write_reg>
 80033aa:	4602      	mov	r2, r0
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	4413      	add	r3, r2
 80033b0:	617b      	str	r3, [r7, #20]
      
      /* Right Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f103 0018 	add.w	r0, r3, #24
 80033b8:	f107 0212 	add.w	r2, r7, #18
 80033bc:	2302      	movs	r3, #2
 80033be:	211d      	movs	r1, #29
 80033c0:	f000 fde2 	bl	8003f88 <wm8994_write_reg>
 80033c4:	4602      	mov	r2, r0
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	4413      	add	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]
      
      /* Left Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f103 0018 	add.w	r0, r3, #24
 80033d2:	f107 0212 	add.w	r2, r7, #18
 80033d6:	2302      	movs	r3, #2
 80033d8:	2126      	movs	r1, #38	; 0x26
 80033da:	f000 fdd5 	bl	8003f88 <wm8994_write_reg>
 80033de:	4602      	mov	r2, r0
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	4413      	add	r3, r2
 80033e4:	617b      	str	r3, [r7, #20]
      
      /* Right Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f103 0018 	add.w	r0, r3, #24
 80033ec:	f107 0212 	add.w	r2, r7, #18
 80033f0:	2302      	movs	r3, #2
 80033f2:	2127      	movs	r1, #39	; 0x27
 80033f4:	f000 fdc8 	bl	8003f88 <wm8994_write_reg>
 80033f8:	4602      	mov	r2, r0
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	4413      	add	r3, r2
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	e083      	b.n	800350a <WM8994_SetVolume+0x19e>
    }
    else if (Volume == 0U)
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d105      	bne.n	8003414 <WM8994_SetVolume+0xa8>
    {
      /* Mute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_ON);
 8003408:	2101      	movs	r1, #1
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 f8da 	bl	80035c4 <WM8994_SetMute>
 8003410:	6178      	str	r0, [r7, #20]
 8003412:	e07a      	b.n	800350a <WM8994_SetVolume+0x19e>
    }
    else
    {
      /* Unmute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 8003414:	2100      	movs	r1, #0
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f8d4 	bl	80035c4 <WM8994_SetMute>
 800341c:	6178      	str	r0, [r7, #20]
      
      tmp = Volume | 0x140U;
 800341e:	79fb      	ldrb	r3, [r7, #7]
 8003420:	b29b      	uxth	r3, r3
 8003422:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8003426:	b29b      	uxth	r3, r3
 8003428:	827b      	strh	r3, [r7, #18]
      
      /* Left Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f103 0018 	add.w	r0, r3, #24
 8003430:	f107 0212 	add.w	r2, r7, #18
 8003434:	2302      	movs	r3, #2
 8003436:	211c      	movs	r1, #28
 8003438:	f000 fda6 	bl	8003f88 <wm8994_write_reg>
 800343c:	4602      	mov	r2, r0
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	4413      	add	r3, r2
 8003442:	617b      	str	r3, [r7, #20]
      
      /* Right Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f103 0018 	add.w	r0, r3, #24
 800344a:	f107 0212 	add.w	r2, r7, #18
 800344e:	2302      	movs	r3, #2
 8003450:	211d      	movs	r1, #29
 8003452:	f000 fd99 	bl	8003f88 <wm8994_write_reg>
 8003456:	4602      	mov	r2, r0
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	4413      	add	r3, r2
 800345c:	617b      	str	r3, [r7, #20]
      
      /* Left Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f103 0018 	add.w	r0, r3, #24
 8003464:	f107 0212 	add.w	r2, r7, #18
 8003468:	2302      	movs	r3, #2
 800346a:	2126      	movs	r1, #38	; 0x26
 800346c:	f000 fd8c 	bl	8003f88 <wm8994_write_reg>
 8003470:	4602      	mov	r2, r0
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	4413      	add	r3, r2
 8003476:	617b      	str	r3, [r7, #20]
      
      /* Right Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);      
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f103 0018 	add.w	r0, r3, #24
 800347e:	f107 0212 	add.w	r2, r7, #18
 8003482:	2302      	movs	r3, #2
 8003484:	2127      	movs	r1, #39	; 0x27
 8003486:	f000 fd7f 	bl	8003f88 <wm8994_write_reg>
 800348a:	4602      	mov	r2, r0
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	4413      	add	r3, r2
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	e03a      	b.n	800350a <WM8994_SetVolume+0x19e>
    }
  }
  else /* Input volume: VOLUME_INPUT */
  {
    tmp = Volume | 0x100U;
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	b29b      	uxth	r3, r3
 8003498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800349c:	b29b      	uxth	r3, r3
 800349e:	827b      	strh	r3, [r7, #18]
    
    /* Left AIF1 ADC1 volume */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LEFT_VOL, &tmp, 2); 
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f103 0018 	add.w	r0, r3, #24
 80034a6:	f107 0212 	add.w	r2, r7, #18
 80034aa:	2302      	movs	r3, #2
 80034ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80034b0:	f000 fd6a 	bl	8003f88 <wm8994_write_reg>
 80034b4:	6178      	str	r0, [r7, #20]
    
    /* Right AIF1 ADC1 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RIGHT_VOL, &tmp, 2); 
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f103 0018 	add.w	r0, r3, #24
 80034bc:	f107 0212 	add.w	r2, r7, #18
 80034c0:	2302      	movs	r3, #2
 80034c2:	f240 4101 	movw	r1, #1025	; 0x401
 80034c6:	f000 fd5f 	bl	8003f88 <wm8994_write_reg>
 80034ca:	4602      	mov	r2, r0
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	4413      	add	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]
    
    /* Left AIF1 ADC2 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LEFT_VOL, &tmp, 2); 
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f103 0018 	add.w	r0, r3, #24
 80034d8:	f107 0212 	add.w	r2, r7, #18
 80034dc:	2302      	movs	r3, #2
 80034de:	f240 4104 	movw	r1, #1028	; 0x404
 80034e2:	f000 fd51 	bl	8003f88 <wm8994_write_reg>
 80034e6:	4602      	mov	r2, r0
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	4413      	add	r3, r2
 80034ec:	617b      	str	r3, [r7, #20]
    
    /* Right AIF1 ADC2 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RIGHT_VOL, &tmp, 2); 
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f103 0018 	add.w	r0, r3, #24
 80034f4:	f107 0212 	add.w	r2, r7, #18
 80034f8:	2302      	movs	r3, #2
 80034fa:	f240 4105 	movw	r1, #1029	; 0x405
 80034fe:	f000 fd43 	bl	8003f88 <wm8994_write_reg>
 8003502:	4602      	mov	r2, r0
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	4413      	add	r3, r2
 8003508:	617b      	str	r3, [r7, #20]
  }
  
  if(ret != WM8994_OK)
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <WM8994_SetVolume+0x1aa>
  {
    ret = WM8994_ERROR;
 8003510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003514:	617b      	str	r3, [r7, #20]
  }
  
  return ret;
 8003516:	697b      	ldr	r3, [r7, #20]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3718      	adds	r7, #24
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <WM8994_GetVolume>:
  * @param  InputOutput Input or Output volume
  * @param  Volume audio volume 
  * @retval Component status
  */
int32_t WM8994_GetVolume(WM8994_Object_t *pObj, uint32_t InputOutput, uint8_t *Volume)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  int32_t ret = WM8994_OK;  
 800352c:	2300      	movs	r3, #0
 800352e:	617b      	str	r3, [r7, #20]
  uint16_t invertedvol;
  
  /* Output volume */
  if (InputOutput == VOLUME_OUTPUT)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d11e      	bne.n	8003574 <WM8994_GetVolume+0x54>
  {
    if(wm8994_lo_hpout1l_vol_r(&pObj->Ctx, &invertedvol) != WM8994_OK)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	3318      	adds	r3, #24
 800353a:	f107 0212 	add.w	r2, r7, #18
 800353e:	4611      	mov	r1, r2
 8003540:	4618      	mov	r0, r3
 8003542:	f000 fd6a 	bl	800401a <wm8994_lo_hpout1l_vol_r>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <WM8994_GetVolume+0x34>
    {
      ret = WM8994_ERROR;
 800354c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	e02d      	b.n	80035b0 <WM8994_GetVolume+0x90>
    }
    else
    {
      *Volume = VOLUME_OUT_INVERT(invertedvol);
 8003554:	8a7b      	ldrh	r3, [r7, #18]
 8003556:	461a      	mov	r2, r3
 8003558:	2364      	movs	r3, #100	; 0x64
 800355a:	fb02 f303 	mul.w	r3, r2, r3
 800355e:	4a17      	ldr	r2, [pc, #92]	; (80035bc <WM8994_GetVolume+0x9c>)
 8003560:	fb82 1203 	smull	r1, r2, r2, r3
 8003564:	441a      	add	r2, r3
 8003566:	1152      	asrs	r2, r2, #5
 8003568:	17db      	asrs	r3, r3, #31
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	b2da      	uxtb	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	701a      	strb	r2, [r3, #0]
 8003572:	e01d      	b.n	80035b0 <WM8994_GetVolume+0x90>
    }
  }
  else /* Input volume: VOLUME_INPUT */
  {
    if(wm8994_aif1_adc1_left_vol_adc1l_r(&pObj->Ctx, &invertedvol) != WM8994_OK)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	3318      	adds	r3, #24
 8003578:	f107 0212 	add.w	r2, r7, #18
 800357c:	4611      	mov	r1, r2
 800357e:	4618      	mov	r0, r3
 8003580:	f000 fe60 	bl	8004244 <wm8994_aif1_adc1_left_vol_adc1l_r>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <WM8994_GetVolume+0x72>
    {
      ret = WM8994_ERROR;
 800358a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	e00e      	b.n	80035b0 <WM8994_GetVolume+0x90>
    }
    else
    {
      *Volume = VOLUME_IN_INVERT(invertedvol);
 8003592:	8a7b      	ldrh	r3, [r7, #18]
 8003594:	461a      	mov	r2, r3
 8003596:	2364      	movs	r3, #100	; 0x64
 8003598:	fb02 f303 	mul.w	r3, r2, r3
 800359c:	4a08      	ldr	r2, [pc, #32]	; (80035c0 <WM8994_GetVolume+0xa0>)
 800359e:	fb82 1203 	smull	r1, r2, r2, r3
 80035a2:	441a      	add	r2, r3
 80035a4:	11d2      	asrs	r2, r2, #7
 80035a6:	17db      	asrs	r3, r3, #31
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	701a      	strb	r2, [r3, #0]
    }
  }
  
  return ret;
 80035b0:	697b      	ldr	r3, [r7, #20]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	82082083 	.word	0x82082083
 80035c0:	891ac73b 	.word	0x891ac73b

080035c4 <WM8994_SetMute>:
  * @param Cmd  WM8994_MUTE_ON to enable the mute or WM8994_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_SetMute(WM8994_Object_t *pObj, uint32_t Cmd)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  /* Set the Mute mode */
  if(Cmd == WM8994_MUTE_ON)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d11c      	bne.n	800360e <WM8994_SetMute+0x4a>
  { 
    tmp = 0x0200;
 80035d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035d8:	817b      	strh	r3, [r7, #10]
    /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f103 0018 	add.w	r0, r3, #24
 80035e0:	f107 020a 	add.w	r2, r7, #10
 80035e4:	2302      	movs	r3, #2
 80035e6:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80035ea:	f000 fccd 	bl	8003f88 <wm8994_write_reg>
 80035ee:	60f8      	str	r0, [r7, #12]
    
    /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f103 0018 	add.w	r0, r3, #24
 80035f6:	f107 020a 	add.w	r2, r7, #10
 80035fa:	2302      	movs	r3, #2
 80035fc:	f240 4122 	movw	r1, #1058	; 0x422
 8003600:	f000 fcc2 	bl	8003f88 <wm8994_write_reg>
 8003604:	4602      	mov	r2, r0
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4413      	add	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	e01a      	b.n	8003644 <WM8994_SetMute+0x80>
  }
  else /* WM8994_MUTE_OFF Disable the Mute */
  {
    tmp = 0x0010;
 800360e:	2310      	movs	r3, #16
 8003610:	817b      	strh	r3, [r7, #10]
    /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f103 0018 	add.w	r0, r3, #24
 8003618:	f107 020a 	add.w	r2, r7, #10
 800361c:	2302      	movs	r3, #2
 800361e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8003622:	f000 fcb1 	bl	8003f88 <wm8994_write_reg>
 8003626:	60f8      	str	r0, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f103 0018 	add.w	r0, r3, #24
 800362e:	f107 020a 	add.w	r2, r7, #10
 8003632:	2302      	movs	r3, #2
 8003634:	f240 4122 	movw	r1, #1058	; 0x422
 8003638:	f000 fca6 	bl	8003f88 <wm8994_write_reg>
 800363c:	4602      	mov	r2, r0
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4413      	add	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <WM8994_SetMute+0x8c>
  {
    ret = WM8994_ERROR;
 800364a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800364e:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8003650:	68fb      	ldr	r3, [r7, #12]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <WM8994_SetOutputMode>:
  * @param Output  specifies the audio output target: WM8994_OUT_SPEAKER,
  *         WM8994_OUT_HEADPHONE, WM8994_OUT_BOTH or WM8994_OUT_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_SetOutputMode(WM8994_Object_t *pObj, uint32_t Output)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b084      	sub	sp, #16
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
 8003662:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  if((Output == WM8994_OUT_HEADPHONE) || (Output == WM8994_OUT_AUTO))
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2b02      	cmp	r3, #2
 8003668:	d003      	beq.n	8003672 <WM8994_SetOutputMode+0x18>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b04      	cmp	r3, #4
 800366e:	f040 809c 	bne.w	80037aa <WM8994_SetOutputMode+0x150>
  {
    /* Disable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    tmp = 0x0000;
 8003672:	2300      	movs	r3, #0
 8003674:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f103 0018 	add.w	r0, r3, #24
 800367c:	f107 020a 	add.w	r2, r7, #10
 8003680:	2302      	movs	r3, #2
 8003682:	2101      	movs	r1, #1
 8003684:	f000 fc80 	bl	8003f88 <wm8994_write_reg>
 8003688:	60f8      	str	r0, [r7, #12]
    
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 800368a:	f240 3303 	movw	r3, #771	; 0x303
 800368e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f103 0018 	add.w	r0, r3, #24
 8003696:	f107 020a 	add.w	r2, r7, #10
 800369a:	2302      	movs	r3, #2
 800369c:	2105      	movs	r1, #5
 800369e:	f000 fc73 	bl	8003f88 <wm8994_write_reg>
 80036a2:	4602      	mov	r2, r0
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4413      	add	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 80036aa:	2301      	movs	r3, #1
 80036ac:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f103 0018 	add.w	r0, r3, #24
 80036b4:	f107 020a 	add.w	r2, r7, #10
 80036b8:	2302      	movs	r3, #2
 80036ba:	f240 6101 	movw	r1, #1537	; 0x601
 80036be:	f000 fc63 	bl	8003f88 <wm8994_write_reg>
 80036c2:	4602      	mov	r2, r0
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4413      	add	r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f103 0018 	add.w	r0, r3, #24
 80036d0:	f107 020a 	add.w	r2, r7, #10
 80036d4:	2302      	movs	r3, #2
 80036d6:	f240 6102 	movw	r1, #1538	; 0x602
 80036da:	f000 fc55 	bl	8003f88 <wm8994_write_reg>
 80036de:	4602      	mov	r2, r0
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4413      	add	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 80036e6:	2300      	movs	r3, #0
 80036e8:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f103 0018 	add.w	r0, r3, #24
 80036f0:	f107 020a 	add.w	r2, r7, #10
 80036f4:	2302      	movs	r3, #2
 80036f6:	f240 6104 	movw	r1, #1540	; 0x604
 80036fa:	f000 fc45 	bl	8003f88 <wm8994_write_reg>
 80036fe:	4602      	mov	r2, r0
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4413      	add	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f103 0018 	add.w	r0, r3, #24
 800370c:	f107 020a 	add.w	r2, r7, #10
 8003710:	2302      	movs	r3, #2
 8003712:	f240 6105 	movw	r1, #1541	; 0x605
 8003716:	f000 fc37 	bl	8003f88 <wm8994_write_reg>
 800371a:	4602      	mov	r2, r0
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4413      	add	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    tmp = 0x0100;
 8003722:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003726:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f103 0018 	add.w	r0, r3, #24
 800372e:	f107 020a 	add.w	r2, r7, #10
 8003732:	2302      	movs	r3, #2
 8003734:	212d      	movs	r1, #45	; 0x2d
 8003736:	f000 fc27 	bl	8003f88 <wm8994_write_reg>
 800373a:	4602      	mov	r2, r0
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4413      	add	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f103 0018 	add.w	r0, r3, #24
 8003748:	f107 020a 	add.w	r2, r7, #10
 800374c:	2302      	movs	r3, #2
 800374e:	212e      	movs	r1, #46	; 0x2e
 8003750:	f000 fc1a 	bl	8003f88 <wm8994_write_reg>
 8003754:	4602      	mov	r2, r0
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4413      	add	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]
    
    /* Startup sequence for Headphone */
    /* Enable/Start the write sequencer */
    tmp = 0x8100;
 800375c:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8003760:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f103 0018 	add.w	r0, r3, #24
 8003768:	f107 020a 	add.w	r2, r7, #10
 800376c:	2302      	movs	r3, #2
 800376e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003772:	f000 fc09 	bl	8003f88 <wm8994_write_reg>
 8003776:	4602      	mov	r2, r0
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4413      	add	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 300);
 800377e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fb88 	bl	8003e98 <WM8994_Delay>
    
    /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
    tmp = 0x0000;
 8003788:	2300      	movs	r3, #0
 800378a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);    
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f103 0018 	add.w	r0, r3, #24
 8003792:	f107 020a 	add.w	r2, r7, #10
 8003796:	2302      	movs	r3, #2
 8003798:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800379c:	f000 fbf4 	bl	8003f88 <wm8994_write_reg>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4413      	add	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	e165      	b.n	8003a76 <WM8994_SetOutputMode+0x41c>
  }
  else
  {    
    switch (Output) 
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d149      	bne.n	8003844 <WM8994_SetOutputMode+0x1ea>
    {    
    case WM8994_OUT_SPEAKER: 
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      tmp = 0x0C0C;
 80037b0:	f640 430c 	movw	r3, #3084	; 0xc0c
 80037b4:	817b      	strh	r3, [r7, #10]
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f103 0018 	add.w	r0, r3, #24
 80037bc:	f107 020a 	add.w	r2, r7, #10
 80037c0:	2302      	movs	r3, #2
 80037c2:	2105      	movs	r1, #5
 80037c4:	f000 fbe0 	bl	8003f88 <wm8994_write_reg>
 80037c8:	60f8      	str	r0, [r7, #12]
      
      /* Disable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0000;
 80037ca:	2300      	movs	r3, #0
 80037cc:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f103 0018 	add.w	r0, r3, #24
 80037d4:	f107 020a 	add.w	r2, r7, #10
 80037d8:	2302      	movs	r3, #2
 80037da:	f240 6101 	movw	r1, #1537	; 0x601
 80037de:	f000 fbd3 	bl	8003f88 <wm8994_write_reg>
 80037e2:	4602      	mov	r2, r0
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4413      	add	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]
      
      /* Disable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f103 0018 	add.w	r0, r3, #24
 80037f0:	f107 020a 	add.w	r2, r7, #10
 80037f4:	2302      	movs	r3, #2
 80037f6:	f240 6102 	movw	r1, #1538	; 0x602
 80037fa:	f000 fbc5 	bl	8003f88 <wm8994_write_reg>
 80037fe:	4602      	mov	r2, r0
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4413      	add	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      tmp = 0x0002;
 8003806:	2302      	movs	r3, #2
 8003808:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f103 0018 	add.w	r0, r3, #24
 8003810:	f107 020a 	add.w	r2, r7, #10
 8003814:	2302      	movs	r3, #2
 8003816:	f240 6104 	movw	r1, #1540	; 0x604
 800381a:	f000 fbb5 	bl	8003f88 <wm8994_write_reg>
 800381e:	4602      	mov	r2, r0
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4413      	add	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]
      
      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f103 0018 	add.w	r0, r3, #24
 800382c:	f107 020a 	add.w	r2, r7, #10
 8003830:	2302      	movs	r3, #2
 8003832:	f240 6105 	movw	r1, #1541	; 0x605
 8003836:	f000 fba7 	bl	8003f88 <wm8994_write_reg>
 800383a:	4602      	mov	r2, r0
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4413      	add	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]
      break;
 8003842:	e03b      	b.n	80038bc <WM8994_SetOutputMode+0x262>
      
    case WM8994_OUT_BOTH:
    default:  
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      also Enable DAC2 (Left), Enable DAC2 (Right)*/
      tmp = 0x0F0F;
 8003844:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003848:	817b      	strh	r3, [r7, #10]
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f103 0018 	add.w	r0, r3, #24
 8003850:	f107 020a 	add.w	r2, r7, #10
 8003854:	2302      	movs	r3, #2
 8003856:	2105      	movs	r1, #5
 8003858:	f000 fb96 	bl	8003f88 <wm8994_write_reg>
 800385c:	60f8      	str	r0, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0001;
 800385e:	2301      	movs	r3, #1
 8003860:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f103 0018 	add.w	r0, r3, #24
 8003868:	f107 020a 	add.w	r2, r7, #10
 800386c:	2302      	movs	r3, #2
 800386e:	f240 6101 	movw	r1, #1537	; 0x601
 8003872:	f000 fb89 	bl	8003f88 <wm8994_write_reg>
 8003876:	4602      	mov	r2, r0
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4413      	add	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f103 0018 	add.w	r0, r3, #24
 8003884:	f107 020a 	add.w	r2, r7, #10
 8003888:	2302      	movs	r3, #2
 800388a:	f240 6102 	movw	r1, #1538	; 0x602
 800388e:	f000 fb7b 	bl	8003f88 <wm8994_write_reg>
 8003892:	4602      	mov	r2, r0
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4413      	add	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      tmp = 0x0002;
 800389a:	2302      	movs	r3, #2
 800389c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);      
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f103 0018 	add.w	r0, r3, #24
 80038a4:	f107 020a 	add.w	r2, r7, #10
 80038a8:	2302      	movs	r3, #2
 80038aa:	f240 6104 	movw	r1, #1540	; 0x604
 80038ae:	f000 fb6b 	bl	8003f88 <wm8994_write_reg>
 80038b2:	4602      	mov	r2, r0
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	4413      	add	r3, r2
 80038b8:	60fb      	str	r3, [r7, #12]
      break;
 80038ba:	bf00      	nop
    }
    
    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    tmp = 0x0300;
 80038bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038c0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f103 0018 	add.w	r0, r3, #24
 80038c8:	f107 020a 	add.w	r2, r7, #10
 80038cc:	2302      	movs	r3, #2
 80038ce:	2103      	movs	r1, #3
 80038d0:	f000 fb5a 	bl	8003f88 <wm8994_write_reg>
 80038d4:	4602      	mov	r2, r0
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4413      	add	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
    
    /* Left Speaker Mixer Volume = 0dB */
    tmp = 0x0000;
 80038dc:	2300      	movs	r3, #0
 80038de:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f103 0018 	add.w	r0, r3, #24
 80038e6:	f107 020a 	add.w	r2, r7, #10
 80038ea:	2302      	movs	r3, #2
 80038ec:	2122      	movs	r1, #34	; 0x22
 80038ee:	f000 fb4b 	bl	8003f88 <wm8994_write_reg>
 80038f2:	4602      	mov	r2, r0
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4413      	add	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]
    
    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f103 0018 	add.w	r0, r3, #24
 8003900:	f107 020a 	add.w	r2, r7, #10
 8003904:	2302      	movs	r3, #2
 8003906:	2123      	movs	r1, #35	; 0x23
 8003908:	f000 fb3e 	bl	8003f88 <wm8994_write_reg>
 800390c:	4602      	mov	r2, r0
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4413      	add	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    tmp = 0x0300;
 8003914:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003918:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f103 0018 	add.w	r0, r3, #24
 8003920:	f107 020a 	add.w	r2, r7, #10
 8003924:	2302      	movs	r3, #2
 8003926:	2136      	movs	r1, #54	; 0x36
 8003928:	f000 fb2e 	bl	8003f88 <wm8994_write_reg>
 800392c:	4602      	mov	r2, r0
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	4413      	add	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]
    
    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    tmp = 0x3003;
 8003934:	f243 0303 	movw	r3, #12291	; 0x3003
 8003938:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f103 0018 	add.w	r0, r3, #24
 8003940:	f107 020a 	add.w	r2, r7, #10
 8003944:	2302      	movs	r3, #2
 8003946:	2101      	movs	r1, #1
 8003948:	f000 fb1e 	bl	8003f88 <wm8994_write_reg>
 800394c:	4602      	mov	r2, r0
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4413      	add	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]
    /* Headphone/Speaker Enable */
    
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    tmp = 0x0005;
 8003954:	2305      	movs	r3, #5
 8003956:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f103 0018 	add.w	r0, r3, #24
 800395e:	f107 020a 	add.w	r2, r7, #10
 8003962:	2302      	movs	r3, #2
 8003964:	2151      	movs	r1, #81	; 0x51
 8003966:	f000 fb0f 	bl	8003f88 <wm8994_write_reg>
 800396a:	4602      	mov	r2, r0
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4413      	add	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]
    
    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    tmp = 0x3303;
 8003972:	f243 3303 	movw	r3, #13059	; 0x3303
 8003976:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f103 0018 	add.w	r0, r3, #24
 800397e:	f107 020a 	add.w	r2, r7, #10
 8003982:	2302      	movs	r3, #2
 8003984:	2101      	movs	r1, #1
 8003986:	f000 faff 	bl	8003f88 <wm8994_write_reg>
 800398a:	4602      	mov	r2, r0
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4413      	add	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
    
    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    tmp = 0x0022;
 8003992:	2322      	movs	r3, #34	; 0x22
 8003994:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f103 0018 	add.w	r0, r3, #24
 800399c:	f107 020a 	add.w	r2, r7, #10
 80039a0:	2302      	movs	r3, #2
 80039a2:	2160      	movs	r1, #96	; 0x60
 80039a4:	f000 faf0 	bl	8003f88 <wm8994_write_reg>
 80039a8:	4602      	mov	r2, r0
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4413      	add	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]
    
    /* Enable Charge Pump */
    tmp = 0x9F25;
 80039b0:	f649 7325 	movw	r3, #40741	; 0x9f25
 80039b4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f103 0018 	add.w	r0, r3, #24
 80039bc:	f107 020a 	add.w	r2, r7, #10
 80039c0:	2302      	movs	r3, #2
 80039c2:	214c      	movs	r1, #76	; 0x4c
 80039c4:	f000 fae0 	bl	8003f88 <wm8994_write_reg>
 80039c8:	4602      	mov	r2, r0
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4413      	add	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 15);
 80039d0:	210f      	movs	r1, #15
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fa60 	bl	8003e98 <WM8994_Delay>
    
    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    tmp = 0x0001;
 80039d8:	2301      	movs	r3, #1
 80039da:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f103 0018 	add.w	r0, r3, #24
 80039e2:	f107 020a 	add.w	r2, r7, #10
 80039e6:	2302      	movs	r3, #2
 80039e8:	212d      	movs	r1, #45	; 0x2d
 80039ea:	f000 facd 	bl	8003f88 <wm8994_write_reg>
 80039ee:	4602      	mov	r2, r0
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4413      	add	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f103 0018 	add.w	r0, r3, #24
 80039fc:	f107 020a 	add.w	r2, r7, #10
 8003a00:	2302      	movs	r3, #2
 8003a02:	212e      	movs	r1, #46	; 0x2e
 8003a04:	f000 fac0 	bl	8003f88 <wm8994_write_reg>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]
    
    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    tmp = 0x0330;
 8003a10:	f44f 734c 	mov.w	r3, #816	; 0x330
 8003a14:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f103 0018 	add.w	r0, r3, #24
 8003a1c:	f107 020a 	add.w	r2, r7, #10
 8003a20:	2302      	movs	r3, #2
 8003a22:	2103      	movs	r1, #3
 8003a24:	f000 fab0 	bl	8003f88 <wm8994_write_reg>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]
    
    /* Enable DC Servo and trigger start-up mode on left and right channels */
    tmp = 0x0033;
 8003a30:	2333      	movs	r3, #51	; 0x33
 8003a32:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f103 0018 	add.w	r0, r3, #24
 8003a3a:	f107 020a 	add.w	r2, r7, #10
 8003a3e:	2302      	movs	r3, #2
 8003a40:	2154      	movs	r1, #84	; 0x54
 8003a42:	f000 faa1 	bl	8003f88 <wm8994_write_reg>
 8003a46:	4602      	mov	r2, r0
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 257);
 8003a4e:	f240 1101 	movw	r1, #257	; 0x101
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fa20 	bl	8003e98 <WM8994_Delay>
    
    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    tmp = 0x00EE;
 8003a58:	23ee      	movs	r3, #238	; 0xee
 8003a5a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);    
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f103 0018 	add.w	r0, r3, #24
 8003a62:	f107 020a 	add.w	r2, r7, #10
 8003a66:	2302      	movs	r3, #2
 8003a68:	2160      	movs	r1, #96	; 0x60
 8003a6a:	f000 fa8d 	bl	8003f88 <wm8994_write_reg>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4413      	add	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d002      	beq.n	8003a82 <WM8994_SetOutputMode+0x428>
  {
    ret = WM8994_ERROR;
 8003a7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a80:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8003a82:	68fb      	ldr	r3, [r7, #12]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <WM8994_SetResolution>:
  *                    WM8994_RESOLUTION_16b, WM8994_RESOLUTION_20b, 
  *                    WM8994_RESOLUTION_24b or WM8994_RESOLUTION_32b
  * @retval Component status
  */
int32_t WM8994_SetResolution(WM8994_Object_t *pObj, uint32_t Resolution)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	60fb      	str	r3, [r7, #12]
  
  if(wm8994_aif1_control1_wl(&pObj->Ctx, (uint16_t)Resolution) != WM8994_OK)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	3318      	adds	r3, #24
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	b292      	uxth	r2, r2
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 fb4b 	bl	8004140 <wm8994_aif1_control1_wl>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <WM8994_SetResolution+0x2a>
  {
    ret = WM8994_ERROR;
 8003ab0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ab4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <WM8994_GetResolution>:
  * @brief Get Audio resolution.
  * @param pObj pointer to component object
  * @retval Audio resolution
  */
int32_t WM8994_GetResolution(WM8994_Object_t *pObj, uint32_t *Resolution)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;  
 8003aca:	2300      	movs	r3, #0
 8003acc:	60fb      	str	r3, [r7, #12]
  uint16_t resolution = 0;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	817b      	strh	r3, [r7, #10]
  
  if(wm8994_aif1_control1_wl_r(&pObj->Ctx, &resolution) != WM8994_OK)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3318      	adds	r3, #24
 8003ad6:	f107 020a 	add.w	r2, r7, #10
 8003ada:	4611      	mov	r1, r2
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 fb5f 	bl	80041a0 <wm8994_aif1_control1_wl_r>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <WM8994_GetResolution+0x30>
  {
    ret = WM8994_ERROR;
 8003ae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	e021      	b.n	8003b34 <WM8994_GetResolution+0x74>
  }
  else
  {
    switch(resolution)
 8003af0:	897b      	ldrh	r3, [r7, #10]
 8003af2:	2b03      	cmp	r3, #3
 8003af4:	d81a      	bhi.n	8003b2c <WM8994_GetResolution+0x6c>
 8003af6:	a201      	add	r2, pc, #4	; (adr r2, 8003afc <WM8994_GetResolution+0x3c>)
 8003af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afc:	08003b0d 	.word	0x08003b0d
 8003b00:	08003b15 	.word	0x08003b15
 8003b04:	08003b1d 	.word	0x08003b1d
 8003b08:	08003b25 	.word	0x08003b25
    {
    case 0:
      *Resolution = WM8994_RESOLUTION_16b;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]
      break;
 8003b12:	e00f      	b.n	8003b34 <WM8994_GetResolution+0x74>
    case 1:
      *Resolution = WM8994_RESOLUTION_20b;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	2201      	movs	r2, #1
 8003b18:	601a      	str	r2, [r3, #0]
      break;
 8003b1a:	e00b      	b.n	8003b34 <WM8994_GetResolution+0x74>
    case 2:
      *Resolution = WM8994_RESOLUTION_24b;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	601a      	str	r2, [r3, #0]
      break;
 8003b22:	e007      	b.n	8003b34 <WM8994_GetResolution+0x74>
    case 3:
      *Resolution = WM8994_RESOLUTION_32b;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2203      	movs	r2, #3
 8003b28:	601a      	str	r2, [r3, #0]
      break; 
 8003b2a:	e003      	b.n	8003b34 <WM8994_GetResolution+0x74>
    default:
      *Resolution = WM8994_RESOLUTION_16b;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]
      break;
 8003b32:	bf00      	nop
    }
  }
  
  return ret;
 8003b34:	68fb      	ldr	r3, [r7, #12]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop

08003b40 <WM8994_SetProtocol>:
  *                  WM8994_PROTOCOL_R_JUSTIFIED, WM8994_PROTOCOL_L_JUSTIFIED, 
  *                  WM8994_PROTOCOL_I2S or WM8994_PROTOCOL_DSP
  * @retval Component status
  */
int32_t WM8994_SetProtocol(WM8994_Object_t *pObj, uint32_t Protocol)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK; 
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60fb      	str	r3, [r7, #12]
  
  if(wm8994_aif1_control1_fmt(&pObj->Ctx, (uint16_t)Protocol) != WM8994_OK)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	3318      	adds	r3, #24
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	b292      	uxth	r2, r2
 8003b56:	4611      	mov	r1, r2
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f000 fa9f 	bl	800409c <wm8994_aif1_control1_fmt>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <WM8994_SetProtocol+0x2a>
  {
    ret = WM8994_ERROR;
 8003b64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b68:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 8003b6a:	68fb      	ldr	r3, [r7, #12]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <WM8994_GetProtocol>:
  * @brief Get Audio Protocol.
  * @param pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_GetProtocol(WM8994_Object_t *pObj, uint32_t *Protocol)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;  
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
  uint16_t protocol;
  
  if(wm8994_aif1_control1_fmt_r(&pObj->Ctx, &protocol) != WM8994_OK)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	3318      	adds	r3, #24
 8003b86:	f107 020a 	add.w	r2, r7, #10
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 fab5 	bl	80040fc <wm8994_aif1_control1_fmt_r>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d003      	beq.n	8003ba0 <WM8994_GetProtocol+0x2c>
  {
    ret = WM8994_ERROR;
 8003b98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	e003      	b.n	8003ba8 <WM8994_GetProtocol+0x34>
  }
  else
  {
    *Protocol = protocol;
 8003ba0:	897b      	ldrh	r3, [r7, #10]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	601a      	str	r2, [r3, #0]
  }
  
  return ret;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <WM8994_SetFrequency>:
  * @param pObj pointer to component object
  * @param AudioFreq Audio frequency
  * @retval Component status
  */
int32_t WM8994_SetFrequency(WM8994_Object_t *pObj, uint32_t AudioFreq)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  switch (AudioFreq)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	4a55      	ldr	r2, [pc, #340]	; (8003d18 <WM8994_SetFrequency+0x164>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d05d      	beq.n	8003c82 <WM8994_SetFrequency+0xce>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	4a53      	ldr	r2, [pc, #332]	; (8003d18 <WM8994_SetFrequency+0x164>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	f200 8091 	bhi.w	8003cf2 <WM8994_SetFrequency+0x13e>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	f64a 4244 	movw	r2, #44100	; 0xac44
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d07d      	beq.n	8003cd6 <WM8994_SetFrequency+0x122>
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	f64a 4244 	movw	r2, #44100	; 0xac44
 8003be0:	4293      	cmp	r3, r2
 8003be2:	f200 8086 	bhi.w	8003cf2 <WM8994_SetFrequency+0x13e>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8003bec:	d03b      	beq.n	8003c66 <WM8994_SetFrequency+0xb2>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8003bf4:	d87d      	bhi.n	8003cf2 <WM8994_SetFrequency+0x13e>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	f245 6222 	movw	r2, #22050	; 0x5622
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d05c      	beq.n	8003cba <WM8994_SetFrequency+0x106>
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	f245 6222 	movw	r2, #22050	; 0x5622
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d873      	bhi.n	8003cf2 <WM8994_SetFrequency+0x13e>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8003c10:	d01b      	beq.n	8003c4a <WM8994_SetFrequency+0x96>
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8003c18:	d86b      	bhi.n	8003cf2 <WM8994_SetFrequency+0x13e>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8003c20:	d005      	beq.n	8003c2e <WM8994_SetFrequency+0x7a>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	f642 3211 	movw	r2, #11025	; 0x2b11
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d038      	beq.n	8003c9e <WM8994_SetFrequency+0xea>
 8003c2c:	e061      	b.n	8003cf2 <WM8994_SetFrequency+0x13e>
  {
  case  WM8994_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */
    tmp = 0x0003;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f103 0018 	add.w	r0, r3, #24
 8003c38:	f107 020a 	add.w	r2, r7, #10
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003c42:	f000 f9a1 	bl	8003f88 <wm8994_write_reg>
 8003c46:	60f8      	str	r0, [r7, #12]
    break;
 8003c48:	e061      	b.n	8003d0e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    tmp = 0x0033;
 8003c4a:	2333      	movs	r3, #51	; 0x33
 8003c4c:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f103 0018 	add.w	r0, r3, #24
 8003c54:	f107 020a 	add.w	r2, r7, #10
 8003c58:	2302      	movs	r3, #2
 8003c5a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003c5e:	f000 f993 	bl	8003f88 <wm8994_write_reg>
 8003c62:	60f8      	str	r0, [r7, #12]
    break;
 8003c64:	e053      	b.n	8003d0e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */
    tmp = 0x0063;
 8003c66:	2363      	movs	r3, #99	; 0x63
 8003c68:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f103 0018 	add.w	r0, r3, #24
 8003c70:	f107 020a 	add.w	r2, r7, #10
 8003c74:	2302      	movs	r3, #2
 8003c76:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003c7a:	f000 f985 	bl	8003f88 <wm8994_write_reg>
 8003c7e:	60f8      	str	r0, [r7, #12]
    break;
 8003c80:	e045      	b.n	8003d0e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */
    tmp = 0x00A3;
 8003c82:	23a3      	movs	r3, #163	; 0xa3
 8003c84:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f103 0018 	add.w	r0, r3, #24
 8003c8c:	f107 020a 	add.w	r2, r7, #10
 8003c90:	2302      	movs	r3, #2
 8003c92:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003c96:	f000 f977 	bl	8003f88 <wm8994_write_reg>
 8003c9a:	60f8      	str	r0, [r7, #12]
    break;
 8003c9c:	e037      	b.n	8003d0e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    tmp = 0x0013;
 8003c9e:	2313      	movs	r3, #19
 8003ca0:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f103 0018 	add.w	r0, r3, #24
 8003ca8:	f107 020a 	add.w	r2, r7, #10
 8003cac:	2302      	movs	r3, #2
 8003cae:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003cb2:	f000 f969 	bl	8003f88 <wm8994_write_reg>
 8003cb6:	60f8      	str	r0, [r7, #12]
    break;
 8003cb8:	e029      	b.n	8003d0e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    tmp = 0x0043;
 8003cba:	2343      	movs	r3, #67	; 0x43
 8003cbc:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f103 0018 	add.w	r0, r3, #24
 8003cc4:	f107 020a 	add.w	r2, r7, #10
 8003cc8:	2302      	movs	r3, #2
 8003cca:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003cce:	f000 f95b 	bl	8003f88 <wm8994_write_reg>
 8003cd2:	60f8      	str	r0, [r7, #12]
    break;
 8003cd4:	e01b      	b.n	8003d0e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    tmp = 0x0073;
 8003cd6:	2373      	movs	r3, #115	; 0x73
 8003cd8:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f103 0018 	add.w	r0, r3, #24
 8003ce0:	f107 020a 	add.w	r2, r7, #10
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003cea:	f000 f94d 	bl	8003f88 <wm8994_write_reg>
 8003cee:	60f8      	str	r0, [r7, #12]
    break; 
 8003cf0:	e00d      	b.n	8003d0e <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_48K:    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    tmp = 0x0083;
 8003cf2:	2383      	movs	r3, #131	; 0x83
 8003cf4:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f103 0018 	add.w	r0, r3, #24
 8003cfc:	f107 020a 	add.w	r2, r7, #10
 8003d00:	2302      	movs	r3, #2
 8003d02:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003d06:	f000 f93f 	bl	8003f88 <wm8994_write_reg>
 8003d0a:	60f8      	str	r0, [r7, #12]
    break; 
 8003d0c:	bf00      	nop
  }
  
  return ret;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	00017700 	.word	0x00017700

08003d1c <WM8994_GetFrequency>:
  * @param pObj pointer to component object
  * @param AudioFreq Audio frequency
  * @retval Component status
  */
int32_t WM8994_GetFrequency(WM8994_Object_t *pObj, uint32_t *AudioFreq)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;   
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
  uint16_t freq = 0;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	817b      	strh	r3, [r7, #10]
  
  if(wm8994_aif1_sr_r(&pObj->Ctx, &freq) != WM8994_OK)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3318      	adds	r3, #24
 8003d32:	f107 020a 	add.w	r2, r7, #10
 8003d36:	4611      	mov	r1, r2
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 f98d 	bl	8004058 <wm8994_aif1_sr_r>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <WM8994_GetFrequency+0x30>
  {
    ret = WM8994_ERROR;
 8003d44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	e043      	b.n	8003dd4 <WM8994_GetFrequency+0xb8>
  }
  else
  {
    switch(freq)
 8003d4c:	897b      	ldrh	r3, [r7, #10]
 8003d4e:	2b0a      	cmp	r3, #10
 8003d50:	d83f      	bhi.n	8003dd2 <WM8994_GetFrequency+0xb6>
 8003d52:	a201      	add	r2, pc, #4	; (adr r2, 8003d58 <WM8994_GetFrequency+0x3c>)
 8003d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d58:	08003d85 	.word	0x08003d85
 8003d5c:	08003d8f 	.word	0x08003d8f
 8003d60:	08003dd3 	.word	0x08003dd3
 8003d64:	08003d99 	.word	0x08003d99
 8003d68:	08003da3 	.word	0x08003da3
 8003d6c:	08003dd3 	.word	0x08003dd3
 8003d70:	08003dad 	.word	0x08003dad
 8003d74:	08003db7 	.word	0x08003db7
 8003d78:	08003dc1 	.word	0x08003dc1
 8003d7c:	08003dd3 	.word	0x08003dd3
 8003d80:	08003dcb 	.word	0x08003dcb
    {
    case 0:
      *AudioFreq = WM8994_FREQUENCY_8K;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003d8a:	601a      	str	r2, [r3, #0]
      break;
 8003d8c:	e022      	b.n	8003dd4 <WM8994_GetFrequency+0xb8>
    case 1:
      *AudioFreq = WM8994_FREQUENCY_11K;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	f642 3211 	movw	r2, #11025	; 0x2b11
 8003d94:	601a      	str	r2, [r3, #0]
      break;    
 8003d96:	e01d      	b.n	8003dd4 <WM8994_GetFrequency+0xb8>
    case 3:
      *AudioFreq = WM8994_FREQUENCY_16K;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8003d9e:	601a      	str	r2, [r3, #0]
      break;
 8003da0:	e018      	b.n	8003dd4 <WM8994_GetFrequency+0xb8>
    case 4:
      *AudioFreq = WM8994_FREQUENCY_22K;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	f245 6222 	movw	r2, #22050	; 0x5622
 8003da8:	601a      	str	r2, [r3, #0]
      break; 
 8003daa:	e013      	b.n	8003dd4 <WM8994_GetFrequency+0xb8>
    case 6:
      *AudioFreq = WM8994_FREQUENCY_32K;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8003db2:	601a      	str	r2, [r3, #0]
      break; 
 8003db4:	e00e      	b.n	8003dd4 <WM8994_GetFrequency+0xb8>
    case 7:
      *AudioFreq = WM8994_FREQUENCY_44K;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	f64a 4244 	movw	r2, #44100	; 0xac44
 8003dbc:	601a      	str	r2, [r3, #0]
      break;    
 8003dbe:	e009      	b.n	8003dd4 <WM8994_GetFrequency+0xb8>
    case 8:
      *AudioFreq = WM8994_FREQUENCY_48K;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8003dc6:	601a      	str	r2, [r3, #0]
      break;
 8003dc8:	e004      	b.n	8003dd4 <WM8994_GetFrequency+0xb8>
    case 10:
      *AudioFreq = WM8994_FREQUENCY_96K;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	4a04      	ldr	r2, [pc, #16]	; (8003de0 <WM8994_GetFrequency+0xc4>)
 8003dce:	601a      	str	r2, [r3, #0]
      break;    
 8003dd0:	e000      	b.n	8003dd4 <WM8994_GetFrequency+0xb8>
    default:
      break;    
 8003dd2:	bf00      	nop
    }
  }
  
  return ret;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	00017700 	.word	0x00017700

08003de4 <WM8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param pObj pointer to component object 
  * @retval Component status if correct communication, else wrong communication
  */
int32_t WM8994_Reset(WM8994_Object_t *pObj)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  int32_t ret = WM8994_OK;
 8003dec:	2300      	movs	r3, #0
 8003dee:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  if(wm8994_sw_reset_w(&pObj->Ctx, 0x0000) != WM8994_OK)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3318      	adds	r3, #24
 8003df4:	2100      	movs	r1, #0
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 f8ee 	bl	8003fd8 <wm8994_sw_reset_w>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d002      	beq.n	8003e08 <WM8994_Reset+0x24>
  {
    ret = WM8994_ERROR;
 8003e02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e06:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8003e08:	68fb      	ldr	r3, [r7, #12]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <WM8994_RegisterBusIO>:
  * @brief  Function
  * @param  Component object pointer
  * @retval error status
  */
int32_t WM8994_RegisterBusIO (WM8994_Object_t *pObj, WM8994_IO_t *pIO)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  if (pObj == NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d103      	bne.n	8003e2c <WM8994_RegisterBusIO+0x18>
  {
    ret = WM8994_ERROR;
 8003e24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	e02c      	b.n	8003e86 <WM8994_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	891a      	ldrh	r2, [r3, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	695a      	ldr	r2, [r3, #20]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	615a      	str	r2, [r3, #20]
    
    pObj->Ctx.ReadReg  = WM8994_ReadRegWrap;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a0c      	ldr	r2, [pc, #48]	; (8003e90 <WM8994_RegisterBusIO+0x7c>)
 8003e60:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WM8994_WriteRegWrap;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a0b      	ldr	r2, [pc, #44]	; (8003e94 <WM8994_RegisterBusIO+0x80>)
 8003e66:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	621a      	str	r2, [r3, #32]
    
    if(pObj->IO.Init != NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d004      	beq.n	8003e80 <WM8994_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4798      	blx	r3
 8003e7c:	60f8      	str	r0, [r7, #12]
 8003e7e:	e002      	b.n	8003e86 <WM8994_RegisterBusIO+0x72>
    }
    else
    {
      ret = WM8994_ERROR;
 8003e80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e84:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return ret;
 8003e86:	68fb      	ldr	r3, [r7, #12]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	08003ecd 	.word	0x08003ecd
 8003e94:	08003eff 	.word	0x08003eff

08003e98 <WM8994_Delay>:
  * @param pObj pointer to component object
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval Component status
  */
static int32_t WM8994_Delay(WM8994_Object_t *pObj, uint32_t Delay)
{  
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = pObj->IO.GetTick();
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	4798      	blx	r3
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8003eac:	bf00      	nop
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	4798      	blx	r3
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d8f5      	bhi.n	8003eae <WM8994_Delay+0x16>
  {
  }
  return WM8994_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <WM8994_ReadRegWrap>:
  * @param  pData   The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t WM8994_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8003ecc:	b590      	push	{r4, r7, lr}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	607a      	str	r2, [r7, #4]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	460b      	mov	r3, r1
 8003eda:	817b      	strh	r3, [r7, #10]
 8003edc:	4613      	mov	r3, r2
 8003ede:	813b      	strh	r3, [r7, #8]
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	691c      	ldr	r4, [r3, #16]
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	8918      	ldrh	r0, [r3, #8]
 8003eec:	893b      	ldrh	r3, [r7, #8]
 8003eee:	8979      	ldrh	r1, [r7, #10]
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	47a0      	blx	r4
 8003ef4:	4603      	mov	r3, r0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	371c      	adds	r7, #28
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd90      	pop	{r4, r7, pc}

08003efe <WM8994_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t WM8994_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8003efe:	b590      	push	{r4, r7, lr}
 8003f00:	b087      	sub	sp, #28
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	60f8      	str	r0, [r7, #12]
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	461a      	mov	r2, r3
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	817b      	strh	r3, [r7, #10]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	813b      	strh	r3, [r7, #8]
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	68dc      	ldr	r4, [r3, #12]
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	8918      	ldrh	r0, [r3, #8]
 8003f1e:	893b      	ldrh	r3, [r7, #8]
 8003f20:	8979      	ldrh	r1, [r7, #10]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	47a0      	blx	r4
 8003f26:	4603      	mov	r3, r0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	371c      	adds	r7, #28
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd90      	pop	{r4, r7, pc}

08003f30 <wm8994_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : data Read
*******************************************************************************/
int32_t wm8994_read_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t* data, uint16_t length)
{
 8003f30:	b590      	push	{r4, r7, lr}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	607a      	str	r2, [r7, #4]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	817b      	strh	r3, [r7, #10]
 8003f40:	4613      	mov	r3, r2
 8003f42:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  uint16_t tmp;
  
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	685c      	ldr	r4, [r3, #4]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6898      	ldr	r0, [r3, #8]
 8003f4c:	893b      	ldrh	r3, [r7, #8]
 8003f4e:	8979      	ldrh	r1, [r7, #10]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	47a0      	blx	r4
 8003f54:	6178      	str	r0, [r7, #20]
  
  if(ret >= 0)
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	db10      	blt.n	8003f7e <wm8994_read_reg+0x4e>
  {
    tmp = ((uint16_t)(*data >> 8) & 0x00FF);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	0a1b      	lsrs	r3, r3, #8
 8003f62:	827b      	strh	r3, [r7, #18]
    tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	021b      	lsls	r3, r3, #8
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	b21a      	sxth	r2, r3
 8003f6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	b21b      	sxth	r3, r3
 8003f76:	827b      	strh	r3, [r7, #18]
    *data = tmp;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	8a7a      	ldrh	r2, [r7, #18]
 8003f7c:	801a      	strh	r2, [r3, #0]
  }
  return ret;
 8003f7e:	697b      	ldr	r3, [r7, #20]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	371c      	adds	r7, #28
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd90      	pop	{r4, r7, pc}

08003f88 <wm8994_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t wm8994_write_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t *data, uint16_t length)
{
 8003f88:	b590      	push	{r4, r7, lr}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	607a      	str	r2, [r7, #4]
 8003f92:	461a      	mov	r2, r3
 8003f94:	460b      	mov	r3, r1
 8003f96:	817b      	strh	r3, [r7, #10]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	813b      	strh	r3, [r7, #8]
  uint16_t tmp;
  tmp = ((uint16_t)(*data >> 8) & 0x00FF);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	0a1b      	lsrs	r3, r3, #8
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	82fb      	strh	r3, [r7, #22]
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	881b      	ldrh	r3, [r3, #0]
 8003faa:	021b      	lsls	r3, r3, #8
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	b21a      	sxth	r2, r3
 8003fb0:	8afb      	ldrh	r3, [r7, #22]
 8003fb2:	b21b      	sxth	r3, r3
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	b21b      	sxth	r3, r3
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	82fb      	strh	r3, [r7, #22]
  
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681c      	ldr	r4, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6898      	ldr	r0, [r3, #8]
 8003fc4:	893b      	ldrh	r3, [r7, #8]
 8003fc6:	f107 0216 	add.w	r2, r7, #22
 8003fca:	8979      	ldrh	r1, [r7, #10]
 8003fcc:	47a0      	blx	r4
 8003fce:	4603      	mov	r3, r0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	371c      	adds	r7, #28
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd90      	pop	{r4, r7, pc}

08003fd8 <wm8994_sw_reset_w>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_sw_reset_w(wm8994_ctx_t *ctx, uint16_t value)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	807b      	strh	r3, [r7, #2]
  return wm8994_write_reg(ctx, WM8994_SW_RESET, &value, 2);
 8003fe4:	1cba      	adds	r2, r7, #2
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	2100      	movs	r1, #0
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff ffcc 	bl	8003f88 <wm8994_write_reg>
 8003ff0:	4603      	mov	r3, r0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <wm8994_sw_reset_r>:
* Input          : Pointer to uint8_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_sw_reset_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b082      	sub	sp, #8
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	6039      	str	r1, [r7, #0]
  return wm8994_read_reg(ctx, WM8994_SW_RESET, value, 2);
 8004004:	2302      	movs	r3, #2
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	2100      	movs	r1, #0
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff ff90 	bl	8003f30 <wm8994_read_reg>
 8004010:	4603      	mov	r3, r0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <wm8994_lo_hpout1l_vol_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_lo_hpout1l_vol_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b084      	sub	sp, #16
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_LEFT_OUTPUT_VOL, value, 2);
 8004024:	2302      	movs	r3, #2
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	211c      	movs	r1, #28
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff ff80 	bl	8003f30 <wm8994_read_reg>
 8004030:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10a      	bne.n	800404e <wm8994_lo_hpout1l_vol_r+0x34>
  {  
  *value &= WM8994_LO_HPOUT1L_VOL_MASK;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004040:	b29a      	uxth	r2, r3
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_LO_HPOUT1L_VOL_POSITION;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	881a      	ldrh	r2, [r3, #0]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 800404e:	68fb      	ldr	r3, [r7, #12]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <wm8994_aif1_sr_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_sr_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_RATE, value, 2);
 8004062:	2302      	movs	r3, #2
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	f44f 7104 	mov.w	r1, #528	; 0x210
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7ff ff60 	bl	8003f30 <wm8994_read_reg>
 8004070:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10c      	bne.n	8004092 <wm8994_aif1_sr_r+0x3a>
  {  
  *value &= WM8994_AIF1_SR_MASK;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	881b      	ldrh	r3, [r3, #0]
 800407c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004080:	b29a      	uxth	r2, r3
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_SR_POSITION;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	091b      	lsrs	r3, r3, #4
 800408c:	b29a      	uxth	r2, r3
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 8004092:	68fb      	ldr	r3, [r7, #12]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <wm8994_aif1_control1_fmt>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_fmt(wm8994_ctx_t *ctx, uint16_t value)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	460b      	mov	r3, r1
 80040a6:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 80040a8:	2300      	movs	r3, #0
 80040aa:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 80040ac:	f107 020a 	add.w	r2, r7, #10
 80040b0:	2302      	movs	r3, #2
 80040b2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7ff ff3a 	bl	8003f30 <wm8994_read_reg>
 80040bc:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d116      	bne.n	80040f2 <wm8994_aif1_control1_fmt+0x56>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_FMT_MASK;
 80040c4:	897b      	ldrh	r3, [r7, #10]
 80040c6:	f023 0318 	bic.w	r3, r3, #24
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_FMT_POSITION;
 80040ce:	887b      	ldrh	r3, [r7, #2]
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	b21a      	sxth	r2, r3
 80040d4:	897b      	ldrh	r3, [r7, #10]
 80040d6:	b21b      	sxth	r3, r3
 80040d8:	4313      	orrs	r3, r2
 80040da:	b21b      	sxth	r3, r3
 80040dc:	b29b      	uxth	r3, r3
 80040de:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 80040e0:	f107 020a 	add.w	r2, r7, #10
 80040e4:	2302      	movs	r3, #2
 80040e6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7ff ff4c 	bl	8003f88 <wm8994_write_reg>
 80040f0:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 80040f2:	68fb      	ldr	r3, [r7, #12]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <wm8994_aif1_control1_fmt_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_fmt_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, value, 2);
 8004106:	2302      	movs	r3, #2
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7ff ff0e 	bl	8003f30 <wm8994_read_reg>
 8004114:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10c      	bne.n	8004136 <wm8994_aif1_control1_fmt_r+0x3a>
  {  
  *value &= WM8994_AIF1_CONTROL1_FMT_MASK;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	f003 0318 	and.w	r3, r3, #24
 8004124:	b29a      	uxth	r2, r3
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_CONTROL1_FMT_POSITION;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	08db      	lsrs	r3, r3, #3
 8004130:	b29a      	uxth	r2, r3
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 8004136:	68fb      	ldr	r3, [r7, #12]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <wm8994_aif1_control1_wl>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_wl(wm8994_ctx_t *ctx, uint16_t value)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	460b      	mov	r3, r1
 800414a:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 800414c:	2300      	movs	r3, #0
 800414e:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8004150:	f107 020a 	add.w	r2, r7, #10
 8004154:	2302      	movs	r3, #2
 8004156:	f44f 7140 	mov.w	r1, #768	; 0x300
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7ff fee8 	bl	8003f30 <wm8994_read_reg>
 8004160:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d116      	bne.n	8004196 <wm8994_aif1_control1_wl+0x56>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_WL_MASK;
 8004168:	897b      	ldrh	r3, [r7, #10]
 800416a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800416e:	b29b      	uxth	r3, r3
 8004170:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_WL_POSITION;
 8004172:	887b      	ldrh	r3, [r7, #2]
 8004174:	015b      	lsls	r3, r3, #5
 8004176:	b21a      	sxth	r2, r3
 8004178:	897b      	ldrh	r3, [r7, #10]
 800417a:	b21b      	sxth	r3, r3
 800417c:	4313      	orrs	r3, r2
 800417e:	b21b      	sxth	r3, r3
 8004180:	b29b      	uxth	r3, r3
 8004182:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8004184:	f107 020a 	add.w	r2, r7, #10
 8004188:	2302      	movs	r3, #2
 800418a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7ff fefa 	bl	8003f88 <wm8994_write_reg>
 8004194:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 8004196:	68fb      	ldr	r3, [r7, #12]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <wm8994_aif1_control1_wl_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_wl_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, value, 2);
 80041aa:	2302      	movs	r3, #2
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	f44f 7140 	mov.w	r1, #768	; 0x300
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7ff febc 	bl	8003f30 <wm8994_read_reg>
 80041b8:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10c      	bne.n	80041da <wm8994_aif1_control1_wl_r+0x3a>
  {  
  *value &= WM8994_AIF1_CONTROL1_WL_MASK;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_CONTROL1_WL_POSITION;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 80041da:	68fb      	ldr	r3, [r7, #12]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <wm8994_aif1_control1_adcr_src>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_adcr_src(wm8994_ctx_t *ctx, uint16_t value)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 80041f4:	f107 020a 	add.w	r2, r7, #10
 80041f8:	2302      	movs	r3, #2
 80041fa:	f44f 7140 	mov.w	r1, #768	; 0x300
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff fe96 	bl	8003f30 <wm8994_read_reg>
 8004204:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d116      	bne.n	800423a <wm8994_aif1_control1_adcr_src+0x56>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_ADCR_SRC_MASK;
 800420c:	897b      	ldrh	r3, [r7, #10]
 800420e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004212:	b29b      	uxth	r3, r3
 8004214:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_ADCR_SRC_POSITION;
 8004216:	887b      	ldrh	r3, [r7, #2]
 8004218:	039b      	lsls	r3, r3, #14
 800421a:	b21a      	sxth	r2, r3
 800421c:	897b      	ldrh	r3, [r7, #10]
 800421e:	b21b      	sxth	r3, r3
 8004220:	4313      	orrs	r3, r2
 8004222:	b21b      	sxth	r3, r3
 8004224:	b29b      	uxth	r3, r3
 8004226:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8004228:	f107 020a 	add.w	r2, r7, #10
 800422c:	2302      	movs	r3, #2
 800422e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7ff fea8 	bl	8003f88 <wm8994_write_reg>
 8004238:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 800423a:	68fb      	ldr	r3, [r7, #12]
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <wm8994_aif1_adc1_left_vol_adc1l_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_adc1_left_vol_adc1l_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_ADC1_LEFT_VOL, value, 2);
 800424e:	2302      	movs	r3, #2
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7ff fe6a 	bl	8003f30 <wm8994_read_reg>
 800425c:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d109      	bne.n	8004278 <wm8994_aif1_adc1_left_vol_adc1l_r+0x34>
  {  
  *value &= WM8994_AIF1_ADC1_LEFT_VOL_ADC1L_MASK;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	b2db      	uxtb	r3, r3
 800426a:	b29a      	uxth	r2, r3
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_ADC1_LEFT_VOL_ADC1L_POSITION;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	881a      	ldrh	r2, [r3, #0]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 8004278:	68fb      	ldr	r3, [r7, #12]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
	...

08004284 <BSP_LED_On>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	4603      	mov	r3, r0
 800428c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800428e:	2300      	movs	r3, #0
 8004290:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 8004292:	79fb      	ldrb	r3, [r7, #7]
 8004294:	4a08      	ldr	r2, [pc, #32]	; (80042b8 <BSP_LED_On+0x34>)
 8004296:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800429a:	79fb      	ldrb	r3, [r7, #7]
 800429c:	4a07      	ldr	r2, [pc, #28]	; (80042bc <BSP_LED_On+0x38>)
 800429e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	2200      	movs	r2, #0
 80042a6:	4619      	mov	r1, r3
 80042a8:	f007 f9b2 	bl	800b610 <HAL_GPIO_WritePin>
  return ret;
 80042ac:	68fb      	ldr	r3, [r7, #12]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	24000530 	.word	0x24000530
 80042bc:	0801b328 	.word	0x0801b328

080042c0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b088      	sub	sp, #32
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	4603      	mov	r3, r0
 80042c8:	460a      	mov	r2, r1
 80042ca:	71fb      	strb	r3, [r7, #7]
 80042cc:	4613      	mov	r3, r2
 80042ce:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={BUTTON_USER_EXTI_LINE};
  /* Enable the BUTTON clock*/
  BUTTON_USER_GPIO_CLK_ENABLE();
 80042d0:	4b2e      	ldr	r3, [pc, #184]	; (800438c <BSP_PB_Init+0xcc>)
 80042d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042d6:	4a2d      	ldr	r2, [pc, #180]	; (800438c <BSP_PB_Init+0xcc>)
 80042d8:	f043 0304 	orr.w	r3, r3, #4
 80042dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042e0:	4b2a      	ldr	r3, [pc, #168]	; (800438c <BSP_PB_Init+0xcc>)
 80042e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042e6:	f003 0304 	and.w	r3, r3, #4
 80042ea:	60bb      	str	r3, [r7, #8]
 80042ec:	68bb      	ldr	r3, [r7, #8]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80042ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042f2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80042f4:	2302      	movs	r3, #2
 80042f6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80042f8:	2302      	movs	r3, #2
 80042fa:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80042fc:	79bb      	ldrb	r3, [r7, #6]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10c      	bne.n	800431c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8004302:	2300      	movs	r3, #0
 8004304:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8004306:	79fb      	ldrb	r3, [r7, #7]
 8004308:	4a21      	ldr	r2, [pc, #132]	; (8004390 <BSP_PB_Init+0xd0>)
 800430a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800430e:	f107 020c 	add.w	r2, r7, #12
 8004312:	4611      	mov	r1, r2
 8004314:	4618      	mov	r0, r3
 8004316:	f006 fea9 	bl	800b06c <HAL_GPIO_Init>
 800431a:	e031      	b.n	8004380 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800431c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004320:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8004322:	79fb      	ldrb	r3, [r7, #7]
 8004324:	4a1a      	ldr	r2, [pc, #104]	; (8004390 <BSP_PB_Init+0xd0>)
 8004326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800432a:	f107 020c 	add.w	r2, r7, #12
 800432e:	4611      	mov	r1, r2
 8004330:	4618      	mov	r0, r3
 8004332:	f006 fe9b 	bl	800b06c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8004336:	79fb      	ldrb	r3, [r7, #7]
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	4a16      	ldr	r2, [pc, #88]	; (8004394 <BSP_PB_Init+0xd4>)
 800433c:	441a      	add	r2, r3
 800433e:	79fb      	ldrb	r3, [r7, #7]
 8004340:	4915      	ldr	r1, [pc, #84]	; (8004398 <BSP_PB_Init+0xd8>)
 8004342:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004346:	4619      	mov	r1, r3
 8004348:	4610      	mov	r0, r2
 800434a:	f006 fe7a 	bl	800b042 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800434e:	79fb      	ldrb	r3, [r7, #7]
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	4a10      	ldr	r2, [pc, #64]	; (8004394 <BSP_PB_Init+0xd4>)
 8004354:	1898      	adds	r0, r3, r2
 8004356:	79fb      	ldrb	r3, [r7, #7]
 8004358:	4a10      	ldr	r2, [pc, #64]	; (800439c <BSP_PB_Init+0xdc>)
 800435a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800435e:	461a      	mov	r2, r3
 8004360:	2100      	movs	r1, #0
 8004362:	f006 fe4f 	bl	800b004 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8004366:	2028      	movs	r0, #40	; 0x28
 8004368:	79fb      	ldrb	r3, [r7, #7]
 800436a:	4a0d      	ldr	r2, [pc, #52]	; (80043a0 <BSP_PB_Init+0xe0>)
 800436c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004370:	2200      	movs	r2, #0
 8004372:	4619      	mov	r1, r3
 8004374:	f003 fcf9 	bl	8007d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8004378:	2328      	movs	r3, #40	; 0x28
 800437a:	4618      	mov	r0, r3
 800437c:	f003 fd0f 	bl	8007d9e <HAL_NVIC_EnableIRQ>
  }
  return BSP_ERROR_NONE;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3720      	adds	r7, #32
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	58024400 	.word	0x58024400
 8004390:	24000538 	.word	0x24000538
 8004394:	24007178 	.word	0x24007178
 8004398:	0801b330 	.word	0x0801b330
 800439c:	2400053c 	.word	0x2400053c
 80043a0:	24000540 	.word	0x24000540

080043a4 <BSP_PB_GetState>:
  *          This parameter can be one of the following values:
  *            @arg  BUTTON_USER: User Push Button
  * @retval The Button GPIO pin value
  */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	4603      	mov	r3, r0
 80043ac:	71fb      	strb	r3, [r7, #7]
  return (int32_t)HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80043ae:	79fb      	ldrb	r3, [r7, #7]
 80043b0:	4a06      	ldr	r2, [pc, #24]	; (80043cc <BSP_PB_GetState+0x28>)
 80043b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043ba:	4611      	mov	r1, r2
 80043bc:	4618      	mov	r0, r3
 80043be:	f007 f90f 	bl	800b5e0 <HAL_GPIO_ReadPin>
 80043c2:	4603      	mov	r3, r0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	24000538 	.word	0x24000538

080043d0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  KEY EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80043d4:	2000      	movs	r0, #0
 80043d6:	f7fd fb77 	bl	8001ac8 <BSP_PB_Callback>
}
 80043da:	bf00      	nop
 80043dc:	bd80      	pop	{r7, pc}
	...

080043e0 <BSP_AUDIO_OUT_Init>:
  * @param  Instance   AUDIO OUT Instance. It can only be 0 (SAI)
  * @param  AudioInit  AUDIO OUT init Structure
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_Init(uint32_t Instance, BSP_AUDIO_Init_t* AudioInit)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b094      	sub	sp, #80	; 0x50
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80043ea:	2300      	movs	r3, #0
 80043ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(Instance >= AUDIO_OUT_INSTANCES_NBR)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d003      	beq.n	80043fc <BSP_AUDIO_OUT_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80043f4:	f06f 0301 	mvn.w	r3, #1
 80043f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043fa:	e0d8      	b.n	80045ae <BSP_AUDIO_OUT_Init+0x1ce>
  }
  else
  {
    /* Fill Audio_Out_Ctx structure */
    Audio_Out_Ctx[Instance].Device         = AudioInit->Device;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	6819      	ldr	r1, [r3, #0]
 8004400:	486d      	ldr	r0, [pc, #436]	; (80045b8 <BSP_AUDIO_OUT_Init+0x1d8>)
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	4613      	mov	r3, r2
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	4413      	add	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4403      	add	r3, r0
 800440e:	3304      	adds	r3, #4
 8004410:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].Instance       = Instance;
 8004412:	4969      	ldr	r1, [pc, #420]	; (80045b8 <BSP_AUDIO_OUT_Init+0x1d8>)
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	4613      	mov	r3, r2
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	4413      	add	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	440b      	add	r3, r1
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	601a      	str	r2, [r3, #0]
    Audio_Out_Ctx[Instance].SampleRate     = AudioInit->SampleRate;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	6859      	ldr	r1, [r3, #4]
 8004428:	4863      	ldr	r0, [pc, #396]	; (80045b8 <BSP_AUDIO_OUT_Init+0x1d8>)
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	4613      	mov	r3, r2
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	4413      	add	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4403      	add	r3, r0
 8004436:	3308      	adds	r3, #8
 8004438:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].BitsPerSample  = AudioInit->BitsPerSample;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	6899      	ldr	r1, [r3, #8]
 800443e:	485e      	ldr	r0, [pc, #376]	; (80045b8 <BSP_AUDIO_OUT_Init+0x1d8>)
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	4413      	add	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4403      	add	r3, r0
 800444c:	330c      	adds	r3, #12
 800444e:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].ChannelsNbr    = AudioInit->ChannelsNbr;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	68d9      	ldr	r1, [r3, #12]
 8004454:	4858      	ldr	r0, [pc, #352]	; (80045b8 <BSP_AUDIO_OUT_Init+0x1d8>)
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	4613      	mov	r3, r2
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	4413      	add	r3, r2
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4403      	add	r3, r0
 8004462:	3314      	adds	r3, #20
 8004464:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].Volume         = AudioInit->Volume;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	6919      	ldr	r1, [r3, #16]
 800446a:	4853      	ldr	r0, [pc, #332]	; (80045b8 <BSP_AUDIO_OUT_Init+0x1d8>)
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	4613      	mov	r3, r2
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	4413      	add	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4403      	add	r3, r0
 8004478:	3310      	adds	r3, #16
 800447a:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].State          = AUDIO_OUT_STATE_RESET;
 800447c:	494e      	ldr	r1, [pc, #312]	; (80045b8 <BSP_AUDIO_OUT_Init+0x1d8>)
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	4613      	mov	r3, r2
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	4413      	add	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	331c      	adds	r3, #28
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]

#if (USE_AUDIO_CODEC_WM8994 == 1)
    if(WM8994_Probe() != BSP_ERROR_NONE)
 8004490:	f001 f95c 	bl	800574c <WM8994_Probe>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d002      	beq.n	80044a0 <BSP_AUDIO_OUT_Init+0xc0>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800449a:	f06f 0304 	mvn.w	r3, #4
 800449e:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
#endif
    if(ret == BSP_ERROR_NONE)
 80044a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d176      	bne.n	8004594 <BSP_AUDIO_OUT_Init+0x1b4>
    {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI2_ClockConfig(&haudio_out_sai, AudioInit->SampleRate) != HAL_OK)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	4619      	mov	r1, r3
 80044ac:	4843      	ldr	r0, [pc, #268]	; (80045bc <BSP_AUDIO_OUT_Init+0x1dc>)
 80044ae:	f000 f95c 	bl	800476a <MX_SAI2_ClockConfig>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <BSP_AUDIO_OUT_Init+0xe0>
      {
        ret = BSP_ERROR_CLOCK_FAILURE;
 80044b8:	f06f 0308 	mvn.w	r3, #8
 80044bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044be:	e069      	b.n	8004594 <BSP_AUDIO_OUT_Init+0x1b4>
      }
      else
      {
        /* SAI data transfer preparation:
        Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
        haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80044c0:	4b3e      	ldr	r3, [pc, #248]	; (80045bc <BSP_AUDIO_OUT_Init+0x1dc>)
 80044c2:	4a3f      	ldr	r2, [pc, #252]	; (80045c0 <BSP_AUDIO_OUT_Init+0x1e0>)
 80044c4:	601a      	str	r2, [r3, #0]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 0U)
        SAI_MspInit(&haudio_out_sai);
 80044c6:	483d      	ldr	r0, [pc, #244]	; (80045bc <BSP_AUDIO_OUT_Init+0x1dc>)
 80044c8:	f001 f99a 	bl	8005800 <SAI_MspInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 0U) */

          MX_SAI_Config_t mx_sai_config;

          /* Prepare haudio_out_sai handle */
          mx_sai_config.AudioFrequency    = AudioInit->SampleRate;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	60fb      	str	r3, [r7, #12]
          mx_sai_config.AudioMode         = SAI_MODEMASTER_TX;
 80044d2:	2300      	movs	r3, #0
 80044d4:	613b      	str	r3, [r7, #16]
          mx_sai_config.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80044d6:	2301      	movs	r3, #1
 80044d8:	61fb      	str	r3, [r7, #28]
          mx_sai_config.MonoStereoMode    = (AudioInit->ChannelsNbr == 1U) ? SAI_MONOMODE : SAI_STEREOMODE;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d102      	bne.n	80044e8 <BSP_AUDIO_OUT_Init+0x108>
 80044e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044e6:	e000      	b.n	80044ea <BSP_AUDIO_OUT_Init+0x10a>
 80044e8:	2300      	movs	r3, #0
 80044ea:	61bb      	str	r3, [r7, #24]
          mx_sai_config.DataSize          = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? SAI_DATASIZE_32 : SAI_DATASIZE_16;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	2b20      	cmp	r3, #32
 80044f2:	d101      	bne.n	80044f8 <BSP_AUDIO_OUT_Init+0x118>
 80044f4:	23e0      	movs	r3, #224	; 0xe0
 80044f6:	e000      	b.n	80044fa <BSP_AUDIO_OUT_Init+0x11a>
 80044f8:	2380      	movs	r3, #128	; 0x80
 80044fa:	617b      	str	r3, [r7, #20]
          mx_sai_config.FrameLength       = 128;
 80044fc:	2380      	movs	r3, #128	; 0x80
 80044fe:	62fb      	str	r3, [r7, #44]	; 0x2c
          mx_sai_config.ActiveFrameLength = 64;
 8004500:	2340      	movs	r3, #64	; 0x40
 8004502:	633b      	str	r3, [r7, #48]	; 0x30
          mx_sai_config.OutputDrive       = SAI_OUTPUTDRIVE_ENABLE;
 8004504:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004508:	627b      	str	r3, [r7, #36]	; 0x24
          mx_sai_config.Synchro           = SAI_ASYNCHRONOUS;
 800450a:	2300      	movs	r3, #0
 800450c:	623b      	str	r3, [r7, #32]
          mx_sai_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 800450e:	2300      	movs	r3, #0
 8004510:	62bb      	str	r3, [r7, #40]	; 0x28
          mx_sai_config.SlotActive        = CODEC_AUDIOFRAME_SLOT_02;
 8004512:	2305      	movs	r3, #5
 8004514:	637b      	str	r3, [r7, #52]	; 0x34

          /* SAI peripheral initialization: this __weak function can be redefined by the application  */
          if(MX_SAI2_Block_A_Init(&haudio_out_sai, &mx_sai_config) != HAL_OK)
 8004516:	f107 030c 	add.w	r3, r7, #12
 800451a:	4619      	mov	r1, r3
 800451c:	4827      	ldr	r0, [pc, #156]	; (80045bc <BSP_AUDIO_OUT_Init+0x1dc>)
 800451e:	f000 f89b 	bl	8004658 <MX_SAI2_Block_A_Init>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <BSP_AUDIO_OUT_Init+0x14e>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8004528:	f06f 0303 	mvn.w	r3, #3
 800452c:	64fb      	str	r3, [r7, #76]	; 0x4c
              ret = BSP_ERROR_PERIPH_FAILURE;
            }
          }
#endif
#if (USE_AUDIO_CODEC_WM8994 == 1)
          if(ret == BSP_ERROR_NONE)
 800452e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004530:	2b00      	cmp	r3, #0
 8004532:	d12f      	bne.n	8004594 <BSP_AUDIO_OUT_Init+0x1b4>
          {
            WM8994_Init_t codec_init;
            codec_init.Resolution  = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? 3 : 0;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	2b20      	cmp	r3, #32
 800453a:	d101      	bne.n	8004540 <BSP_AUDIO_OUT_Init+0x160>
 800453c:	2303      	movs	r3, #3
 800453e:	e000      	b.n	8004542 <BSP_AUDIO_OUT_Init+0x162>
 8004540:	2300      	movs	r3, #0
 8004542:	647b      	str	r3, [r7, #68]	; 0x44

            /* Fill codec_init structure */
            codec_init.Frequency    = AudioInit->SampleRate;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	643b      	str	r3, [r7, #64]	; 0x40
            codec_init.InputDevice  = WM8994_IN_NONE;
 800454a:	2300      	movs	r3, #0
 800454c:	63bb      	str	r3, [r7, #56]	; 0x38
            codec_init.OutputDevice = AudioInit->Device;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Convert volume before sending to the codec */
            codec_init.Volume       = VOLUME_OUT_CONVERT(AudioInit->Volume);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	2b64      	cmp	r3, #100	; 0x64
 800455a:	d80a      	bhi.n	8004572 <BSP_AUDIO_OUT_Init+0x192>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	691a      	ldr	r2, [r3, #16]
 8004560:	4613      	mov	r3, r2
 8004562:	019b      	lsls	r3, r3, #6
 8004564:	1a9b      	subs	r3, r3, r2
 8004566:	4a17      	ldr	r2, [pc, #92]	; (80045c4 <BSP_AUDIO_OUT_Init+0x1e4>)
 8004568:	fba2 2303 	umull	r2, r3, r2, r3
 800456c:	095b      	lsrs	r3, r3, #5
 800456e:	b2db      	uxtb	r3, r3
 8004570:	e000      	b.n	8004574 <BSP_AUDIO_OUT_Init+0x194>
 8004572:	233f      	movs	r3, #63	; 0x3f
 8004574:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Initialize the codec internal registers */
            if(Audio_Drv->Init(Audio_CompObj, &codec_init) != 0)
 8004576:	4b14      	ldr	r3, [pc, #80]	; (80045c8 <BSP_AUDIO_OUT_Init+0x1e8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a13      	ldr	r2, [pc, #76]	; (80045cc <BSP_AUDIO_OUT_Init+0x1ec>)
 800457e:	6812      	ldr	r2, [r2, #0]
 8004580:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004584:	4610      	mov	r0, r2
 8004586:	4798      	blx	r3
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <BSP_AUDIO_OUT_Init+0x1b4>
            {
              ret =  BSP_ERROR_COMPONENT_FAILURE;
 800458e:	f06f 0304 	mvn.w	r3, #4
 8004592:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif
      }
    }

    /* Update BSP AUDIO OUT state */
    if(ret == BSP_ERROR_NONE)
 8004594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004596:	2b00      	cmp	r3, #0
 8004598:	d109      	bne.n	80045ae <BSP_AUDIO_OUT_Init+0x1ce>
    {
      Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_STOP;
 800459a:	4907      	ldr	r1, [pc, #28]	; (80045b8 <BSP_AUDIO_OUT_Init+0x1d8>)
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	4613      	mov	r3, r2
 80045a0:	00db      	lsls	r3, r3, #3
 80045a2:	4413      	add	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	440b      	add	r3, r1
 80045a8:	331c      	adds	r3, #28
 80045aa:	2202      	movs	r2, #2
 80045ac:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
 80045ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3750      	adds	r7, #80	; 0x50
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	240072c4 	.word	0x240072c4
 80045bc:	2400722c 	.word	0x2400722c
 80045c0:	40015c04 	.word	0x40015c04
 80045c4:	51eb851f 	.word	0x51eb851f
 80045c8:	24007180 	.word	0x24007180
 80045cc:	24007228 	.word	0x24007228

080045d0 <BSP_AUDIO_OUT_DeInit>:
  * @brief  De-initializes the audio out peripheral.
  * @param Instance :  AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
int32_t BSP_AUDIO_OUT_DeInit(uint32_t Instance)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80045d8:	2300      	movs	r3, #0
 80045da:	60fb      	str	r3, [r7, #12]

  if (Instance >= AUDIO_OUT_INSTANCES_NBR)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <BSP_AUDIO_OUT_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80045e2:	f06f 0301 	mvn.w	r3, #1
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	e027      	b.n	800463a <BSP_AUDIO_OUT_DeInit+0x6a>
  }
  else
  {
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 0U)
    SAI_MspDeInit(&haudio_out_sai);
 80045ea:	4816      	ldr	r0, [pc, #88]	; (8004644 <BSP_AUDIO_OUT_DeInit+0x74>)
 80045ec:	f001 fb4c 	bl	8005c88 <SAI_MspDeInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 0U) */
    /* Initialize the haudio_out_sai Instance parameter */
    haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80045f0:	4b14      	ldr	r3, [pc, #80]	; (8004644 <BSP_AUDIO_OUT_DeInit+0x74>)
 80045f2:	4a15      	ldr	r2, [pc, #84]	; (8004648 <BSP_AUDIO_OUT_DeInit+0x78>)
 80045f4:	601a      	str	r2, [r3, #0]
    /* Call the Media layer stop function */
    if (Audio_Drv->DeInit(Audio_CompObj) != 0)
 80045f6:	4b15      	ldr	r3, [pc, #84]	; (800464c <BSP_AUDIO_OUT_DeInit+0x7c>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	4a14      	ldr	r2, [pc, #80]	; (8004650 <BSP_AUDIO_OUT_DeInit+0x80>)
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	4610      	mov	r0, r2
 8004602:	4798      	blx	r3
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <BSP_AUDIO_OUT_DeInit+0x42>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800460a:	f06f 0304 	mvn.w	r3, #4
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	e013      	b.n	800463a <BSP_AUDIO_OUT_DeInit+0x6a>
    }
    else if (HAL_SAI_DeInit(&haudio_out_sai) != HAL_OK)
 8004612:	480c      	ldr	r0, [pc, #48]	; (8004644 <BSP_AUDIO_OUT_DeInit+0x74>)
 8004614:	f00c fbca 	bl	8010dac <HAL_SAI_DeInit>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <BSP_AUDIO_OUT_DeInit+0x56>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800461e:	f06f 0303 	mvn.w	r3, #3
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	e009      	b.n	800463a <BSP_AUDIO_OUT_DeInit+0x6a>
    }
    else
    {
      /* Update BSP AUDIO OUT state */
      Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_RESET;
 8004626:	490b      	ldr	r1, [pc, #44]	; (8004654 <BSP_AUDIO_OUT_DeInit+0x84>)
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	4613      	mov	r3, r2
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	4413      	add	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	440b      	add	r3, r1
 8004634:	331c      	adds	r3, #28
 8004636:	2200      	movs	r2, #0
 8004638:	601a      	str	r2, [r3, #0]
    }
  }
  /* Return BSP status */
  return ret;
 800463a:	68fb      	ldr	r3, [r7, #12]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	2400722c 	.word	0x2400722c
 8004648:	40015c04 	.word	0x40015c04
 800464c:	24007180 	.word	0x24007180
 8004650:	24007228 	.word	0x24007228
 8004654:	240072c4 	.word	0x240072c4

08004658 <MX_SAI2_Block_A_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI2_Block_A_Init(SAI_HandleTypeDef *hsai, MX_SAI_Config_t *MXConfig)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004662:	2300      	movs	r3, #0
 8004664:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004674:	601a      	str	r2, [r3, #0]

  /* Configure SAI1_Block_A */
  hsai->Init.MonoStereoMode = MXConfig->MonoStereoMode;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai->Init.AudioFrequency = MXConfig->AudioFrequency;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	621a      	str	r2, [r3, #32]
  hsai->Init.AudioMode = MXConfig->AudioMode;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol = SAI_FREE_PROTOCOL;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.DataSize = MXConfig->DataSize;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	689a      	ldr	r2, [r3, #8]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->Init.FirstBit = SAI_FIRSTBIT_MSB;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->Init.ClockStrobing = MXConfig->ClockStrobing;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	691a      	ldr	r2, [r3, #16]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->Init.Synchro = MXConfig->Synchro;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	695a      	ldr	r2, [r3, #20]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive = MXConfig->OutputDrive;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	699a      	ldr	r2, [r3, #24]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt = MXConfig->SynchroExt;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	69da      	ldr	r2, [r3, #28]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode = SAI_NOCOMPANDING;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.Mckdiv = 0;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	625a      	str	r2, [r3, #36]	; 0x24
  hsai->Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	629a      	str	r2, [r3, #40]	; 0x28
  hsai->Init.MckOutput = SAI_MCK_OUTPUT_DISABLE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	611a      	str	r2, [r3, #16]
  hsai->Init.PdmInit.Activation = DISABLE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai->Init.PdmInit.ClockEnable = 0;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.PdmInit.MicPairsNbr = 0;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength = MXConfig->FrameLength;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	6a1a      	ldr	r2, [r3, #32]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004716:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004724:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset = 0;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotNumber = 4;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2204      	movs	r2, #4
 8004736:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive = MXConfig->SlotActive;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	675a      	str	r2, [r3, #116]	; 0x74

  if (HAL_SAI_Init(hsai) != HAL_OK)
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f00c f889 	bl	8010858 <HAL_SAI_Init>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <MX_SAI2_Block_A_Init+0xf8>
  {
    ret = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(hsai);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800475e:	601a      	str	r2, [r3, #0]

  return ret;
 8004760:	7bfb      	ldrb	r3, [r7, #15]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <MX_SAI2_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI2_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t SampleRate)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b0b2      	sub	sp, #200	; 0xc8
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
 8004772:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004774:	f107 0308 	add.w	r3, r7, #8
 8004778:	4618      	mov	r0, r3
 800477a:	f00a fbe7 	bl	800ef4c <HAL_RCCEx_GetPeriphCLKConfig>

  /* Set the PLL configuration according to the audio frequency */
  if((SampleRate == AUDIO_FREQUENCY_11K) || (SampleRate == AUDIO_FREQUENCY_22K) || (SampleRate == AUDIO_FREQUENCY_44K))
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	f642 3211 	movw	r2, #11025	; 0x2b11
 8004784:	4293      	cmp	r3, r2
 8004786:	d009      	beq.n	800479c <MX_SAI2_ClockConfig+0x32>
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	f245 6222 	movw	r2, #22050	; 0x5622
 800478e:	4293      	cmp	r3, r2
 8004790:	d004      	beq.n	800479c <MX_SAI2_ClockConfig+0x32>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004798:	4293      	cmp	r3, r2
 800479a:	d10d      	bne.n	80047b8 <MX_SAI2_ClockConfig+0x4e>
  {
    /* SAI clock config:
    PLL2_VCO Input = HSE_VALUE/PLL2M = 1 Mhz
    PLL2_VCO Output = PLL2_VCO Input * PLL2N = 429 Mhz
    SAI_CLK_x = PLL2_VCO Output/PLL2P = 429/38 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800479c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047a0:	f04f 0300 	mov.w	r3, #0
 80047a4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    rcc_ex_clk_init_struct.Sai23ClockSelection = RCC_SAI2CLKSOURCE_PLL2;
 80047a8:	2340      	movs	r3, #64	; 0x40
 80047aa:	667b      	str	r3, [r7, #100]	; 0x64
    rcc_ex_clk_init_struct.PLL2.PLL2P = 38;
 80047ac:	2326      	movs	r3, #38	; 0x26
 80047ae:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 429;
 80047b0:	f240 13ad 	movw	r3, #429	; 0x1ad
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	e00c      	b.n	80047d2 <MX_SAI2_ClockConfig+0x68>
  {
    /* SAI clock config:
    PLL2_VCO Input = HSE_VALUE/PLL2M = 1 Mhz
    PLL2_VCO Output = PLL2_VCO Input * PLL2N = 344 Mhz
    SAI_CLK_x = PLL2_VCO Output/PLL2P = 344/7 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80047b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047bc:	f04f 0300 	mov.w	r3, #0
 80047c0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    rcc_ex_clk_init_struct.Sai23ClockSelection = RCC_SAI2CLKSOURCE_PLL2;
 80047c4:	2340      	movs	r3, #64	; 0x40
 80047c6:	667b      	str	r3, [r7, #100]	; 0x64
    rcc_ex_clk_init_struct.PLL2.PLL2P = 7;
 80047c8:	2307      	movs	r3, #7
 80047ca:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 344;
 80047cc:	f44f 73ac 	mov.w	r3, #344	; 0x158
 80047d0:	617b      	str	r3, [r7, #20]

  }
  rcc_ex_clk_init_struct.PLL2.PLL2Q = 1;
 80047d2:	2301      	movs	r3, #1
 80047d4:	61fb      	str	r3, [r7, #28]
  rcc_ex_clk_init_struct.PLL2.PLL2R = 1;
 80047d6:	2301      	movs	r3, #1
 80047d8:	623b      	str	r3, [r7, #32]
  rcc_ex_clk_init_struct.PLL2.PLL2M = 25;
 80047da:	2319      	movs	r3, #25
 80047dc:	613b      	str	r3, [r7, #16]
  return  HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80047de:	f107 0308 	add.w	r3, r7, #8
 80047e2:	4618      	mov	r0, r3
 80047e4:	f009 f9a8 	bl	800db38 <HAL_RCCEx_PeriphCLKConfig>
 80047e8:	4603      	mov	r3, r0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	37c8      	adds	r7, #200	; 0xc8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <MX_SAI4_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI4_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t SampleRate)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b0b4      	sub	sp, #208	; 0xd0
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  HAL_StatusTypeDef ret = HAL_OK;
 80047fc:	2300      	movs	r3, #0
 80047fe:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8004802:	f107 0308 	add.w	r3, r7, #8
 8004806:	4618      	mov	r0, r3
 8004808:	f00a fba0 	bl	800ef4c <HAL_RCCEx_GetPeriphCLKConfig>

  /* Set the PLL configuration according to the audio frequency */
  if((SampleRate == AUDIO_FREQUENCY_11K) || (SampleRate == AUDIO_FREQUENCY_22K) || (SampleRate == AUDIO_FREQUENCY_44K))
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	f642 3211 	movw	r2, #11025	; 0x2b11
 8004812:	4293      	cmp	r3, r2
 8004814:	d009      	beq.n	800482a <MX_SAI4_ClockConfig+0x38>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	f245 6222 	movw	r2, #22050	; 0x5622
 800481c:	4293      	cmp	r3, r2
 800481e:	d004      	beq.n	800482a <MX_SAI4_ClockConfig+0x38>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004826:	4293      	cmp	r3, r2
 8004828:	d105      	bne.n	8004836 <MX_SAI4_ClockConfig+0x44>
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 38;
 800482a:	2326      	movs	r3, #38	; 0x26
 800482c:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 429;
 800482e:	f240 13ad 	movw	r3, #429	; 0x1ad
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	e004      	b.n	8004840 <MX_SAI4_ClockConfig+0x4e>
  }
  else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_32K, AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_96K */
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 7;
 8004836:	2307      	movs	r3, #7
 8004838:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 344;
 800483a:	f44f 73ac 	mov.w	r3, #344	; 0x158
 800483e:	617b      	str	r3, [r7, #20]
  }
  /* SAI clock config */
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 8004840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	e9c7 2302 	strd	r2, r3, [r7, #8]
  rcc_ex_clk_init_struct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL2;
 800484c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004850:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  rcc_ex_clk_init_struct.PLL2.PLL2Q = 1;
 8004854:	2301      	movs	r3, #1
 8004856:	61fb      	str	r3, [r7, #28]
  rcc_ex_clk_init_struct.PLL2.PLL2R = 1;
 8004858:	2301      	movs	r3, #1
 800485a:	623b      	str	r3, [r7, #32]
  rcc_ex_clk_init_struct.PLL2.PLL2M = 25;
 800485c:	2319      	movs	r3, #25
 800485e:	613b      	str	r3, [r7, #16]
  if(HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct) != HAL_OK)
 8004860:	f107 0308 	add.w	r3, r7, #8
 8004864:	4618      	mov	r0, r3
 8004866:	f009 f967 	bl	800db38 <HAL_RCCEx_PeriphCLKConfig>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <MX_SAI4_ClockConfig+0x84>
  {
    ret = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
  }

  return ret;
 8004876:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
}
 800487a:	4618      	mov	r0, r3
 800487c:	37d0      	adds	r7, #208	; 0xd0
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
	...

08004884 <BSP_AUDIO_OUT_Play>:
  * @param  NbrOfBytes   Size of total samples in bytes
  *                      BitsPerSample: 16 or 32
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_Play(uint32_t Instance, uint8_t *pData, uint32_t NbrOfBytes)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8004890:	2300      	movs	r3, #0
 8004892:	617b      	str	r3, [r7, #20]

  if ((Instance >= AUDIO_OUT_INSTANCES_NBR) || (((NbrOfBytes / (Audio_Out_Ctx[Instance].BitsPerSample / 8U)) > 0xFFFFU)))
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10f      	bne.n	80048ba <BSP_AUDIO_OUT_Play+0x36>
 800489a:	492c      	ldr	r1, [pc, #176]	; (800494c <BSP_AUDIO_OUT_Play+0xc8>)
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	4613      	mov	r3, r2
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	4413      	add	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	440b      	add	r3, r1
 80048a8:	330c      	adds	r3, #12
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	08db      	lsrs	r3, r3, #3
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b8:	d303      	bcc.n	80048c2 <BSP_AUDIO_OUT_Play+0x3e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80048ba:	f06f 0301 	mvn.w	r3, #1
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	e03f      	b.n	8004942 <BSP_AUDIO_OUT_Play+0xbe>
  }
  else if (Audio_Out_Ctx[Instance].State != AUDIO_OUT_STATE_STOP)
 80048c2:	4922      	ldr	r1, [pc, #136]	; (800494c <BSP_AUDIO_OUT_Play+0xc8>)
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	4613      	mov	r3, r2
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	4413      	add	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	440b      	add	r3, r1
 80048d0:	331c      	adds	r3, #28
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d003      	beq.n	80048e0 <BSP_AUDIO_OUT_Play+0x5c>
  {
    ret = BSP_ERROR_BUSY;
 80048d8:	f06f 0302 	mvn.w	r3, #2
 80048dc:	617b      	str	r3, [r7, #20]
 80048de:	e030      	b.n	8004942 <BSP_AUDIO_OUT_Play+0xbe>
  }
  else if (HAL_SAI_Transmit_DMA(&haudio_out_sai, pData, (uint16_t)(NbrOfBytes / (Audio_Out_Ctx[Instance].BitsPerSample / 8U))) != HAL_OK)
 80048e0:	491a      	ldr	r1, [pc, #104]	; (800494c <BSP_AUDIO_OUT_Play+0xc8>)
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	4613      	mov	r3, r2
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	4413      	add	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	440b      	add	r3, r1
 80048ee:	330c      	adds	r3, #12
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	08db      	lsrs	r3, r3, #3
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	461a      	mov	r2, r3
 80048fe:	68b9      	ldr	r1, [r7, #8]
 8004900:	4813      	ldr	r0, [pc, #76]	; (8004950 <BSP_AUDIO_OUT_Play+0xcc>)
 8004902:	f00c fb9f 	bl	8011044 <HAL_SAI_Transmit_DMA>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d003      	beq.n	8004914 <BSP_AUDIO_OUT_Play+0x90>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 800490c:	f06f 0303 	mvn.w	r3, #3
 8004910:	617b      	str	r3, [r7, #20]
 8004912:	e016      	b.n	8004942 <BSP_AUDIO_OUT_Play+0xbe>
  }
  else
  {
    if (Audio_Drv->Play(Audio_CompObj) < 0)
 8004914:	4b0f      	ldr	r3, [pc, #60]	; (8004954 <BSP_AUDIO_OUT_Play+0xd0>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	4a0f      	ldr	r2, [pc, #60]	; (8004958 <BSP_AUDIO_OUT_Play+0xd4>)
 800491c:	6812      	ldr	r2, [r2, #0]
 800491e:	4610      	mov	r0, r2
 8004920:	4798      	blx	r3
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	da02      	bge.n	800492e <BSP_AUDIO_OUT_Play+0xaa>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004928:	f06f 0304 	mvn.w	r3, #4
 800492c:	617b      	str	r3, [r7, #20]
    }
    /* Update BSP AUDIO OUT state */
    Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_PLAYING;
 800492e:	4907      	ldr	r1, [pc, #28]	; (800494c <BSP_AUDIO_OUT_Play+0xc8>)
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	4613      	mov	r3, r2
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	4413      	add	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	440b      	add	r3, r1
 800493c:	331c      	adds	r3, #28
 800493e:	2201      	movs	r2, #1
 8004940:	601a      	str	r2, [r3, #0]
  }

  /* Return BSP status */
  return ret;
 8004942:	697b      	ldr	r3, [r7, #20]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	240072c4 	.word	0x240072c4
 8004950:	2400722c 	.word	0x2400722c
 8004954:	24007180 	.word	0x24007180
 8004958:	24007228 	.word	0x24007228

0800495c <BSP_AUDIO_OUT_Pause>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play()
  *          function for resume could lead to unexpected behavior).
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_Pause(uint32_t Instance)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8004964:	2300      	movs	r3, #0
 8004966:	60fb      	str	r3, [r7, #12]

  if (Instance >= AUDIO_OUT_INSTANCES_NBR)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <BSP_AUDIO_OUT_Pause+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800496e:	f06f 0301 	mvn.w	r3, #1
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	e030      	b.n	80049d8 <BSP_AUDIO_OUT_Pause+0x7c>
  }/* Check audio out state */
  else if (Audio_Out_Ctx[Instance].State != AUDIO_OUT_STATE_PLAYING)
 8004976:	491b      	ldr	r1, [pc, #108]	; (80049e4 <BSP_AUDIO_OUT_Pause+0x88>)
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	4613      	mov	r3, r2
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	4413      	add	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	440b      	add	r3, r1
 8004984:	331c      	adds	r3, #28
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d003      	beq.n	8004994 <BSP_AUDIO_OUT_Pause+0x38>
  {
    ret = BSP_ERROR_BUSY;
 800498c:	f06f 0302 	mvn.w	r3, #2
 8004990:	60fb      	str	r3, [r7, #12]
 8004992:	e021      	b.n	80049d8 <BSP_AUDIO_OUT_Pause+0x7c>
  }/* Call the Media layer pause function */
  else if (HAL_SAI_DMAPause(&haudio_out_sai) != HAL_OK)
 8004994:	4814      	ldr	r0, [pc, #80]	; (80049e8 <BSP_AUDIO_OUT_Pause+0x8c>)
 8004996:	f00c fa83 	bl	8010ea0 <HAL_SAI_DMAPause>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <BSP_AUDIO_OUT_Pause+0x4c>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 80049a0:	f06f 0303 	mvn.w	r3, #3
 80049a4:	60fb      	str	r3, [r7, #12]
 80049a6:	e017      	b.n	80049d8 <BSP_AUDIO_OUT_Pause+0x7c>
  }/* Call the Audio Codec Pause/Resume function */
  else if (Audio_Drv->Pause(Audio_CompObj) < 0)
 80049a8:	4b10      	ldr	r3, [pc, #64]	; (80049ec <BSP_AUDIO_OUT_Pause+0x90>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	4a10      	ldr	r2, [pc, #64]	; (80049f0 <BSP_AUDIO_OUT_Pause+0x94>)
 80049b0:	6812      	ldr	r2, [r2, #0]
 80049b2:	4610      	mov	r0, r2
 80049b4:	4798      	blx	r3
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	da03      	bge.n	80049c4 <BSP_AUDIO_OUT_Pause+0x68>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80049bc:	f06f 0304 	mvn.w	r3, #4
 80049c0:	60fb      	str	r3, [r7, #12]
 80049c2:	e009      	b.n	80049d8 <BSP_AUDIO_OUT_Pause+0x7c>
  }
  else
  {
    /* Update BSP AUDIO OUT state */
    Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_PAUSE;
 80049c4:	4907      	ldr	r1, [pc, #28]	; (80049e4 <BSP_AUDIO_OUT_Pause+0x88>)
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	4613      	mov	r3, r2
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	4413      	add	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	440b      	add	r3, r1
 80049d2:	331c      	adds	r3, #28
 80049d4:	2203      	movs	r2, #3
 80049d6:	601a      	str	r2, [r3, #0]
  }

  /* Return BSP status */
  return ret;
 80049d8:	68fb      	ldr	r3, [r7, #12]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	240072c4 	.word	0x240072c4
 80049e8:	2400722c 	.word	0x2400722c
 80049ec:	24007180 	.word	0x24007180
 80049f0:	24007228 	.word	0x24007228

080049f4 <BSP_AUDIO_OUT_Resume>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play()
  *          function for resume could lead to unexpected behavior).
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_Resume(uint32_t Instance)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80049fc:	2300      	movs	r3, #0
 80049fe:	60fb      	str	r3, [r7, #12]

  if (Instance >= AUDIO_OUT_INSTANCES_NBR)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <BSP_AUDIO_OUT_Resume+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004a06:	f06f 0301 	mvn.w	r3, #1
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	e030      	b.n	8004a70 <BSP_AUDIO_OUT_Resume+0x7c>
  }/* Check audio out state */
  else if (Audio_Out_Ctx[Instance].State != AUDIO_OUT_STATE_PAUSE)
 8004a0e:	491b      	ldr	r1, [pc, #108]	; (8004a7c <BSP_AUDIO_OUT_Resume+0x88>)
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	4613      	mov	r3, r2
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	4413      	add	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	440b      	add	r3, r1
 8004a1c:	331c      	adds	r3, #28
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b03      	cmp	r3, #3
 8004a22:	d003      	beq.n	8004a2c <BSP_AUDIO_OUT_Resume+0x38>
  {
    ret = BSP_ERROR_BUSY;
 8004a24:	f06f 0302 	mvn.w	r3, #2
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	e021      	b.n	8004a70 <BSP_AUDIO_OUT_Resume+0x7c>
  }/* Call the audio codec resume function */
  else if (Audio_Drv->Resume(Audio_CompObj) < 0)
 8004a2c:	4b14      	ldr	r3, [pc, #80]	; (8004a80 <BSP_AUDIO_OUT_Resume+0x8c>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	4a14      	ldr	r2, [pc, #80]	; (8004a84 <BSP_AUDIO_OUT_Resume+0x90>)
 8004a34:	6812      	ldr	r2, [r2, #0]
 8004a36:	4610      	mov	r0, r2
 8004a38:	4798      	blx	r3
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	da03      	bge.n	8004a48 <BSP_AUDIO_OUT_Resume+0x54>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004a40:	f06f 0304 	mvn.w	r3, #4
 8004a44:	60fb      	str	r3, [r7, #12]
 8004a46:	e013      	b.n	8004a70 <BSP_AUDIO_OUT_Resume+0x7c>
  }/* Call the Media layer pause/resume function */
  else if (HAL_SAI_DMAResume(&haudio_out_sai) != HAL_OK)
 8004a48:	480f      	ldr	r0, [pc, #60]	; (8004a88 <BSP_AUDIO_OUT_Resume+0x94>)
 8004a4a:	f00c fa4b 	bl	8010ee4 <HAL_SAI_DMAResume>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d003      	beq.n	8004a5c <BSP_AUDIO_OUT_Resume+0x68>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8004a54:	f06f 0303 	mvn.w	r3, #3
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	e009      	b.n	8004a70 <BSP_AUDIO_OUT_Resume+0x7c>
  }
  else
  {
    /* Update BSP AUDIO OUT state */
    Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_PLAYING;
 8004a5c:	4907      	ldr	r1, [pc, #28]	; (8004a7c <BSP_AUDIO_OUT_Resume+0x88>)
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	4613      	mov	r3, r2
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	4413      	add	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	440b      	add	r3, r1
 8004a6a:	331c      	adds	r3, #28
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]
  }

  /* Return BSP status */
  return ret;
 8004a70:	68fb      	ldr	r3, [r7, #12]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	240072c4 	.word	0x240072c4
 8004a80:	24007180 	.word	0x24007180
 8004a84:	24007228 	.word	0x24007228
 8004a88:	2400722c 	.word	0x2400722c

08004a8c <BSP_AUDIO_OUT_Stop>:
  * @brief  Stops audio playing and Power down the Audio Codec.
  * @param Instance :  AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_Stop(uint32_t Instance)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8004a94:	2300      	movs	r3, #0
 8004a96:	60fb      	str	r3, [r7, #12]

  if (Instance >= AUDIO_OUT_INSTANCES_NBR)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <BSP_AUDIO_OUT_Stop+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004a9e:	f06f 0301 	mvn.w	r3, #1
 8004aa2:	60fb      	str	r3, [r7, #12]
 8004aa4:	e047      	b.n	8004b36 <BSP_AUDIO_OUT_Stop+0xaa>
  }/* Check audio out state */
  else if (Audio_Out_Ctx[Instance].State == AUDIO_OUT_STATE_STOP)
 8004aa6:	4926      	ldr	r1, [pc, #152]	; (8004b40 <BSP_AUDIO_OUT_Stop+0xb4>)
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	00db      	lsls	r3, r3, #3
 8004aae:	4413      	add	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	440b      	add	r3, r1
 8004ab4:	331c      	adds	r3, #28
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d03c      	beq.n	8004b36 <BSP_AUDIO_OUT_Stop+0xaa>
  {
    /* Nothing to do */
  }
  else if ((Audio_Out_Ctx[Instance].State != AUDIO_OUT_STATE_PLAYING) &&
 8004abc:	4920      	ldr	r1, [pc, #128]	; (8004b40 <BSP_AUDIO_OUT_Stop+0xb4>)
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	4413      	add	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	440b      	add	r3, r1
 8004aca:	331c      	adds	r3, #28
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d00e      	beq.n	8004af0 <BSP_AUDIO_OUT_Stop+0x64>
           (Audio_Out_Ctx[Instance].State != AUDIO_OUT_STATE_PAUSE))
 8004ad2:	491b      	ldr	r1, [pc, #108]	; (8004b40 <BSP_AUDIO_OUT_Stop+0xb4>)
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	4413      	add	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	440b      	add	r3, r1
 8004ae0:	331c      	adds	r3, #28
 8004ae2:	681b      	ldr	r3, [r3, #0]
  else if ((Audio_Out_Ctx[Instance].State != AUDIO_OUT_STATE_PLAYING) &&
 8004ae4:	2b03      	cmp	r3, #3
 8004ae6:	d003      	beq.n	8004af0 <BSP_AUDIO_OUT_Stop+0x64>
  {
    ret = BSP_ERROR_BUSY;
 8004ae8:	f06f 0302 	mvn.w	r3, #2
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	e022      	b.n	8004b36 <BSP_AUDIO_OUT_Stop+0xaa>
  }/* Call the Media layer stop function */
  else if (Audio_Drv->Stop(Audio_CompObj, CODEC_PDWN_SW) < 0)
 8004af0:	4b14      	ldr	r3, [pc, #80]	; (8004b44 <BSP_AUDIO_OUT_Stop+0xb8>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	4a14      	ldr	r2, [pc, #80]	; (8004b48 <BSP_AUDIO_OUT_Stop+0xbc>)
 8004af8:	6812      	ldr	r2, [r2, #0]
 8004afa:	2101      	movs	r1, #1
 8004afc:	4610      	mov	r0, r2
 8004afe:	4798      	blx	r3
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	da03      	bge.n	8004b0e <BSP_AUDIO_OUT_Stop+0x82>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004b06:	f06f 0304 	mvn.w	r3, #4
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	e013      	b.n	8004b36 <BSP_AUDIO_OUT_Stop+0xaa>
  }
  else if (HAL_SAI_DMAStop(&haudio_out_sai) != HAL_OK)
 8004b0e:	480f      	ldr	r0, [pc, #60]	; (8004b4c <BSP_AUDIO_OUT_Stop+0xc0>)
 8004b10:	f00c fa19 	bl	8010f46 <HAL_SAI_DMAStop>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <BSP_AUDIO_OUT_Stop+0x96>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8004b1a:	f06f 0303 	mvn.w	r3, #3
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	e009      	b.n	8004b36 <BSP_AUDIO_OUT_Stop+0xaa>
  }
  else
  {
    /* Update BSP AUDIO OUT state */
    Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_STOP;
 8004b22:	4907      	ldr	r1, [pc, #28]	; (8004b40 <BSP_AUDIO_OUT_Stop+0xb4>)
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	4613      	mov	r3, r2
 8004b28:	00db      	lsls	r3, r3, #3
 8004b2a:	4413      	add	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	440b      	add	r3, r1
 8004b30:	331c      	adds	r3, #28
 8004b32:	2202      	movs	r2, #2
 8004b34:	601a      	str	r2, [r3, #0]
  }

  /* Return BSP status */
  return ret;
 8004b36:	68fb      	ldr	r3, [r7, #12]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	240072c4 	.word	0x240072c4
 8004b44:	24007180 	.word	0x24007180
 8004b48:	24007228 	.word	0x24007228
 8004b4c:	2400722c 	.word	0x2400722c

08004b50 <BSP_AUDIO_OUT_SetVolume>:
  * @param  Volume    Volume level to be set in percentage from 0% to 100% (0 for
  *         Mute and 100 for Max volume level).
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_SetVolume(uint32_t Instance, uint32_t Volume)
{
 8004b50:	b590      	push	{r4, r7, lr}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60fb      	str	r3, [r7, #12]

  if ((Instance >= AUDIO_OUT_INSTANCES_NBR) || (Volume > 100U))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d102      	bne.n	8004b6a <BSP_AUDIO_OUT_SetVolume+0x1a>
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	2b64      	cmp	r3, #100	; 0x64
 8004b68:	d903      	bls.n	8004b72 <BSP_AUDIO_OUT_SetVolume+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004b6a:	f06f 0301 	mvn.w	r3, #1
 8004b6e:	60fb      	str	r3, [r7, #12]
 8004b70:	e03e      	b.n	8004bf0 <BSP_AUDIO_OUT_SetVolume+0xa0>
  }
  else
  {
    /* Call the codec volume control function with converted volume value */
    if (Audio_Drv->SetVolume(Audio_CompObj, AUDIO_VOLUME_OUTPUT, VOLUME_OUT_CONVERT(Volume)) < 0)
 8004b72:	4b22      	ldr	r3, [pc, #136]	; (8004bfc <BSP_AUDIO_OUT_SetVolume+0xac>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004b78:	4b21      	ldr	r3, [pc, #132]	; (8004c00 <BSP_AUDIO_OUT_SetVolume+0xb0>)
 8004b7a:	6818      	ldr	r0, [r3, #0]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	2b64      	cmp	r3, #100	; 0x64
 8004b80:	d809      	bhi.n	8004b96 <BSP_AUDIO_OUT_SetVolume+0x46>
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	4613      	mov	r3, r2
 8004b86:	019b      	lsls	r3, r3, #6
 8004b88:	1a9b      	subs	r3, r3, r2
 8004b8a:	4a1e      	ldr	r2, [pc, #120]	; (8004c04 <BSP_AUDIO_OUT_SetVolume+0xb4>)
 8004b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b90:	095b      	lsrs	r3, r3, #5
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	e000      	b.n	8004b98 <BSP_AUDIO_OUT_SetVolume+0x48>
 8004b96:	233f      	movs	r3, #63	; 0x3f
 8004b98:	461a      	mov	r2, r3
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	47a0      	blx	r4
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	da03      	bge.n	8004bac <BSP_AUDIO_OUT_SetVolume+0x5c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004ba4:	f06f 0304 	mvn.w	r3, #4
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	e017      	b.n	8004bdc <BSP_AUDIO_OUT_SetVolume+0x8c>
    }
    else if (Volume == 0U)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10a      	bne.n	8004bc8 <BSP_AUDIO_OUT_SetVolume+0x78>
    {
      /* Update Mute State */
      Audio_Out_Ctx[Instance].IsMute = BSP_AUDIO_MUTE_ENABLED;
 8004bb2:	4915      	ldr	r1, [pc, #84]	; (8004c08 <BSP_AUDIO_OUT_SetVolume+0xb8>)
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	4413      	add	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	440b      	add	r3, r1
 8004bc0:	3318      	adds	r3, #24
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	e009      	b.n	8004bdc <BSP_AUDIO_OUT_SetVolume+0x8c>
    }
    else
    {
      /* Update Mute State */
      Audio_Out_Ctx[Instance].IsMute = BSP_AUDIO_MUTE_DISABLED;
 8004bc8:	490f      	ldr	r1, [pc, #60]	; (8004c08 <BSP_AUDIO_OUT_SetVolume+0xb8>)
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	4413      	add	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	3318      	adds	r3, #24
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]
    }
    Audio_Out_Ctx[Instance].Volume = Volume;
 8004bdc:	490a      	ldr	r1, [pc, #40]	; (8004c08 <BSP_AUDIO_OUT_SetVolume+0xb8>)
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	4613      	mov	r3, r2
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	4413      	add	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	3310      	adds	r3, #16
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	601a      	str	r2, [r3, #0]
  }

  /* Return BSP status */
  return ret;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd90      	pop	{r4, r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	24007180 	.word	0x24007180
 8004c00:	24007228 	.word	0x24007228
 8004c04:	51eb851f 	.word	0x51eb851f
 8004c08:	240072c4 	.word	0x240072c4

08004c0c <BSP_AUDIO_OUT_SetSampleRate>:
  * @note   This API should be called after the BSP_AUDIO_OUT_Init() to adjust the
  *         audio frequency.
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_SetSampleRate(uint32_t Instance, uint32_t SampleRate)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004c16:	2300      	movs	r3, #0
 8004c18:	60fb      	str	r3, [r7, #12]

  if (Instance >= AUDIO_OUT_INSTANCES_NBR)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <BSP_AUDIO_OUT_SetSampleRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004c20:	f06f 0301 	mvn.w	r3, #1
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	e058      	b.n	8004cda <BSP_AUDIO_OUT_SetSampleRate+0xce>
  }
  /* Check audio out state */
  else if (Audio_Out_Ctx[Instance].State != AUDIO_OUT_STATE_STOP)
 8004c28:	492e      	ldr	r1, [pc, #184]	; (8004ce4 <BSP_AUDIO_OUT_SetSampleRate+0xd8>)
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	4413      	add	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	440b      	add	r3, r1
 8004c36:	331c      	adds	r3, #28
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d003      	beq.n	8004c46 <BSP_AUDIO_OUT_SetSampleRate+0x3a>
  {
    ret = BSP_ERROR_BUSY;
 8004c3e:	f06f 0302 	mvn.w	r3, #2
 8004c42:	60fb      	str	r3, [r7, #12]
 8004c44:	e049      	b.n	8004cda <BSP_AUDIO_OUT_SetSampleRate+0xce>
  }
  /* Check if record on instance 0 is on going and corresponding sample rate */
  else if ((Audio_In_Ctx[0].State != AUDIO_IN_STATE_RESET) &&
 8004c46:	4b28      	ldr	r3, [pc, #160]	; (8004ce8 <BSP_AUDIO_OUT_SetSampleRate+0xdc>)
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d008      	beq.n	8004c60 <BSP_AUDIO_OUT_SetSampleRate+0x54>
           (Audio_In_Ctx[0].SampleRate != SampleRate))
 8004c4e:	4b26      	ldr	r3, [pc, #152]	; (8004ce8 <BSP_AUDIO_OUT_SetSampleRate+0xdc>)
 8004c50:	689b      	ldr	r3, [r3, #8]
  else if ((Audio_In_Ctx[0].State != AUDIO_IN_STATE_RESET) &&
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d003      	beq.n	8004c60 <BSP_AUDIO_OUT_SetSampleRate+0x54>
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8004c58:	f06f 030a 	mvn.w	r3, #10
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	e03c      	b.n	8004cda <BSP_AUDIO_OUT_SetSampleRate+0xce>
  }/* Check if sample rate is modified */
  else if (Audio_Out_Ctx[Instance].SampleRate == SampleRate)
 8004c60:	4920      	ldr	r1, [pc, #128]	; (8004ce4 <BSP_AUDIO_OUT_SetSampleRate+0xd8>)
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	4613      	mov	r3, r2
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	4413      	add	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	440b      	add	r3, r1
 8004c6e:	3308      	adds	r3, #8
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d030      	beq.n	8004cda <BSP_AUDIO_OUT_SetSampleRate+0xce>
    /* Nothing to do */
  }
  else
  {
    /* Call the Codec output device function */
    if (Audio_Drv->SetFrequency(Audio_CompObj, SampleRate) != 0)
 8004c78:	4b1c      	ldr	r3, [pc, #112]	; (8004cec <BSP_AUDIO_OUT_SetSampleRate+0xe0>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	4a1c      	ldr	r2, [pc, #112]	; (8004cf0 <BSP_AUDIO_OUT_SetSampleRate+0xe4>)
 8004c80:	6812      	ldr	r2, [r2, #0]
 8004c82:	6839      	ldr	r1, [r7, #0]
 8004c84:	4610      	mov	r0, r2
 8004c86:	4798      	blx	r3
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <BSP_AUDIO_OUT_SetSampleRate+0x8a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004c8e:	f06f 0304 	mvn.w	r3, #4
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	e021      	b.n	8004cda <BSP_AUDIO_OUT_SetSampleRate+0xce>
    }
    else
    {
      /* Update the SAI audio frequency configuration */
      haudio_out_sai.Init.AudioFrequency = SampleRate;
 8004c96:	4a17      	ldr	r2, [pc, #92]	; (8004cf4 <BSP_AUDIO_OUT_SetSampleRate+0xe8>)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	6213      	str	r3, [r2, #32]
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if (MX_SAI2_ClockConfig(&haudio_out_sai, SampleRate) != HAL_OK)
 8004c9c:	6839      	ldr	r1, [r7, #0]
 8004c9e:	4815      	ldr	r0, [pc, #84]	; (8004cf4 <BSP_AUDIO_OUT_SetSampleRate+0xe8>)
 8004ca0:	f7ff fd63 	bl	800476a <MX_SAI2_ClockConfig>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <BSP_AUDIO_OUT_SetSampleRate+0xa6>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8004caa:	f06f 0303 	mvn.w	r3, #3
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	e013      	b.n	8004cda <BSP_AUDIO_OUT_SetSampleRate+0xce>
      }
      else if (HAL_SAI_Init(&haudio_out_sai) != HAL_OK)
 8004cb2:	4810      	ldr	r0, [pc, #64]	; (8004cf4 <BSP_AUDIO_OUT_SetSampleRate+0xe8>)
 8004cb4:	f00b fdd0 	bl	8010858 <HAL_SAI_Init>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <BSP_AUDIO_OUT_SetSampleRate+0xba>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8004cbe:	f06f 0303 	mvn.w	r3, #3
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	e009      	b.n	8004cda <BSP_AUDIO_OUT_SetSampleRate+0xce>
      }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
      /* Store new sample rate */
      else
      {
        Audio_Out_Ctx[Instance].SampleRate = SampleRate;
 8004cc6:	4907      	ldr	r1, [pc, #28]	; (8004ce4 <BSP_AUDIO_OUT_SetSampleRate+0xd8>)
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	440b      	add	r3, r1
 8004cd4:	3308      	adds	r3, #8
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8004cda:	68fb      	ldr	r3, [r7, #12]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	240072c4 	.word	0x240072c4
 8004ce8:	24007380 	.word	0x24007380
 8004cec:	24007180 	.word	0x24007180
 8004cf0:	24007228 	.word	0x24007228
 8004cf4:	2400722c 	.word	0x2400722c

08004cf8 <BSP_AUDIO_OUT_GetState>:
  * @param Instance :  AUDIO OUT Instance. It can only be 0 (SAI)
  * @param  State     Audio Out state
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_GetState(uint32_t Instance, uint32_t *State)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004d02:	2300      	movs	r3, #0
 8004d04:	60fb      	str	r3, [r7, #12]

  if (Instance >= AUDIO_OUT_INSTANCES_NBR)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <BSP_AUDIO_OUT_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004d0c:	f06f 0301 	mvn.w	r3, #1
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	e00a      	b.n	8004d2a <BSP_AUDIO_OUT_GetState+0x32>
  }
  else
  {
    /* Return audio Output State */
    *State = Audio_Out_Ctx[Instance].State;
 8004d14:	4908      	ldr	r1, [pc, #32]	; (8004d38 <BSP_AUDIO_OUT_GetState+0x40>)
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	4413      	add	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	440b      	add	r3, r1
 8004d22:	331c      	adds	r3, #28
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	601a      	str	r2, [r3, #0]
  }

  /* Return BSP status */
  return ret;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	240072c4 	.word	0x240072c4

08004d3c <BSP_AUDIO_OUT_IRQHandler>:
  * @brief  This function handles Audio Out DMA interrupt requests.
  * @param  Instance Audio OUT instance
  * @retval None
  */
void BSP_AUDIO_OUT_IRQHandler(uint32_t Instance)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  if (Instance == 0U)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d105      	bne.n	8004d56 <BSP_AUDIO_OUT_IRQHandler+0x1a>
  {
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8004d4a:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <BSP_AUDIO_OUT_IRQHandler+0x24>)
 8004d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d50:	4618      	mov	r0, r3
 8004d52:	f004 fb63 	bl	800941c <HAL_DMA_IRQHandler>
  }
}
 8004d56:	bf00      	nop
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	2400722c 	.word	0x2400722c

08004d64 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32h750b_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack(0);
 8004d6c:	2000      	movs	r0, #0
 8004d6e:	f7fb ff37 	bl	8000be0 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8004d72:	bf00      	nop
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b082      	sub	sp, #8
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32h750b_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack(0);
 8004d82:	2000      	movs	r0, #0
 8004d84:	f7fb ff42 	bl	8000c0c <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8004d88:	bf00      	nop
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  if (hsai->Instance == AUDIO_OUT_SAIx)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a06      	ldr	r2, [pc, #24]	; (8004db8 <HAL_SAI_ErrorCallback+0x28>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d103      	bne.n	8004daa <HAL_SAI_ErrorCallback+0x1a>
  {
    BSP_AUDIO_OUT_Error_CallBack(0);
 8004da2:	2000      	movs	r0, #0
 8004da4:	f7fb ff48 	bl	8000c38 <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_Error_CallBack(0);
  }
}
 8004da8:	e002      	b.n	8004db0 <HAL_SAI_ErrorCallback+0x20>
    BSP_AUDIO_IN_Error_CallBack(0);
 8004daa:	2000      	movs	r0, #0
 8004dac:	f000 fcc4 	bl	8005738 <BSP_AUDIO_IN_Error_CallBack>
}
 8004db0:	bf00      	nop
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40015c04 	.word	0x40015c04

08004dbc <BSP_AUDIO_IN_Init>:
  *       - 1 if SAI PDM is used
  * @param  AudioInit Init structure
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_Init(uint32_t Instance, BSP_AUDIO_Init_t *AudioInit)
{
 8004dbc:	b590      	push	{r4, r7, lr}
 8004dbe:	b095      	sub	sp, #84	; 0x54
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d903      	bls.n	8004dd8 <BSP_AUDIO_IN_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004dd0:	f06f 0301 	mvn.w	r3, #1
 8004dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dd6:	e17c      	b.n	80050d2 <BSP_AUDIO_IN_Init+0x316>
  }
  else
  {
    /* Store the audio record context */
    Audio_In_Ctx[Instance].Device = AudioInit->Device;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	6819      	ldr	r1, [r3, #0]
 8004ddc:	489e      	ldr	r0, [pc, #632]	; (8005058 <BSP_AUDIO_IN_Init+0x29c>)
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	4613      	mov	r3, r2
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	4413      	add	r3, r2
 8004de6:	011b      	lsls	r3, r3, #4
 8004de8:	4403      	add	r3, r0
 8004dea:	3304      	adds	r3, #4
 8004dec:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].ChannelsNbr = AudioInit->ChannelsNbr;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	68d9      	ldr	r1, [r3, #12]
 8004df2:	4899      	ldr	r0, [pc, #612]	; (8005058 <BSP_AUDIO_IN_Init+0x29c>)
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	4613      	mov	r3, r2
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	4413      	add	r3, r2
 8004dfc:	011b      	lsls	r3, r3, #4
 8004dfe:	4403      	add	r3, r0
 8004e00:	3310      	adds	r3, #16
 8004e02:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].SampleRate = AudioInit->SampleRate;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	6859      	ldr	r1, [r3, #4]
 8004e08:	4893      	ldr	r0, [pc, #588]	; (8005058 <BSP_AUDIO_IN_Init+0x29c>)
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	4413      	add	r3, r2
 8004e12:	011b      	lsls	r3, r3, #4
 8004e14:	4403      	add	r3, r0
 8004e16:	3308      	adds	r3, #8
 8004e18:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].BitsPerSample = AudioInit->BitsPerSample;
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	6899      	ldr	r1, [r3, #8]
 8004e1e:	488e      	ldr	r0, [pc, #568]	; (8005058 <BSP_AUDIO_IN_Init+0x29c>)
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	4613      	mov	r3, r2
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	4413      	add	r3, r2
 8004e28:	011b      	lsls	r3, r3, #4
 8004e2a:	4403      	add	r3, r0
 8004e2c:	330c      	adds	r3, #12
 8004e2e:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].Volume = AudioInit->Volume;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	6919      	ldr	r1, [r3, #16]
 8004e34:	4888      	ldr	r0, [pc, #544]	; (8005058 <BSP_AUDIO_IN_Init+0x29c>)
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	4413      	add	r3, r2
 8004e3e:	011b      	lsls	r3, r3, #4
 8004e40:	4403      	add	r3, r0
 8004e42:	3320      	adds	r3, #32
 8004e44:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_RESET;
 8004e46:	4984      	ldr	r1, [pc, #528]	; (8005058 <BSP_AUDIO_IN_Init+0x29c>)
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	4413      	add	r3, r2
 8004e50:	011b      	lsls	r3, r3, #4
 8004e52:	440b      	add	r3, r1
 8004e54:	3324      	adds	r3, #36	; 0x24
 8004e56:	2200      	movs	r2, #0
 8004e58:	601a      	str	r2, [r3, #0]

    if (Instance == 0U)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f040 80bc 	bne.w	8004fda <BSP_AUDIO_IN_Init+0x21e>
    {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if (MX_SAI2_ClockConfig(&haudio_in_sai, AudioInit->SampleRate) != HAL_OK)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	4619      	mov	r1, r3
 8004e68:	487c      	ldr	r0, [pc, #496]	; (800505c <BSP_AUDIO_IN_Init+0x2a0>)
 8004e6a:	f7ff fc7e 	bl	800476a <MX_SAI2_ClockConfig>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d003      	beq.n	8004e7c <BSP_AUDIO_IN_Init+0xc0>
      {
        ret = BSP_ERROR_CLOCK_FAILURE;
 8004e74:	f06f 0308 	mvn.w	r3, #8
 8004e78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e7a:	e12a      	b.n	80050d2 <BSP_AUDIO_IN_Init+0x316>
      }
      else
      {
        haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8004e7c:	4b77      	ldr	r3, [pc, #476]	; (800505c <BSP_AUDIO_IN_Init+0x2a0>)
 8004e7e:	4a78      	ldr	r2, [pc, #480]	; (8005060 <BSP_AUDIO_IN_Init+0x2a4>)
 8004e80:	601a      	str	r2, [r3, #0]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 0)
        SAI_MspInit(&haudio_in_sai);
 8004e82:	4876      	ldr	r0, [pc, #472]	; (800505c <BSP_AUDIO_IN_Init+0x2a0>)
 8004e84:	f000 fcbc 	bl	8005800 <SAI_MspInit>
        {
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 0) */

          MX_SAI_Config_t mx_config;

          mx_config.MonoStereoMode = (AudioInit->ChannelsNbr == 1U) ? SAI_MONOMODE : SAI_STEREOMODE;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d102      	bne.n	8004e96 <BSP_AUDIO_IN_Init+0xda>
 8004e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e94:	e000      	b.n	8004e98 <BSP_AUDIO_IN_Init+0xdc>
 8004e96:	2300      	movs	r3, #0
 8004e98:	61bb      	str	r3, [r7, #24]
          mx_config.DataSize = SAI_DATASIZE_16;
 8004e9a:	2380      	movs	r3, #128	; 0x80
 8004e9c:	617b      	str	r3, [r7, #20]
          mx_config.FrameLength = 64;
 8004e9e:	2340      	movs	r3, #64	; 0x40
 8004ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
          mx_config.ActiveFrameLength = 32;
 8004ea2:	2320      	movs	r3, #32
 8004ea4:	633b      	str	r3, [r7, #48]	; 0x30
          if (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	2b20      	cmp	r3, #32
 8004eac:	d105      	bne.n	8004eba <BSP_AUDIO_IN_Init+0xfe>
          {
            mx_config.DataSize = SAI_DATASIZE_32;
 8004eae:	23e0      	movs	r3, #224	; 0xe0
 8004eb0:	617b      	str	r3, [r7, #20]
            mx_config.FrameLength = 128;
 8004eb2:	2380      	movs	r3, #128	; 0x80
 8004eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
            mx_config.ActiveFrameLength = 64;
 8004eb6:	2340      	movs	r3, #64	; 0x40
 8004eb8:	633b      	str	r3, [r7, #48]	; 0x30
          }
          mx_config.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	627b      	str	r3, [r7, #36]	; 0x24
          switch (AudioInit->Device)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d102      	bne.n	8004ecc <BSP_AUDIO_IN_Init+0x110>
          {
          case AUDIO_IN_DEVICE_ANALOG_MIC:
            mx_config.SlotActive = SAI_SLOTACTIVE_0;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004eca:	e002      	b.n	8004ed2 <BSP_AUDIO_IN_Init+0x116>
          case AUDIO_IN_DEVICE_DIGITAL_MIC:
          default:
            mx_config.SlotActive = CODEC_AUDIOFRAME_SLOT_13;
 8004ecc:	230a      	movs	r3, #10
 8004ece:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004ed0:	bf00      	nop
          }

          /* Prepare haudio_in_sai handle */
          haudio_in_sai.Instance = SAI2_Block_B;
 8004ed2:	4b62      	ldr	r3, [pc, #392]	; (800505c <BSP_AUDIO_IN_Init+0x2a0>)
 8004ed4:	4a62      	ldr	r2, [pc, #392]	; (8005060 <BSP_AUDIO_IN_Init+0x2a4>)
 8004ed6:	601a      	str	r2, [r3, #0]
          mx_config.AudioFrequency = Audio_In_Ctx[Instance].SampleRate;
 8004ed8:	495f      	ldr	r1, [pc, #380]	; (8005058 <BSP_AUDIO_IN_Init+0x29c>)
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	4613      	mov	r3, r2
 8004ede:	005b      	lsls	r3, r3, #1
 8004ee0:	4413      	add	r3, r2
 8004ee2:	011b      	lsls	r3, r3, #4
 8004ee4:	440b      	add	r3, r1
 8004ee6:	3308      	adds	r3, #8
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	60fb      	str	r3, [r7, #12]
          mx_config.AudioMode = SAI_MODESLAVE_RX;
 8004eec:	2303      	movs	r3, #3
 8004eee:	613b      	str	r3, [r7, #16]
          mx_config.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	61fb      	str	r3, [r7, #28]
          mx_config.Synchro = SAI_SYNCHRONOUS;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	623b      	str	r3, [r7, #32]
          mx_config.SynchroExt = SAI_SYNCEXT_DISABLE;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	62bb      	str	r3, [r7, #40]	; 0x28

          if (MX_SAI2_Block_B_Init(&haudio_in_sai, &mx_config) != HAL_OK)
 8004efc:	f107 030c 	add.w	r3, r7, #12
 8004f00:	4619      	mov	r1, r3
 8004f02:	4856      	ldr	r0, [pc, #344]	; (800505c <BSP_AUDIO_IN_Init+0x2a0>)
 8004f04:	f000 f966 	bl	80051d4 <MX_SAI2_Block_B_Init>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <BSP_AUDIO_IN_Init+0x15a>
          {
            /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
            ret = BSP_ERROR_PERIPH_FAILURE;
 8004f0e:	f06f 0303 	mvn.w	r3, #3
 8004f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f14:	e01b      	b.n	8004f4e <BSP_AUDIO_IN_Init+0x192>
          }
          else
          {
            /* Prepare haudio_out_sai handle */
            haudio_out_sai.Instance = SAI2_Block_A;
 8004f16:	4b53      	ldr	r3, [pc, #332]	; (8005064 <BSP_AUDIO_IN_Init+0x2a8>)
 8004f18:	4a53      	ldr	r2, [pc, #332]	; (8005068 <BSP_AUDIO_IN_Init+0x2ac>)
 8004f1a:	601a      	str	r2, [r3, #0]
            mx_config.AudioMode = SAI_MODEMASTER_TX;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	613b      	str	r3, [r7, #16]
            mx_config.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8004f20:	2300      	movs	r3, #0
 8004f22:	61fb      	str	r3, [r7, #28]
            mx_config.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8004f24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
            mx_config.Synchro = SAI_ASYNCHRONOUS;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	623b      	str	r3, [r7, #32]
            mx_config.SynchroExt = SAI_SYNCEXT_DISABLE;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	62bb      	str	r3, [r7, #40]	; 0x28
            mx_config.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 8004f32:	230f      	movs	r3, #15
 8004f34:	637b      	str	r3, [r7, #52]	; 0x34
            if (MX_SAI2_Block_A_Init(&haudio_out_sai, &mx_config) != HAL_OK)
 8004f36:	f107 030c 	add.w	r3, r7, #12
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	4849      	ldr	r0, [pc, #292]	; (8005064 <BSP_AUDIO_IN_Init+0x2a8>)
 8004f3e:	f7ff fb8b 	bl	8004658 <MX_SAI2_Block_A_Init>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d002      	beq.n	8004f4e <BSP_AUDIO_IN_Init+0x192>
            {
              /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
              ret = BSP_ERROR_PERIPH_FAILURE;
 8004f48:	f06f 0303 	mvn.w	r3, #3
 8004f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
              }
            }
          }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
#if (USE_AUDIO_CODEC_WM8994 == 1U)
          if (ret == BSP_ERROR_NONE)
 8004f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f040 80be 	bne.w	80050d2 <BSP_AUDIO_IN_Init+0x316>
          {
            /* Initialize the codec internal registers */
            if (WM8994_Probe() == BSP_ERROR_NONE)
 8004f56:	f000 fbf9 	bl	800574c <WM8994_Probe>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f040 80b8 	bne.w	80050d2 <BSP_AUDIO_IN_Init+0x316>
            {
              WM8994_Init_t codec_init;

              /* Fill codec_init structure */
              codec_init.Frequency = AudioInit->SampleRate;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	643b      	str	r3, [r7, #64]	; 0x40
              codec_init.OutputDevice = WM8994_OUT_NONE;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
              if (AudioInit->Device == AUDIO_IN_DEVICE_ANALOG_MIC)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d104      	bne.n	8004f7e <BSP_AUDIO_IN_Init+0x1c2>
              {
                codec_init.InputDevice = WM8994_IN_LINE1;
 8004f74:	2303      	movs	r3, #3
 8004f76:	63bb      	str	r3, [r7, #56]	; 0x38
                codec_init.OutputDevice = AUDIO_OUT_DEVICE_HEADPHONE;
 8004f78:	2302      	movs	r3, #2
 8004f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f7c:	e001      	b.n	8004f82 <BSP_AUDIO_IN_Init+0x1c6>
              }
              else /* (AudioInit->Device == AUDIO_IN_DEVICE_DIGITAL_MIC) */
              {
                codec_init.InputDevice = WM8994_IN_MIC2;
 8004f7e:	2302      	movs	r3, #2
 8004f80:	63bb      	str	r3, [r7, #56]	; 0x38
              }
              codec_init.Resolution = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? 3 : 0;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	2b20      	cmp	r3, #32
 8004f88:	d101      	bne.n	8004f8e <BSP_AUDIO_IN_Init+0x1d2>
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e000      	b.n	8004f90 <BSP_AUDIO_IN_Init+0x1d4>
 8004f8e:	2300      	movs	r3, #0
 8004f90:	647b      	str	r3, [r7, #68]	; 0x44

              /* Convert volume before sending to the codec */
              codec_init.Volume = VOLUME_IN_CONVERT(AudioInit->Volume);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	2b63      	cmp	r3, #99	; 0x63
 8004f98:	d80c      	bhi.n	8004fb4 <BSP_AUDIO_IN_Init+0x1f8>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	691a      	ldr	r2, [r3, #16]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	1a9b      	subs	r3, r3, r2
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	1a9b      	subs	r3, r3, r2
 8004fa8:	4a30      	ldr	r2, [pc, #192]	; (800506c <BSP_AUDIO_IN_Init+0x2b0>)
 8004faa:	fba2 2303 	umull	r2, r3, r2, r3
 8004fae:	095b      	lsrs	r3, r3, #5
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	e000      	b.n	8004fb6 <BSP_AUDIO_IN_Init+0x1fa>
 8004fb4:	23ef      	movs	r3, #239	; 0xef
 8004fb6:	64bb      	str	r3, [r7, #72]	; 0x48

              /* Initialize the codec internal registers */
              if (Audio_Drv->Init(Audio_CompObj, &codec_init) != 0)
 8004fb8:	4b2d      	ldr	r3, [pc, #180]	; (8005070 <BSP_AUDIO_IN_Init+0x2b4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a2d      	ldr	r2, [pc, #180]	; (8005074 <BSP_AUDIO_IN_Init+0x2b8>)
 8004fc0:	6812      	ldr	r2, [r2, #0]
 8004fc2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004fc6:	4610      	mov	r0, r2
 8004fc8:	4798      	blx	r3
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 8080 	beq.w	80050d2 <BSP_AUDIO_IN_Init+0x316>
              {
                ret = BSP_ERROR_COMPONENT_FAILURE;
 8004fd2:	f06f 0304 	mvn.w	r3, #4
 8004fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fd8:	e07b      	b.n	80050d2 <BSP_AUDIO_IN_Init+0x316>
      }
    }
    else /* (Instance == 1U) */
    {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI4_ClockConfig(&haudio_in_sai, AudioInit->SampleRate) != HAL_OK)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	4619      	mov	r1, r3
 8004fe0:	481e      	ldr	r0, [pc, #120]	; (800505c <BSP_AUDIO_IN_Init+0x2a0>)
 8004fe2:	f7ff fc06 	bl	80047f2 <MX_SAI4_ClockConfig>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d003      	beq.n	8004ff4 <BSP_AUDIO_IN_Init+0x238>
      {
        ret = BSP_ERROR_CLOCK_FAILURE;
 8004fec:	f06f 0308 	mvn.w	r3, #8
 8004ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ff2:	e06e      	b.n	80050d2 <BSP_AUDIO_IN_Init+0x316>
      }
      else
      {
        haudio_in_sai.Instance = AUDIO_IN_SAI_PDMx;
 8004ff4:	4b19      	ldr	r3, [pc, #100]	; (800505c <BSP_AUDIO_IN_Init+0x2a0>)
 8004ff6:	4a20      	ldr	r2, [pc, #128]	; (8005078 <BSP_AUDIO_IN_Init+0x2bc>)
 8004ff8:	601a      	str	r2, [r3, #0]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 0U)
        SAI_MspInit(&haudio_in_sai);
 8004ffa:	4818      	ldr	r0, [pc, #96]	; (800505c <BSP_AUDIO_IN_Init+0x2a0>)
 8004ffc:	f000 fc00 	bl	8005800 <SAI_MspInit>
        {
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 0U) */
          MX_SAI_Config_t mx_config;

          /* Prepare haudio_in_sai handle */
          mx_config.MonoStereoMode    = SAI_STEREOMODE;
 8005000:	2300      	movs	r3, #0
 8005002:	61bb      	str	r3, [r7, #24]
          mx_config.DataSize          = SAI_DATASIZE_16;
 8005004:	2380      	movs	r3, #128	; 0x80
 8005006:	617b      	str	r3, [r7, #20]
          mx_config.FrameLength       = 32;
 8005008:	2320      	movs	r3, #32
 800500a:	62fb      	str	r3, [r7, #44]	; 0x2c
          mx_config.ActiveFrameLength = 1;
 800500c:	2301      	movs	r3, #1
 800500e:	633b      	str	r3, [r7, #48]	; 0x30
          mx_config.OutputDrive       = SAI_OUTPUTDRIVE_DISABLE;
 8005010:	2300      	movs	r3, #0
 8005012:	627b      	str	r3, [r7, #36]	; 0x24
          mx_config.SlotActive        = SAI_SLOTACTIVE_1;
 8005014:	2302      	movs	r3, #2
 8005016:	637b      	str	r3, [r7, #52]	; 0x34
          mx_config.AudioFrequency    = Audio_In_Ctx[Instance].SampleRate*8;
 8005018:	490f      	ldr	r1, [pc, #60]	; (8005058 <BSP_AUDIO_IN_Init+0x29c>)
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	4613      	mov	r3, r2
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	4413      	add	r3, r2
 8005022:	011b      	lsls	r3, r3, #4
 8005024:	440b      	add	r3, r1
 8005026:	3308      	adds	r3, #8
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	60fb      	str	r3, [r7, #12]
          mx_config.AudioMode         = SAI_MODEMASTER_RX;
 800502e:	2301      	movs	r3, #1
 8005030:	613b      	str	r3, [r7, #16]
          mx_config.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005032:	2300      	movs	r3, #0
 8005034:	61fb      	str	r3, [r7, #28]
          mx_config.Synchro           = SAI_ASYNCHRONOUS;
 8005036:	2300      	movs	r3, #0
 8005038:	623b      	str	r3, [r7, #32]
          mx_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 800503a:	2300      	movs	r3, #0
 800503c:	62bb      	str	r3, [r7, #40]	; 0x28

          if(MX_SAI4_Block_A_Init(&haudio_in_sai, &mx_config) != HAL_OK)
 800503e:	f107 030c 	add.w	r3, r7, #12
 8005042:	4619      	mov	r1, r3
 8005044:	4805      	ldr	r0, [pc, #20]	; (800505c <BSP_AUDIO_IN_Init+0x2a0>)
 8005046:	f000 f93a 	bl	80052be <MX_SAI4_Block_A_Init>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d015      	beq.n	800507c <BSP_AUDIO_IN_Init+0x2c0>
          {
            /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
            ret = BSP_ERROR_PERIPH_FAILURE;
 8005050:	f06f 0303 	mvn.w	r3, #3
 8005054:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005056:	e02f      	b.n	80050b8 <BSP_AUDIO_IN_Init+0x2fc>
 8005058:	24007380 	.word	0x24007380
 800505c:	240072e8 	.word	0x240072e8
 8005060:	40015c24 	.word	0x40015c24
 8005064:	2400722c 	.word	0x2400722c
 8005068:	40015c04 	.word	0x40015c04
 800506c:	51eb851f 	.word	0x51eb851f
 8005070:	24007180 	.word	0x24007180
 8005074:	24007228 	.word	0x24007228
 8005078:	58005404 	.word	0x58005404
          }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */

          else
          {
            if(BSP_AUDIO_IN_PDMToPCM_Init(Instance, AudioInit->SampleRate, Audio_In_Ctx[Instance].ChannelsNbr, Audio_In_Ctx[Instance].ChannelsNbr) != BSP_ERROR_NONE)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	6859      	ldr	r1, [r3, #4]
 8005080:	4816      	ldr	r0, [pc, #88]	; (80050dc <BSP_AUDIO_IN_Init+0x320>)
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	4613      	mov	r3, r2
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	4413      	add	r3, r2
 800508a:	011b      	lsls	r3, r3, #4
 800508c:	4403      	add	r3, r0
 800508e:	3310      	adds	r3, #16
 8005090:	6818      	ldr	r0, [r3, #0]
 8005092:	4c12      	ldr	r4, [pc, #72]	; (80050dc <BSP_AUDIO_IN_Init+0x320>)
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	4613      	mov	r3, r2
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	4413      	add	r3, r2
 800509c:	011b      	lsls	r3, r3, #4
 800509e:	4423      	add	r3, r4
 80050a0:	3310      	adds	r3, #16
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4602      	mov	r2, r0
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f98e 	bl	80053c8 <BSP_AUDIO_IN_PDMToPCM_Init>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d002      	beq.n	80050b8 <BSP_AUDIO_IN_Init+0x2fc>
            {
              ret = BSP_ERROR_NO_INIT;
 80050b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050b6:	64fb      	str	r3, [r7, #76]	; 0x4c
          }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        }
#endif
        /* Update BSP AUDIO IN state */
        if(ret == BSP_ERROR_NONE)
 80050b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d109      	bne.n	80050d2 <BSP_AUDIO_IN_Init+0x316>
        {
          Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_STOP;
 80050be:	4907      	ldr	r1, [pc, #28]	; (80050dc <BSP_AUDIO_IN_Init+0x320>)
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	4613      	mov	r3, r2
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	4413      	add	r3, r2
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	440b      	add	r3, r1
 80050cc:	3324      	adds	r3, #36	; 0x24
 80050ce:	2202      	movs	r2, #2
 80050d0:	601a      	str	r2, [r3, #0]
        }
      }
    }
  }
  /* Return BSP status */
  return ret;
 80050d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3754      	adds	r7, #84	; 0x54
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd90      	pop	{r4, r7, pc}
 80050dc:	24007380 	.word	0x24007380

080050e0 <BSP_AUDIO_IN_DeInit>:
  * @param  Instance  AUDIO IN Instance. It can be 0 when SAI is used or 1 is used
  * @retval BSP status
  */

int32_t BSP_AUDIO_IN_DeInit(uint32_t Instance)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80050e8:	2300      	movs	r3, #0
 80050ea:	60fb      	str	r3, [r7, #12]

  if (Instance >= AUDIO_IN_INSTANCES_NBR)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d903      	bls.n	80050fa <BSP_AUDIO_IN_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80050f2:	f06f 0301 	mvn.w	r3, #1
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	e056      	b.n	80051a8 <BSP_AUDIO_IN_DeInit+0xc8>
  }
  else
  {
    if (Instance == 0U)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d12a      	bne.n	8005156 <BSP_AUDIO_IN_DeInit+0x76>
    {
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 0U)
      SAI_MspDeInit(&haudio_in_sai);
 8005100:	482c      	ldr	r0, [pc, #176]	; (80051b4 <BSP_AUDIO_IN_DeInit+0xd4>)
 8005102:	f000 fdc1 	bl	8005c88 <SAI_MspDeInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 0U) */

      /* Initialize the haudio_in_sai Instance parameter */
      haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8005106:	4b2b      	ldr	r3, [pc, #172]	; (80051b4 <BSP_AUDIO_IN_DeInit+0xd4>)
 8005108:	4a2b      	ldr	r2, [pc, #172]	; (80051b8 <BSP_AUDIO_IN_DeInit+0xd8>)
 800510a:	601a      	str	r2, [r3, #0]
      /* Initialize the haudio_out_sai Instance parameter */
      haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800510c:	4b2b      	ldr	r3, [pc, #172]	; (80051bc <BSP_AUDIO_IN_DeInit+0xdc>)
 800510e:	4a2c      	ldr	r2, [pc, #176]	; (80051c0 <BSP_AUDIO_IN_DeInit+0xe0>)
 8005110:	601a      	str	r2, [r3, #0]

      if (Audio_Drv->DeInit(Audio_CompObj) < 0)
 8005112:	4b2c      	ldr	r3, [pc, #176]	; (80051c4 <BSP_AUDIO_IN_DeInit+0xe4>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	4a2b      	ldr	r2, [pc, #172]	; (80051c8 <BSP_AUDIO_IN_DeInit+0xe8>)
 800511a:	6812      	ldr	r2, [r2, #0]
 800511c:	4610      	mov	r0, r2
 800511e:	4798      	blx	r3
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	da03      	bge.n	800512e <BSP_AUDIO_IN_DeInit+0x4e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005126:	f06f 0304 	mvn.w	r3, #4
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	e032      	b.n	8005194 <BSP_AUDIO_IN_DeInit+0xb4>
      } /* De-Initializes SAI handles */
      else if (HAL_SAI_DeInit(&haudio_in_sai) != HAL_OK)
 800512e:	4821      	ldr	r0, [pc, #132]	; (80051b4 <BSP_AUDIO_IN_DeInit+0xd4>)
 8005130:	f00b fe3c 	bl	8010dac <HAL_SAI_DeInit>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <BSP_AUDIO_IN_DeInit+0x62>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800513a:	f06f 0303 	mvn.w	r3, #3
 800513e:	60fb      	str	r3, [r7, #12]
 8005140:	e028      	b.n	8005194 <BSP_AUDIO_IN_DeInit+0xb4>
      }
      else
      {
        if (HAL_SAI_DeInit(&haudio_out_sai) != HAL_OK)
 8005142:	481e      	ldr	r0, [pc, #120]	; (80051bc <BSP_AUDIO_IN_DeInit+0xdc>)
 8005144:	f00b fe32 	bl	8010dac <HAL_SAI_DeInit>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d022      	beq.n	8005194 <BSP_AUDIO_IN_DeInit+0xb4>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800514e:	f06f 0303 	mvn.w	r3, #3
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	e01e      	b.n	8005194 <BSP_AUDIO_IN_DeInit+0xb4>
        }
      }
    }
    else if (Instance == 1U)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d11b      	bne.n	8005194 <BSP_AUDIO_IN_DeInit+0xb4>
    {
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 0U)
      SAI_MspDeInit(&haudio_in_sai);
 800515c:	4815      	ldr	r0, [pc, #84]	; (80051b4 <BSP_AUDIO_IN_DeInit+0xd4>)
 800515e:	f000 fd93 	bl	8005c88 <SAI_MspDeInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 0U) */

      /* Initialize the haudio_in_sai Instance parameter */
      haudio_in_sai.Instance = AUDIO_IN_SAI_PDMx;
 8005162:	4b14      	ldr	r3, [pc, #80]	; (80051b4 <BSP_AUDIO_IN_DeInit+0xd4>)
 8005164:	4a19      	ldr	r2, [pc, #100]	; (80051cc <BSP_AUDIO_IN_DeInit+0xec>)
 8005166:	601a      	str	r2, [r3, #0]
      /* Initialize the haudio_out_sai Instance parameter */
      haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8005168:	4b14      	ldr	r3, [pc, #80]	; (80051bc <BSP_AUDIO_IN_DeInit+0xdc>)
 800516a:	4a15      	ldr	r2, [pc, #84]	; (80051c0 <BSP_AUDIO_IN_DeInit+0xe0>)
 800516c:	601a      	str	r2, [r3, #0]

      if (HAL_SAI_DeInit(&haudio_in_sai) != HAL_OK)
 800516e:	4811      	ldr	r0, [pc, #68]	; (80051b4 <BSP_AUDIO_IN_DeInit+0xd4>)
 8005170:	f00b fe1c 	bl	8010dac <HAL_SAI_DeInit>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <BSP_AUDIO_IN_DeInit+0xa2>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800517a:	f06f 0303 	mvn.w	r3, #3
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	e008      	b.n	8005194 <BSP_AUDIO_IN_DeInit+0xb4>
      }
      else
      {
        if (HAL_SAI_DeInit(&haudio_out_sai) != HAL_OK)
 8005182:	480e      	ldr	r0, [pc, #56]	; (80051bc <BSP_AUDIO_IN_DeInit+0xdc>)
 8005184:	f00b fe12 	bl	8010dac <HAL_SAI_DeInit>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <BSP_AUDIO_IN_DeInit+0xb4>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800518e:	f06f 0303 	mvn.w	r3, #3
 8005192:	60fb      	str	r3, [r7, #12]
      }
    }
    else
    {}
    /* Update BSP AUDIO IN state */
    Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_RESET;
 8005194:	490e      	ldr	r1, [pc, #56]	; (80051d0 <BSP_AUDIO_IN_DeInit+0xf0>)
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	4613      	mov	r3, r2
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	4413      	add	r3, r2
 800519e:	011b      	lsls	r3, r3, #4
 80051a0:	440b      	add	r3, r1
 80051a2:	3324      	adds	r3, #36	; 0x24
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]
  }

  /* Return BSP status */
  return ret;
 80051a8:	68fb      	ldr	r3, [r7, #12]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	240072e8 	.word	0x240072e8
 80051b8:	40015c24 	.word	0x40015c24
 80051bc:	2400722c 	.word	0x2400722c
 80051c0:	40015c04 	.word	0x40015c04
 80051c4:	24007180 	.word	0x24007180
 80051c8:	24007228 	.word	0x24007228
 80051cc:	58005404 	.word	0x58005404
 80051d0:	24007380 	.word	0x24007380

080051d4 <MX_SAI2_Block_B_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI2_Block_B_Init(SAI_HandleTypeDef *hsai, MX_SAI_Config_t *MXConfig)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80051f0:	601a      	str	r2, [r3, #0]

  /* Configure SAI1_Block_B */
  hsai->Init.AudioFrequency = MXConfig->AudioFrequency;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	621a      	str	r2, [r3, #32]
  hsai->Init.MonoStereoMode = MXConfig->MonoStereoMode;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	68da      	ldr	r2, [r3, #12]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai->Init.AudioMode = MXConfig->AudioMode;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol = SAI_FREE_PROTOCOL;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.DataSize = MXConfig->DataSize;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	689a      	ldr	r2, [r3, #8]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->Init.FirstBit = SAI_FIRSTBIT_MSB;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->Init.ClockStrobing = MXConfig->ClockStrobing;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	691a      	ldr	r2, [r3, #16]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->Init.Synchro = MXConfig->Synchro;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	695a      	ldr	r2, [r3, #20]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive = MXConfig->OutputDrive;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	699a      	ldr	r2, [r3, #24]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt = MXConfig->SynchroExt;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	69da      	ldr	r2, [r3, #28]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode = SAI_NOCOMPANDING;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.TriState = SAI_OUTPUT_RELEASED;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2210      	movs	r2, #16
 8005254:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.Mckdiv = 0;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	625a      	str	r2, [r3, #36]	; 0x24
  hsai->Init.PdmInit.Activation = DISABLE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength = MXConfig->FrameLength;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	6a1a      	ldr	r2, [r3, #32]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800527a:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005288:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset = 0;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotNumber = 4;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2204      	movs	r2, #4
 800529a:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive = MXConfig->SlotActive;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	675a      	str	r2, [r3, #116]	; 0x74

  if (HAL_SAI_Init(hsai) != HAL_OK)
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f00b fad7 	bl	8010858 <HAL_SAI_Init>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <MX_SAI2_Block_B_Init+0xe0>
  {
    ret = HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <MX_SAI4_Block_A_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI4_Block_A_Init(SAI_HandleTypeDef *hsai, MX_SAI_Config_t *MXConfig)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b084      	sub	sp, #16
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80052c8:	2300      	movs	r3, #0
 80052ca:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80052da:	601a      	str	r2, [r3, #0]

  /* Configure SAI4_Block_A */
  hsai->Init.AudioFrequency      = MXConfig->AudioFrequency;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	621a      	str	r2, [r3, #32]
  hsai->Init.MonoStereoMode      = MXConfig->MonoStereoMode;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	68da      	ldr	r2, [r3, #12]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai->Init.AudioMode           = MXConfig->AudioMode;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider           = SAI_MASTERDIVIDER_DISABLE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80052fa:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.DataSize            = MXConfig->DataSize;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	689a      	ldr	r2, [r3, #8]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	649a      	str	r2, [r3, #72]	; 0x48
  hsai->Init.FirstBit            = SAI_FIRSTBIT_LSB;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005310:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->Init.ClockStrobing       = MXConfig->ClockStrobing;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	691a      	ldr	r2, [r3, #16]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->Init.Synchro             = MXConfig->Synchro;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	695a      	ldr	r2, [r3, #20]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive         = MXConfig->OutputDrive;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	699a      	ldr	r2, [r3, #24]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold       = SAI_FIFOTHRESHOLD_1QF;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt          = MXConfig->SynchroExt;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode      = SAI_NOCOMPANDING;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	631a      	str	r2, [r3, #48]	; 0x30
  hsai->Init.TriState            = SAI_OUTPUT_RELEASED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2210      	movs	r2, #16
 8005342:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.Mckdiv              = 0;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	625a      	str	r2, [r3, #36]	; 0x24
  hsai->Init.PdmInit.Activation  = ENABLE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2201      	movs	r2, #1
 800534e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai->Init.PdmInit.MicPairsNbr = 2;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2202      	movs	r2, #2
 8005356:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai->Init.PdmInit.ClockEnable = SAI_PDM_CLOCK2_ENABLE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800535e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	6a1a      	ldr	r2, [r3, #32]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_STARTFRAME;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_HIGH;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800537c:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_FIRSTBIT;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset = 0;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotNumber     = 2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive     = MXConfig->SlotActive;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	675a      	str	r2, [r3, #116]	; 0x74

  if (HAL_SAI_Init(hsai) != HAL_OK)
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f00b fa5a 	bl	8010858 <HAL_SAI_Init>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <MX_SAI4_Block_A_Init+0xf0>
  {
    ret = HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	73fb      	strb	r3, [r7, #15]
  }
  __HAL_SAI_ENABLE(hsai);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80053bc:	601a      	str	r2, [r3, #0]
  return ret ;
 80053be:	7bfb      	ldrb	r3, [r7, #15]

}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <BSP_AUDIO_IN_PDMToPCM_Init>:
  * @param  ChnlNbrIn  Number of input audio channels in the PDM buffer
  * @param  ChnlNbrOut Number of desired output audio channels in the  resulting PCM buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_PDMToPCM_Init(uint32_t Instance, uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	603b      	str	r3, [r7, #0]
  uint32_t index = 0;
 80053d6:	2300      	movs	r3, #0
 80053d8:	617b      	str	r3, [r7, #20]

  if (Instance != 1U)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d002      	beq.n	80053e6 <BSP_AUDIO_IN_PDMToPCM_Init+0x1e>
  {
    return  BSP_ERROR_WRONG_PARAM;
 80053e0:	f06f 0301 	mvn.w	r3, #1
 80053e4:	e085      	b.n	80054f2 <BSP_AUDIO_IN_PDMToPCM_Init+0x12a>
  }
  else
  {
    /* Enable CRC peripheral to unlock the PDM library */
    __HAL_RCC_CRC_CLK_ENABLE();
 80053e6:	4b45      	ldr	r3, [pc, #276]	; (80054fc <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 80053e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053ec:	4a43      	ldr	r2, [pc, #268]	; (80054fc <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 80053ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80053f6:	4b41      	ldr	r3, [pc, #260]	; (80054fc <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 80053f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	693b      	ldr	r3, [r7, #16]

    for (index = 0; index < ChnlNbrIn; index++)
 8005404:	2300      	movs	r3, #0
 8005406:	617b      	str	r3, [r7, #20]
 8005408:	e06e      	b.n	80054e8 <BSP_AUDIO_IN_PDMToPCM_Init+0x120>
    {
      /* Init PDM filters */
      PDM_FilterHandler[index].bit_order = PDM_FILTER_BIT_ORDER_MSB;
 800540a:	4a3d      	ldr	r2, [pc, #244]	; (8005500 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	214c      	movs	r1, #76	; 0x4c
 8005410:	fb01 f303 	mul.w	r3, r1, r3
 8005414:	4413      	add	r3, r2
 8005416:	2201      	movs	r2, #1
 8005418:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 800541a:	4a39      	ldr	r2, [pc, #228]	; (8005500 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	214c      	movs	r1, #76	; 0x4c
 8005420:	fb01 f303 	mul.w	r3, r1, r3
 8005424:	4413      	add	r3, r2
 8005426:	3302      	adds	r3, #2
 8005428:	2200      	movs	r2, #0
 800542a:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].high_pass_tap = 2122358088;
 800542c:	4a34      	ldr	r2, [pc, #208]	; (8005500 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	214c      	movs	r1, #76	; 0x4c
 8005432:	fb01 f303 	mul.w	r3, r1, r3
 8005436:	4413      	add	r3, r2
 8005438:	3304      	adds	r3, #4
 800543a:	4a32      	ldr	r2, [pc, #200]	; (8005504 <BSP_AUDIO_IN_PDMToPCM_Init+0x13c>)
 800543c:	601a      	str	r2, [r3, #0]
      PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	b298      	uxth	r0, r3
 8005442:	4a2f      	ldr	r2, [pc, #188]	; (8005500 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	214c      	movs	r1, #76	; 0x4c
 8005448:	fb01 f303 	mul.w	r3, r1, r3
 800544c:	4413      	add	r3, r2
 800544e:	330a      	adds	r3, #10
 8005450:	4602      	mov	r2, r0
 8005452:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].in_ptr_channels = ChnlNbrIn;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	b298      	uxth	r0, r3
 8005458:	4a29      	ldr	r2, [pc, #164]	; (8005500 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	214c      	movs	r1, #76	; 0x4c
 800545e:	fb01 f303 	mul.w	r3, r1, r3
 8005462:	4413      	add	r3, r2
 8005464:	3308      	adds	r3, #8
 8005466:	4602      	mov	r2, r0
 8005468:	801a      	strh	r2, [r3, #0]
      PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	224c      	movs	r2, #76	; 0x4c
 800546e:	fb02 f303 	mul.w	r3, r2, r3
 8005472:	4a23      	ldr	r2, [pc, #140]	; (8005500 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8005474:	4413      	add	r3, r2
 8005476:	4618      	mov	r0, r3
 8005478:	f00f f89e 	bl	80145b8 <PDM_Filter_Init>

      /* PDM lib config phase */
      PDM_FilterConfig[index].output_samples_number = AudioFreq / 1000;
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4a22      	ldr	r2, [pc, #136]	; (8005508 <BSP_AUDIO_IN_PDMToPCM_Init+0x140>)
 8005480:	fba2 2303 	umull	r2, r3, r2, r3
 8005484:	099b      	lsrs	r3, r3, #6
 8005486:	b298      	uxth	r0, r3
 8005488:	4920      	ldr	r1, [pc, #128]	; (800550c <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	4613      	mov	r3, r2
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	4413      	add	r3, r2
 8005492:	005b      	lsls	r3, r3, #1
 8005494:	440b      	add	r3, r1
 8005496:	3302      	adds	r3, #2
 8005498:	4602      	mov	r2, r0
 800549a:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].mic_gain = 24;
 800549c:	491b      	ldr	r1, [pc, #108]	; (800550c <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	4613      	mov	r3, r2
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	4413      	add	r3, r2
 80054a6:	005b      	lsls	r3, r3, #1
 80054a8:	440b      	add	r3, r1
 80054aa:	3304      	adds	r3, #4
 80054ac:	2218      	movs	r2, #24
 80054ae:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 80054b0:	4916      	ldr	r1, [pc, #88]	; (800550c <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	4613      	mov	r3, r2
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	4413      	add	r3, r2
 80054ba:	005b      	lsls	r3, r3, #1
 80054bc:	440b      	add	r3, r1
 80054be:	2202      	movs	r2, #2
 80054c0:	801a      	strh	r2, [r3, #0]
      PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	224c      	movs	r2, #76	; 0x4c
 80054c6:	fb02 f303 	mul.w	r3, r2, r3
 80054ca:	4a0d      	ldr	r2, [pc, #52]	; (8005500 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80054cc:	1898      	adds	r0, r3, r2
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	4613      	mov	r3, r2
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	4413      	add	r3, r2
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	4a0c      	ldr	r2, [pc, #48]	; (800550c <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 80054da:	4413      	add	r3, r2
 80054dc:	4619      	mov	r1, r3
 80054de:	f00f f93b 	bl	8014758 <PDM_Filter_setConfig>
    for (index = 0; index < ChnlNbrIn; index++)
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	3301      	adds	r3, #1
 80054e6:	617b      	str	r3, [r7, #20]
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d38c      	bcc.n	800540a <BSP_AUDIO_IN_PDMToPCM_Init+0x42>
    }

  }

   return BSP_ERROR_NONE;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	58024400 	.word	0x58024400
 8005500:	24007184 	.word	0x24007184
 8005504:	7e809d48 	.word	0x7e809d48
 8005508:	10624dd3 	.word	0x10624dd3
 800550c:	2400721c 	.word	0x2400721c

08005510 <BSP_AUDIO_IN_PDMToPCM>:
  * @param  PDMBuf    Pointer to PDM buffer data
  * @param  PCMBuf    Pointer to PCM buffer data
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_PDMToPCM(uint32_t Instance, uint16_t *PDMBuf, uint16_t *PCMBuf)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
  uint32_t index = 0;
 800551c:	2300      	movs	r3, #0
 800551e:	617b      	str	r3, [r7, #20]

  if (Instance != 1U)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d002      	beq.n	800552c <BSP_AUDIO_IN_PDMToPCM+0x1c>
  {
    return BSP_ERROR_WRONG_PARAM;
 8005526:	f06f 0301 	mvn.w	r3, #1
 800552a:	e022      	b.n	8005572 <BSP_AUDIO_IN_PDMToPCM+0x62>
  }
  else
  {
    for (index = 0; index < Audio_In_Ctx[Instance].ChannelsNbr; index++)
 800552c:	2300      	movs	r3, #0
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	e012      	b.n	8005558 <BSP_AUDIO_IN_PDMToPCM+0x48>
    {
      PDM_Filter(&((uint8_t *)(PDMBuf))[index], (uint16_t *)&(PCMBuf[index]), &PDM_FilterHandler[index]);
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	18d0      	adds	r0, r2, r3
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	005b      	lsls	r3, r3, #1
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	18d1      	adds	r1, r2, r3
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	224c      	movs	r2, #76	; 0x4c
 8005544:	fb02 f303 	mul.w	r3, r2, r3
 8005548:	4a0c      	ldr	r2, [pc, #48]	; (800557c <BSP_AUDIO_IN_PDMToPCM+0x6c>)
 800554a:	4413      	add	r3, r2
 800554c:	461a      	mov	r2, r3
 800554e:	f00f f9fd 	bl	801494c <PDM_Filter>
    for (index = 0; index < Audio_In_Ctx[Instance].ChannelsNbr; index++)
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	3301      	adds	r3, #1
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	4909      	ldr	r1, [pc, #36]	; (8005580 <BSP_AUDIO_IN_PDMToPCM+0x70>)
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	4613      	mov	r3, r2
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	4413      	add	r3, r2
 8005562:	011b      	lsls	r3, r3, #4
 8005564:	440b      	add	r3, r1
 8005566:	3310      	adds	r3, #16
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	429a      	cmp	r2, r3
 800556e:	d3e0      	bcc.n	8005532 <BSP_AUDIO_IN_PDMToPCM+0x22>
    }
  }

  return BSP_ERROR_NONE;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3718      	adds	r7, #24
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	24007184 	.word	0x24007184
 8005580:	24007380 	.word	0x24007380

08005584 <BSP_AUDIO_IN_Stop>:
  * @brief  Stop audio recording.
  * @param  Instance  AUDIO IN Instance. It can be 0 when SAI is used or 1 when PDM is used
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_Stop(uint32_t Instance)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800558c:	2300      	movs	r3, #0
 800558e:	60fb      	str	r3, [r7, #12]

  if (Instance >= AUDIO_IN_INSTANCES_NBR)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d903      	bls.n	800559e <BSP_AUDIO_IN_Stop+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005596:	f06f 0301 	mvn.w	r3, #1
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	e026      	b.n	80055ec <BSP_AUDIO_IN_Stop+0x68>
  }
  else
  {
      if (Instance == 0U)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10d      	bne.n	80055c0 <BSP_AUDIO_IN_Stop+0x3c>
      {
        /* Call the Media layer stop function */
        if (Audio_Drv->Stop(Audio_CompObj, CODEC_PDWN_SW) < 0)
 80055a4:	4b14      	ldr	r3, [pc, #80]	; (80055f8 <BSP_AUDIO_IN_Stop+0x74>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	4a14      	ldr	r2, [pc, #80]	; (80055fc <BSP_AUDIO_IN_Stop+0x78>)
 80055ac:	6812      	ldr	r2, [r2, #0]
 80055ae:	2101      	movs	r1, #1
 80055b0:	4610      	mov	r0, r2
 80055b2:	4798      	blx	r3
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	da02      	bge.n	80055c0 <BSP_AUDIO_IN_Stop+0x3c>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 80055ba:	f06f 0304 	mvn.w	r3, #4
 80055be:	60fb      	str	r3, [r7, #12]
        }
      }

      if (ret == BSP_ERROR_NONE)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d108      	bne.n	80055d8 <BSP_AUDIO_IN_Stop+0x54>
      {
        if (HAL_SAI_DMAStop(&haudio_in_sai) != HAL_OK)
 80055c6:	480e      	ldr	r0, [pc, #56]	; (8005600 <BSP_AUDIO_IN_Stop+0x7c>)
 80055c8:	f00b fcbd 	bl	8010f46 <HAL_SAI_DMAStop>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d002      	beq.n	80055d8 <BSP_AUDIO_IN_Stop+0x54>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80055d2:	f06f 0303 	mvn.w	r3, #3
 80055d6:	60fb      	str	r3, [r7, #12]
        }
      }


    /* Update BSP AUDIO IN state */
    Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_STOP;
 80055d8:	490a      	ldr	r1, [pc, #40]	; (8005604 <BSP_AUDIO_IN_Stop+0x80>)
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	4613      	mov	r3, r2
 80055de:	005b      	lsls	r3, r3, #1
 80055e0:	4413      	add	r3, r2
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	440b      	add	r3, r1
 80055e6:	3324      	adds	r3, #36	; 0x24
 80055e8:	2202      	movs	r2, #2
 80055ea:	601a      	str	r2, [r3, #0]
  }

  /* Return BSP status */
  return ret;
 80055ec:	68fb      	ldr	r3, [r7, #12]
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	24007180 	.word	0x24007180
 80055fc:	24007228 	.word	0x24007228
 8005600:	240072e8 	.word	0x240072e8
 8005604:	24007380 	.word	0x24007380

08005608 <BSP_AUDIO_IN_RecordPDM>:
  * @param  pBuf     Main buffer pointer for the recorded data storing
  * @param  NbrOfBytes     Size of the record buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_RecordPDM(uint32_t Instance, uint8_t *pBuf, uint32_t NbrOfBytes)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005614:	2300      	movs	r3, #0
 8005616:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d003      	beq.n	8005626 <BSP_AUDIO_IN_RecordPDM+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800561e:	f06f 0301 	mvn.w	r3, #1
 8005622:	617b      	str	r3, [r7, #20]
 8005624:	e018      	b.n	8005658 <BSP_AUDIO_IN_RecordPDM+0x50>
  }
  else
  {
    /* Start the process receive DMA */
    if(HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pBuf, (uint16_t)(NbrOfBytes/(Audio_In_Ctx[Instance].BitsPerSample/8U))) != HAL_OK)
 8005626:	490f      	ldr	r1, [pc, #60]	; (8005664 <BSP_AUDIO_IN_RecordPDM+0x5c>)
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	4613      	mov	r3, r2
 800562c:	005b      	lsls	r3, r3, #1
 800562e:	4413      	add	r3, r2
 8005630:	011b      	lsls	r3, r3, #4
 8005632:	440b      	add	r3, r1
 8005634:	330c      	adds	r3, #12
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	08db      	lsrs	r3, r3, #3
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005640:	b29b      	uxth	r3, r3
 8005642:	461a      	mov	r2, r3
 8005644:	68b9      	ldr	r1, [r7, #8]
 8005646:	4808      	ldr	r0, [pc, #32]	; (8005668 <BSP_AUDIO_IN_RecordPDM+0x60>)
 8005648:	f00b fdb2 	bl	80111b0 <HAL_SAI_Receive_DMA>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d002      	beq.n	8005658 <BSP_AUDIO_IN_RecordPDM+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005652:	f06f 0303 	mvn.w	r3, #3
 8005656:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status */
  return ret;
 8005658:	697b      	ldr	r3, [r7, #20]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3718      	adds	r7, #24
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	24007380 	.word	0x24007380
 8005668:	240072e8 	.word	0x240072e8

0800566c <BSP_AUDIO_IN_GetState>:
  * @param  Instance  AUDIO IN Instance. It can be 0 when SAI is used
  * @param  State     Audio Out state
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_GetState(uint32_t Instance, uint32_t *State)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005676:	2300      	movs	r3, #0
 8005678:	60fb      	str	r3, [r7, #12]

  if (Instance >= AUDIO_IN_INSTANCES_NBR)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d903      	bls.n	8005688 <BSP_AUDIO_IN_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005680:	f06f 0301 	mvn.w	r3, #1
 8005684:	60fb      	str	r3, [r7, #12]
 8005686:	e00a      	b.n	800569e <BSP_AUDIO_IN_GetState+0x32>
  }
  else
  {
    /* Input State to be returned */
    *State = Audio_In_Ctx[Instance].State;
 8005688:	4908      	ldr	r1, [pc, #32]	; (80056ac <BSP_AUDIO_IN_GetState+0x40>)
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	4613      	mov	r3, r2
 800568e:	005b      	lsls	r3, r3, #1
 8005690:	4413      	add	r3, r2
 8005692:	011b      	lsls	r3, r3, #4
 8005694:	440b      	add	r3, r1
 8005696:	3324      	adds	r3, #36	; 0x24
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	601a      	str	r2, [r3, #0]
  }
  return ret;
 800569e:	68fb      	ldr	r3, [r7, #12]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr
 80056ac:	24007380 	.word	0x24007380

080056b0 <BSP_AUDIO_IN_IRQHandler>:
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC1
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC2
  * @retval None
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t InputDevice)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]

  if ((InputDevice == AUDIO_IN_DEVICE_DIGITAL_MIC) || (InputDevice == AUDIO_IN_DEVICE_ANALOG_MIC))
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2b30      	cmp	r3, #48	; 0x30
 80056be:	d002      	beq.n	80056c6 <BSP_AUDIO_IN_IRQHandler+0x16>
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d105      	bne.n	80056d2 <BSP_AUDIO_IN_IRQHandler+0x22>
  {
    HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 80056c6:	4b05      	ldr	r3, [pc, #20]	; (80056dc <BSP_AUDIO_IN_IRQHandler+0x2c>)
 80056c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056cc:	4618      	mov	r0, r3
 80056ce:	f003 fea5 	bl	800941c <HAL_DMA_IRQHandler>
  }

}
 80056d2:	bf00      	nop
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	240072e8 	.word	0x240072e8

080056e0 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Half reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the first half */
  if (hsai->Instance == AUDIO_IN_SAIx)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a06      	ldr	r2, [pc, #24]	; (8005708 <HAL_SAI_RxHalfCpltCallback+0x28>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d103      	bne.n	80056fa <HAL_SAI_RxHalfCpltCallback+0x1a>
  {
    BSP_AUDIO_IN_HalfTransfer_CallBack(0);
 80056f2:	2000      	movs	r0, #0
 80056f4:	f7fb fc1a 	bl	8000f2c <BSP_AUDIO_IN_HalfTransfer_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_HalfTransfer_CallBack(1);
  }
}
 80056f8:	e002      	b.n	8005700 <HAL_SAI_RxHalfCpltCallback+0x20>
    BSP_AUDIO_IN_HalfTransfer_CallBack(1);
 80056fa:	2001      	movs	r0, #1
 80056fc:	f7fb fc16 	bl	8000f2c <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8005700:	bf00      	nop
 8005702:	3708      	adds	r7, #8
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	40015c24 	.word	0x40015c24

0800570c <HAL_SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the second half */
  if (hsai->Instance == AUDIO_IN_SAIx)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a06      	ldr	r2, [pc, #24]	; (8005734 <HAL_SAI_RxCpltCallback+0x28>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d103      	bne.n	8005726 <HAL_SAI_RxCpltCallback+0x1a>
  {
    BSP_AUDIO_IN_TransferComplete_CallBack(0);
 800571e:	2000      	movs	r0, #0
 8005720:	f7fb fb68 	bl	8000df4 <BSP_AUDIO_IN_TransferComplete_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_TransferComplete_CallBack(1);
  }
}
 8005724:	e002      	b.n	800572c <HAL_SAI_RxCpltCallback+0x20>
    BSP_AUDIO_IN_TransferComplete_CallBack(1);
 8005726:	2001      	movs	r0, #1
 8005728:	f7fb fb64 	bl	8000df4 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 800572c:	bf00      	nop
 800572e:	3708      	adds	r7, #8
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	40015c24 	.word	0x40015c24

08005738 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(uint32_t Instance)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <WM8994_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t WM8994_Probe(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b088      	sub	sp, #32
 8005750:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8005752:	2300      	movs	r3, #0
 8005754:	61fb      	str	r3, [r7, #28]
  WM8994_IO_t              IOCtx;
  static WM8994_Object_t   WM8994Obj;
  uint32_t id;

  /* Configure the audio driver */
  IOCtx.Address     = AUDIO_I2C_ADDRESS;
 8005756:	2334      	movs	r3, #52	; 0x34
 8005758:	81bb      	strh	r3, [r7, #12]
  IOCtx.Init        = BSP_I2C4_Init;
 800575a:	4b20      	ldr	r3, [pc, #128]	; (80057dc <WM8994_Probe+0x90>)
 800575c:	607b      	str	r3, [r7, #4]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800575e:	4b20      	ldr	r3, [pc, #128]	; (80057e0 <WM8994_Probe+0x94>)
 8005760:	60bb      	str	r3, [r7, #8]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 8005762:	4b20      	ldr	r3, [pc, #128]	; (80057e4 <WM8994_Probe+0x98>)
 8005764:	617b      	str	r3, [r7, #20]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 8005766:	4b20      	ldr	r3, [pc, #128]	; (80057e8 <WM8994_Probe+0x9c>)
 8005768:	613b      	str	r3, [r7, #16]
  IOCtx.GetTick     = BSP_GetTick;
 800576a:	4b20      	ldr	r3, [pc, #128]	; (80057ec <WM8994_Probe+0xa0>)
 800576c:	61bb      	str	r3, [r7, #24]

  if(WM8994_RegisterBusIO (&WM8994Obj, &IOCtx) != WM8994_OK)
 800576e:	1d3b      	adds	r3, r7, #4
 8005770:	4619      	mov	r1, r3
 8005772:	481f      	ldr	r0, [pc, #124]	; (80057f0 <WM8994_Probe+0xa4>)
 8005774:	f7fe fb4e 	bl	8003e14 <WM8994_RegisterBusIO>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <WM8994_Probe+0x3a>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800577e:	f06f 0307 	mvn.w	r3, #7
 8005782:	61fb      	str	r3, [r7, #28]
 8005784:	e024      	b.n	80057d0 <WM8994_Probe+0x84>
  }
  else
  {
    /* Reset the codec */
    if(WM8994_Reset(&WM8994Obj) != WM8994_OK)
 8005786:	481a      	ldr	r0, [pc, #104]	; (80057f0 <WM8994_Probe+0xa4>)
 8005788:	f7fe fb2c 	bl	8003de4 <WM8994_Reset>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <WM8994_Probe+0x4e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005792:	f06f 0304 	mvn.w	r3, #4
 8005796:	61fb      	str	r3, [r7, #28]
 8005798:	e01a      	b.n	80057d0 <WM8994_Probe+0x84>
    }
    else if(WM8994_ReadID(&WM8994Obj, &id) != WM8994_OK)
 800579a:	463b      	mov	r3, r7
 800579c:	4619      	mov	r1, r3
 800579e:	4814      	ldr	r0, [pc, #80]	; (80057f0 <WM8994_Probe+0xa4>)
 80057a0:	f7fd fd1b 	bl	80031da <WM8994_ReadID>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <WM8994_Probe+0x66>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80057aa:	f06f 0304 	mvn.w	r3, #4
 80057ae:	61fb      	str	r3, [r7, #28]
 80057b0:	e00e      	b.n	80057d0 <WM8994_Probe+0x84>
    }
    else if(id != WM8994_ID)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	f648 1294 	movw	r2, #35220	; 0x8994
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d003      	beq.n	80057c4 <WM8994_Probe+0x78>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80057bc:	f06f 0306 	mvn.w	r3, #6
 80057c0:	61fb      	str	r3, [r7, #28]
 80057c2:	e005      	b.n	80057d0 <WM8994_Probe+0x84>
    }
    else
    {
      Audio_Drv = (AUDIO_Drv_t *) &WM8994_Driver;
 80057c4:	4b0b      	ldr	r3, [pc, #44]	; (80057f4 <WM8994_Probe+0xa8>)
 80057c6:	4a0c      	ldr	r2, [pc, #48]	; (80057f8 <WM8994_Probe+0xac>)
 80057c8:	601a      	str	r2, [r3, #0]
      Audio_CompObj = &WM8994Obj;
 80057ca:	4b0c      	ldr	r3, [pc, #48]	; (80057fc <WM8994_Probe+0xb0>)
 80057cc:	4a08      	ldr	r2, [pc, #32]	; (80057f0 <WM8994_Probe+0xa4>)
 80057ce:	601a      	str	r2, [r3, #0]
    }
  }
  return ret;
 80057d0:	69fb      	ldr	r3, [r7, #28]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3720      	adds	r7, #32
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	08005cfd 	.word	0x08005cfd
 80057e0:	08005d71 	.word	0x08005d71
 80057e4:	08005ef5 	.word	0x08005ef5
 80057e8:	08005e99 	.word	0x08005e99
 80057ec:	08005f51 	.word	0x08005f51
 80057f0:	240073e0 	.word	0x240073e0
 80057f4:	24007180 	.word	0x24007180
 80057f8:	240004e4 	.word	0x240004e4
 80057fc:	24007228 	.word	0x24007228

08005800 <SAI_MspInit>:
  * @brief  Initialize BSP_AUDIO_OUT MSP.
  * @param  hsai  SAI handle
  * @retval None
  */
static void SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b094      	sub	sp, #80	; 0x50
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
GPIO_InitTypeDef gpio_init_structure;
  static DMA_HandleTypeDef hdma_sai_tx, hdma_sai_rx;

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8005808:	4bad      	ldr	r3, [pc, #692]	; (8005ac0 <SAI_MspInit+0x2c0>)
 800580a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800580e:	4aac      	ldr	r2, [pc, #688]	; (8005ac0 <SAI_MspInit+0x2c0>)
 8005810:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005814:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005818:	4ba9      	ldr	r3, [pc, #676]	; (8005ac0 <SAI_MspInit+0x2c0>)
 800581a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800581e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005822:	63bb      	str	r3, [r7, #56]	; 0x38
 8005824:	6bbb      	ldr	r3, [r7, #56]	; 0x38

  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_SCK_ENABLE();
 8005826:	4ba6      	ldr	r3, [pc, #664]	; (8005ac0 <SAI_MspInit+0x2c0>)
 8005828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800582c:	4aa4      	ldr	r2, [pc, #656]	; (8005ac0 <SAI_MspInit+0x2c0>)
 800582e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005832:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005836:	4ba2      	ldr	r3, [pc, #648]	; (8005ac0 <SAI_MspInit+0x2c0>)
 8005838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800583c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005840:	637b      	str	r3, [r7, #52]	; 0x34
 8005842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  AUDIO_OUT_SAIx_SD_ENABLE();
 8005844:	4b9e      	ldr	r3, [pc, #632]	; (8005ac0 <SAI_MspInit+0x2c0>)
 8005846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800584a:	4a9d      	ldr	r2, [pc, #628]	; (8005ac0 <SAI_MspInit+0x2c0>)
 800584c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005850:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005854:	4b9a      	ldr	r3, [pc, #616]	; (8005ac0 <SAI_MspInit+0x2c0>)
 8005856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800585a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800585e:	633b      	str	r3, [r7, #48]	; 0x30
 8005860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  AUDIO_OUT_SAIx_FS_ENABLE();
 8005862:	4b97      	ldr	r3, [pc, #604]	; (8005ac0 <SAI_MspInit+0x2c0>)
 8005864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005868:	4a95      	ldr	r2, [pc, #596]	; (8005ac0 <SAI_MspInit+0x2c0>)
 800586a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800586e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005872:	4b93      	ldr	r3, [pc, #588]	; (8005ac0 <SAI_MspInit+0x2c0>)
 8005874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800587c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800587e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8005880:	2380      	movs	r3, #128	; 0x80
 8005882:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005884:	2302      	movs	r3, #2
 8005886:	643b      	str	r3, [r7, #64]	; 0x40
  gpio_init_structure.Pull = GPIO_NOPULL;
 8005888:	2300      	movs	r3, #0
 800588a:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800588c:	2303      	movs	r3, #3
 800588e:	64bb      	str	r3, [r7, #72]	; 0x48
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_AF;
 8005890:	230a      	movs	r3, #10
 8005892:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8005894:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005898:	4619      	mov	r1, r3
 800589a:	488a      	ldr	r0, [pc, #552]	; (8005ac4 <SAI_MspInit+0x2c4>)
 800589c:	f005 fbe6 	bl	800b06c <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 80058a0:	2320      	movs	r3, #32
 80058a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 80058a4:	230a      	movs	r3, #10
 80058a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_GPIO_PORT, &gpio_init_structure);
 80058a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80058ac:	4619      	mov	r1, r3
 80058ae:	4885      	ldr	r0, [pc, #532]	; (8005ac4 <SAI_MspInit+0x2c4>)
 80058b0:	f005 fbdc 	bl	800b06c <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SD_PIN;
 80058b4:	2340      	movs	r3, #64	; 0x40
 80058b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SD_AF;
 80058b8:	230a      	movs	r3, #10
 80058ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 80058bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80058c0:	4619      	mov	r1, r3
 80058c2:	4880      	ldr	r0, [pc, #512]	; (8005ac4 <SAI_MspInit+0x2c4>)
 80058c4:	f005 fbd2 	bl	800b06c <HAL_GPIO_Init>

  if (hsai->Instance != AUDIO_IN_SAI_PDMx)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a7e      	ldr	r2, [pc, #504]	; (8005ac8 <SAI_MspInit+0x2c8>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d01e      	beq.n	8005910 <SAI_MspInit+0x110>
  {
    if (haudio_out_sai.State != HAL_SAI_STATE_READY)
 80058d2:	4b7e      	ldr	r3, [pc, #504]	; (8005acc <SAI_MspInit+0x2cc>)
 80058d4:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d018      	beq.n	8005910 <SAI_MspInit+0x110>
    {
      AUDIO_OUT_SAIx_MCLK_ENABLE();
 80058de:	4b78      	ldr	r3, [pc, #480]	; (8005ac0 <SAI_MspInit+0x2c0>)
 80058e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058e4:	4a76      	ldr	r2, [pc, #472]	; (8005ac0 <SAI_MspInit+0x2c0>)
 80058e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80058ee:	4b74      	ldr	r3, [pc, #464]	; (8005ac0 <SAI_MspInit+0x2c0>)
 80058f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80058fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
      gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 80058fc:	2310      	movs	r3, #16
 80058fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      gpio_init_structure.Alternate = AUDIO_OUT_SAIx_MCLK_AF;
 8005900:	230a      	movs	r3, #10
 8005902:	64fb      	str	r3, [r7, #76]	; 0x4c
      HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8005904:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005908:	4619      	mov	r1, r3
 800590a:	486e      	ldr	r0, [pc, #440]	; (8005ac4 <SAI_MspInit+0x2c4>)
 800590c:	f005 fbae 	bl	800b06c <HAL_GPIO_Init>
    }
  }

  if (hsai->Instance == AUDIO_OUT_SAIx)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a6e      	ldr	r2, [pc, #440]	; (8005ad0 <SAI_MspInit+0x2d0>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d15c      	bne.n	80059d4 <SAI_MspInit+0x1d4>
  {
    /* Enable the DMA clock */
    AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800591a:	4b69      	ldr	r3, [pc, #420]	; (8005ac0 <SAI_MspInit+0x2c0>)
 800591c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005920:	4a67      	ldr	r2, [pc, #412]	; (8005ac0 <SAI_MspInit+0x2c0>)
 8005922:	f043 0302 	orr.w	r3, r3, #2
 8005926:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800592a:	4b65      	ldr	r3, [pc, #404]	; (8005ac0 <SAI_MspInit+0x2c0>)
 800592c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	627b      	str	r3, [r7, #36]	; 0x24
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Configure the hdma_saiTx handle parameters */
    if (Audio_Out_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_16B)
 8005938:	4b66      	ldr	r3, [pc, #408]	; (8005ad4 <SAI_MspInit+0x2d4>)
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	2b10      	cmp	r3, #16
 800593e:	d108      	bne.n	8005952 <SAI_MspInit+0x152>
    {
      hdma_sai_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005940:	4b65      	ldr	r3, [pc, #404]	; (8005ad8 <SAI_MspInit+0x2d8>)
 8005942:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005946:	615a      	str	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005948:	4b63      	ldr	r3, [pc, #396]	; (8005ad8 <SAI_MspInit+0x2d8>)
 800594a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800594e:	619a      	str	r2, [r3, #24]
 8005950:	e007      	b.n	8005962 <SAI_MspInit+0x162>
    }
    else
    {
      hdma_sai_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005952:	4b61      	ldr	r3, [pc, #388]	; (8005ad8 <SAI_MspInit+0x2d8>)
 8005954:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005958:	615a      	str	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800595a:	4b5f      	ldr	r3, [pc, #380]	; (8005ad8 <SAI_MspInit+0x2d8>)
 800595c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005960:	619a      	str	r2, [r3, #24]
    }

    hdma_sai_tx.Init.Request = AUDIO_OUT_SAIx_DMAx_REQUEST;
 8005962:	4b5d      	ldr	r3, [pc, #372]	; (8005ad8 <SAI_MspInit+0x2d8>)
 8005964:	2259      	movs	r2, #89	; 0x59
 8005966:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005968:	4b5b      	ldr	r3, [pc, #364]	; (8005ad8 <SAI_MspInit+0x2d8>)
 800596a:	2200      	movs	r2, #0
 800596c:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc = DMA_MINC_ENABLE;
 800596e:	4b5a      	ldr	r3, [pc, #360]	; (8005ad8 <SAI_MspInit+0x2d8>)
 8005970:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005974:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.Mode = DMA_CIRCULAR;
 8005976:	4b58      	ldr	r3, [pc, #352]	; (8005ad8 <SAI_MspInit+0x2d8>)
 8005978:	f44f 7280 	mov.w	r2, #256	; 0x100
 800597c:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800597e:	4b56      	ldr	r3, [pc, #344]	; (8005ad8 <SAI_MspInit+0x2d8>)
 8005980:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005984:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005986:	4b54      	ldr	r3, [pc, #336]	; (8005ad8 <SAI_MspInit+0x2d8>)
 8005988:	2204      	movs	r2, #4
 800598a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800598c:	4b52      	ldr	r3, [pc, #328]	; (8005ad8 <SAI_MspInit+0x2d8>)
 800598e:	2203      	movs	r2, #3
 8005990:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005992:	4b51      	ldr	r3, [pc, #324]	; (8005ad8 <SAI_MspInit+0x2d8>)
 8005994:	2240      	movs	r2, #64	; 0x40
 8005996:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8005998:	4b4f      	ldr	r3, [pc, #316]	; (8005ad8 <SAI_MspInit+0x2d8>)
 800599a:	4a50      	ldr	r2, [pc, #320]	; (8005adc <SAI_MspInit+0x2dc>)
 800599c:	601a      	str	r2, [r3, #0]
    hdma_sai_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800599e:	4b4e      	ldr	r3, [pc, #312]	; (8005ad8 <SAI_MspInit+0x2d8>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80059a4:	4b4c      	ldr	r3, [pc, #304]	; (8005ad8 <SAI_MspInit+0x2d8>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a4a      	ldr	r2, [pc, #296]	; (8005ad8 <SAI_MspInit+0x2d8>)
 80059ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80059b2:	4a49      	ldr	r2, [pc, #292]	; (8005ad8 <SAI_MspInit+0x2d8>)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    (void)HAL_DMA_DeInit(&hdma_sai_tx);
 80059b8:	4847      	ldr	r0, [pc, #284]	; (8005ad8 <SAI_MspInit+0x2d8>)
 80059ba:	f002 fdf1 	bl	80085a0 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    (void)HAL_DMA_Init(&hdma_sai_tx);
 80059be:	4846      	ldr	r0, [pc, #280]	; (8005ad8 <SAI_MspInit+0x2d8>)
 80059c0:	f002 fa92 	bl	8007ee8 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, BSP_AUDIO_OUT_IT_PRIORITY, 0);
 80059c4:	2200      	movs	r2, #0
 80059c6:	210e      	movs	r1, #14
 80059c8:	2039      	movs	r0, #57	; 0x39
 80059ca:	f002 f9ce 	bl	8007d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 80059ce:	2039      	movs	r0, #57	; 0x39
 80059d0:	f002 f9e5 	bl	8007d9e <HAL_NVIC_EnableIRQ>
  }

  /* Audio In Msp initialization */
  if (hsai->Instance == AUDIO_IN_SAIx)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a41      	ldr	r2, [pc, #260]	; (8005ae0 <SAI_MspInit+0x2e0>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	f040 80a7 	bne.w	8005b2e <SAI_MspInit+0x32e>
  {
    /* Enable SAI clock */
    AUDIO_IN_SAIx_CLK_ENABLE();
 80059e0:	4b37      	ldr	r3, [pc, #220]	; (8005ac0 <SAI_MspInit+0x2c0>)
 80059e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059e6:	4a36      	ldr	r2, [pc, #216]	; (8005ac0 <SAI_MspInit+0x2c0>)
 80059e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80059ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80059f0:	4b33      	ldr	r3, [pc, #204]	; (8005ac0 <SAI_MspInit+0x2c0>)
 80059f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059fa:	623b      	str	r3, [r7, #32]
 80059fc:	6a3b      	ldr	r3, [r7, #32]

    /* Enable SD GPIO clock */
    AUDIO_IN_SAIx_SD_ENABLE();
 80059fe:	4b30      	ldr	r3, [pc, #192]	; (8005ac0 <SAI_MspInit+0x2c0>)
 8005a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a04:	4a2e      	ldr	r2, [pc, #184]	; (8005ac0 <SAI_MspInit+0x2c0>)
 8005a06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005a0e:	4b2c      	ldr	r3, [pc, #176]	; (8005ac0 <SAI_MspInit+0x2c0>)
 8005a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a18:	61fb      	str	r3, [r7, #28]
 8005a1a:	69fb      	ldr	r3, [r7, #28]
    /* CODEC_SAI pin configuration: SD pin */
    gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8005a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a20:	63fb      	str	r3, [r7, #60]	; 0x3c
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005a22:	2302      	movs	r3, #2
 8005a24:	643b      	str	r3, [r7, #64]	; 0x40
    gpio_init_structure.Pull = GPIO_NOPULL;
 8005a26:	2300      	movs	r3, #0
 8005a28:	647b      	str	r3, [r7, #68]	; 0x44
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	64bb      	str	r3, [r7, #72]	; 0x48
    gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 8005a2e:	230a      	movs	r3, #10
 8005a30:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8005a32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005a36:	4619      	mov	r1, r3
 8005a38:	482a      	ldr	r0, [pc, #168]	; (8005ae4 <SAI_MspInit+0x2e4>)
 8005a3a:	f005 fb17 	bl	800b06c <HAL_GPIO_Init>

    /* Enable the DMA clock */
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8005a3e:	4b20      	ldr	r3, [pc, #128]	; (8005ac0 <SAI_MspInit+0x2c0>)
 8005a40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005a44:	4a1e      	ldr	r2, [pc, #120]	; (8005ac0 <SAI_MspInit+0x2c0>)
 8005a46:	f043 0302 	orr.w	r3, r3, #2
 8005a4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005a4e:	4b1c      	ldr	r3, [pc, #112]	; (8005ac0 <SAI_MspInit+0x2c0>)
 8005a50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	61bb      	str	r3, [r7, #24]
 8005a5a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8005a5c:	4b22      	ldr	r3, [pc, #136]	; (8005ae8 <SAI_MspInit+0x2e8>)
 8005a5e:	4a23      	ldr	r2, [pc, #140]	; (8005aec <SAI_MspInit+0x2ec>)
 8005a60:	601a      	str	r2, [r3, #0]
    hdma_sai_rx.Init.Request = AUDIO_IN_SAIx_DMAx_REQUEST;
 8005a62:	4b21      	ldr	r3, [pc, #132]	; (8005ae8 <SAI_MspInit+0x2e8>)
 8005a64:	225a      	movs	r2, #90	; 0x5a
 8005a66:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Mode = DMA_CIRCULAR;
 8005a68:	4b1f      	ldr	r3, [pc, #124]	; (8005ae8 <SAI_MspInit+0x2e8>)
 8005a6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a6e:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005a70:	4b1d      	ldr	r3, [pc, #116]	; (8005ae8 <SAI_MspInit+0x2e8>)
 8005a72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a76:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a78:	4b1b      	ldr	r3, [pc, #108]	; (8005ae8 <SAI_MspInit+0x2e8>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a7e:	4b1a      	ldr	r3, [pc, #104]	; (8005ae8 <SAI_MspInit+0x2e8>)
 8005a80:	2200      	movs	r2, #0
 8005a82:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a84:	4b18      	ldr	r3, [pc, #96]	; (8005ae8 <SAI_MspInit+0x2e8>)
 8005a86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a8a:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005a8c:	4b16      	ldr	r3, [pc, #88]	; (8005ae8 <SAI_MspInit+0x2e8>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005a92:	4b15      	ldr	r3, [pc, #84]	; (8005ae8 <SAI_MspInit+0x2e8>)
 8005a94:	2203      	movs	r2, #3
 8005a96:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8005a98:	4b13      	ldr	r3, [pc, #76]	; (8005ae8 <SAI_MspInit+0x2e8>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst = DMA_MBURST_SINGLE;
 8005a9e:	4b12      	ldr	r3, [pc, #72]	; (8005ae8 <SAI_MspInit+0x2e8>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	631a      	str	r2, [r3, #48]	; 0x30

    if (Audio_In_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_16B)
 8005aa4:	4b12      	ldr	r3, [pc, #72]	; (8005af0 <SAI_MspInit+0x2f0>)
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	2b10      	cmp	r3, #16
 8005aaa:	d123      	bne.n	8005af4 <SAI_MspInit+0x2f4>
    {
      hdma_sai_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005aac:	4b0e      	ldr	r3, [pc, #56]	; (8005ae8 <SAI_MspInit+0x2e8>)
 8005aae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ab2:	615a      	str	r2, [r3, #20]
      hdma_sai_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005ab4:	4b0c      	ldr	r3, [pc, #48]	; (8005ae8 <SAI_MspInit+0x2e8>)
 8005ab6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005aba:	619a      	str	r2, [r3, #24]
 8005abc:	e022      	b.n	8005b04 <SAI_MspInit+0x304>
 8005abe:	bf00      	nop
 8005ac0:	58024400 	.word	0x58024400
 8005ac4:	58022000 	.word	0x58022000
 8005ac8:	58005404 	.word	0x58005404
 8005acc:	2400722c 	.word	0x2400722c
 8005ad0:	40015c04 	.word	0x40015c04
 8005ad4:	240072c4 	.word	0x240072c4
 8005ad8:	24007408 	.word	0x24007408
 8005adc:	40020428 	.word	0x40020428
 8005ae0:	40015c24 	.word	0x40015c24
 8005ae4:	58021800 	.word	0x58021800
 8005ae8:	24007480 	.word	0x24007480
 8005aec:	40020470 	.word	0x40020470
 8005af0:	24007380 	.word	0x24007380
    }
    else
    {
      hdma_sai_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005af4:	4b5f      	ldr	r3, [pc, #380]	; (8005c74 <SAI_MspInit+0x474>)
 8005af6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005afa:	615a      	str	r2, [r3, #20]
      hdma_sai_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005afc:	4b5d      	ldr	r3, [pc, #372]	; (8005c74 <SAI_MspInit+0x474>)
 8005afe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005b02:	619a      	str	r2, [r3, #24]
    }

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a5b      	ldr	r2, [pc, #364]	; (8005c74 <SAI_MspInit+0x474>)
 8005b08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8005b0c:	4a59      	ldr	r2, [pc, #356]	; (8005c74 <SAI_MspInit+0x474>)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    (void)HAL_DMA_DeInit(&hdma_sai_rx);
 8005b12:	4858      	ldr	r0, [pc, #352]	; (8005c74 <SAI_MspInit+0x474>)
 8005b14:	f002 fd44 	bl	80085a0 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    (void)HAL_DMA_Init(&hdma_sai_rx);
 8005b18:	4856      	ldr	r0, [pc, #344]	; (8005c74 <SAI_MspInit+0x474>)
 8005b1a:	f002 f9e5 	bl	8007ee8 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 8005b1e:	2200      	movs	r2, #0
 8005b20:	210f      	movs	r1, #15
 8005b22:	203c      	movs	r0, #60	; 0x3c
 8005b24:	f002 f921 	bl	8007d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8005b28:	203c      	movs	r0, #60	; 0x3c
 8005b2a:	f002 f938 	bl	8007d9e <HAL_NVIC_EnableIRQ>
  }

  if (hsai->Instance == AUDIO_IN_SAI_PDMx)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a51      	ldr	r2, [pc, #324]	; (8005c78 <SAI_MspInit+0x478>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	f040 8099 	bne.w	8005c6c <SAI_MspInit+0x46c>
  {
    /* Enable SAI clock */
    AUDIO_IN_SAI_PDMx_CLK_ENABLE();
 8005b3a:	4b50      	ldr	r3, [pc, #320]	; (8005c7c <SAI_MspInit+0x47c>)
 8005b3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b40:	4a4e      	ldr	r2, [pc, #312]	; (8005c7c <SAI_MspInit+0x47c>)
 8005b42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b46:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005b4a:	4b4c      	ldr	r3, [pc, #304]	; (8005c7c <SAI_MspInit+0x47c>)
 8005b4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b54:	617b      	str	r3, [r7, #20]
 8005b56:	697b      	ldr	r3, [r7, #20]

    AUDIO_IN_SAI_PDMx_CLK_IN_ENABLE();
 8005b58:	4b48      	ldr	r3, [pc, #288]	; (8005c7c <SAI_MspInit+0x47c>)
 8005b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b5e:	4a47      	ldr	r2, [pc, #284]	; (8005c7c <SAI_MspInit+0x47c>)
 8005b60:	f043 0310 	orr.w	r3, r3, #16
 8005b64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005b68:	4b44      	ldr	r3, [pc, #272]	; (8005c7c <SAI_MspInit+0x47c>)
 8005b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b6e:	f003 0310 	and.w	r3, r3, #16
 8005b72:	613b      	str	r3, [r7, #16]
 8005b74:	693b      	ldr	r3, [r7, #16]
    AUDIO_IN_SAI_PDMx_DATA_IN_ENABLE();
 8005b76:	4b41      	ldr	r3, [pc, #260]	; (8005c7c <SAI_MspInit+0x47c>)
 8005b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b7c:	4a3f      	ldr	r2, [pc, #252]	; (8005c7c <SAI_MspInit+0x47c>)
 8005b7e:	f043 0310 	orr.w	r3, r3, #16
 8005b82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005b86:	4b3d      	ldr	r3, [pc, #244]	; (8005c7c <SAI_MspInit+0x47c>)
 8005b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b8c:	f003 0310 	and.w	r3, r3, #16
 8005b90:	60fb      	str	r3, [r7, #12]
 8005b92:	68fb      	ldr	r3, [r7, #12]

    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_CLK_IN_PIN;
 8005b94:	2320      	movs	r3, #32
 8005b96:	63fb      	str	r3, [r7, #60]	; 0x3c
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005b98:	2302      	movs	r3, #2
 8005b9a:	643b      	str	r3, [r7, #64]	; 0x40
    gpio_init_structure.Pull = GPIO_NOPULL;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	647b      	str	r3, [r7, #68]	; 0x44
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	64bb      	str	r3, [r7, #72]	; 0x48
    gpio_init_structure.Alternate = AUDIO_IN_SAI_PDMx_DATA_CLK_AF;
 8005ba4:	230a      	movs	r3, #10
 8005ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_CLK_IN_PORT, &gpio_init_structure);
 8005ba8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005bac:	4619      	mov	r1, r3
 8005bae:	4834      	ldr	r0, [pc, #208]	; (8005c80 <SAI_MspInit+0x480>)
 8005bb0:	f005 fa5c 	bl	800b06c <HAL_GPIO_Init>

    gpio_init_structure.Pull = GPIO_PULLUP;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	647b      	str	r3, [r7, #68]	; 0x44
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	64bb      	str	r3, [r7, #72]	; 0x48
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_DATA_IN_PIN;
 8005bbc:	2310      	movs	r3, #16
 8005bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_DATA_IN_PORT, &gpio_init_structure);
 8005bc0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	482e      	ldr	r0, [pc, #184]	; (8005c80 <SAI_MspInit+0x480>)
 8005bc8:	f005 fa50 	bl	800b06c <HAL_GPIO_Init>



    /* Enable the DMA clock */
    AUDIO_IN_SAI_PDMx_DMAx_CLK_ENABLE();
 8005bcc:	4b2b      	ldr	r3, [pc, #172]	; (8005c7c <SAI_MspInit+0x47c>)
 8005bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005bd2:	4a2a      	ldr	r2, [pc, #168]	; (8005c7c <SAI_MspInit+0x47c>)
 8005bd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005bdc:	4b27      	ldr	r3, [pc, #156]	; (8005c7c <SAI_MspInit+0x47c>)
 8005bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005be2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005be6:	60bb      	str	r3, [r7, #8]
 8005be8:	68bb      	ldr	r3, [r7, #8]

    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAI_PDMx_DMAx_REQUEST;
 8005bea:	4b22      	ldr	r3, [pc, #136]	; (8005c74 <SAI_MspInit+0x474>)
 8005bec:	220f      	movs	r2, #15
 8005bee:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8005bf0:	4b20      	ldr	r3, [pc, #128]	; (8005c74 <SAI_MspInit+0x474>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8005bf6:	4b1f      	ldr	r3, [pc, #124]	; (8005c74 <SAI_MspInit+0x474>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8005bfc:	4b1d      	ldr	r3, [pc, #116]	; (8005c74 <SAI_MspInit+0x474>)
 8005bfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005c02:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAI_PDMx_DMAx_PERIPH_DATA_SIZE;
 8005c04:	4b1b      	ldr	r3, [pc, #108]	; (8005c74 <SAI_MspInit+0x474>)
 8005c06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c0a:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAI_PDMx_DMAx_MEM_DATA_SIZE;
 8005c0c:	4b19      	ldr	r3, [pc, #100]	; (8005c74 <SAI_MspInit+0x474>)
 8005c0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005c12:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8005c14:	4b17      	ldr	r3, [pc, #92]	; (8005c74 <SAI_MspInit+0x474>)
 8005c16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c1a:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8005c1c:	4b15      	ldr	r3, [pc, #84]	; (8005c74 <SAI_MspInit+0x474>)
 8005c1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005c22:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8005c24:	4b13      	ldr	r3, [pc, #76]	; (8005c74 <SAI_MspInit+0x474>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8005c2a:	4b12      	ldr	r3, [pc, #72]	; (8005c74 <SAI_MspInit+0x474>)
 8005c2c:	2203      	movs	r2, #3
 8005c2e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8005c30:	4b10      	ldr	r3, [pc, #64]	; (8005c74 <SAI_MspInit+0x474>)
 8005c32:	2200      	movs	r2, #0
 8005c34:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8005c36:	4b0f      	ldr	r3, [pc, #60]	; (8005c74 <SAI_MspInit+0x474>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	631a      	str	r2, [r3, #48]	; 0x30

    hdma_sai_rx.Instance = AUDIO_IN_SAI_PDMx_DMAx_STREAM;
 8005c3c:	4b0d      	ldr	r3, [pc, #52]	; (8005c74 <SAI_MspInit+0x474>)
 8005c3e:	4a11      	ldr	r2, [pc, #68]	; (8005c84 <SAI_MspInit+0x484>)
 8005c40:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a0b      	ldr	r2, [pc, #44]	; (8005c74 <SAI_MspInit+0x474>)
 8005c46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8005c4a:	4a0a      	ldr	r2, [pc, #40]	; (8005c74 <SAI_MspInit+0x474>)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6393      	str	r3, [r2, #56]	; 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8005c50:	4808      	ldr	r0, [pc, #32]	; (8005c74 <SAI_MspInit+0x474>)
 8005c52:	f002 fca5 	bl	80085a0 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8005c56:	4807      	ldr	r0, [pc, #28]	; (8005c74 <SAI_MspInit+0x474>)
 8005c58:	f002 f946 	bl	8007ee8 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAI_PDMx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	210f      	movs	r1, #15
 8005c60:	2082      	movs	r0, #130	; 0x82
 8005c62:	f002 f882 	bl	8007d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAI_PDMx_DMAx_IRQ);
 8005c66:	2082      	movs	r0, #130	; 0x82
 8005c68:	f002 f899 	bl	8007d9e <HAL_NVIC_EnableIRQ>
  }
}
 8005c6c:	bf00      	nop
 8005c6e:	3750      	adds	r7, #80	; 0x50
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	24007480 	.word	0x24007480
 8005c78:	58005404 	.word	0x58005404
 8005c7c:	58024400 	.word	0x58024400
 8005c80:	58021000 	.word	0x58021000
 8005c84:	5802541c 	.word	0x5802541c

08005c88 <SAI_MspDeInit>:
static void SAI_MspDeInit(SAI_HandleTypeDef *hsai){
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b088      	sub	sp, #32
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef  gpio_init_structure;

    /* SAI DMA IRQ Channel deactivation */
    HAL_NVIC_DisableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8005c90:	2039      	movs	r0, #57	; 0x39
 8005c92:	f002 f892 	bl	8007dba <HAL_NVIC_DisableIRQ>

    if(hsai->Instance == AUDIO_OUT_SAIx)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a15      	ldr	r2, [pc, #84]	; (8005cf0 <SAI_MspDeInit+0x68>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d105      	bne.n	8005cac <SAI_MspDeInit+0x24>
    {
      /* Deinitialize the DMA stream */
      HAL_DMA_DeInit(hsai->hdmatx);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f002 fc7a 	bl	80085a0 <HAL_DMA_DeInit>
    }

    /* Disable SAI peripheral */
    __HAL_SAI_DISABLE(hsai);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005cba:	601a      	str	r2, [r3, #0]

    /* Deactivates CODEC_SAI pins FS, SCK, MCK and SD by putting them in input mode */
    gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN | AUDIO_OUT_SAIx_SCK_PIN | AUDIO_OUT_SAIx_SD_PIN;
 8005cbc:	23e0      	movs	r3, #224	; 0xe0
 8005cbe:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(GPIOI, gpio_init_structure.Pin);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	480b      	ldr	r0, [pc, #44]	; (8005cf4 <SAI_MspDeInit+0x6c>)
 8005cc6:	f005 fb81 	bl	800b3cc <HAL_GPIO_DeInit>

    gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8005cca:	2310      	movs	r3, #16
 8005ccc:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, gpio_init_structure.Pin);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	4808      	ldr	r0, [pc, #32]	; (8005cf4 <SAI_MspDeInit+0x6c>)
 8005cd4:	f005 fb7a 	bl	800b3cc <HAL_GPIO_DeInit>

    /* Disable SAI clock */
    AUDIO_OUT_SAIx_CLK_DISABLE();
 8005cd8:	4b07      	ldr	r3, [pc, #28]	; (8005cf8 <SAI_MspDeInit+0x70>)
 8005cda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005cde:	4a06      	ldr	r2, [pc, #24]	; (8005cf8 <SAI_MspDeInit+0x70>)
 8005ce0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005ce4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* GPIO pins clock and DMA clock can be shut down in the applic
       by surcharging this __weak function */
}
 8005ce8:	bf00      	nop
 8005cea:	3720      	adds	r7, #32
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40015c04 	.word	0x40015c04
 8005cf4:	58022000 	.word	0x58022000
 8005cf8:	58024400 	.word	0x58024400

08005cfc <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8005d02:	2300      	movs	r3, #0
 8005d04:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8005d06:	4b16      	ldr	r3, [pc, #88]	; (8005d60 <BSP_I2C4_Init+0x64>)
 8005d08:	4a16      	ldr	r2, [pc, #88]	; (8005d64 <BSP_I2C4_Init+0x68>)
 8005d0a:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8005d0c:	4b16      	ldr	r3, [pc, #88]	; (8005d68 <BSP_I2C4_Init+0x6c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d11f      	bne.n	8005d54 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8005d14:	4b14      	ldr	r3, [pc, #80]	; (8005d68 <BSP_I2C4_Init+0x6c>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	4a13      	ldr	r2, [pc, #76]	; (8005d68 <BSP_I2C4_Init+0x6c>)
 8005d1c:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8005d1e:	4810      	ldr	r0, [pc, #64]	; (8005d60 <BSP_I2C4_Init+0x64>)
 8005d20:	f005 ff92 	bl	800bc48 <HAL_I2C_GetState>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d114      	bne.n	8005d54 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 8005d2a:	480d      	ldr	r0, [pc, #52]	; (8005d60 <BSP_I2C4_Init+0x64>)
 8005d2c:	f000 fb8e 	bl	800644c <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8005d30:	f007 feec 	bl	800db0c <HAL_RCC_GetPCLK2Freq>
 8005d34:	4603      	mov	r3, r0
 8005d36:	490d      	ldr	r1, [pc, #52]	; (8005d6c <BSP_I2C4_Init+0x70>)
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 f911 	bl	8005f60 <I2C_GetTiming>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	4619      	mov	r1, r3
 8005d42:	4807      	ldr	r0, [pc, #28]	; (8005d60 <BSP_I2C4_Init+0x64>)
 8005d44:	f000 f838 	bl	8005db8 <MX_I2C4_Init>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d002      	beq.n	8005d54 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8005d4e:	f06f 0307 	mvn.w	r3, #7
 8005d52:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8005d54:	687b      	ldr	r3, [r7, #4]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	24007f00 	.word	0x24007f00
 8005d64:	58001c00 	.word	0x58001c00
 8005d68:	240074f8 	.word	0x240074f8
 8005d6c:	000186a0 	.word	0x000186a0

08005d70 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8005d76:	2300      	movs	r3, #0
 8005d78:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 8005d7a:	4b0d      	ldr	r3, [pc, #52]	; (8005db0 <BSP_I2C4_DeInit+0x40>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	4a0b      	ldr	r2, [pc, #44]	; (8005db0 <BSP_I2C4_DeInit+0x40>)
 8005d82:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 8005d84:	4b0a      	ldr	r3, [pc, #40]	; (8005db0 <BSP_I2C4_DeInit+0x40>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10b      	bne.n	8005da4 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 8005d8c:	4809      	ldr	r0, [pc, #36]	; (8005db4 <BSP_I2C4_DeInit+0x44>)
 8005d8e:	f000 fbc9 	bl	8006524 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8005d92:	4808      	ldr	r0, [pc, #32]	; (8005db4 <BSP_I2C4_DeInit+0x44>)
 8005d94:	f005 fce6 	bl	800b764 <HAL_I2C_DeInit>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d002      	beq.n	8005da4 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8005d9e:	f06f 0307 	mvn.w	r3, #7
 8005da2:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8005da4:	687b      	ldr	r3, [r7, #4]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	240074f8 	.word	0x240074f8
 8005db4:	24007f00 	.word	0x24007f00

08005db8 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f005 fc24 	bl	800b644 <HAL_I2C_Init>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	73fb      	strb	r3, [r7, #15]
 8005e06:	e014      	b.n	8005e32 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8005e0c:	68b9      	ldr	r1, [r7, #8]
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f006 f9ec 	bl	800c1ec <HAL_I2CEx_ConfigAnalogFilter>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d002      	beq.n	8005e20 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	73fb      	strb	r3, [r7, #15]
 8005e1e:	e008      	b.n	8005e32 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8005e20:	2100      	movs	r1, #0
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f006 fa2d 	bl	800c282 <HAL_I2CEx_ConfigDigitalFilter>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d001      	beq.n	8005e32 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b088      	sub	sp, #32
 8005e40:	af02      	add	r7, sp, #8
 8005e42:	60ba      	str	r2, [r7, #8]
 8005e44:	461a      	mov	r2, r3
 8005e46:	4603      	mov	r3, r0
 8005e48:	81fb      	strh	r3, [r7, #14]
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	81bb      	strh	r3, [r7, #12]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8005e52:	89b9      	ldrh	r1, [r7, #12]
 8005e54:	89f8      	ldrh	r0, [r7, #14]
 8005e56:	88fb      	ldrh	r3, [r7, #6]
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f000 fbab 	bl	80065b8 <I2C4_ReadReg>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d102      	bne.n	8005e6e <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	617b      	str	r3, [r7, #20]
 8005e6c:	e00c      	b.n	8005e88 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8005e6e:	4809      	ldr	r0, [pc, #36]	; (8005e94 <BSP_I2C4_ReadReg+0x58>)
 8005e70:	f005 fef8 	bl	800bc64 <HAL_I2C_GetError>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b04      	cmp	r3, #4
 8005e78:	d103      	bne.n	8005e82 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005e7a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8005e7e:	617b      	str	r3, [r7, #20]
 8005e80:	e002      	b.n	8005e88 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8005e82:	f06f 0303 	mvn.w	r3, #3
 8005e86:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8005e88:	697b      	ldr	r3, [r7, #20]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3718      	adds	r7, #24
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	24007f00 	.word	0x24007f00

08005e98 <BSP_I2C4_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b088      	sub	sp, #32
 8005e9c:	af02      	add	r7, sp, #8
 8005e9e:	60ba      	str	r2, [r7, #8]
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	81fb      	strh	r3, [r7, #14]
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	81bb      	strh	r3, [r7, #12]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8005eae:	89b9      	ldrh	r1, [r7, #12]
 8005eb0:	89f8      	ldrh	r0, [r7, #14]
 8005eb2:	88fb      	ldrh	r3, [r7, #6]
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	2202      	movs	r2, #2
 8005eba:	f000 fb57 	bl	800656c <I2C4_WriteReg>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d102      	bne.n	8005eca <BSP_I2C4_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	617b      	str	r3, [r7, #20]
 8005ec8:	e00c      	b.n	8005ee4 <BSP_I2C4_WriteReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8005eca:	4809      	ldr	r0, [pc, #36]	; (8005ef0 <BSP_I2C4_WriteReg16+0x58>)
 8005ecc:	f005 feca 	bl	800bc64 <HAL_I2C_GetError>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b04      	cmp	r3, #4
 8005ed4:	d103      	bne.n	8005ede <BSP_I2C4_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005ed6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	e002      	b.n	8005ee4 <BSP_I2C4_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8005ede:	f06f 0303 	mvn.w	r3, #3
 8005ee2:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8005ee4:	697b      	ldr	r3, [r7, #20]
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3718      	adds	r7, #24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	24007f00 	.word	0x24007f00

08005ef4 <BSP_I2C4_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af02      	add	r7, sp, #8
 8005efa:	60ba      	str	r2, [r7, #8]
 8005efc:	461a      	mov	r2, r3
 8005efe:	4603      	mov	r3, r0
 8005f00:	81fb      	strh	r3, [r7, #14]
 8005f02:	460b      	mov	r3, r1
 8005f04:	81bb      	strh	r3, [r7, #12]
 8005f06:	4613      	mov	r3, r2
 8005f08:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8005f0a:	89b9      	ldrh	r1, [r7, #12]
 8005f0c:	89f8      	ldrh	r0, [r7, #14]
 8005f0e:	88fb      	ldrh	r3, [r7, #6]
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2202      	movs	r2, #2
 8005f16:	f000 fb4f 	bl	80065b8 <I2C4_ReadReg>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d102      	bne.n	8005f26 <BSP_I2C4_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8005f20:	2300      	movs	r3, #0
 8005f22:	617b      	str	r3, [r7, #20]
 8005f24:	e00c      	b.n	8005f40 <BSP_I2C4_ReadReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8005f26:	4809      	ldr	r0, [pc, #36]	; (8005f4c <BSP_I2C4_ReadReg16+0x58>)
 8005f28:	f005 fe9c 	bl	800bc64 <HAL_I2C_GetError>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b04      	cmp	r3, #4
 8005f30:	d103      	bne.n	8005f3a <BSP_I2C4_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005f32:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8005f36:	617b      	str	r3, [r7, #20]
 8005f38:	e002      	b.n	8005f40 <BSP_I2C4_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8005f3a:	f06f 0303 	mvn.w	r3, #3
 8005f3e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8005f40:	697b      	ldr	r3, [r7, #20]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3718      	adds	r7, #24
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	24007f00 	.word	0x24007f00

08005f50 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8005f54:	f001 fdbe 	bl	8007ad4 <HAL_GetTick>
 8005f58:	4603      	mov	r3, r0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	bd80      	pop	{r7, pc}
	...

08005f60 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d06b      	beq.n	800604c <I2C_GetTiming+0xec>
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d068      	beq.n	800604c <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	613b      	str	r3, [r7, #16]
 8005f7e:	e060      	b.n	8006042 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8005f80:	4a35      	ldr	r2, [pc, #212]	; (8006058 <I2C_GetTiming+0xf8>)
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	212c      	movs	r1, #44	; 0x2c
 8005f86:	fb01 f303 	mul.w	r3, r1, r3
 8005f8a:	4413      	add	r3, r2
 8005f8c:	3304      	adds	r3, #4
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d352      	bcc.n	800603c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8005f96:	4a30      	ldr	r2, [pc, #192]	; (8006058 <I2C_GetTiming+0xf8>)
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	212c      	movs	r1, #44	; 0x2c
 8005f9c:	fb01 f303 	mul.w	r3, r1, r3
 8005fa0:	4413      	add	r3, r2
 8005fa2:	3308      	adds	r3, #8
 8005fa4:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d847      	bhi.n	800603c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8005fac:	6939      	ldr	r1, [r7, #16]
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f856 	bl	8006060 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8005fb4:	6939      	ldr	r1, [r7, #16]
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f940 	bl	800623c <I2C_Compute_SCLL_SCLH>
 8005fbc:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2b7f      	cmp	r3, #127	; 0x7f
 8005fc2:	d842      	bhi.n	800604a <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005fc4:	4925      	ldr	r1, [pc, #148]	; (800605c <I2C_GetTiming+0xfc>)
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	440b      	add	r3, r1
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8005fd6:	4821      	ldr	r0, [pc, #132]	; (800605c <I2C_GetTiming+0xfc>)
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4403      	add	r3, r0
 8005fe4:	3304      	adds	r3, #4
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	051b      	lsls	r3, r3, #20
 8005fea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005fee:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8005ff0:	481a      	ldr	r0, [pc, #104]	; (800605c <I2C_GetTiming+0xfc>)
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4403      	add	r3, r0
 8005ffe:	3308      	adds	r3, #8
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	041b      	lsls	r3, r3, #16
 8006004:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8006008:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800600a:	4814      	ldr	r0, [pc, #80]	; (800605c <I2C_GetTiming+0xfc>)
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	4613      	mov	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4403      	add	r3, r0
 8006018:	330c      	adds	r3, #12
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	021b      	lsls	r3, r3, #8
 800601e:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8006020:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8006022:	480e      	ldr	r0, [pc, #56]	; (800605c <I2C_GetTiming+0xfc>)
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	4613      	mov	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4403      	add	r3, r0
 8006030:	3310      	adds	r3, #16
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006036:	430b      	orrs	r3, r1
 8006038:	617b      	str	r3, [r7, #20]
        }
        break;
 800603a:	e006      	b.n	800604a <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	3301      	adds	r3, #1
 8006040:	613b      	str	r3, [r7, #16]
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	2b02      	cmp	r3, #2
 8006046:	d99b      	bls.n	8005f80 <I2C_GetTiming+0x20>
 8006048:	e000      	b.n	800604c <I2C_GetTiming+0xec>
        break;
 800604a:	bf00      	nop
      }
    }
  }

  return ret;
 800604c:	697b      	ldr	r3, [r7, #20]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	0801b334 	.word	0x0801b334
 800605c:	240074fc 	.word	0x240074fc

08006060 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8006060:	b480      	push	{r7}
 8006062:	b08f      	sub	sp, #60	; 0x3c
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800606a:	2310      	movs	r3, #16
 800606c:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	085a      	lsrs	r2, r3, #1
 8006072:	4b6e      	ldr	r3, [pc, #440]	; (800622c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8006074:	4413      	add	r3, r2
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	fbb3 f3f2 	udiv	r3, r3, r2
 800607c:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800607e:	2332      	movs	r3, #50	; 0x32
 8006080:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8006082:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006086:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8006088:	4a69      	ldr	r2, [pc, #420]	; (8006230 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	212c      	movs	r1, #44	; 0x2c
 800608e:	fb01 f303 	mul.w	r3, r1, r3
 8006092:	4413      	add	r3, r2
 8006094:	3324      	adds	r3, #36	; 0x24
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4618      	mov	r0, r3
 800609a:	4a65      	ldr	r2, [pc, #404]	; (8006230 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	212c      	movs	r1, #44	; 0x2c
 80060a0:	fb01 f303 	mul.w	r3, r1, r3
 80060a4:	4413      	add	r3, r2
 80060a6:	330c      	adds	r3, #12
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80060ac:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80060ae:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80060b0:	495f      	ldr	r1, [pc, #380]	; (8006230 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	202c      	movs	r0, #44	; 0x2c
 80060b6:	fb00 f303 	mul.w	r3, r0, r3
 80060ba:	440b      	add	r3, r1
 80060bc:	3328      	adds	r3, #40	; 0x28
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	3303      	adds	r3, #3
 80060c2:	69f9      	ldr	r1, [r7, #28]
 80060c4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80060cc:	4a58      	ldr	r2, [pc, #352]	; (8006230 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	212c      	movs	r1, #44	; 0x2c
 80060d2:	fb01 f303 	mul.w	r3, r1, r3
 80060d6:	4413      	add	r3, r2
 80060d8:	3310      	adds	r3, #16
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4618      	mov	r0, r3
 80060de:	4a54      	ldr	r2, [pc, #336]	; (8006230 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	212c      	movs	r1, #44	; 0x2c
 80060e4:	fb01 f303 	mul.w	r3, r1, r3
 80060e8:	4413      	add	r3, r2
 80060ea:	3320      	adds	r3, #32
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80060f0:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80060f2:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80060f4:	494e      	ldr	r1, [pc, #312]	; (8006230 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	202c      	movs	r0, #44	; 0x2c
 80060fa:	fb00 f303 	mul.w	r3, r0, r3
 80060fe:	440b      	add	r3, r1
 8006100:	3328      	adds	r3, #40	; 0x28
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3304      	adds	r3, #4
 8006106:	69f9      	ldr	r1, [r7, #28]
 8006108:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8006110:	4a47      	ldr	r2, [pc, #284]	; (8006230 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	212c      	movs	r1, #44	; 0x2c
 8006116:	fb01 f303 	mul.w	r3, r1, r3
 800611a:	4413      	add	r3, r2
 800611c:	3320      	adds	r3, #32
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4618      	mov	r0, r3
 8006122:	4a43      	ldr	r2, [pc, #268]	; (8006230 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	212c      	movs	r1, #44	; 0x2c
 8006128:	fb01 f303 	mul.w	r3, r1, r3
 800612c:	4413      	add	r3, r2
 800612e:	3314      	adds	r3, #20
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4403      	add	r3, r0
 8006134:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8006136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006138:	2b00      	cmp	r3, #0
 800613a:	dc01      	bgt.n	8006140 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800613c:	2300      	movs	r3, #0
 800613e:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8006140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006142:	2b00      	cmp	r3, #0
 8006144:	dc01      	bgt.n	800614a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8006146:	2300      	movs	r3, #0
 8006148:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800614a:	2300      	movs	r3, #0
 800614c:	62bb      	str	r3, [r7, #40]	; 0x28
 800614e:	e062      	b.n	8006216 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8006150:	2300      	movs	r3, #0
 8006152:	627b      	str	r3, [r7, #36]	; 0x24
 8006154:	e059      	b.n	800620a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	3301      	adds	r3, #1
 800615a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800615c:	3201      	adds	r2, #1
 800615e:	fb03 f202 	mul.w	r2, r3, r2
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	fb02 f303 	mul.w	r3, r2, r3
 8006168:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	429a      	cmp	r2, r3
 8006170:	d348      	bcc.n	8006204 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8006172:	2300      	movs	r3, #0
 8006174:	623b      	str	r3, [r7, #32]
 8006176:	e042      	b.n	80061fe <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8006178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617a:	3301      	adds	r3, #1
 800617c:	6a3a      	ldr	r2, [r7, #32]
 800617e:	fb03 f202 	mul.w	r2, r3, r2
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	fb02 f303 	mul.w	r3, r2, r3
 8006188:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800618a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	429a      	cmp	r2, r3
 8006190:	d332      	bcc.n	80061f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8006192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	429a      	cmp	r2, r3
 8006198:	d82e      	bhi.n	80061f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800619a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800619c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800619e:	429a      	cmp	r2, r3
 80061a0:	d02a      	beq.n	80061f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80061a2:	4b24      	ldr	r3, [pc, #144]	; (8006234 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	4924      	ldr	r1, [pc, #144]	; (8006238 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80061a8:	4613      	mov	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	440b      	add	r3, r1
 80061b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061b4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80061b6:	4b1f      	ldr	r3, [pc, #124]	; (8006234 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	491f      	ldr	r1, [pc, #124]	; (8006238 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80061bc:	4613      	mov	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	440b      	add	r3, r1
 80061c6:	3304      	adds	r3, #4
 80061c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ca:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80061cc:	4b19      	ldr	r3, [pc, #100]	; (8006234 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	4919      	ldr	r1, [pc, #100]	; (8006238 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80061d2:	4613      	mov	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	440b      	add	r3, r1
 80061dc:	3308      	adds	r3, #8
 80061de:	6a3a      	ldr	r2, [r7, #32]
 80061e0:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 80061e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e4:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 80061e6:	4b13      	ldr	r3, [pc, #76]	; (8006234 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3301      	adds	r3, #1
 80061ec:	4a11      	ldr	r2, [pc, #68]	; (8006234 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80061ee:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80061f0:	4b10      	ldr	r3, [pc, #64]	; (8006234 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b7f      	cmp	r3, #127	; 0x7f
 80061f6:	d812      	bhi.n	800621e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80061f8:	6a3b      	ldr	r3, [r7, #32]
 80061fa:	3301      	adds	r3, #1
 80061fc:	623b      	str	r3, [r7, #32]
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	2b0f      	cmp	r3, #15
 8006202:	d9b9      	bls.n	8006178 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	3301      	adds	r3, #1
 8006208:	627b      	str	r3, [r7, #36]	; 0x24
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	2b0f      	cmp	r3, #15
 800620e:	d9a2      	bls.n	8006156 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8006210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006212:	3301      	adds	r3, #1
 8006214:	62bb      	str	r3, [r7, #40]	; 0x28
 8006216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006218:	2b0f      	cmp	r3, #15
 800621a:	d999      	bls.n	8006150 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800621c:	e000      	b.n	8006220 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800621e:	bf00      	nop
          }
        }
      }
    }
  }
}
 8006220:	373c      	adds	r7, #60	; 0x3c
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	3b9aca00 	.word	0x3b9aca00
 8006230:	0801b334 	.word	0x0801b334
 8006234:	24007efc 	.word	0x24007efc
 8006238:	240074fc 	.word	0x240074fc

0800623c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800623c:	b480      	push	{r7}
 800623e:	b093      	sub	sp, #76	; 0x4c
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8006246:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800624a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	085a      	lsrs	r2, r3, #1
 8006250:	4b7a      	ldr	r3, [pc, #488]	; (800643c <I2C_Compute_SCLL_SCLH+0x200>)
 8006252:	4413      	add	r3, r2
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	fbb3 f3f2 	udiv	r3, r3, r2
 800625a:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 800625c:	4a78      	ldr	r2, [pc, #480]	; (8006440 <I2C_Compute_SCLL_SCLH+0x204>)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	212c      	movs	r1, #44	; 0x2c
 8006262:	fb01 f303 	mul.w	r3, r1, r3
 8006266:	4413      	add	r3, r2
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	085a      	lsrs	r2, r3, #1
 800626c:	4b73      	ldr	r3, [pc, #460]	; (800643c <I2C_Compute_SCLL_SCLH+0x200>)
 800626e:	4413      	add	r3, r2
 8006270:	4973      	ldr	r1, [pc, #460]	; (8006440 <I2C_Compute_SCLL_SCLH+0x204>)
 8006272:	683a      	ldr	r2, [r7, #0]
 8006274:	202c      	movs	r0, #44	; 0x2c
 8006276:	fb00 f202 	mul.w	r2, r0, r2
 800627a:	440a      	add	r2, r1
 800627c:	6812      	ldr	r2, [r2, #0]
 800627e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006282:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8006284:	2332      	movs	r3, #50	; 0x32
 8006286:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8006288:	4a6d      	ldr	r2, [pc, #436]	; (8006440 <I2C_Compute_SCLL_SCLH+0x204>)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	212c      	movs	r1, #44	; 0x2c
 800628e:	fb01 f303 	mul.w	r3, r1, r3
 8006292:	4413      	add	r3, r2
 8006294:	3328      	adds	r3, #40	; 0x28
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629a:	fb02 f303 	mul.w	r3, r2, r3
 800629e:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 80062a0:	4a67      	ldr	r2, [pc, #412]	; (8006440 <I2C_Compute_SCLL_SCLH+0x204>)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	212c      	movs	r1, #44	; 0x2c
 80062a6:	fb01 f303 	mul.w	r3, r1, r3
 80062aa:	4413      	add	r3, r2
 80062ac:	3304      	adds	r3, #4
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a62      	ldr	r2, [pc, #392]	; (800643c <I2C_Compute_SCLL_SCLH+0x200>)
 80062b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b6:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 80062b8:	4a61      	ldr	r2, [pc, #388]	; (8006440 <I2C_Compute_SCLL_SCLH+0x204>)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	212c      	movs	r1, #44	; 0x2c
 80062be:	fb01 f303 	mul.w	r3, r1, r3
 80062c2:	4413      	add	r3, r2
 80062c4:	3308      	adds	r3, #8
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a5c      	ldr	r2, [pc, #368]	; (800643c <I2C_Compute_SCLL_SCLH+0x200>)
 80062ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ce:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 80062d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d2:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80062d4:	2300      	movs	r3, #0
 80062d6:	637b      	str	r3, [r7, #52]	; 0x34
 80062d8:	e0a3      	b.n	8006422 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80062da:	495a      	ldr	r1, [pc, #360]	; (8006444 <I2C_Compute_SCLL_SCLH+0x208>)
 80062dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062de:	4613      	mov	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	440b      	add	r3, r1
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	1c5a      	adds	r2, r3, #1
 80062ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ee:	fb02 f303 	mul.w	r3, r2, r3
 80062f2:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80062f4:	2300      	movs	r3, #0
 80062f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062f8:	e08c      	b.n	8006414 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80062fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	441a      	add	r2, r3
 8006300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006302:	3301      	adds	r3, #1
 8006304:	6979      	ldr	r1, [r7, #20]
 8006306:	fb03 f101 	mul.w	r1, r3, r1
 800630a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630c:	005b      	lsls	r3, r3, #1
 800630e:	440b      	add	r3, r1
 8006310:	4413      	add	r3, r2
 8006312:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8006314:	4a4a      	ldr	r2, [pc, #296]	; (8006440 <I2C_Compute_SCLL_SCLH+0x204>)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	212c      	movs	r1, #44	; 0x2c
 800631a:	fb01 f303 	mul.w	r3, r1, r3
 800631e:	4413      	add	r3, r2
 8006320:	3318      	adds	r3, #24
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	429a      	cmp	r2, r3
 8006328:	d971      	bls.n	800640e <I2C_Compute_SCLL_SCLH+0x1d2>
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632e:	1ad2      	subs	r2, r2, r3
 8006330:	6a3b      	ldr	r3, [r7, #32]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	089b      	lsrs	r3, r3, #2
 8006336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006338:	429a      	cmp	r2, r3
 800633a:	d268      	bcs.n	800640e <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800633c:	2300      	movs	r3, #0
 800633e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006340:	e062      	b.n	8006408 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8006342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006344:	6a3b      	ldr	r3, [r7, #32]
 8006346:	441a      	add	r2, r3
 8006348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634a:	3301      	adds	r3, #1
 800634c:	6979      	ldr	r1, [r7, #20]
 800634e:	fb03 f101 	mul.w	r1, r3, r1
 8006352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	440b      	add	r3, r1
 8006358:	4413      	add	r3, r2
 800635a:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	441a      	add	r2, r3
 8006362:	4937      	ldr	r1, [pc, #220]	; (8006440 <I2C_Compute_SCLL_SCLH+0x204>)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	202c      	movs	r0, #44	; 0x2c
 8006368:	fb00 f303 	mul.w	r3, r0, r3
 800636c:	440b      	add	r3, r1
 800636e:	3320      	adds	r3, #32
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	441a      	add	r2, r3
 8006374:	4932      	ldr	r1, [pc, #200]	; (8006440 <I2C_Compute_SCLL_SCLH+0x204>)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	202c      	movs	r0, #44	; 0x2c
 800637a:	fb00 f303 	mul.w	r3, r0, r3
 800637e:	440b      	add	r3, r1
 8006380:	3324      	adds	r3, #36	; 0x24
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4413      	add	r3, r2
 8006386:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	429a      	cmp	r2, r3
 800638e:	d338      	bcc.n	8006402 <I2C_Compute_SCLL_SCLH+0x1c6>
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	429a      	cmp	r2, r3
 8006396:	d834      	bhi.n	8006402 <I2C_Compute_SCLL_SCLH+0x1c6>
 8006398:	4a29      	ldr	r2, [pc, #164]	; (8006440 <I2C_Compute_SCLL_SCLH+0x204>)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	212c      	movs	r1, #44	; 0x2c
 800639e:	fb01 f303 	mul.w	r3, r1, r3
 80063a2:	4413      	add	r3, r2
 80063a4:	331c      	adds	r3, #28
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d329      	bcc.n	8006402 <I2C_Compute_SCLL_SCLH+0x1c6>
 80063ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d225      	bcs.n	8006402 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 80063be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	da02      	bge.n	80063ca <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 80063c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c6:	425b      	negs	r3, r3
 80063c8:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 80063ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d917      	bls.n	8006402 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 80063d6:	491b      	ldr	r1, [pc, #108]	; (8006444 <I2C_Compute_SCLL_SCLH+0x208>)
 80063d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063da:	4613      	mov	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	440b      	add	r3, r1
 80063e4:	3310      	adds	r3, #16
 80063e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063e8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 80063ea:	4916      	ldr	r1, [pc, #88]	; (8006444 <I2C_Compute_SCLL_SCLH+0x208>)
 80063ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063ee:	4613      	mov	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4413      	add	r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	440b      	add	r3, r1
 80063f8:	330c      	adds	r3, #12
 80063fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063fc:	601a      	str	r2, [r3, #0]
              ret = count;
 80063fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006400:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8006402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006404:	3301      	adds	r3, #1
 8006406:	63bb      	str	r3, [r7, #56]	; 0x38
 8006408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640a:	2bff      	cmp	r3, #255	; 0xff
 800640c:	d999      	bls.n	8006342 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800640e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006410:	3301      	adds	r3, #1
 8006412:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006416:	2bff      	cmp	r3, #255	; 0xff
 8006418:	f67f af6f 	bls.w	80062fa <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800641c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800641e:	3301      	adds	r3, #1
 8006420:	637b      	str	r3, [r7, #52]	; 0x34
 8006422:	4b09      	ldr	r3, [pc, #36]	; (8006448 <I2C_Compute_SCLL_SCLH+0x20c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006428:	429a      	cmp	r2, r3
 800642a:	f4ff af56 	bcc.w	80062da <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800642e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006430:	4618      	mov	r0, r3
 8006432:	374c      	adds	r7, #76	; 0x4c
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	3b9aca00 	.word	0x3b9aca00
 8006440:	0801b334 	.word	0x0801b334
 8006444:	240074fc 	.word	0x240074fc
 8006448:	24007efc 	.word	0x24007efc

0800644c <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b08a      	sub	sp, #40	; 0x28
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8006454:	4b31      	ldr	r3, [pc, #196]	; (800651c <I2C4_MspInit+0xd0>)
 8006456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800645a:	4a30      	ldr	r2, [pc, #192]	; (800651c <I2C4_MspInit+0xd0>)
 800645c:	f043 0308 	orr.w	r3, r3, #8
 8006460:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006464:	4b2d      	ldr	r3, [pc, #180]	; (800651c <I2C4_MspInit+0xd0>)
 8006466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800646a:	f003 0308 	and.w	r3, r3, #8
 800646e:	613b      	str	r3, [r7, #16]
 8006470:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8006472:	4b2a      	ldr	r3, [pc, #168]	; (800651c <I2C4_MspInit+0xd0>)
 8006474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006478:	4a28      	ldr	r2, [pc, #160]	; (800651c <I2C4_MspInit+0xd0>)
 800647a:	f043 0308 	orr.w	r3, r3, #8
 800647e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006482:	4b26      	ldr	r3, [pc, #152]	; (800651c <I2C4_MspInit+0xd0>)
 8006484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006488:	f003 0308 	and.w	r3, r3, #8
 800648c:	60fb      	str	r3, [r7, #12]
 800648e:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8006490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006494:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8006496:	2312      	movs	r3, #18
 8006498:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800649a:	2300      	movs	r3, #0
 800649c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800649e:	2302      	movs	r3, #2
 80064a0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80064a2:	2304      	movs	r3, #4
 80064a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80064a6:	f107 0314 	add.w	r3, r7, #20
 80064aa:	4619      	mov	r1, r3
 80064ac:	481c      	ldr	r0, [pc, #112]	; (8006520 <I2C4_MspInit+0xd4>)
 80064ae:	f004 fddd 	bl	800b06c <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80064b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064b6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80064b8:	2312      	movs	r3, #18
 80064ba:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80064bc:	2300      	movs	r3, #0
 80064be:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80064c0:	2302      	movs	r3, #2
 80064c2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 80064c4:	2304      	movs	r3, #4
 80064c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80064c8:	f107 0314 	add.w	r3, r7, #20
 80064cc:	4619      	mov	r1, r3
 80064ce:	4814      	ldr	r0, [pc, #80]	; (8006520 <I2C4_MspInit+0xd4>)
 80064d0:	f004 fdcc 	bl	800b06c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 80064d4:	4b11      	ldr	r3, [pc, #68]	; (800651c <I2C4_MspInit+0xd0>)
 80064d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80064da:	4a10      	ldr	r2, [pc, #64]	; (800651c <I2C4_MspInit+0xd0>)
 80064dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80064e4:	4b0d      	ldr	r3, [pc, #52]	; (800651c <I2C4_MspInit+0xd0>)
 80064e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80064ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ee:	60bb      	str	r3, [r7, #8]
 80064f0:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 80064f2:	4b0a      	ldr	r3, [pc, #40]	; (800651c <I2C4_MspInit+0xd0>)
 80064f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80064f8:	4a08      	ldr	r2, [pc, #32]	; (800651c <I2C4_MspInit+0xd0>)
 80064fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064fe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8006502:	4b06      	ldr	r3, [pc, #24]	; (800651c <I2C4_MspInit+0xd0>)
 8006504:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006508:	4a04      	ldr	r2, [pc, #16]	; (800651c <I2C4_MspInit+0xd0>)
 800650a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800650e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8006512:	bf00      	nop
 8006514:	3728      	adds	r7, #40	; 0x28
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	58024400 	.word	0x58024400
 8006520:	58020c00 	.word	0x58020c00

08006524 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b088      	sub	sp, #32
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800652c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006530:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	4619      	mov	r1, r3
 8006536:	480b      	ldr	r0, [pc, #44]	; (8006564 <I2C4_MspDeInit+0x40>)
 8006538:	f004 ff48 	bl	800b3cc <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800653c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006540:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4619      	mov	r1, r3
 8006546:	4807      	ldr	r0, [pc, #28]	; (8006564 <I2C4_MspDeInit+0x40>)
 8006548:	f004 ff40 	bl	800b3cc <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800654c:	4b06      	ldr	r3, [pc, #24]	; (8006568 <I2C4_MspDeInit+0x44>)
 800654e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006552:	4a05      	ldr	r2, [pc, #20]	; (8006568 <I2C4_MspDeInit+0x44>)
 8006554:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006558:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 800655c:	bf00      	nop
 800655e:	3720      	adds	r7, #32
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	58020c00 	.word	0x58020c00
 8006568:	58024400 	.word	0x58024400

0800656c <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b088      	sub	sp, #32
 8006570:	af04      	add	r7, sp, #16
 8006572:	607b      	str	r3, [r7, #4]
 8006574:	4603      	mov	r3, r0
 8006576:	81fb      	strh	r3, [r7, #14]
 8006578:	460b      	mov	r3, r1
 800657a:	81bb      	strh	r3, [r7, #12]
 800657c:	4613      	mov	r3, r2
 800657e:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8006580:	8978      	ldrh	r0, [r7, #10]
 8006582:	89ba      	ldrh	r2, [r7, #12]
 8006584:	89f9      	ldrh	r1, [r7, #14]
 8006586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800658a:	9302      	str	r3, [sp, #8]
 800658c:	8b3b      	ldrh	r3, [r7, #24]
 800658e:	9301      	str	r3, [sp, #4]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	4603      	mov	r3, r0
 8006596:	4807      	ldr	r0, [pc, #28]	; (80065b4 <I2C4_WriteReg+0x48>)
 8006598:	f005 f928 	bl	800b7ec <HAL_I2C_Mem_Write>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80065a2:	2300      	movs	r3, #0
 80065a4:	e001      	b.n	80065aa <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80065a6:	f06f 0307 	mvn.w	r3, #7
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	24007f00 	.word	0x24007f00

080065b8 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b088      	sub	sp, #32
 80065bc:	af04      	add	r7, sp, #16
 80065be:	607b      	str	r3, [r7, #4]
 80065c0:	4603      	mov	r3, r0
 80065c2:	81fb      	strh	r3, [r7, #14]
 80065c4:	460b      	mov	r3, r1
 80065c6:	81bb      	strh	r3, [r7, #12]
 80065c8:	4613      	mov	r3, r2
 80065ca:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80065cc:	8978      	ldrh	r0, [r7, #10]
 80065ce:	89ba      	ldrh	r2, [r7, #12]
 80065d0:	89f9      	ldrh	r1, [r7, #14]
 80065d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065d6:	9302      	str	r3, [sp, #8]
 80065d8:	8b3b      	ldrh	r3, [r7, #24]
 80065da:	9301      	str	r3, [sp, #4]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	4603      	mov	r3, r0
 80065e2:	4807      	ldr	r0, [pc, #28]	; (8006600 <I2C4_ReadReg+0x48>)
 80065e4:	f005 fa16 	bl	800ba14 <HAL_I2C_Mem_Read>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d101      	bne.n	80065f2 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80065ee:	2300      	movs	r3, #0
 80065f0:	e001      	b.n	80065f6 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80065f2:	f06f 0307 	mvn.w	r3, #7
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	24007f00 	.word	0x24007f00

08006604 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af02      	add	r7, sp, #8
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LTDC_PIXEL_FORMAT_ARGB8888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 800660e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006618:	2200      	movs	r2, #0
 800661a:	6839      	ldr	r1, [r7, #0]
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f805 	bl	800662c <BSP_LCD_InitEx>
 8006622:	4603      	mov	r3, r0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3708      	adds	r7, #8
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b09e      	sub	sp, #120	; 0x78
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
 8006638:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800663a:	2300      	movs	r3, #0
 800663c:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t ltdc_pixel_format;
  uint32_t ft5336_id = 0;
 800663e:	2300      	movs	r3, #0
 8006640:	66fb      	str	r3, [r7, #108]	; 0x6c
  FT5336_Object_t ts_comp_obj;
  FT5336_IO_t     io_comp_ctx;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d808      	bhi.n	800665a <BSP_LCD_InitEx+0x2e>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d105      	bne.n	800665a <BSP_LCD_InitEx+0x2e>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2b02      	cmp	r3, #2
 8006652:	d006      	beq.n	8006662 <BSP_LCD_InitEx+0x36>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_ARGB8888)))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <BSP_LCD_InitEx+0x36>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800665a:	f06f 0301 	mvn.w	r3, #1
 800665e:	677b      	str	r3, [r7, #116]	; 0x74
 8006660:	e0a8      	b.n	80067b4 <BSP_LCD_InitEx+0x188>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b02      	cmp	r3, #2
 8006666:	d109      	bne.n	800667c <BSP_LCD_InitEx+0x50>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 8006668:	2302      	movs	r3, #2
 800666a:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 2U;
 800666c:	4a54      	ldr	r2, [pc, #336]	; (80067c0 <BSP_LCD_InitEx+0x194>)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	015b      	lsls	r3, r3, #5
 8006672:	4413      	add	r3, r2
 8006674:	3310      	adds	r3, #16
 8006676:	2202      	movs	r2, #2
 8006678:	601a      	str	r2, [r3, #0]
 800667a:	e008      	b.n	800668e <BSP_LCD_InitEx+0x62>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 800667c:	2300      	movs	r3, #0
 800667e:	673b      	str	r3, [r7, #112]	; 0x70
      Lcd_Ctx[Instance].BppFactor = 4U;
 8006680:	4a4f      	ldr	r2, [pc, #316]	; (80067c0 <BSP_LCD_InitEx+0x194>)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	015b      	lsls	r3, r3, #5
 8006686:	4413      	add	r3, r2
 8006688:	3310      	adds	r3, #16
 800668a:	2204      	movs	r2, #4
 800668c:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 800668e:	4a4c      	ldr	r2, [pc, #304]	; (80067c0 <BSP_LCD_InitEx+0x194>)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	015b      	lsls	r3, r3, #5
 8006694:	4413      	add	r3, r2
 8006696:	330c      	adds	r3, #12
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 800669c:	4a48      	ldr	r2, [pc, #288]	; (80067c0 <BSP_LCD_InitEx+0x194>)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	015b      	lsls	r3, r3, #5
 80066a2:	4413      	add	r3, r2
 80066a4:	683a      	ldr	r2, [r7, #0]
 80066a6:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 80066a8:	4a45      	ldr	r2, [pc, #276]	; (80067c0 <BSP_LCD_InitEx+0x194>)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	015b      	lsls	r3, r3, #5
 80066ae:	4413      	add	r3, r2
 80066b0:	3304      	adds	r3, #4
 80066b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80066b6:	601a      	str	r2, [r3, #0]

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 80066b8:	4b42      	ldr	r3, [pc, #264]	; (80067c4 <BSP_LCD_InitEx+0x198>)
 80066ba:	4a43      	ldr	r2, [pc, #268]	; (80067c8 <BSP_LCD_InitEx+0x19c>)
 80066bc:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 80066be:	4b43      	ldr	r3, [pc, #268]	; (80067cc <BSP_LCD_InitEx+0x1a0>)
 80066c0:	4a43      	ldr	r2, [pc, #268]	; (80067d0 <BSP_LCD_InitEx+0x1a4>)
 80066c2:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 80066c4:	483f      	ldr	r0, [pc, #252]	; (80067c4 <BSP_LCD_InitEx+0x198>)
 80066c6:	f000 fd1b 	bl	8007100 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
 80066ca:	4840      	ldr	r0, [pc, #256]	; (80067cc <BSP_LCD_InitEx+0x1a0>)
 80066cc:	f000 fde4 	bl	8007298 <DMA2D_MspInit>

      io_comp_ctx.Init    = BSP_I2C4_Init;
 80066d0:	4b40      	ldr	r3, [pc, #256]	; (80067d4 <BSP_LCD_InitEx+0x1a8>)
 80066d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      io_comp_ctx.ReadReg = BSP_I2C4_ReadReg;
 80066d4:	4b40      	ldr	r3, [pc, #256]	; (80067d8 <BSP_LCD_InitEx+0x1ac>)
 80066d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      io_comp_ctx.Address = TS_I2C_ADDRESS;
 80066d8:	2370      	movs	r3, #112	; 0x70
 80066da:	86bb      	strh	r3, [r7, #52]	; 0x34
      if(FT5336_RegisterBusIO(&ts_comp_obj, &io_comp_ctx) < 0)
 80066dc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80066e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80066e4:	4611      	mov	r1, r2
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fb fcc0 	bl	800206c <FT5336_RegisterBusIO>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	da03      	bge.n	80066fa <BSP_LCD_InitEx+0xce>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80066f2:	f06f 0304 	mvn.w	r3, #4
 80066f6:	677b      	str	r3, [r7, #116]	; 0x74
 80066f8:	e02b      	b.n	8006752 <BSP_LCD_InitEx+0x126>
      }
      else if(FT5336_ReadID(&ts_comp_obj, &ft5336_id) < 0)
 80066fa:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80066fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006702:	4611      	mov	r1, r2
 8006704:	4618      	mov	r0, r3
 8006706:	f7fb fcf3 	bl	80020f0 <FT5336_ReadID>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	da03      	bge.n	8006718 <BSP_LCD_InitEx+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006710:	f06f 0304 	mvn.w	r3, #4
 8006714:	677b      	str	r3, [r7, #116]	; 0x74
 8006716:	e01c      	b.n	8006752 <BSP_LCD_InitEx+0x126>
      }
      else if(ft5336_id != FT5336_ID)
 8006718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800671a:	2b51      	cmp	r3, #81	; 0x51
 800671c:	d003      	beq.n	8006726 <BSP_LCD_InitEx+0xfa>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800671e:	f06f 0306 	mvn.w	r3, #6
 8006722:	677b      	str	r3, [r7, #116]	; 0x74
 8006724:	e015      	b.n	8006752 <BSP_LCD_InitEx+0x126>
      }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8006726:	4827      	ldr	r0, [pc, #156]	; (80067c4 <BSP_LCD_InitEx+0x198>)
 8006728:	f000 f8e8 	bl	80068fc <MX_LTDC_ClockConfig>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <BSP_LCD_InitEx+0x10e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8006732:	f06f 0303 	mvn.w	r3, #3
 8006736:	677b      	str	r3, [r7, #116]	; 0x74
 8006738:	e00b      	b.n	8006752 <BSP_LCD_InitEx+0x126>
    }
    else
    {
    if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 800673a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800673e:	6839      	ldr	r1, [r7, #0]
 8006740:	4820      	ldr	r0, [pc, #128]	; (80067c4 <BSP_LCD_InitEx+0x198>)
 8006742:	f000 f84d 	bl	80067e0 <MX_LTDC_Init>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d002      	beq.n	8006752 <BSP_LCD_InitEx+0x126>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800674c:	f06f 0303 	mvn.w	r3, #3
 8006750:	677b      	str	r3, [r7, #116]	; 0x74
    }
    }

    if(ret == BSP_ERROR_NONE)
 8006752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006754:	2b00      	cmp	r3, #0
 8006756:	d12d      	bne.n	80067b4 <BSP_LCD_InitEx+0x188>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8006758:	2000      	movs	r0, #0
 800675a:	f000 fe2f 	bl	80073bc <BSP_SDRAM_Init>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d002      	beq.n	800676a <BSP_LCD_InitEx+0x13e>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8006764:	f06f 0303 	mvn.w	r3, #3
 8006768:	e025      	b.n	80067b6 <BSP_LCD_InitEx+0x18a>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
 800676a:	2300      	movs	r3, #0
 800676c:	617b      	str	r3, [r7, #20]
      config.X1          = Width;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	61bb      	str	r3, [r7, #24]
      config.Y0          = 0;
 8006772:	2300      	movs	r3, #0
 8006774:	61fb      	str	r3, [r7, #28]
      config.Y1          = Height;
 8006776:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800677a:	623b      	str	r3, [r7, #32]
      config.PixelFormat = ltdc_pixel_format;
 800677c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800677e:	627b      	str	r3, [r7, #36]	; 0x24
      config.Address     = LCD_LAYER_0_ADDRESS;
 8006780:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8006784:	62bb      	str	r3, [r7, #40]	; 0x28
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8006786:	f107 0314 	add.w	r3, r7, #20
 800678a:	461a      	mov	r2, r3
 800678c:	2100      	movs	r1, #0
 800678e:	480d      	ldr	r0, [pc, #52]	; (80067c4 <BSP_LCD_InitEx+0x198>)
 8006790:	f000 f872 	bl	8006878 <MX_LTDC_ConfigLayer>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d002      	beq.n	80067a0 <BSP_LCD_InitEx+0x174>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800679a:	f06f 0303 	mvn.w	r3, #3
 800679e:	677b      	str	r3, [r7, #116]	; 0x74
      }

      /* Initialize TIM in PWM mode to control brightness */
      TIMx_PWM_Init(&hlcd_tim);
 80067a0:	480e      	ldr	r0, [pc, #56]	; (80067dc <BSP_LCD_InitEx+0x1b0>)
 80067a2:	f000 fde1 	bl	8007368 <TIMx_PWM_Init>

      /* By default the reload is activated and executed immediately */
      Lcd_Ctx[Instance].ReloadEnable = 1U;
 80067a6:	4a06      	ldr	r2, [pc, #24]	; (80067c0 <BSP_LCD_InitEx+0x194>)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	015b      	lsls	r3, r3, #5
 80067ac:	4413      	add	r3, r2
 80067ae:	3318      	adds	r3, #24
 80067b0:	2201      	movs	r2, #1
 80067b2:	601a      	str	r2, [r3, #0]
    }
  }

  return ret;
 80067b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3778      	adds	r7, #120	; 0x78
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	240080b0 	.word	0x240080b0
 80067c4:	24008008 	.word	0x24008008
 80067c8:	50001000 	.word	0x50001000
 80067cc:	24007fa0 	.word	0x24007fa0
 80067d0:	52001000 	.word	0x52001000
 80067d4:	08005cfd 	.word	0x08005cfd
 80067d8:	08005e3d 	.word	0x08005e3d
 80067dc:	24007f54 	.word	0x24007f54

080067e0 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	4a21      	ldr	r2, [pc, #132]	; (8006874 <MX_LTDC_Init+0x94>)
 80067f0:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	611a      	str	r2, [r3, #16]

  hltdc->Init.HorizontalSync     = RK043FN48H_HSYNC - 1U;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2228      	movs	r2, #40	; 0x28
 800680e:	615a      	str	r2, [r3, #20]
  hltdc->Init.AccumulatedHBP     = (RK043FN48H_HSYNC + (RK043FN48H_HBP - 11U) - 1U);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	222a      	movs	r2, #42	; 0x2a
 8006814:	61da      	str	r2, [r3, #28]
  hltdc->Init.AccumulatedActiveW = RK043FN48H_HSYNC + Width + RK043FN48H_HBP - 1U;
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	f103 0235 	add.w	r2, r3, #53	; 0x35
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->Init.TotalWidth         = RK043FN48H_HSYNC + Width + (RK043FN48H_HBP - 11U) + RK043FN48H_HFP - 1U;
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	f103 024a 	add.w	r2, r3, #74	; 0x4a
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Init.VerticalSync       = RK043FN48H_VSYNC - 1U;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2209      	movs	r2, #9
 800682e:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = RK043FN48H_VSYNC + RK043FN48H_VBP - 1U;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	220b      	movs	r2, #11
 8006834:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = RK043FN48H_VSYNC + Height + RK043FN48H_VBP - 1U;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f103 020b 	add.w	r2, r3, #11
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = RK043FN48H_VSYNC + Height + RK043FN48H_VBP + RK043FN48H_VFP - 1U;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f103 020d 	add.w	r2, r3, #13
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	631a      	str	r2, [r3, #48]	; 0x30

  hltdc->Init.Backcolor.Blue  = 0xFF;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	22ff      	movs	r2, #255	; 0xff
 800684e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc->Init.Backcolor.Green = 0xFF;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	22ff      	movs	r2, #255	; 0xff
 8006856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc->Init.Backcolor.Red   = 0xFF;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	22ff      	movs	r2, #255	; 0xff
 800685e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  return HAL_LTDC_Init(hltdc);
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f005 fd5a 	bl	800c31c <HAL_LTDC_Init>
 8006868:	4603      	mov	r3, r0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	50001000 	.word	0x50001000

08006878 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b092      	sub	sp, #72	; 0x48
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.Alpha = 255;
 80068a2:	23ff      	movs	r3, #255	; 0xff
 80068a4:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.Alpha0 = 0;
 80068a6:	2300      	movs	r3, #0
 80068a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80068aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80068ae:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80068b0:	2307      	movs	r3, #7
 80068b2:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685a      	ldr	r2, [r3, #4]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68da      	ldr	r2, [r3, #12]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.Backcolor.Blue = 0;
 80068d2:	2300      	movs	r3, #0
 80068d4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  pLayerCfg.Backcolor.Green = 0;
 80068d8:	2300      	movs	r3, #0
 80068da:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  pLayerCfg.Backcolor.Red = 0;
 80068de:	2300      	movs	r3, #0
 80068e0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 80068e4:	f107 0314 	add.w	r3, r7, #20
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	4619      	mov	r1, r3
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f005 fdef 	bl	800c4d0 <HAL_LTDC_ConfigLayer>
 80068f2:	4603      	mov	r3, r0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3748      	adds	r7, #72	; 0x48
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b0b2      	sub	sp, #200	; 0xc8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/83 = 9.63 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 9.63 Mhz */
  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8006904:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006908:	f04f 0300 	mov.w	r3, #0
 800690c:	e9c7 2302 	strd	r2, r3, [r7, #8]
  PeriphClkInitStruct.PLL3.PLL3M = 5;
 8006910:	2305      	movs	r3, #5
 8006912:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 8006914:	23a0      	movs	r3, #160	; 0xa0
 8006916:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8006918:	2302      	movs	r3, #2
 800691a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800691c:	2302      	movs	r3, #2
 800691e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3R = 83;
 8006920:	2353      	movs	r3, #83	; 0x53
 8006922:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = 0;
 8006924:	2300      	movs	r3, #0
 8006926:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8006928:	2300      	movs	r3, #0
 800692a:	64fb      	str	r3, [r7, #76]	; 0x4c

  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800692c:	f107 0308 	add.w	r3, r7, #8
 8006930:	4618      	mov	r0, r3
 8006932:	f007 f901 	bl	800db38 <HAL_RCCEx_PeriphCLKConfig>
 8006936:	4603      	mov	r3, r0
}
 8006938:	4618      	mov	r0, r3
 800693a:	37c8      	adds	r7, #200	; 0xc8
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800694a:	2300      	movs	r3, #0
 800694c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d003      	beq.n	800695c <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006954:	f06f 0301 	mvn.w	r3, #1
 8006958:	60fb      	str	r3, [r7, #12]
 800695a:	e007      	b.n	800696c <BSP_LCD_GetPixelFormat+0x2c>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 800695c:	4a07      	ldr	r2, [pc, #28]	; (800697c <BSP_LCD_GetPixelFormat+0x3c>)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	015b      	lsls	r3, r3, #5
 8006962:	4413      	add	r3, r2
 8006964:	330c      	adds	r3, #12
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800696c:	68fb      	ldr	r3, [r7, #12]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3714      	adds	r7, #20
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	240080b0 	.word	0x240080b0

08006980 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800698a:	2300      	movs	r3, #0
 800698c:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d003      	beq.n	800699c <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006994:	f06f 0301 	mvn.w	r3, #1
 8006998:	60fb      	str	r3, [r7, #12]
 800699a:	e006      	b.n	80069aa <BSP_LCD_SetActiveLayer+0x2a>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 800699c:	4a06      	ldr	r2, [pc, #24]	; (80069b8 <BSP_LCD_SetActiveLayer+0x38>)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	015b      	lsls	r3, r3, #5
 80069a2:	4413      	add	r3, r2
 80069a4:	3308      	adds	r3, #8
 80069a6:	683a      	ldr	r2, [r7, #0]
 80069a8:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80069aa:	68fb      	ldr	r3, [r7, #12]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3714      	adds	r7, #20
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	240080b0 	.word	0x240080b0

080069bc <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80069c6:	2300      	movs	r3, #0
 80069c8:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d003      	beq.n	80069d8 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80069d0:	f06f 0301 	mvn.w	r3, #1
 80069d4:	60fb      	str	r3, [r7, #12]
 80069d6:	e006      	b.n	80069e6 <BSP_LCD_GetXSize+0x2a>
  }
  else
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 80069d8:	4a06      	ldr	r2, [pc, #24]	; (80069f4 <BSP_LCD_GetXSize+0x38>)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	015b      	lsls	r3, r3, #5
 80069de:	4413      	add	r3, r2
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80069e6:	68fb      	ldr	r3, [r7, #12]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3714      	adds	r7, #20
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr
 80069f4:	240080b0 	.word	0x240080b0

080069f8 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006a02:	2300      	movs	r3, #0
 8006a04:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d003      	beq.n	8006a14 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006a0c:	f06f 0301 	mvn.w	r3, #1
 8006a10:	60fb      	str	r3, [r7, #12]
 8006a12:	e007      	b.n	8006a24 <BSP_LCD_GetYSize+0x2c>
  }
  else
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 8006a14:	4a07      	ldr	r2, [pc, #28]	; (8006a34 <BSP_LCD_GetYSize+0x3c>)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	015b      	lsls	r3, r3, #5
 8006a1a:	4413      	add	r3, r2
 8006a1c:	3304      	adds	r3, #4
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8006a24:	68fb      	ldr	r3, [r7, #12]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	240080b0 	.word	0x240080b0

08006a38 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b08e      	sub	sp, #56	; 0x38
 8006a3c:	af02      	add	r7, sp, #8
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
 8006a44:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8006a46:	2300      	movs	r3, #0
 8006a48:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	330a      	adds	r3, #10
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	461a      	mov	r2, r3
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	330b      	adds	r3, #11
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	021b      	lsls	r3, r3, #8
 8006a5a:	441a      	add	r2, r3
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	330c      	adds	r3, #12
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	041b      	lsls	r3, r3, #16
 8006a64:	441a      	add	r2, r3
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	330d      	adds	r3, #13
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	061b      	lsls	r3, r3, #24
 8006a6e:	4413      	add	r3, r2
 8006a70:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	3312      	adds	r3, #18
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	461a      	mov	r2, r3
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	3313      	adds	r3, #19
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	021b      	lsls	r3, r3, #8
 8006a82:	441a      	add	r2, r3
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	3314      	adds	r3, #20
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	041b      	lsls	r3, r3, #16
 8006a8c:	441a      	add	r2, r3
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	3315      	adds	r3, #21
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	061b      	lsls	r3, r3, #24
 8006a96:	4413      	add	r3, r2
 8006a98:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	3316      	adds	r3, #22
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	3317      	adds	r3, #23
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	021b      	lsls	r3, r3, #8
 8006aaa:	441a      	add	r2, r3
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	3318      	adds	r3, #24
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	041b      	lsls	r3, r3, #16
 8006ab4:	441a      	add	r2, r3
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	3319      	adds	r3, #25
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	061b      	lsls	r3, r3, #24
 8006abe:	4413      	add	r3, r2
 8006ac0:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	331c      	adds	r3, #28
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	461a      	mov	r2, r3
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	331d      	adds	r3, #29
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	021b      	lsls	r3, r3, #8
 8006ad2:	4413      	add	r3, r2
 8006ad4:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8006ad6:	4a37      	ldr	r2, [pc, #220]	; (8006bb4 <BSP_LCD_DrawBitmap+0x17c>)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	015b      	lsls	r3, r3, #5
 8006adc:	4413      	add	r3, r2
 8006ade:	3308      	adds	r3, #8
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a35      	ldr	r2, [pc, #212]	; (8006bb8 <BSP_LCD_DrawBitmap+0x180>)
 8006ae4:	2134      	movs	r1, #52	; 0x34
 8006ae6:	fb01 f303 	mul.w	r3, r1, r3
 8006aea:	4413      	add	r3, r2
 8006aec:	335c      	adds	r3, #92	; 0x5c
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	4930      	ldr	r1, [pc, #192]	; (8006bb4 <BSP_LCD_DrawBitmap+0x17c>)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	015b      	lsls	r3, r3, #5
 8006af6:	440b      	add	r3, r1
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	6879      	ldr	r1, [r7, #4]
 8006afc:	fb03 f101 	mul.w	r1, r3, r1
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	440b      	add	r3, r1
 8006b04:	482b      	ldr	r0, [pc, #172]	; (8006bb4 <BSP_LCD_DrawBitmap+0x17c>)
 8006b06:	68f9      	ldr	r1, [r7, #12]
 8006b08:	0149      	lsls	r1, r1, #5
 8006b0a:	4401      	add	r1, r0
 8006b0c:	3110      	adds	r1, #16
 8006b0e:	6809      	ldr	r1, [r1, #0]
 8006b10:	fb01 f303 	mul.w	r3, r1, r3
 8006b14:	4413      	add	r3, r2
 8006b16:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	3b20      	subs	r3, #32
 8006b1c:	2b07      	cmp	r3, #7
 8006b1e:	d802      	bhi.n	8006b26 <BSP_LCD_DrawBitmap+0xee>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8006b20:	2300      	movs	r3, #0
 8006b22:	627b      	str	r3, [r7, #36]	; 0x24
 8006b24:	e008      	b.n	8006b38 <BSP_LCD_DrawBitmap+0x100>
  }
  else if ((bit_pixel/8U) == 2U)
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	3b10      	subs	r3, #16
 8006b2a:	2b07      	cmp	r3, #7
 8006b2c:	d802      	bhi.n	8006b34 <BSP_LCD_DrawBitmap+0xfc>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 8006b2e:	2302      	movs	r3, #2
 8006b30:	627b      	str	r3, [r7, #36]	; 0x24
 8006b32:	e001      	b.n	8006b38 <BSP_LCD_DrawBitmap+0x100>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 8006b34:	2301      	movs	r3, #1
 8006b36:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	69ba      	ldr	r2, [r7, #24]
 8006b3e:	fb02 f303 	mul.w	r3, r2, r3
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	08d2      	lsrs	r2, r2, #3
 8006b46:	fb03 f202 	mul.w	r2, r3, r2
 8006b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4c:	4413      	add	r3, r2
 8006b4e:	683a      	ldr	r2, [r7, #0]
 8006b50:	4413      	add	r3, r2
 8006b52:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8006b54:	2300      	movs	r3, #0
 8006b56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b58:	e023      	b.n	8006ba2 <BSP_LCD_DrawBitmap+0x16a>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 8006b5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	6a39      	ldr	r1, [r7, #32]
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f000 fa77 	bl	8007058 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8006b6a:	4a12      	ldr	r2, [pc, #72]	; (8006bb4 <BSP_LCD_DrawBitmap+0x17c>)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	015b      	lsls	r3, r3, #5
 8006b70:	4413      	add	r3, r2
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	490f      	ldr	r1, [pc, #60]	; (8006bb4 <BSP_LCD_DrawBitmap+0x17c>)
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	0152      	lsls	r2, r2, #5
 8006b7a:	440a      	add	r2, r1
 8006b7c:	3210      	adds	r2, #16
 8006b7e:	6812      	ldr	r2, [r2, #0]
 8006b80:	fb02 f303 	mul.w	r3, r2, r3
 8006b84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b86:	4413      	add	r3, r2
 8006b88:	62bb      	str	r3, [r7, #40]	; 0x28
    pbmp -= width*(bit_pixel/8U);
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	08db      	lsrs	r3, r3, #3
 8006b8e:	69ba      	ldr	r2, [r7, #24]
 8006b90:	fb02 f303 	mul.w	r3, r2, r3
 8006b94:	425b      	negs	r3, r3
 8006b96:	6a3a      	ldr	r2, [r7, #32]
 8006b98:	4413      	add	r3, r2
 8006b9a:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 8006b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d3d7      	bcc.n	8006b5a <BSP_LCD_DrawBitmap+0x122>
  }

  return ret;
 8006baa:	69fb      	ldr	r3, [r7, #28]
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3730      	adds	r7, #48	; 0x30
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	240080b0 	.word	0x240080b0
 8006bb8:	24008008 	.word	0x24008008

08006bbc <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b088      	sub	sp, #32
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
 8006bc8:	603b      	str	r3, [r7, #0]
  uint32_t i;
  uint8_t *pdata = pData;
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	61bb      	str	r3, [r7, #24]
    }
    pdata += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 8006bce:	2300      	movs	r3, #0
 8006bd0:	61fb      	str	r3, [r7, #28]
 8006bd2:	e032      	b.n	8006c3a <BSP_LCD_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	617b      	str	r3, [r7, #20]
 8006bd8:	e028      	b.n	8006c2c <BSP_LCD_FillRGBRect+0x70>
    {
      color = (uint32_t)((uint32_t)*pdata | ((uint32_t)(*(pdata + 1U)) << 8U) | ((uint32_t)(*(pdata + 2U)) << 16U) | ((uint32_t)(*(pdata + 3U)) << 24U));
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	461a      	mov	r2, r3
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	3301      	adds	r3, #1
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	021b      	lsls	r3, r3, #8
 8006be8:	431a      	orrs	r2, r3
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	3302      	adds	r3, #2
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	041b      	lsls	r3, r3, #16
 8006bf2:	431a      	orrs	r2, r3
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	3303      	adds	r3, #3
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	061b      	lsls	r3, r3, #24
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	613b      	str	r3, [r7, #16]
      (void)BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	18d1      	adds	r1, r2, r3
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	441a      	add	r2, r3
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f000 f95e 	bl	8006ed0 <BSP_LCD_WritePixel>
      pdata += Lcd_Ctx[Instance].BppFactor;
 8006c14:	4a0d      	ldr	r2, [pc, #52]	; (8006c4c <BSP_LCD_FillRGBRect+0x90>)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	015b      	lsls	r3, r3, #5
 8006c1a:	4413      	add	r3, r2
 8006c1c:	3310      	adds	r3, #16
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	69ba      	ldr	r2, [r7, #24]
 8006c22:	4413      	add	r3, r2
 8006c24:	61bb      	str	r3, [r7, #24]
    for(j = 0; j < Width; j++)
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	617b      	str	r3, [r7, #20]
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d3d2      	bcc.n	8006bda <BSP_LCD_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	3301      	adds	r3, #1
 8006c38:	61fb      	str	r3, [r7, #28]
 8006c3a:	69fa      	ldr	r2, [r7, #28]
 8006c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d3c8      	bcc.n	8006bd4 <BSP_LCD_FillRGBRect+0x18>
    }
  }
#endif

  return BSP_ERROR_NONE;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3720      	adds	r7, #32
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	240080b0 	.word	0x240080b0

08006c50 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b088      	sub	sp, #32
 8006c54:	af02      	add	r7, sp, #8
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
 8006c5c:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8006c5e:	4a21      	ldr	r2, [pc, #132]	; (8006ce4 <BSP_LCD_DrawHLine+0x94>)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	015b      	lsls	r3, r3, #5
 8006c64:	4413      	add	r3, r2
 8006c66:	3308      	adds	r3, #8
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a1f      	ldr	r2, [pc, #124]	; (8006ce8 <BSP_LCD_DrawHLine+0x98>)
 8006c6c:	2134      	movs	r1, #52	; 0x34
 8006c6e:	fb01 f303 	mul.w	r3, r1, r3
 8006c72:	4413      	add	r3, r2
 8006c74:	335c      	adds	r3, #92	; 0x5c
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	491a      	ldr	r1, [pc, #104]	; (8006ce4 <BSP_LCD_DrawHLine+0x94>)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	015b      	lsls	r3, r3, #5
 8006c7e:	440b      	add	r3, r1
 8006c80:	3310      	adds	r3, #16
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4817      	ldr	r0, [pc, #92]	; (8006ce4 <BSP_LCD_DrawHLine+0x94>)
 8006c86:	68f9      	ldr	r1, [r7, #12]
 8006c88:	0149      	lsls	r1, r1, #5
 8006c8a:	4401      	add	r1, r0
 8006c8c:	6809      	ldr	r1, [r1, #0]
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	fb01 f000 	mul.w	r0, r1, r0
 8006c94:	68b9      	ldr	r1, [r7, #8]
 8006c96:	4401      	add	r1, r0
 8006c98:	fb01 f303 	mul.w	r3, r1, r3
 8006c9c:	4413      	add	r3, r2
 8006c9e:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8006ca0:	68ba      	ldr	r2, [r7, #8]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	441a      	add	r2, r3
 8006ca6:	490f      	ldr	r1, [pc, #60]	; (8006ce4 <BSP_LCD_DrawHLine+0x94>)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	015b      	lsls	r3, r3, #5
 8006cac:	440b      	add	r3, r1
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d907      	bls.n	8006cc4 <BSP_LCD_DrawHLine+0x74>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 8006cb4:	4a0b      	ldr	r2, [pc, #44]	; (8006ce4 <BSP_LCD_DrawHLine+0x94>)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	015b      	lsls	r3, r3, #5
 8006cba:	4413      	add	r3, r2
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8006cc4:	6979      	ldr	r1, [r7, #20]
 8006cc6:	6a3b      	ldr	r3, [r7, #32]
 8006cc8:	9301      	str	r3, [sp, #4]
 8006cca:	2300      	movs	r3, #0
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	2301      	movs	r3, #1
 8006cd0:	683a      	ldr	r2, [r7, #0]
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	f000 f956 	bl	8006f84 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3718      	adds	r7, #24
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	240080b0 	.word	0x240080b0
 8006ce8:	24008008 	.word	0x24008008

08006cec <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b088      	sub	sp, #32
 8006cf0:	af02      	add	r7, sp, #8
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
 8006cf8:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8006cfa:	4a24      	ldr	r2, [pc, #144]	; (8006d8c <BSP_LCD_DrawVLine+0xa0>)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	015b      	lsls	r3, r3, #5
 8006d00:	4413      	add	r3, r2
 8006d02:	3308      	adds	r3, #8
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a22      	ldr	r2, [pc, #136]	; (8006d90 <BSP_LCD_DrawVLine+0xa4>)
 8006d08:	2134      	movs	r1, #52	; 0x34
 8006d0a:	fb01 f303 	mul.w	r3, r1, r3
 8006d0e:	4413      	add	r3, r2
 8006d10:	335c      	adds	r3, #92	; 0x5c
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	491d      	ldr	r1, [pc, #116]	; (8006d8c <BSP_LCD_DrawVLine+0xa0>)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	015b      	lsls	r3, r3, #5
 8006d1a:	440b      	add	r3, r1
 8006d1c:	3310      	adds	r3, #16
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	481a      	ldr	r0, [pc, #104]	; (8006d8c <BSP_LCD_DrawVLine+0xa0>)
 8006d22:	68f9      	ldr	r1, [r7, #12]
 8006d24:	0149      	lsls	r1, r1, #5
 8006d26:	4401      	add	r1, r0
 8006d28:	6809      	ldr	r1, [r1, #0]
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	fb01 f000 	mul.w	r0, r1, r0
 8006d30:	68b9      	ldr	r1, [r7, #8]
 8006d32:	4401      	add	r1, r0
 8006d34:	fb01 f303 	mul.w	r3, r1, r3
 8006d38:	4413      	add	r3, r2
 8006d3a:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	441a      	add	r2, r3
 8006d42:	4912      	ldr	r1, [pc, #72]	; (8006d8c <BSP_LCD_DrawVLine+0xa0>)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	015b      	lsls	r3, r3, #5
 8006d48:	440b      	add	r3, r1
 8006d4a:	3304      	adds	r3, #4
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d908      	bls.n	8006d64 <BSP_LCD_DrawVLine+0x78>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 8006d52:	4a0e      	ldr	r2, [pc, #56]	; (8006d8c <BSP_LCD_DrawVLine+0xa0>)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	015b      	lsls	r3, r3, #5
 8006d58:	4413      	add	r3, r2
 8006d5a:	3304      	adds	r3, #4
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8006d64:	6979      	ldr	r1, [r7, #20]
 8006d66:	4a09      	ldr	r2, [pc, #36]	; (8006d8c <BSP_LCD_DrawVLine+0xa0>)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	015b      	lsls	r3, r3, #5
 8006d6c:	4413      	add	r3, r2
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	3b01      	subs	r3, #1
 8006d72:	6a3a      	ldr	r2, [r7, #32]
 8006d74:	9201      	str	r2, [sp, #4]
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 f901 	bl	8006f84 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3718      	adds	r7, #24
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	240080b0 	.word	0x240080b0
 8006d90:	24008008 	.word	0x24008008

08006d94 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color RGB color
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b088      	sub	sp, #32
 8006d98:	af02      	add	r7, sp, #8
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
 8006da0:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8006da2:	4a1b      	ldr	r2, [pc, #108]	; (8006e10 <BSP_LCD_FillRect+0x7c>)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	015b      	lsls	r3, r3, #5
 8006da8:	4413      	add	r3, r2
 8006daa:	3308      	adds	r3, #8
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a19      	ldr	r2, [pc, #100]	; (8006e14 <BSP_LCD_FillRect+0x80>)
 8006db0:	2134      	movs	r1, #52	; 0x34
 8006db2:	fb01 f303 	mul.w	r3, r1, r3
 8006db6:	4413      	add	r3, r2
 8006db8:	335c      	adds	r3, #92	; 0x5c
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	4914      	ldr	r1, [pc, #80]	; (8006e10 <BSP_LCD_FillRect+0x7c>)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	015b      	lsls	r3, r3, #5
 8006dc2:	440b      	add	r3, r1
 8006dc4:	3310      	adds	r3, #16
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4811      	ldr	r0, [pc, #68]	; (8006e10 <BSP_LCD_FillRect+0x7c>)
 8006dca:	68f9      	ldr	r1, [r7, #12]
 8006dcc:	0149      	lsls	r1, r1, #5
 8006dce:	4401      	add	r1, r0
 8006dd0:	6809      	ldr	r1, [r1, #0]
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	fb01 f000 	mul.w	r0, r1, r0
 8006dd8:	68b9      	ldr	r1, [r7, #8]
 8006dda:	4401      	add	r1, r0
 8006ddc:	fb01 f303 	mul.w	r3, r1, r3
 8006de0:	4413      	add	r3, r2
 8006de2:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 8006de4:	6979      	ldr	r1, [r7, #20]
 8006de6:	4a0a      	ldr	r2, [pc, #40]	; (8006e10 <BSP_LCD_FillRect+0x7c>)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	015b      	lsls	r3, r3, #5
 8006dec:	4413      	add	r3, r2
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006df6:	9201      	str	r2, [sp, #4]
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	68f8      	ldr	r0, [r7, #12]
 8006e00:	f000 f8c0 	bl	8006f84 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3718      	adds	r7, #24
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	240080b0 	.word	0x240080b0
 8006e14:	24008008 	.word	0x24008008

08006e18 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
 8006e24:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006e26:	4a28      	ldr	r2, [pc, #160]	; (8006ec8 <BSP_LCD_ReadPixel+0xb0>)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	015b      	lsls	r3, r3, #5
 8006e2c:	4413      	add	r3, r2
 8006e2e:	3308      	adds	r3, #8
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a26      	ldr	r2, [pc, #152]	; (8006ecc <BSP_LCD_ReadPixel+0xb4>)
 8006e34:	2134      	movs	r1, #52	; 0x34
 8006e36:	fb01 f303 	mul.w	r3, r1, r3
 8006e3a:	4413      	add	r3, r2
 8006e3c:	3348      	adds	r3, #72	; 0x48
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d11c      	bne.n	8006e7e <BSP_LCD_ReadPixel+0x66>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 8006e44:	4a20      	ldr	r2, [pc, #128]	; (8006ec8 <BSP_LCD_ReadPixel+0xb0>)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	015b      	lsls	r3, r3, #5
 8006e4a:	4413      	add	r3, r2
 8006e4c:	3308      	adds	r3, #8
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a1e      	ldr	r2, [pc, #120]	; (8006ecc <BSP_LCD_ReadPixel+0xb4>)
 8006e52:	2134      	movs	r1, #52	; 0x34
 8006e54:	fb01 f303 	mul.w	r3, r1, r3
 8006e58:	4413      	add	r3, r2
 8006e5a:	335c      	adds	r3, #92	; 0x5c
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	491a      	ldr	r1, [pc, #104]	; (8006ec8 <BSP_LCD_ReadPixel+0xb0>)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	015b      	lsls	r3, r3, #5
 8006e64:	440b      	add	r3, r1
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	6879      	ldr	r1, [r7, #4]
 8006e6a:	fb03 f101 	mul.w	r1, r3, r1
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	440b      	add	r3, r1
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	601a      	str	r2, [r3, #0]
 8006e7c:	e01d      	b.n	8006eba <BSP_LCD_ReadPixel+0xa2>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos)));
 8006e7e:	4a12      	ldr	r2, [pc, #72]	; (8006ec8 <BSP_LCD_ReadPixel+0xb0>)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	015b      	lsls	r3, r3, #5
 8006e84:	4413      	add	r3, r2
 8006e86:	3308      	adds	r3, #8
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a10      	ldr	r2, [pc, #64]	; (8006ecc <BSP_LCD_ReadPixel+0xb4>)
 8006e8c:	2134      	movs	r1, #52	; 0x34
 8006e8e:	fb01 f303 	mul.w	r3, r1, r3
 8006e92:	4413      	add	r3, r2
 8006e94:	335c      	adds	r3, #92	; 0x5c
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	490b      	ldr	r1, [pc, #44]	; (8006ec8 <BSP_LCD_ReadPixel+0xb0>)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	015b      	lsls	r3, r3, #5
 8006e9e:	440b      	add	r3, r1
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	6879      	ldr	r1, [r7, #4]
 8006ea4:	fb03 f101 	mul.w	r1, r3, r1
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	440b      	add	r3, r1
 8006eac:	005b      	lsls	r3, r3, #1
 8006eae:	4413      	add	r3, r2
 8006eb0:	881b      	ldrh	r3, [r3, #0]
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3714      	adds	r7, #20
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr
 8006ec8:	240080b0 	.word	0x240080b0
 8006ecc:	24008008 	.word	0x24008008

08006ed0 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
 8006edc:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006ede:	4a27      	ldr	r2, [pc, #156]	; (8006f7c <BSP_LCD_WritePixel+0xac>)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	015b      	lsls	r3, r3, #5
 8006ee4:	4413      	add	r3, r2
 8006ee6:	3308      	adds	r3, #8
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a25      	ldr	r2, [pc, #148]	; (8006f80 <BSP_LCD_WritePixel+0xb0>)
 8006eec:	2134      	movs	r1, #52	; 0x34
 8006eee:	fb01 f303 	mul.w	r3, r1, r3
 8006ef2:	4413      	add	r3, r2
 8006ef4:	3348      	adds	r3, #72	; 0x48
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d11c      	bne.n	8006f36 <BSP_LCD_WritePixel+0x66>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = Color;
 8006efc:	4a1f      	ldr	r2, [pc, #124]	; (8006f7c <BSP_LCD_WritePixel+0xac>)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	015b      	lsls	r3, r3, #5
 8006f02:	4413      	add	r3, r2
 8006f04:	3308      	adds	r3, #8
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a1d      	ldr	r2, [pc, #116]	; (8006f80 <BSP_LCD_WritePixel+0xb0>)
 8006f0a:	2134      	movs	r1, #52	; 0x34
 8006f0c:	fb01 f303 	mul.w	r3, r1, r3
 8006f10:	4413      	add	r3, r2
 8006f12:	335c      	adds	r3, #92	; 0x5c
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	4919      	ldr	r1, [pc, #100]	; (8006f7c <BSP_LCD_WritePixel+0xac>)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	015b      	lsls	r3, r3, #5
 8006f1c:	440b      	add	r3, r1
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	6879      	ldr	r1, [r7, #4]
 8006f22:	fb03 f101 	mul.w	r1, r3, r1
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	440b      	add	r3, r1
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	461a      	mov	r2, r3
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	6013      	str	r3, [r2, #0]
 8006f34:	e01b      	b.n	8006f6e <BSP_LCD_WritePixel+0x9e>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*((Ypos*Lcd_Ctx[Instance].XSize) + Xpos))) = (uint16_t)Color;
 8006f36:	4a11      	ldr	r2, [pc, #68]	; (8006f7c <BSP_LCD_WritePixel+0xac>)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	015b      	lsls	r3, r3, #5
 8006f3c:	4413      	add	r3, r2
 8006f3e:	3308      	adds	r3, #8
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a0f      	ldr	r2, [pc, #60]	; (8006f80 <BSP_LCD_WritePixel+0xb0>)
 8006f44:	2134      	movs	r1, #52	; 0x34
 8006f46:	fb01 f303 	mul.w	r3, r1, r3
 8006f4a:	4413      	add	r3, r2
 8006f4c:	335c      	adds	r3, #92	; 0x5c
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	490a      	ldr	r1, [pc, #40]	; (8006f7c <BSP_LCD_WritePixel+0xac>)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	015b      	lsls	r3, r3, #5
 8006f56:	440b      	add	r3, r1
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	6879      	ldr	r1, [r7, #4]
 8006f5c:	fb03 f101 	mul.w	r1, r3, r1
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	440b      	add	r3, r1
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	4413      	add	r3, r2
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	b292      	uxth	r2, r2
 8006f6c:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	240080b0 	.word	0x240080b0
 8006f80:	24008008 	.word	0x24008008

08006f84 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b088      	sub	sp, #32
 8006f88:	af02      	add	r7, sp, #8
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
 8006f90:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 8006f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f94:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 8006f96:	4a2d      	ldr	r2, [pc, #180]	; (800704c <LL_FillBuffer+0xc8>)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	015b      	lsls	r3, r3, #5
 8006f9c:	4413      	add	r3, r2
 8006f9e:	330c      	adds	r3, #12
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d129      	bne.n	8006ffa <LL_FillBuffer+0x76>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	0adb      	lsrs	r3, r3, #11
 8006fae:	f003 021f 	and.w	r2, r3, #31
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	011b      	lsls	r3, r3, #4
 8006fb6:	4413      	add	r3, r2
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	3317      	adds	r3, #23
 8006fbe:	099b      	lsrs	r3, r3, #6
 8006fc0:	0419      	lsls	r1, r3, #16
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc4:	095b      	lsrs	r3, r3, #5
 8006fc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006fca:	4613      	mov	r3, r2
 8006fcc:	01db      	lsls	r3, r3, #7
 8006fce:	4413      	add	r3, r2
 8006fd0:	005b      	lsls	r3, r3, #1
 8006fd2:	4413      	add	r3, r2
 8006fd4:	3321      	adds	r3, #33	; 0x21
 8006fd6:	099b      	lsrs	r3, r3, #6
 8006fd8:	021b      	lsls	r3, r3, #8
 8006fda:	4319      	orrs	r1, r3
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fde:	f003 021f 	and.w	r2, r3, #31
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	011b      	lsls	r3, r3, #4
 8006fe6:	4413      	add	r3, r2
 8006fe8:	015a      	lsls	r2, r3, #5
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	3317      	adds	r3, #23
 8006fee:	099b      	lsrs	r3, r3, #6
 8006ff0:	430b      	orrs	r3, r1
 8006ff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ff6:	613b      	str	r3, [r7, #16]
    break;
 8006ff8:	e002      	b.n	8007000 <LL_FillBuffer+0x7c>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	617b      	str	r3, [r7, #20]
    break;
 8006ffe:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8007000:	4b13      	ldr	r3, [pc, #76]	; (8007050 <LL_FillBuffer+0xcc>)
 8007002:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007006:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8007008:	4a11      	ldr	r2, [pc, #68]	; (8007050 <LL_FillBuffer+0xcc>)
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800700e:	4a10      	ldr	r2, [pc, #64]	; (8007050 <LL_FillBuffer+0xcc>)
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 8007014:	4b0e      	ldr	r3, [pc, #56]	; (8007050 <LL_FillBuffer+0xcc>)
 8007016:	4a0f      	ldr	r2, [pc, #60]	; (8007054 <LL_FillBuffer+0xd0>)
 8007018:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800701a:	480d      	ldr	r0, [pc, #52]	; (8007050 <LL_FillBuffer+0xcc>)
 800701c:	f003 fd1c 	bl	800aa58 <HAL_DMA2D_Init>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10e      	bne.n	8007044 <LL_FillBuffer+0xc0>
  {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8007026:	68ba      	ldr	r2, [r7, #8]
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6939      	ldr	r1, [r7, #16]
 8007030:	4807      	ldr	r0, [pc, #28]	; (8007050 <LL_FillBuffer+0xcc>)
 8007032:	f003 fd7f 	bl	800ab34 <HAL_DMA2D_Start>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d103      	bne.n	8007044 <LL_FillBuffer+0xc0>
      {
        /* Polling For DMA transfer */
      (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 800703c:	2132      	movs	r1, #50	; 0x32
 800703e:	4804      	ldr	r0, [pc, #16]	; (8007050 <LL_FillBuffer+0xcc>)
 8007040:	f003 fda3 	bl	800ab8a <HAL_DMA2D_PollForTransfer>
    }
  }
}
 8007044:	bf00      	nop
 8007046:	3718      	adds	r7, #24
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	240080b0 	.word	0x240080b0
 8007050:	24007fa0 	.word	0x24007fa0
 8007054:	52001000 	.word	0x52001000

08007058 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b088      	sub	sp, #32
 800705c:	af02      	add	r7, sp, #8
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
 8007064:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 8007066:	4a23      	ldr	r2, [pc, #140]	; (80070f4 <LL_ConvertLineToRGB+0x9c>)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	015b      	lsls	r3, r3, #5
 800706c:	4413      	add	r3, r2
 800706e:	330c      	adds	r3, #12
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b02      	cmp	r3, #2
 8007074:	d102      	bne.n	800707c <LL_ConvertLineToRGB+0x24>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8007076:	2302      	movs	r3, #2
 8007078:	617b      	str	r3, [r7, #20]
    break;
 800707a:	e002      	b.n	8007082 <LL_ConvertLineToRGB+0x2a>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800707c:	2300      	movs	r3, #0
 800707e:	617b      	str	r3, [r7, #20]
    break;
 8007080:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8007082:	4b1d      	ldr	r3, [pc, #116]	; (80070f8 <LL_ConvertLineToRGB+0xa0>)
 8007084:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007088:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800708a:	4a1b      	ldr	r2, [pc, #108]	; (80070f8 <LL_ConvertLineToRGB+0xa0>)
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 8007090:	4b19      	ldr	r3, [pc, #100]	; (80070f8 <LL_ConvertLineToRGB+0xa0>)
 8007092:	2200      	movs	r2, #0
 8007094:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8007096:	4b18      	ldr	r3, [pc, #96]	; (80070f8 <LL_ConvertLineToRGB+0xa0>)
 8007098:	2200      	movs	r2, #0
 800709a:	64da      	str	r2, [r3, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 800709c:	4b16      	ldr	r3, [pc, #88]	; (80070f8 <LL_ConvertLineToRGB+0xa0>)
 800709e:	22ff      	movs	r2, #255	; 0xff
 80070a0:	651a      	str	r2, [r3, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 80070a2:	4a15      	ldr	r2, [pc, #84]	; (80070f8 <LL_ConvertLineToRGB+0xa0>)
 80070a4:	6a3b      	ldr	r3, [r7, #32]
 80070a6:	6493      	str	r3, [r2, #72]	; 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 80070a8:	4b13      	ldr	r3, [pc, #76]	; (80070f8 <LL_ConvertLineToRGB+0xa0>)
 80070aa:	2200      	movs	r2, #0
 80070ac:	645a      	str	r2, [r3, #68]	; 0x44

  hlcd_dma2d.Instance = DMA2D;
 80070ae:	4b12      	ldr	r3, [pc, #72]	; (80070f8 <LL_ConvertLineToRGB+0xa0>)
 80070b0:	4a12      	ldr	r2, [pc, #72]	; (80070fc <LL_ConvertLineToRGB+0xa4>)
 80070b2:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80070b4:	4810      	ldr	r0, [pc, #64]	; (80070f8 <LL_ConvertLineToRGB+0xa0>)
 80070b6:	f003 fccf 	bl	800aa58 <HAL_DMA2D_Init>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d115      	bne.n	80070ec <LL_ConvertLineToRGB+0x94>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 80070c0:	2101      	movs	r1, #1
 80070c2:	480d      	ldr	r0, [pc, #52]	; (80070f8 <LL_ConvertLineToRGB+0xa0>)
 80070c4:	f003 fe4a 	bl	800ad5c <HAL_DMA2D_ConfigLayer>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10e      	bne.n	80070ec <LL_ConvertLineToRGB+0x94>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80070ce:	68b9      	ldr	r1, [r7, #8]
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	2301      	movs	r3, #1
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	4807      	ldr	r0, [pc, #28]	; (80070f8 <LL_ConvertLineToRGB+0xa0>)
 80070da:	f003 fd2b 	bl	800ab34 <HAL_DMA2D_Start>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d103      	bne.n	80070ec <LL_ConvertLineToRGB+0x94>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 80070e4:	2132      	movs	r1, #50	; 0x32
 80070e6:	4804      	ldr	r0, [pc, #16]	; (80070f8 <LL_ConvertLineToRGB+0xa0>)
 80070e8:	f003 fd4f 	bl	800ab8a <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80070ec:	bf00      	nop
 80070ee:	3718      	adds	r7, #24
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	240080b0 	.word	0x240080b0
 80070f8:	24007fa0 	.word	0x24007fa0
 80070fc:	52001000 	.word	0x52001000

08007100 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b08e      	sub	sp, #56	; 0x38
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if(hltdc->Instance == LTDC)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a5b      	ldr	r2, [pc, #364]	; (800727c <LTDC_MspInit+0x17c>)
 800710e:	4293      	cmp	r3, r2
 8007110:	f040 80b0 	bne.w	8007274 <LTDC_MspInit+0x174>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8007114:	4b5a      	ldr	r3, [pc, #360]	; (8007280 <LTDC_MspInit+0x180>)
 8007116:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800711a:	4a59      	ldr	r2, [pc, #356]	; (8007280 <LTDC_MspInit+0x180>)
 800711c:	f043 0308 	orr.w	r3, r3, #8
 8007120:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8007124:	4b56      	ldr	r3, [pc, #344]	; (8007280 <LTDC_MspInit+0x180>)
 8007126:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800712a:	f003 0308 	and.w	r3, r3, #8
 800712e:	623b      	str	r3, [r7, #32]
 8007130:	6a3b      	ldr	r3, [r7, #32]

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8007132:	4b53      	ldr	r3, [pc, #332]	; (8007280 <LTDC_MspInit+0x180>)
 8007134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007138:	4a51      	ldr	r2, [pc, #324]	; (8007280 <LTDC_MspInit+0x180>)
 800713a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800713e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007142:	4b4f      	ldr	r3, [pc, #316]	; (8007280 <LTDC_MspInit+0x180>)
 8007144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800714c:	61fb      	str	r3, [r7, #28]
 800714e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8007150:	4b4b      	ldr	r3, [pc, #300]	; (8007280 <LTDC_MspInit+0x180>)
 8007152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007156:	4a4a      	ldr	r2, [pc, #296]	; (8007280 <LTDC_MspInit+0x180>)
 8007158:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800715c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007160:	4b47      	ldr	r3, [pc, #284]	; (8007280 <LTDC_MspInit+0x180>)
 8007162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800716a:	61bb      	str	r3, [r7, #24]
 800716c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800716e:	4b44      	ldr	r3, [pc, #272]	; (8007280 <LTDC_MspInit+0x180>)
 8007170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007174:	4a42      	ldr	r2, [pc, #264]	; (8007280 <LTDC_MspInit+0x180>)
 8007176:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800717a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800717e:	4b40      	ldr	r3, [pc, #256]	; (8007280 <LTDC_MspInit+0x180>)
 8007180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007188:	617b      	str	r3, [r7, #20]
 800718a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800718c:	4b3c      	ldr	r3, [pc, #240]	; (8007280 <LTDC_MspInit+0x180>)
 800718e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007192:	4a3b      	ldr	r2, [pc, #236]	; (8007280 <LTDC_MspInit+0x180>)
 8007194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007198:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800719c:	4b38      	ldr	r3, [pc, #224]	; (8007280 <LTDC_MspInit+0x180>)
 800719e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80071a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071a6:	613b      	str	r3, [r7, #16]
 80071a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80071aa:	4b35      	ldr	r3, [pc, #212]	; (8007280 <LTDC_MspInit+0x180>)
 80071ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80071b0:	4a33      	ldr	r2, [pc, #204]	; (8007280 <LTDC_MspInit+0x180>)
 80071b2:	f043 0308 	orr.w	r3, r3, #8
 80071b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80071ba:	4b31      	ldr	r3, [pc, #196]	; (8007280 <LTDC_MspInit+0x180>)
 80071bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80071c0:	f003 0308 	and.w	r3, r3, #8
 80071c4:	60fb      	str	r3, [r7, #12]
 80071c6:	68fb      	ldr	r3, [r7, #12]

    /*** LTDC Pins configuration ***/
    /* GPIOI configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 |GPIO_PIN_1 |GPIO_PIN_9 | GPIO_PIN_12 |GPIO_PIN_14 | GPIO_PIN_15;
 80071c8:	f24d 2303 	movw	r3, #53763	; 0xd203
 80071cc:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80071ce:	2302      	movs	r3, #2
 80071d0:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 80071d2:	2300      	movs	r3, #0
 80071d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80071d6:	2302      	movs	r3, #2
 80071d8:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80071da:	230e      	movs	r3, #14
 80071dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80071de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071e2:	4619      	mov	r1, r3
 80071e4:	4827      	ldr	r0, [pc, #156]	; (8007284 <LTDC_MspInit+0x184>)
 80071e6:	f003 ff41 	bl	800b06c <HAL_GPIO_Init>

    /* GPIOJ configuration */
    //gpio_init_structure.Pin       = GPIO_PIN_All;
    // GPIOJ Pin 2 je za LED 1!!!! Tu so imeli napako, ker so inicializirali vse pine na portu J
    // kot GPIO_AF14_LTDC. Popravil P.B. UL FRI, 10.12.2022
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | \
 80071ea:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80071ee:	627b      	str	r3, [r7, #36]	; 0x24
    								GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | \
									GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 ;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80071f0:	230e      	movs	r3, #14
 80071f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 80071f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071f8:	4619      	mov	r1, r3
 80071fa:	4823      	ldr	r0, [pc, #140]	; (8007288 <LTDC_MspInit+0x188>)
 80071fc:	f003 ff36 	bl	800b06c <HAL_GPIO_Init>
    /* GPIOK configuration */
    gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8007200:	23ff      	movs	r3, #255	; 0xff
 8007202:	627b      	str	r3, [r7, #36]	; 0x24
                                    GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8007204:	230e      	movs	r3, #14
 8007206:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8007208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800720c:	4619      	mov	r1, r3
 800720e:	481f      	ldr	r0, [pc, #124]	; (800728c <LTDC_MspInit+0x18c>)
 8007210:	f003 ff2c 	bl	800b06c <HAL_GPIO_Init>

    /* GPIOH configuration */
    gpio_init_structure.Pin       =  GPIO_PIN_9 | GPIO_PIN_1;
 8007214:	f240 2302 	movw	r3, #514	; 0x202
 8007218:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800721a:	2302      	movs	r3, #2
 800721c:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Pull      = GPIO_NOPULL;
 800721e:	2300      	movs	r3, #0
 8007220:	62fb      	str	r3, [r7, #44]	; 0x2c
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8007222:	2302      	movs	r3, #2
 8007224:	633b      	str	r3, [r7, #48]	; 0x30
    gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8007226:	230e      	movs	r3, #14
 8007228:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800722a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800722e:	4619      	mov	r1, r3
 8007230:	4817      	ldr	r0, [pc, #92]	; (8007290 <LTDC_MspInit+0x190>)
 8007232:	f003 ff1b 	bl	800b06c <HAL_GPIO_Init>

    gpio_init_structure.Pin       = GPIO_PIN_7;     /* LCD_DISP pin has to be manually controlled */
 8007236:	2380      	movs	r3, #128	; 0x80
 8007238:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800723a:	2301      	movs	r3, #1
 800723c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800723e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007242:	4619      	mov	r1, r3
 8007244:	4813      	ldr	r0, [pc, #76]	; (8007294 <LTDC_MspInit+0x194>)
 8007246:	f003 ff11 	bl	800b06c <HAL_GPIO_Init>
    /* Assert display enable LCD_DISP pin */
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 800724a:	2201      	movs	r2, #1
 800724c:	2180      	movs	r1, #128	; 0x80
 800724e:	4811      	ldr	r0, [pc, #68]	; (8007294 <LTDC_MspInit+0x194>)
 8007250:	f004 f9de 	bl	800b610 <HAL_GPIO_WritePin>

    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 8007254:	4b0a      	ldr	r3, [pc, #40]	; (8007280 <LTDC_MspInit+0x180>)
 8007256:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800725a:	4a09      	ldr	r2, [pc, #36]	; (8007280 <LTDC_MspInit+0x180>)
 800725c:	f043 0308 	orr.w	r3, r3, #8
 8007260:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 8007264:	4b06      	ldr	r3, [pc, #24]	; (8007280 <LTDC_MspInit+0x180>)
 8007266:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800726a:	4a05      	ldr	r2, [pc, #20]	; (8007280 <LTDC_MspInit+0x180>)
 800726c:	f023 0308 	bic.w	r3, r3, #8
 8007270:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
}
 8007274:	bf00      	nop
 8007276:	3738      	adds	r7, #56	; 0x38
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	50001000 	.word	0x50001000
 8007280:	58024400 	.word	0x58024400
 8007284:	58022000 	.word	0x58022000
 8007288:	58022400 	.word	0x58022400
 800728c:	58022800 	.word	0x58022800
 8007290:	58021c00 	.word	0x58021c00
 8007294:	58020c00 	.word	0x58020c00

08007298 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a11      	ldr	r2, [pc, #68]	; (80072ec <DMA2D_MspInit+0x54>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d11a      	bne.n	80072e0 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80072aa:	4b11      	ldr	r3, [pc, #68]	; (80072f0 <DMA2D_MspInit+0x58>)
 80072ac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80072b0:	4a0f      	ldr	r2, [pc, #60]	; (80072f0 <DMA2D_MspInit+0x58>)
 80072b2:	f043 0310 	orr.w	r3, r3, #16
 80072b6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80072ba:	4b0d      	ldr	r3, [pc, #52]	; (80072f0 <DMA2D_MspInit+0x58>)
 80072bc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80072c0:	f003 0310 	and.w	r3, r3, #16
 80072c4:	60fb      	str	r3, [r7, #12]
 80072c6:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 80072c8:	4b09      	ldr	r3, [pc, #36]	; (80072f0 <DMA2D_MspInit+0x58>)
 80072ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072cc:	4a08      	ldr	r2, [pc, #32]	; (80072f0 <DMA2D_MspInit+0x58>)
 80072ce:	f043 0310 	orr.w	r3, r3, #16
 80072d2:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80072d4:	4b06      	ldr	r3, [pc, #24]	; (80072f0 <DMA2D_MspInit+0x58>)
 80072d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072d8:	4a05      	ldr	r2, [pc, #20]	; (80072f0 <DMA2D_MspInit+0x58>)
 80072da:	f023 0310 	bic.w	r3, r3, #16
 80072de:	67d3      	str	r3, [r2, #124]	; 0x7c
  }
}
 80072e0:	bf00      	nop
 80072e2:	3714      	adds	r7, #20
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr
 80072ec:	52001000 	.word	0x52001000
 80072f0:	58024400 	.word	0x58024400

080072f4 <TIMx_PWM_MspInit>:
  * @brief  Initializes TIM MSP.
  * @param  htim  TIM handle
  * @retval None
  */
static void TIMx_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b08a      	sub	sp, #40	; 0x28
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  GPIO_InitTypeDef GPIO_InitStruct;

  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80072fc:	4b18      	ldr	r3, [pc, #96]	; (8007360 <TIMx_PWM_MspInit+0x6c>)
 80072fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007302:	4a17      	ldr	r2, [pc, #92]	; (8007360 <TIMx_PWM_MspInit+0x6c>)
 8007304:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007308:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800730c:	4b14      	ldr	r3, [pc, #80]	; (8007360 <TIMx_PWM_MspInit+0x6c>)
 800730e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007316:	613b      	str	r3, [r7, #16]
 8007318:	693b      	ldr	r3, [r7, #16]

  /* TIMx Peripheral clock enable */
  LCD_TIMx_CLK_ENABLE();
 800731a:	4b11      	ldr	r3, [pc, #68]	; (8007360 <TIMx_PWM_MspInit+0x6c>)
 800731c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007320:	4a0f      	ldr	r2, [pc, #60]	; (8007360 <TIMx_PWM_MspInit+0x6c>)
 8007322:	f043 0302 	orr.w	r3, r3, #2
 8007326:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800732a:	4b0d      	ldr	r3, [pc, #52]	; (8007360 <TIMx_PWM_MspInit+0x6c>)
 800732c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007330:	f003 0302 	and.w	r3, r3, #2
 8007334:	60fb      	str	r3, [r7, #12]
 8007336:	68fb      	ldr	r3, [r7, #12]

  /* Timer channel configuration */
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8007338:	2302      	movs	r3, #2
 800733a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800733c:	2300      	movs	r3, #0
 800733e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8007340:	2301      	movs	r3, #1
 8007342:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = LCD_TIMx_CHANNEL_AF;
 8007344:	2303      	movs	r3, #3
 8007346:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Pin       = LCD_BL_CTRL_PIN; /* BL_CTRL */
 8007348:	2301      	movs	r3, #1
 800734a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStruct);
 800734c:	f107 0314 	add.w	r3, r7, #20
 8007350:	4619      	mov	r1, r3
 8007352:	4804      	ldr	r0, [pc, #16]	; (8007364 <TIMx_PWM_MspInit+0x70>)
 8007354:	f003 fe8a 	bl	800b06c <HAL_GPIO_Init>
}
 8007358:	bf00      	nop
 800735a:	3728      	adds	r7, #40	; 0x28
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	58024400 	.word	0x58024400
 8007364:	58022800 	.word	0x58022800

08007368 <TIMx_PWM_Init>:
  * @brief  Initializes TIM in PWM mode
  * @param  htim TIM handle
  * @retval None
  */
static void TIMx_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  /* Timer_Clock = 2 x  APB2_clock = 200 MHz */
  /* PWM_freq = Timer_Clock /(Period x (Prescaler + 1))*/
  /* PWM_freq = 200 MHz /(50000 x (4 + 1)) = 800 Hz*/
  htim->Instance = LCD_TIMx;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a11      	ldr	r2, [pc, #68]	; (80073b8 <TIMx_PWM_Init+0x50>)
 8007374:	601a      	str	r2, [r3, #0]
  (void)HAL_TIM_PWM_DeInit(htim);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f00a f9c6 	bl	8011708 <HAL_TIM_PWM_DeInit>

  TIMx_PWM_MspInit(htim);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7ff ffb9 	bl	80072f4 <TIMx_PWM_MspInit>

  htim->Init.Prescaler         = LCD_TIMX_PRESCALER_VALUE;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2204      	movs	r2, #4
 8007386:	605a      	str	r2, [r3, #4]
  htim->Init.Period            = LCD_TIMX_PERIOD_VALUE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800738e:	60da      	str	r2, [r3, #12]
  htim->Init.ClockDivision     = 0;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	611a      	str	r2, [r3, #16]
  htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	609a      	str	r2, [r3, #8]
  htim->Init.RepetitionCounter = 0;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	615a      	str	r2, [r3, #20]
  htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	619a      	str	r2, [r3, #24]
  (void)HAL_TIM_PWM_Init(htim);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f00a f956 	bl	801165a <HAL_TIM_PWM_Init>
}
 80073ae:	bf00      	nop
 80073b0:	3708      	adds	r7, #8
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	40010400 	.word	0x40010400

080073bc <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80073c4:	2300      	movs	r3, #0
 80073c6:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d003      	beq.n	80073d6 <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 80073ce:	f06f 0301 	mvn.w	r3, #1
 80073d2:	60fb      	str	r3, [r7, #12]
 80073d4:	e044      	b.n	8007460 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2234      	movs	r2, #52	; 0x34
 80073da:	fb02 f303 	mul.w	r3, r2, r3
 80073de:	4a23      	ldr	r2, [pc, #140]	; (800746c <BSP_SDRAM_Init+0xb0>)
 80073e0:	4413      	add	r3, r2
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 f892 	bl	800750c <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2234      	movs	r2, #52	; 0x34
 80073ec:	fb02 f303 	mul.w	r3, r2, r3
 80073f0:	4a1e      	ldr	r2, [pc, #120]	; (800746c <BSP_SDRAM_Init+0xb0>)
 80073f2:	4413      	add	r3, r2
 80073f4:	2210      	movs	r2, #16
 80073f6:	2104      	movs	r1, #4
 80073f8:	4618      	mov	r0, r3
 80073fa:	f000 f83b 	bl	8007474 <MX_SDRAM_BANK2_Init>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d003      	beq.n	800740c <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 8007404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007408:	60fb      	str	r3, [r7, #12]
 800740a:	e029      	b.n	8007460 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800740c:	4b18      	ldr	r3, [pc, #96]	; (8007470 <BSP_SDRAM_Init+0xb4>)
 800740e:	2208      	movs	r2, #8
 8007410:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 8007412:	4b17      	ldr	r3, [pc, #92]	; (8007470 <BSP_SDRAM_Init+0xb4>)
 8007414:	2203      	movs	r2, #3
 8007416:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8007418:	4b15      	ldr	r3, [pc, #84]	; (8007470 <BSP_SDRAM_Init+0xb4>)
 800741a:	f240 6203 	movw	r2, #1539	; 0x603
 800741e:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 8007420:	4b13      	ldr	r3, [pc, #76]	; (8007470 <BSP_SDRAM_Init+0xb4>)
 8007422:	2200      	movs	r2, #0
 8007424:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 8007426:	4b12      	ldr	r3, [pc, #72]	; (8007470 <BSP_SDRAM_Init+0xb4>)
 8007428:	2200      	movs	r2, #0
 800742a:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 800742c:	4b10      	ldr	r3, [pc, #64]	; (8007470 <BSP_SDRAM_Init+0xb4>)
 800742e:	2230      	movs	r2, #48	; 0x30
 8007430:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 8007432:	4b0f      	ldr	r3, [pc, #60]	; (8007470 <BSP_SDRAM_Init+0xb4>)
 8007434:	2200      	movs	r2, #0
 8007436:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 8007438:	4b0d      	ldr	r3, [pc, #52]	; (8007470 <BSP_SDRAM_Init+0xb4>)
 800743a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800743e:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2234      	movs	r2, #52	; 0x34
 8007444:	fb02 f303 	mul.w	r3, r2, r3
 8007448:	4a08      	ldr	r2, [pc, #32]	; (800746c <BSP_SDRAM_Init+0xb0>)
 800744a:	4413      	add	r3, r2
 800744c:	4908      	ldr	r1, [pc, #32]	; (8007470 <BSP_SDRAM_Init+0xb4>)
 800744e:	4618      	mov	r0, r3
 8007450:	f7fa fec5 	bl	80021de <MT48LC4M32B2_Init>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d002      	beq.n	8007460 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800745a:	f06f 0304 	mvn.w	r3, #4
 800745e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8007460:	68fb      	ldr	r3, [r7, #12]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	240080d0 	.word	0x240080d0
 8007470:	24008104 	.word	0x24008104

08007474 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b08c      	sub	sp, #48	; 0x30
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 8007480:	4b20      	ldr	r3, [pc, #128]	; (8007504 <MX_SDRAM_BANK2_Init+0x90>)
 8007482:	4a21      	ldr	r2, [pc, #132]	; (8007508 <MX_SDRAM_BANK2_Init+0x94>)
 8007484:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2201      	movs	r2, #1
 800748a:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800749e:	4b19      	ldr	r3, [pc, #100]	; (8007504 <MX_SDRAM_BANK2_Init+0x90>)
 80074a0:	2240      	movs	r2, #64	; 0x40
 80074a2:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80074aa:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074b8:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80074c0:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 80074c8:	2302      	movs	r3, #2
 80074ca:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 80074cc:	2307      	movs	r3, #7
 80074ce:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 80074d0:	2304      	movs	r3, #4
 80074d2:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 80074d4:	2307      	movs	r3, #7
 80074d6:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 80074d8:	2302      	movs	r3, #2
 80074da:	627b      	str	r3, [r7, #36]	; 0x24
  sdram_timing.RPDelay              = 2;
 80074dc:	2302      	movs	r3, #2
 80074de:	62bb      	str	r3, [r7, #40]	; 0x28
  sdram_timing.RCDDelay             = 2;
 80074e0:	2302      	movs	r3, #2
 80074e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80074e4:	f107 0314 	add.w	r3, r7, #20
 80074e8:	4619      	mov	r1, r3
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f00a f812 	bl	8011514 <HAL_SDRAM_Init>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d001      	beq.n	80074fa <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e000      	b.n	80074fc <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3730      	adds	r7, #48	; 0x30
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	240080d0 	.word	0x240080d0
 8007508:	52004140 	.word	0x52004140

0800750c <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b08e      	sub	sp, #56	; 0x38
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8007514:	4b73      	ldr	r3, [pc, #460]	; (80076e4 <SDRAM_MspInit+0x1d8>)
 8007516:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800751a:	4a72      	ldr	r2, [pc, #456]	; (80076e4 <SDRAM_MspInit+0x1d8>)
 800751c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007520:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8007524:	4b6f      	ldr	r3, [pc, #444]	; (80076e4 <SDRAM_MspInit+0x1d8>)
 8007526:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800752a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800752e:	623b      	str	r3, [r7, #32]
 8007530:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 8007532:	4b6c      	ldr	r3, [pc, #432]	; (80076e4 <SDRAM_MspInit+0x1d8>)
 8007534:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8007538:	4a6a      	ldr	r2, [pc, #424]	; (80076e4 <SDRAM_MspInit+0x1d8>)
 800753a:	f043 0301 	orr.w	r3, r3, #1
 800753e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8007542:	4b68      	ldr	r3, [pc, #416]	; (80076e4 <SDRAM_MspInit+0x1d8>)
 8007544:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8007548:	f003 0301 	and.w	r3, r3, #1
 800754c:	61fb      	str	r3, [r7, #28]
 800754e:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007550:	4b64      	ldr	r3, [pc, #400]	; (80076e4 <SDRAM_MspInit+0x1d8>)
 8007552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007556:	4a63      	ldr	r2, [pc, #396]	; (80076e4 <SDRAM_MspInit+0x1d8>)
 8007558:	f043 0308 	orr.w	r3, r3, #8
 800755c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007560:	4b60      	ldr	r3, [pc, #384]	; (80076e4 <SDRAM_MspInit+0x1d8>)
 8007562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007566:	f003 0308 	and.w	r3, r3, #8
 800756a:	61bb      	str	r3, [r7, #24]
 800756c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800756e:	4b5d      	ldr	r3, [pc, #372]	; (80076e4 <SDRAM_MspInit+0x1d8>)
 8007570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007574:	4a5b      	ldr	r2, [pc, #364]	; (80076e4 <SDRAM_MspInit+0x1d8>)
 8007576:	f043 0310 	orr.w	r3, r3, #16
 800757a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800757e:	4b59      	ldr	r3, [pc, #356]	; (80076e4 <SDRAM_MspInit+0x1d8>)
 8007580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007584:	f003 0310 	and.w	r3, r3, #16
 8007588:	617b      	str	r3, [r7, #20]
 800758a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800758c:	4b55      	ldr	r3, [pc, #340]	; (80076e4 <SDRAM_MspInit+0x1d8>)
 800758e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007592:	4a54      	ldr	r2, [pc, #336]	; (80076e4 <SDRAM_MspInit+0x1d8>)
 8007594:	f043 0320 	orr.w	r3, r3, #32
 8007598:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800759c:	4b51      	ldr	r3, [pc, #324]	; (80076e4 <SDRAM_MspInit+0x1d8>)
 800759e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075a2:	f003 0320 	and.w	r3, r3, #32
 80075a6:	613b      	str	r3, [r7, #16]
 80075a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80075aa:	4b4e      	ldr	r3, [pc, #312]	; (80076e4 <SDRAM_MspInit+0x1d8>)
 80075ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075b0:	4a4c      	ldr	r2, [pc, #304]	; (80076e4 <SDRAM_MspInit+0x1d8>)
 80075b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80075ba:	4b4a      	ldr	r3, [pc, #296]	; (80076e4 <SDRAM_MspInit+0x1d8>)
 80075bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c4:	60fb      	str	r3, [r7, #12]
 80075c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80075c8:	4b46      	ldr	r3, [pc, #280]	; (80076e4 <SDRAM_MspInit+0x1d8>)
 80075ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075ce:	4a45      	ldr	r2, [pc, #276]	; (80076e4 <SDRAM_MspInit+0x1d8>)
 80075d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80075d8:	4b42      	ldr	r3, [pc, #264]	; (80076e4 <SDRAM_MspInit+0x1d8>)
 80075da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075e2:	60bb      	str	r3, [r7, #8]
 80075e4:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80075e6:	2302      	movs	r3, #2
 80075e8:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80075ea:	2301      	movs	r3, #1
 80075ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80075ee:	2303      	movs	r3, #3
 80075f0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80075f2:	230c      	movs	r3, #12
 80075f4:	637b      	str	r3, [r7, #52]	; 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80075f6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80075fa:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80075fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007600:	4619      	mov	r1, r3
 8007602:	4839      	ldr	r0, [pc, #228]	; (80076e8 <SDRAM_MspInit+0x1dc>)
 8007604:	f003 fd32 	bl	800b06c <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8007608:	f64f 7383 	movw	r3, #65411	; 0xff83
 800760c:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800760e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007612:	4619      	mov	r1, r3
 8007614:	4835      	ldr	r0, [pc, #212]	; (80076ec <SDRAM_MspInit+0x1e0>)
 8007616:	f003 fd29 	bl	800b06c <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800761a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800761e:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8007620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007624:	4619      	mov	r1, r3
 8007626:	4832      	ldr	r0, [pc, #200]	; (80076f0 <SDRAM_MspInit+0x1e4>)
 8007628:	f003 fd20 	bl	800b06c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 800762c:	f248 1333 	movw	r3, #33075	; 0x8133
 8007630:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8007632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007636:	4619      	mov	r1, r3
 8007638:	482e      	ldr	r0, [pc, #184]	; (80076f4 <SDRAM_MspInit+0x1e8>)
 800763a:	f003 fd17 	bl	800b06c <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 800763e:	23e0      	movs	r3, #224	; 0xe0
 8007640:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8007642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007646:	4619      	mov	r1, r3
 8007648:	482b      	ldr	r0, [pc, #172]	; (80076f8 <SDRAM_MspInit+0x1ec>)
 800764a:	f003 fd0f 	bl	800b06c <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 800764e:	4b2b      	ldr	r3, [pc, #172]	; (80076fc <SDRAM_MspInit+0x1f0>)
 8007650:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007654:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 8007656:	4b29      	ldr	r3, [pc, #164]	; (80076fc <SDRAM_MspInit+0x1f0>)
 8007658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800765c:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 800765e:	4b27      	ldr	r3, [pc, #156]	; (80076fc <SDRAM_MspInit+0x1f0>)
 8007660:	2280      	movs	r2, #128	; 0x80
 8007662:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8007664:	4b25      	ldr	r3, [pc, #148]	; (80076fc <SDRAM_MspInit+0x1f0>)
 8007666:	2200      	movs	r2, #0
 8007668:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 800766a:	4b24      	ldr	r3, [pc, #144]	; (80076fc <SDRAM_MspInit+0x1f0>)
 800766c:	f240 2202 	movw	r2, #514	; 0x202
 8007670:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 8007672:	4b22      	ldr	r3, [pc, #136]	; (80076fc <SDRAM_MspInit+0x1f0>)
 8007674:	f640 0208 	movw	r2, #2056	; 0x808
 8007678:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800767a:	4b20      	ldr	r3, [pc, #128]	; (80076fc <SDRAM_MspInit+0x1f0>)
 800767c:	2220      	movs	r2, #32
 800767e:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8007680:	4b1e      	ldr	r3, [pc, #120]	; (80076fc <SDRAM_MspInit+0x1f0>)
 8007682:	2280      	movs	r2, #128	; 0x80
 8007684:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8007686:	4b1d      	ldr	r3, [pc, #116]	; (80076fc <SDRAM_MspInit+0x1f0>)
 8007688:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800768c:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 800768e:	4b1b      	ldr	r3, [pc, #108]	; (80076fc <SDRAM_MspInit+0x1f0>)
 8007690:	2200      	movs	r2, #0
 8007692:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8007694:	4b19      	ldr	r3, [pc, #100]	; (80076fc <SDRAM_MspInit+0x1f0>)
 8007696:	2200      	movs	r2, #0
 8007698:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 800769a:	4b18      	ldr	r3, [pc, #96]	; (80076fc <SDRAM_MspInit+0x1f0>)
 800769c:	2280      	movs	r2, #128	; 0x80
 800769e:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 80076a0:	4b16      	ldr	r3, [pc, #88]	; (80076fc <SDRAM_MspInit+0x1f0>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 80076a6:	4b15      	ldr	r3, [pc, #84]	; (80076fc <SDRAM_MspInit+0x1f0>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	639a      	str	r2, [r3, #56]	; 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 80076ac:	4b13      	ldr	r3, [pc, #76]	; (80076fc <SDRAM_MspInit+0x1f0>)
 80076ae:	4a14      	ldr	r2, [pc, #80]	; (8007700 <SDRAM_MspInit+0x1f4>)
 80076b0:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 80076b2:	4b14      	ldr	r3, [pc, #80]	; (8007704 <SDRAM_MspInit+0x1f8>)
 80076b4:	4a11      	ldr	r2, [pc, #68]	; (80076fc <SDRAM_MspInit+0x1f0>)
 80076b6:	631a      	str	r2, [r3, #48]	; 0x30
 80076b8:	4b10      	ldr	r3, [pc, #64]	; (80076fc <SDRAM_MspInit+0x1f0>)
 80076ba:	4a12      	ldr	r2, [pc, #72]	; (8007704 <SDRAM_MspInit+0x1f8>)
 80076bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 80076be:	480f      	ldr	r0, [pc, #60]	; (80076fc <SDRAM_MspInit+0x1f0>)
 80076c0:	f005 f92a 	bl	800c918 <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 80076c4:	480d      	ldr	r0, [pc, #52]	; (80076fc <SDRAM_MspInit+0x1f0>)
 80076c6:	f005 f8db 	bl	800c880 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 80076ca:	2200      	movs	r2, #0
 80076cc:	210f      	movs	r1, #15
 80076ce:	207a      	movs	r0, #122	; 0x7a
 80076d0:	f000 fb4b 	bl	8007d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 80076d4:	207a      	movs	r0, #122	; 0x7a
 80076d6:	f000 fb62 	bl	8007d9e <HAL_NVIC_EnableIRQ>
}
 80076da:	bf00      	nop
 80076dc:	3738      	adds	r7, #56	; 0x38
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	58024400 	.word	0x58024400
 80076e8:	58020c00 	.word	0x58020c00
 80076ec:	58021000 	.word	0x58021000
 80076f0:	58021400 	.word	0x58021400
 80076f4:	58021800 	.word	0x58021800
 80076f8:	58021c00 	.word	0x58021c00
 80076fc:	24008124 	.word	0x24008124
 8007700:	52000040 	.word	0x52000040
 8007704:	240080d0 	.word	0x240080d0

08007708 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b08a      	sub	sp, #40	; 0x28
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007712:	2300      	movs	r3, #0
 8007714:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d003      	beq.n	8007724 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800771c:	f06f 0301 	mvn.w	r3, #1
 8007720:	627b      	str	r3, [r7, #36]	; 0x24
 8007722:	e13e      	b.n	80079a2 <BSP_TS_GetState+0x29a>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8007724:	4ba1      	ldr	r3, [pc, #644]	; (80079ac <BSP_TS_GetState+0x2a4>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	49a1      	ldr	r1, [pc, #644]	; (80079b0 <BSP_TS_GetState+0x2a8>)
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007732:	f107 0108 	add.w	r1, r7, #8
 8007736:	4610      	mov	r0, r2
 8007738:	4798      	blx	r3
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	da03      	bge.n	8007748 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007740:	f06f 0304 	mvn.w	r3, #4
 8007744:	627b      	str	r3, [r7, #36]	; 0x24
 8007746:	e12c      	b.n	80079a2 <BSP_TS_GetState+0x29a>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	2b00      	cmp	r3, #0
 800774c:	f000 8110 	beq.w	8007970 <BSP_TS_GetState+0x268>
    {
      x_oriented = state.TouchX;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8007758:	4996      	ldr	r1, [pc, #600]	; (80079b4 <BSP_TS_GetState+0x2ac>)
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	4613      	mov	r3, r2
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	4413      	add	r3, r2
 8007762:	00db      	lsls	r3, r3, #3
 8007764:	440b      	add	r3, r1
 8007766:	3308      	adds	r3, #8
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0308 	and.w	r3, r3, #8
 800776e:	2b00      	cmp	r3, #0
 8007770:	d003      	beq.n	800777a <BSP_TS_GetState+0x72>
      {
        x_oriented = state.TouchY;
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800777a:	498e      	ldr	r1, [pc, #568]	; (80079b4 <BSP_TS_GetState+0x2ac>)
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	4613      	mov	r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4413      	add	r3, r2
 8007784:	00db      	lsls	r3, r3, #3
 8007786:	440b      	add	r3, r1
 8007788:	3308      	adds	r3, #8
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 0302 	and.w	r3, r3, #2
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00c      	beq.n	80077ae <BSP_TS_GetState+0xa6>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8007794:	4987      	ldr	r1, [pc, #540]	; (80079b4 <BSP_TS_GetState+0x2ac>)
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	4613      	mov	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4413      	add	r3, r2
 800779e:	00db      	lsls	r3, r3, #3
 80077a0:	440b      	add	r3, r1
 80077a2:	3310      	adds	r3, #16
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	3b01      	subs	r3, #1
 80077ac:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 80077ae:	4981      	ldr	r1, [pc, #516]	; (80079b4 <BSP_TS_GetState+0x2ac>)
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	4613      	mov	r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	4413      	add	r3, r2
 80077b8:	00db      	lsls	r3, r3, #3
 80077ba:	440b      	add	r3, r1
 80077bc:	3308      	adds	r3, #8
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0304 	and.w	r3, r3, #4
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00b      	beq.n	80077e0 <BSP_TS_GetState+0xd8>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 80077c8:	497a      	ldr	r1, [pc, #488]	; (80079b4 <BSP_TS_GetState+0x2ac>)
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	4613      	mov	r3, r2
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	4413      	add	r3, r2
 80077d2:	00db      	lsls	r3, r3, #3
 80077d4:	440b      	add	r3, r1
 80077d6:	3314      	adds	r3, #20
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80077e0:	4974      	ldr	r1, [pc, #464]	; (80079b4 <BSP_TS_GetState+0x2ac>)
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	4613      	mov	r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	4413      	add	r3, r2
 80077ea:	00db      	lsls	r3, r3, #3
 80077ec:	440b      	add	r3, r1
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6a3a      	ldr	r2, [r7, #32]
 80077f2:	fb02 f103 	mul.w	r1, r2, r3
 80077f6:	486f      	ldr	r0, [pc, #444]	; (80079b4 <BSP_TS_GetState+0x2ac>)
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	4613      	mov	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	4413      	add	r3, r2
 8007800:	00db      	lsls	r3, r3, #3
 8007802:	4403      	add	r3, r0
 8007804:	3310      	adds	r3, #16
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	fbb1 f2f3 	udiv	r2, r1, r3
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8007810:	4968      	ldr	r1, [pc, #416]	; (80079b4 <BSP_TS_GetState+0x2ac>)
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	4613      	mov	r3, r2
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	4413      	add	r3, r2
 800781a:	00db      	lsls	r3, r3, #3
 800781c:	440b      	add	r3, r1
 800781e:	3304      	adds	r3, #4
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	69fa      	ldr	r2, [r7, #28]
 8007824:	fb02 f103 	mul.w	r1, r2, r3
 8007828:	4862      	ldr	r0, [pc, #392]	; (80079b4 <BSP_TS_GetState+0x2ac>)
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	4613      	mov	r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4413      	add	r3, r2
 8007832:	00db      	lsls	r3, r3, #3
 8007834:	4403      	add	r3, r0
 8007836:	3314      	adds	r3, #20
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	fbb1 f2f3 	udiv	r2, r1, r3
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	6859      	ldr	r1, [r3, #4]
 800784c:	4859      	ldr	r0, [pc, #356]	; (80079b4 <BSP_TS_GetState+0x2ac>)
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	4613      	mov	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4413      	add	r3, r2
 8007856:	00db      	lsls	r3, r3, #3
 8007858:	4403      	add	r3, r0
 800785a:	3318      	adds	r3, #24
 800785c:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800785e:	4299      	cmp	r1, r3
 8007860:	d90c      	bls.n	800787c <BSP_TS_GetState+0x174>
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	6859      	ldr	r1, [r3, #4]
 8007866:	4853      	ldr	r0, [pc, #332]	; (80079b4 <BSP_TS_GetState+0x2ac>)
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	4613      	mov	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4413      	add	r3, r2
 8007870:	00db      	lsls	r3, r3, #3
 8007872:	4403      	add	r3, r0
 8007874:	3318      	adds	r3, #24
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	1acb      	subs	r3, r1, r3
 800787a:	e00b      	b.n	8007894 <BSP_TS_GetState+0x18c>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 800787c:	494d      	ldr	r1, [pc, #308]	; (80079b4 <BSP_TS_GetState+0x2ac>)
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	4613      	mov	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4413      	add	r3, r2
 8007886:	00db      	lsls	r3, r3, #3
 8007888:	440b      	add	r3, r1
 800788a:	3318      	adds	r3, #24
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8007892:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8007894:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	6899      	ldr	r1, [r3, #8]
 800789a:	4846      	ldr	r0, [pc, #280]	; (80079b4 <BSP_TS_GetState+0x2ac>)
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	4613      	mov	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4413      	add	r3, r2
 80078a4:	00db      	lsls	r3, r3, #3
 80078a6:	4403      	add	r3, r0
 80078a8:	3320      	adds	r3, #32
 80078aa:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80078ac:	4299      	cmp	r1, r3
 80078ae:	d90c      	bls.n	80078ca <BSP_TS_GetState+0x1c2>
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	6899      	ldr	r1, [r3, #8]
 80078b4:	483f      	ldr	r0, [pc, #252]	; (80079b4 <BSP_TS_GetState+0x2ac>)
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	4613      	mov	r3, r2
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	4413      	add	r3, r2
 80078be:	00db      	lsls	r3, r3, #3
 80078c0:	4403      	add	r3, r0
 80078c2:	3320      	adds	r3, #32
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	1acb      	subs	r3, r1, r3
 80078c8:	e00b      	b.n	80078e2 <BSP_TS_GetState+0x1da>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 80078ca:	493a      	ldr	r1, [pc, #232]	; (80079b4 <BSP_TS_GetState+0x2ac>)
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	4613      	mov	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	4413      	add	r3, r2
 80078d4:	00db      	lsls	r3, r3, #3
 80078d6:	440b      	add	r3, r1
 80078d8:	3320      	adds	r3, #32
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80078e0:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 80078e2:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80078e4:	4933      	ldr	r1, [pc, #204]	; (80079b4 <BSP_TS_GetState+0x2ac>)
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	4613      	mov	r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	4413      	add	r3, r2
 80078ee:	00db      	lsls	r3, r3, #3
 80078f0:	440b      	add	r3, r1
 80078f2:	330c      	adds	r3, #12
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	69ba      	ldr	r2, [r7, #24]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d80b      	bhi.n	8007914 <BSP_TS_GetState+0x20c>
 80078fc:	492d      	ldr	r1, [pc, #180]	; (80079b4 <BSP_TS_GetState+0x2ac>)
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	4613      	mov	r3, r2
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	4413      	add	r3, r2
 8007906:	00db      	lsls	r3, r3, #3
 8007908:	440b      	add	r3, r1
 800790a:	330c      	adds	r3, #12
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	697a      	ldr	r2, [r7, #20]
 8007910:	429a      	cmp	r2, r3
 8007912:	d916      	bls.n	8007942 <BSP_TS_GetState+0x23a>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	6859      	ldr	r1, [r3, #4]
 8007918:	4826      	ldr	r0, [pc, #152]	; (80079b4 <BSP_TS_GetState+0x2ac>)
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	4613      	mov	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4413      	add	r3, r2
 8007922:	00db      	lsls	r3, r3, #3
 8007924:	4403      	add	r3, r0
 8007926:	3318      	adds	r3, #24
 8007928:	6019      	str	r1, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	6899      	ldr	r1, [r3, #8]
 800792e:	4821      	ldr	r0, [pc, #132]	; (80079b4 <BSP_TS_GetState+0x2ac>)
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	4613      	mov	r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	4413      	add	r3, r2
 8007938:	00db      	lsls	r3, r3, #3
 800793a:	4403      	add	r3, r0
 800793c:	3320      	adds	r3, #32
 800793e:	6019      	str	r1, [r3, #0]
 8007940:	e02f      	b.n	80079a2 <BSP_TS_GetState+0x29a>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8007942:	491c      	ldr	r1, [pc, #112]	; (80079b4 <BSP_TS_GetState+0x2ac>)
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	4613      	mov	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4413      	add	r3, r2
 800794c:	00db      	lsls	r3, r3, #3
 800794e:	440b      	add	r3, r1
 8007950:	3318      	adds	r3, #24
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8007958:	4916      	ldr	r1, [pc, #88]	; (80079b4 <BSP_TS_GetState+0x2ac>)
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	4613      	mov	r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	4413      	add	r3, r2
 8007962:	00db      	lsls	r3, r3, #3
 8007964:	440b      	add	r3, r1
 8007966:	3320      	adds	r3, #32
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	609a      	str	r2, [r3, #8]
 800796e:	e018      	b.n	80079a2 <BSP_TS_GetState+0x29a>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	2200      	movs	r2, #0
 8007974:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8007976:	490f      	ldr	r1, [pc, #60]	; (80079b4 <BSP_TS_GetState+0x2ac>)
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	4613      	mov	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4413      	add	r3, r2
 8007980:	00db      	lsls	r3, r3, #3
 8007982:	440b      	add	r3, r1
 8007984:	3318      	adds	r3, #24
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800798c:	4909      	ldr	r1, [pc, #36]	; (80079b4 <BSP_TS_GetState+0x2ac>)
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	4613      	mov	r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	00db      	lsls	r3, r3, #3
 8007998:	440b      	add	r3, r1
 800799a:	3320      	adds	r3, #32
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	609a      	str	r2, [r3, #8]
    }
}

return ret;
 80079a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3728      	adds	r7, #40	; 0x28
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	24008190 	.word	0x24008190
 80079b0:	24008194 	.word	0x24008194
 80079b4:	24008198 	.word	0x24008198

080079b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80079be:	2003      	movs	r0, #3
 80079c0:	f000 f9c8 	bl	8007d54 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80079c4:	f005 fee2 	bl	800d78c <HAL_RCC_GetSysClockFreq>
 80079c8:	4602      	mov	r2, r0
 80079ca:	4b15      	ldr	r3, [pc, #84]	; (8007a20 <HAL_Init+0x68>)
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	0a1b      	lsrs	r3, r3, #8
 80079d0:	f003 030f 	and.w	r3, r3, #15
 80079d4:	4913      	ldr	r1, [pc, #76]	; (8007a24 <HAL_Init+0x6c>)
 80079d6:	5ccb      	ldrb	r3, [r1, r3]
 80079d8:	f003 031f 	and.w	r3, r3, #31
 80079dc:	fa22 f303 	lsr.w	r3, r2, r3
 80079e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80079e2:	4b0f      	ldr	r3, [pc, #60]	; (8007a20 <HAL_Init+0x68>)
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	f003 030f 	and.w	r3, r3, #15
 80079ea:	4a0e      	ldr	r2, [pc, #56]	; (8007a24 <HAL_Init+0x6c>)
 80079ec:	5cd3      	ldrb	r3, [r2, r3]
 80079ee:	f003 031f 	and.w	r3, r3, #31
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	fa22 f303 	lsr.w	r3, r2, r3
 80079f8:	4a0b      	ldr	r2, [pc, #44]	; (8007a28 <HAL_Init+0x70>)
 80079fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80079fc:	4a0b      	ldr	r2, [pc, #44]	; (8007a2c <HAL_Init+0x74>)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007a02:	200f      	movs	r0, #15
 8007a04:	f000 f81c 	bl	8007a40 <HAL_InitTick>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d001      	beq.n	8007a12 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e002      	b.n	8007a18 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8007a12:	f000 f80d 	bl	8007a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	58024400 	.word	0x58024400
 8007a24:	0801b318 	.word	0x0801b318
 8007a28:	240004e0 	.word	0x240004e0
 8007a2c:	240004dc 	.word	0x240004dc

08007a30 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8007a30:	b480      	push	{r7}
 8007a32:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8007a34:	bf00      	nop
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
	...

08007a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8007a48:	4b15      	ldr	r3, [pc, #84]	; (8007aa0 <HAL_InitTick+0x60>)
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	e021      	b.n	8007a98 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007a54:	4b13      	ldr	r3, [pc, #76]	; (8007aa4 <HAL_InitTick+0x64>)
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	4b11      	ldr	r3, [pc, #68]	; (8007aa0 <HAL_InitTick+0x60>)
 8007a5a:	781b      	ldrb	r3, [r3, #0]
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 f9b3 	bl	8007dd6 <HAL_SYSTICK_Config>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d001      	beq.n	8007a7a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e00e      	b.n	8007a98 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2b0f      	cmp	r3, #15
 8007a7e:	d80a      	bhi.n	8007a96 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007a80:	2200      	movs	r2, #0
 8007a82:	6879      	ldr	r1, [r7, #4]
 8007a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a88:	f000 f96f 	bl	8007d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007a8c:	4a06      	ldr	r2, [pc, #24]	; (8007aa8 <HAL_InitTick+0x68>)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007a92:	2300      	movs	r3, #0
 8007a94:	e000      	b.n	8007a98 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	24000548 	.word	0x24000548
 8007aa4:	240004dc 	.word	0x240004dc
 8007aa8:	24000544 	.word	0x24000544

08007aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007aac:	b480      	push	{r7}
 8007aae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007ab0:	4b06      	ldr	r3, [pc, #24]	; (8007acc <HAL_IncTick+0x20>)
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	4b06      	ldr	r3, [pc, #24]	; (8007ad0 <HAL_IncTick+0x24>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4413      	add	r3, r2
 8007abc:	4a04      	ldr	r2, [pc, #16]	; (8007ad0 <HAL_IncTick+0x24>)
 8007abe:	6013      	str	r3, [r2, #0]
}
 8007ac0:	bf00      	nop
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	24000548 	.word	0x24000548
 8007ad0:	240081c0 	.word	0x240081c0

08007ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8007ad8:	4b03      	ldr	r3, [pc, #12]	; (8007ae8 <HAL_GetTick+0x14>)
 8007ada:	681b      	ldr	r3, [r3, #0]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	240081c0 	.word	0x240081c0

08007aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007af4:	f7ff ffee 	bl	8007ad4 <HAL_GetTick>
 8007af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b04:	d005      	beq.n	8007b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007b06:	4b0a      	ldr	r3, [pc, #40]	; (8007b30 <HAL_Delay+0x44>)
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	4413      	add	r3, r2
 8007b10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007b12:	bf00      	nop
 8007b14:	f7ff ffde 	bl	8007ad4 <HAL_GetTick>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d8f7      	bhi.n	8007b14 <HAL_Delay+0x28>
  {
  }
}
 8007b24:	bf00      	nop
 8007b26:	bf00      	nop
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	24000548 	.word	0x24000548

08007b34 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8007b34:	b480      	push	{r7}
 8007b36:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8007b38:	4b03      	ldr	r3, [pc, #12]	; (8007b48 <HAL_GetREVID+0x14>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	0c1b      	lsrs	r3, r3, #16
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr
 8007b48:	5c001000 	.word	0x5c001000

08007b4c <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8007b50:	4b05      	ldr	r3, [pc, #20]	; (8007b68 <HAL_EnableCompensationCell+0x1c>)
 8007b52:	6a1b      	ldr	r3, [r3, #32]
 8007b54:	4a04      	ldr	r2, [pc, #16]	; (8007b68 <HAL_EnableCompensationCell+0x1c>)
 8007b56:	f043 0301 	orr.w	r3, r3, #1
 8007b5a:	6213      	str	r3, [r2, #32]
}
 8007b5c:	bf00      	nop
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	58000400 	.word	0x58000400

08007b6c <__NVIC_SetPriorityGrouping>:
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b085      	sub	sp, #20
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f003 0307 	and.w	r3, r3, #7
 8007b7a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007b7c:	4b0b      	ldr	r3, [pc, #44]	; (8007bac <__NVIC_SetPriorityGrouping+0x40>)
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007b88:	4013      	ands	r3, r2
 8007b8a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007b94:	4b06      	ldr	r3, [pc, #24]	; (8007bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8007b96:	4313      	orrs	r3, r2
 8007b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007b9a:	4a04      	ldr	r2, [pc, #16]	; (8007bac <__NVIC_SetPriorityGrouping+0x40>)
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	60d3      	str	r3, [r2, #12]
}
 8007ba0:	bf00      	nop
 8007ba2:	3714      	adds	r7, #20
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr
 8007bac:	e000ed00 	.word	0xe000ed00
 8007bb0:	05fa0000 	.word	0x05fa0000

08007bb4 <__NVIC_GetPriorityGrouping>:
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007bb8:	4b04      	ldr	r3, [pc, #16]	; (8007bcc <__NVIC_GetPriorityGrouping+0x18>)
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	0a1b      	lsrs	r3, r3, #8
 8007bbe:	f003 0307 	and.w	r3, r3, #7
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr
 8007bcc:	e000ed00 	.word	0xe000ed00

08007bd0 <__NVIC_EnableIRQ>:
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007bda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	db0b      	blt.n	8007bfa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007be2:	88fb      	ldrh	r3, [r7, #6]
 8007be4:	f003 021f 	and.w	r2, r3, #31
 8007be8:	4907      	ldr	r1, [pc, #28]	; (8007c08 <__NVIC_EnableIRQ+0x38>)
 8007bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007bee:	095b      	lsrs	r3, r3, #5
 8007bf0:	2001      	movs	r0, #1
 8007bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8007bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007bfa:	bf00      	nop
 8007bfc:	370c      	adds	r7, #12
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
 8007c06:	bf00      	nop
 8007c08:	e000e100 	.word	0xe000e100

08007c0c <__NVIC_DisableIRQ>:
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	4603      	mov	r3, r0
 8007c14:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007c16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	db12      	blt.n	8007c44 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c1e:	88fb      	ldrh	r3, [r7, #6]
 8007c20:	f003 021f 	and.w	r2, r3, #31
 8007c24:	490a      	ldr	r1, [pc, #40]	; (8007c50 <__NVIC_DisableIRQ+0x44>)
 8007c26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c2a:	095b      	lsrs	r3, r3, #5
 8007c2c:	2001      	movs	r0, #1
 8007c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8007c32:	3320      	adds	r3, #32
 8007c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007c38:	f3bf 8f4f 	dsb	sy
}
 8007c3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007c3e:	f3bf 8f6f 	isb	sy
}
 8007c42:	bf00      	nop
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr
 8007c50:	e000e100 	.word	0xe000e100

08007c54 <__NVIC_SetPriority>:
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	6039      	str	r1, [r7, #0]
 8007c5e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007c60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	db0a      	blt.n	8007c7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	b2da      	uxtb	r2, r3
 8007c6c:	490c      	ldr	r1, [pc, #48]	; (8007ca0 <__NVIC_SetPriority+0x4c>)
 8007c6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c72:	0112      	lsls	r2, r2, #4
 8007c74:	b2d2      	uxtb	r2, r2
 8007c76:	440b      	add	r3, r1
 8007c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007c7c:	e00a      	b.n	8007c94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	b2da      	uxtb	r2, r3
 8007c82:	4908      	ldr	r1, [pc, #32]	; (8007ca4 <__NVIC_SetPriority+0x50>)
 8007c84:	88fb      	ldrh	r3, [r7, #6]
 8007c86:	f003 030f 	and.w	r3, r3, #15
 8007c8a:	3b04      	subs	r3, #4
 8007c8c:	0112      	lsls	r2, r2, #4
 8007c8e:	b2d2      	uxtb	r2, r2
 8007c90:	440b      	add	r3, r1
 8007c92:	761a      	strb	r2, [r3, #24]
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr
 8007ca0:	e000e100 	.word	0xe000e100
 8007ca4:	e000ed00 	.word	0xe000ed00

08007ca8 <NVIC_EncodePriority>:
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b089      	sub	sp, #36	; 0x24
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f003 0307 	and.w	r3, r3, #7
 8007cba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	f1c3 0307 	rsb	r3, r3, #7
 8007cc2:	2b04      	cmp	r3, #4
 8007cc4:	bf28      	it	cs
 8007cc6:	2304      	movcs	r3, #4
 8007cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	3304      	adds	r3, #4
 8007cce:	2b06      	cmp	r3, #6
 8007cd0:	d902      	bls.n	8007cd8 <NVIC_EncodePriority+0x30>
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	3b03      	subs	r3, #3
 8007cd6:	e000      	b.n	8007cda <NVIC_EncodePriority+0x32>
 8007cd8:	2300      	movs	r3, #0
 8007cda:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007cdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce6:	43da      	mvns	r2, r3
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	401a      	ands	r2, r3
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007cf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8007cfa:	43d9      	mvns	r1, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d00:	4313      	orrs	r3, r2
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3724      	adds	r7, #36	; 0x24
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
	...

08007d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d20:	d301      	bcc.n	8007d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007d22:	2301      	movs	r3, #1
 8007d24:	e00f      	b.n	8007d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007d26:	4a0a      	ldr	r2, [pc, #40]	; (8007d50 <SysTick_Config+0x40>)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007d2e:	210f      	movs	r1, #15
 8007d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d34:	f7ff ff8e 	bl	8007c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007d38:	4b05      	ldr	r3, [pc, #20]	; (8007d50 <SysTick_Config+0x40>)
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007d3e:	4b04      	ldr	r3, [pc, #16]	; (8007d50 <SysTick_Config+0x40>)
 8007d40:	2207      	movs	r2, #7
 8007d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3708      	adds	r7, #8
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	e000e010 	.word	0xe000e010

08007d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f7ff ff05 	bl	8007b6c <__NVIC_SetPriorityGrouping>
}
 8007d62:	bf00      	nop
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b086      	sub	sp, #24
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	4603      	mov	r3, r0
 8007d72:	60b9      	str	r1, [r7, #8]
 8007d74:	607a      	str	r2, [r7, #4]
 8007d76:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007d78:	f7ff ff1c 	bl	8007bb4 <__NVIC_GetPriorityGrouping>
 8007d7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	68b9      	ldr	r1, [r7, #8]
 8007d82:	6978      	ldr	r0, [r7, #20]
 8007d84:	f7ff ff90 	bl	8007ca8 <NVIC_EncodePriority>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007d8e:	4611      	mov	r1, r2
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7ff ff5f 	bl	8007c54 <__NVIC_SetPriority>
}
 8007d96:	bf00      	nop
 8007d98:	3718      	adds	r7, #24
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b082      	sub	sp, #8
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	4603      	mov	r3, r0
 8007da6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007da8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7ff ff0f 	bl	8007bd0 <__NVIC_EnableIRQ>
}
 8007db2:	bf00      	nop
 8007db4:	3708      	adds	r7, #8
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b082      	sub	sp, #8
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007dc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7ff ff1f 	bl	8007c0c <__NVIC_DisableIRQ>
}
 8007dce:	bf00      	nop
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b082      	sub	sp, #8
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f7ff ff96 	bl	8007d10 <SysTick_Config>
 8007de4:	4603      	mov	r3, r0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
	...

08007df0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8007df0:	b480      	push	{r7}
 8007df2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8007df4:	f3bf 8f5f 	dmb	sy
}
 8007df8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8007dfa:	4b07      	ldr	r3, [pc, #28]	; (8007e18 <HAL_MPU_Disable+0x28>)
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfe:	4a06      	ldr	r2, [pc, #24]	; (8007e18 <HAL_MPU_Disable+0x28>)
 8007e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e04:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8007e06:	4b05      	ldr	r3, [pc, #20]	; (8007e1c <HAL_MPU_Disable+0x2c>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	605a      	str	r2, [r3, #4]
}
 8007e0c:	bf00      	nop
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr
 8007e16:	bf00      	nop
 8007e18:	e000ed00 	.word	0xe000ed00
 8007e1c:	e000ed90 	.word	0xe000ed90

08007e20 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8007e28:	4a0b      	ldr	r2, [pc, #44]	; (8007e58 <HAL_MPU_Enable+0x38>)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f043 0301 	orr.w	r3, r3, #1
 8007e30:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8007e32:	4b0a      	ldr	r3, [pc, #40]	; (8007e5c <HAL_MPU_Enable+0x3c>)
 8007e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e36:	4a09      	ldr	r2, [pc, #36]	; (8007e5c <HAL_MPU_Enable+0x3c>)
 8007e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e3c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8007e3e:	f3bf 8f4f 	dsb	sy
}
 8007e42:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007e44:	f3bf 8f6f 	isb	sy
}
 8007e48:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8007e4a:	bf00      	nop
 8007e4c:	370c      	adds	r7, #12
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	e000ed90 	.word	0xe000ed90
 8007e5c:	e000ed00 	.word	0xe000ed00

08007e60 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	785a      	ldrb	r2, [r3, #1]
 8007e6c:	4b1d      	ldr	r3, [pc, #116]	; (8007ee4 <HAL_MPU_ConfigRegion+0x84>)
 8007e6e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d029      	beq.n	8007ecc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8007e78:	4a1a      	ldr	r2, [pc, #104]	; (8007ee4 <HAL_MPU_ConfigRegion+0x84>)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	7b1b      	ldrb	r3, [r3, #12]
 8007e84:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	7adb      	ldrb	r3, [r3, #11]
 8007e8a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007e8c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	7a9b      	ldrb	r3, [r3, #10]
 8007e92:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007e94:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	7b5b      	ldrb	r3, [r3, #13]
 8007e9a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007e9c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	7b9b      	ldrb	r3, [r3, #14]
 8007ea2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8007ea4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	7bdb      	ldrb	r3, [r3, #15]
 8007eaa:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007eac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	7a5b      	ldrb	r3, [r3, #9]
 8007eb2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007eb4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	7a1b      	ldrb	r3, [r3, #8]
 8007eba:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007ebc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	7812      	ldrb	r2, [r2, #0]
 8007ec2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007ec4:	4a07      	ldr	r2, [pc, #28]	; (8007ee4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007ec6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007ec8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8007eca:	e005      	b.n	8007ed8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8007ecc:	4b05      	ldr	r3, [pc, #20]	; (8007ee4 <HAL_MPU_ConfigRegion+0x84>)
 8007ece:	2200      	movs	r2, #0
 8007ed0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8007ed2:	4b04      	ldr	r3, [pc, #16]	; (8007ee4 <HAL_MPU_ConfigRegion+0x84>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	611a      	str	r2, [r3, #16]
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr
 8007ee4:	e000ed90 	.word	0xe000ed90

08007ee8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007ef0:	f7ff fdf0 	bl	8007ad4 <HAL_GetTick>
 8007ef4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d101      	bne.n	8007f00 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	e316      	b.n	800852e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a66      	ldr	r2, [pc, #408]	; (80080a0 <HAL_DMA_Init+0x1b8>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d04a      	beq.n	8007fa0 <HAL_DMA_Init+0xb8>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a65      	ldr	r2, [pc, #404]	; (80080a4 <HAL_DMA_Init+0x1bc>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d045      	beq.n	8007fa0 <HAL_DMA_Init+0xb8>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a63      	ldr	r2, [pc, #396]	; (80080a8 <HAL_DMA_Init+0x1c0>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d040      	beq.n	8007fa0 <HAL_DMA_Init+0xb8>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a62      	ldr	r2, [pc, #392]	; (80080ac <HAL_DMA_Init+0x1c4>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d03b      	beq.n	8007fa0 <HAL_DMA_Init+0xb8>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a60      	ldr	r2, [pc, #384]	; (80080b0 <HAL_DMA_Init+0x1c8>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d036      	beq.n	8007fa0 <HAL_DMA_Init+0xb8>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a5f      	ldr	r2, [pc, #380]	; (80080b4 <HAL_DMA_Init+0x1cc>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d031      	beq.n	8007fa0 <HAL_DMA_Init+0xb8>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a5d      	ldr	r2, [pc, #372]	; (80080b8 <HAL_DMA_Init+0x1d0>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d02c      	beq.n	8007fa0 <HAL_DMA_Init+0xb8>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a5c      	ldr	r2, [pc, #368]	; (80080bc <HAL_DMA_Init+0x1d4>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d027      	beq.n	8007fa0 <HAL_DMA_Init+0xb8>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a5a      	ldr	r2, [pc, #360]	; (80080c0 <HAL_DMA_Init+0x1d8>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d022      	beq.n	8007fa0 <HAL_DMA_Init+0xb8>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a59      	ldr	r2, [pc, #356]	; (80080c4 <HAL_DMA_Init+0x1dc>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d01d      	beq.n	8007fa0 <HAL_DMA_Init+0xb8>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a57      	ldr	r2, [pc, #348]	; (80080c8 <HAL_DMA_Init+0x1e0>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d018      	beq.n	8007fa0 <HAL_DMA_Init+0xb8>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a56      	ldr	r2, [pc, #344]	; (80080cc <HAL_DMA_Init+0x1e4>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d013      	beq.n	8007fa0 <HAL_DMA_Init+0xb8>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a54      	ldr	r2, [pc, #336]	; (80080d0 <HAL_DMA_Init+0x1e8>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d00e      	beq.n	8007fa0 <HAL_DMA_Init+0xb8>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a53      	ldr	r2, [pc, #332]	; (80080d4 <HAL_DMA_Init+0x1ec>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d009      	beq.n	8007fa0 <HAL_DMA_Init+0xb8>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a51      	ldr	r2, [pc, #324]	; (80080d8 <HAL_DMA_Init+0x1f0>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d004      	beq.n	8007fa0 <HAL_DMA_Init+0xb8>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a50      	ldr	r2, [pc, #320]	; (80080dc <HAL_DMA_Init+0x1f4>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d101      	bne.n	8007fa4 <HAL_DMA_Init+0xbc>
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e000      	b.n	8007fa6 <HAL_DMA_Init+0xbe>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f000 813b 	beq.w	8008222 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2202      	movs	r2, #2
 8007fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a37      	ldr	r2, [pc, #220]	; (80080a0 <HAL_DMA_Init+0x1b8>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d04a      	beq.n	800805c <HAL_DMA_Init+0x174>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a36      	ldr	r2, [pc, #216]	; (80080a4 <HAL_DMA_Init+0x1bc>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d045      	beq.n	800805c <HAL_DMA_Init+0x174>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a34      	ldr	r2, [pc, #208]	; (80080a8 <HAL_DMA_Init+0x1c0>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d040      	beq.n	800805c <HAL_DMA_Init+0x174>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a33      	ldr	r2, [pc, #204]	; (80080ac <HAL_DMA_Init+0x1c4>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d03b      	beq.n	800805c <HAL_DMA_Init+0x174>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a31      	ldr	r2, [pc, #196]	; (80080b0 <HAL_DMA_Init+0x1c8>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d036      	beq.n	800805c <HAL_DMA_Init+0x174>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a30      	ldr	r2, [pc, #192]	; (80080b4 <HAL_DMA_Init+0x1cc>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d031      	beq.n	800805c <HAL_DMA_Init+0x174>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a2e      	ldr	r2, [pc, #184]	; (80080b8 <HAL_DMA_Init+0x1d0>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d02c      	beq.n	800805c <HAL_DMA_Init+0x174>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a2d      	ldr	r2, [pc, #180]	; (80080bc <HAL_DMA_Init+0x1d4>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d027      	beq.n	800805c <HAL_DMA_Init+0x174>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a2b      	ldr	r2, [pc, #172]	; (80080c0 <HAL_DMA_Init+0x1d8>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d022      	beq.n	800805c <HAL_DMA_Init+0x174>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a2a      	ldr	r2, [pc, #168]	; (80080c4 <HAL_DMA_Init+0x1dc>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d01d      	beq.n	800805c <HAL_DMA_Init+0x174>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a28      	ldr	r2, [pc, #160]	; (80080c8 <HAL_DMA_Init+0x1e0>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d018      	beq.n	800805c <HAL_DMA_Init+0x174>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a27      	ldr	r2, [pc, #156]	; (80080cc <HAL_DMA_Init+0x1e4>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d013      	beq.n	800805c <HAL_DMA_Init+0x174>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a25      	ldr	r2, [pc, #148]	; (80080d0 <HAL_DMA_Init+0x1e8>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d00e      	beq.n	800805c <HAL_DMA_Init+0x174>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a24      	ldr	r2, [pc, #144]	; (80080d4 <HAL_DMA_Init+0x1ec>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d009      	beq.n	800805c <HAL_DMA_Init+0x174>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a22      	ldr	r2, [pc, #136]	; (80080d8 <HAL_DMA_Init+0x1f0>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d004      	beq.n	800805c <HAL_DMA_Init+0x174>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a21      	ldr	r2, [pc, #132]	; (80080dc <HAL_DMA_Init+0x1f4>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d108      	bne.n	800806e <HAL_DMA_Init+0x186>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f022 0201 	bic.w	r2, r2, #1
 800806a:	601a      	str	r2, [r3, #0]
 800806c:	e007      	b.n	800807e <HAL_DMA_Init+0x196>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f022 0201 	bic.w	r2, r2, #1
 800807c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800807e:	e02f      	b.n	80080e0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008080:	f7ff fd28 	bl	8007ad4 <HAL_GetTick>
 8008084:	4602      	mov	r2, r0
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	2b05      	cmp	r3, #5
 800808c:	d928      	bls.n	80080e0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2220      	movs	r2, #32
 8008092:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2203      	movs	r2, #3
 8008098:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	e246      	b.n	800852e <HAL_DMA_Init+0x646>
 80080a0:	40020010 	.word	0x40020010
 80080a4:	40020028 	.word	0x40020028
 80080a8:	40020040 	.word	0x40020040
 80080ac:	40020058 	.word	0x40020058
 80080b0:	40020070 	.word	0x40020070
 80080b4:	40020088 	.word	0x40020088
 80080b8:	400200a0 	.word	0x400200a0
 80080bc:	400200b8 	.word	0x400200b8
 80080c0:	40020410 	.word	0x40020410
 80080c4:	40020428 	.word	0x40020428
 80080c8:	40020440 	.word	0x40020440
 80080cc:	40020458 	.word	0x40020458
 80080d0:	40020470 	.word	0x40020470
 80080d4:	40020488 	.word	0x40020488
 80080d8:	400204a0 	.word	0x400204a0
 80080dc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 0301 	and.w	r3, r3, #1
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1c8      	bne.n	8008080 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	4b83      	ldr	r3, [pc, #524]	; (8008308 <HAL_DMA_Init+0x420>)
 80080fa:	4013      	ands	r3, r2
 80080fc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8008106:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008112:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800811e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a1b      	ldr	r3, [r3, #32]
 8008124:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	4313      	orrs	r3, r2
 800812a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008130:	2b04      	cmp	r3, #4
 8008132:	d107      	bne.n	8008144 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800813c:	4313      	orrs	r3, r2
 800813e:	697a      	ldr	r2, [r7, #20]
 8008140:	4313      	orrs	r3, r2
 8008142:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8008144:	4b71      	ldr	r3, [pc, #452]	; (800830c <HAL_DMA_Init+0x424>)
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	4b71      	ldr	r3, [pc, #452]	; (8008310 <HAL_DMA_Init+0x428>)
 800814a:	4013      	ands	r3, r2
 800814c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008150:	d328      	bcc.n	80081a4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	2b28      	cmp	r3, #40	; 0x28
 8008158:	d903      	bls.n	8008162 <HAL_DMA_Init+0x27a>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	2b2e      	cmp	r3, #46	; 0x2e
 8008160:	d917      	bls.n	8008192 <HAL_DMA_Init+0x2aa>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	2b3e      	cmp	r3, #62	; 0x3e
 8008168:	d903      	bls.n	8008172 <HAL_DMA_Init+0x28a>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	2b42      	cmp	r3, #66	; 0x42
 8008170:	d90f      	bls.n	8008192 <HAL_DMA_Init+0x2aa>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	2b46      	cmp	r3, #70	; 0x46
 8008178:	d903      	bls.n	8008182 <HAL_DMA_Init+0x29a>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	2b48      	cmp	r3, #72	; 0x48
 8008180:	d907      	bls.n	8008192 <HAL_DMA_Init+0x2aa>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	2b4e      	cmp	r3, #78	; 0x4e
 8008188:	d905      	bls.n	8008196 <HAL_DMA_Init+0x2ae>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	2b52      	cmp	r3, #82	; 0x52
 8008190:	d801      	bhi.n	8008196 <HAL_DMA_Init+0x2ae>
 8008192:	2301      	movs	r3, #1
 8008194:	e000      	b.n	8008198 <HAL_DMA_Init+0x2b0>
 8008196:	2300      	movs	r3, #0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d003      	beq.n	80081a4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081a2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	697a      	ldr	r2, [r7, #20]
 80081aa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	695b      	ldr	r3, [r3, #20]
 80081b2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	f023 0307 	bic.w	r3, r3, #7
 80081ba:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c0:	697a      	ldr	r2, [r7, #20]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ca:	2b04      	cmp	r3, #4
 80081cc:	d117      	bne.n	80081fe <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d2:	697a      	ldr	r2, [r7, #20]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00e      	beq.n	80081fe <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f002 faaf 	bl	800a744 <DMA_CheckFifoParam>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d008      	beq.n	80081fe <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2240      	movs	r2, #64	; 0x40
 80081f0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	e197      	b.n	800852e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f002 f9ea 	bl	800a5e0 <DMA_CalcBaseAndBitshift>
 800820c:	4603      	mov	r3, r0
 800820e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008214:	f003 031f 	and.w	r3, r3, #31
 8008218:	223f      	movs	r2, #63	; 0x3f
 800821a:	409a      	lsls	r2, r3
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	609a      	str	r2, [r3, #8]
 8008220:	e0cd      	b.n	80083be <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a3b      	ldr	r2, [pc, #236]	; (8008314 <HAL_DMA_Init+0x42c>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d022      	beq.n	8008272 <HAL_DMA_Init+0x38a>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a39      	ldr	r2, [pc, #228]	; (8008318 <HAL_DMA_Init+0x430>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d01d      	beq.n	8008272 <HAL_DMA_Init+0x38a>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a38      	ldr	r2, [pc, #224]	; (800831c <HAL_DMA_Init+0x434>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d018      	beq.n	8008272 <HAL_DMA_Init+0x38a>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a36      	ldr	r2, [pc, #216]	; (8008320 <HAL_DMA_Init+0x438>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d013      	beq.n	8008272 <HAL_DMA_Init+0x38a>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a35      	ldr	r2, [pc, #212]	; (8008324 <HAL_DMA_Init+0x43c>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d00e      	beq.n	8008272 <HAL_DMA_Init+0x38a>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a33      	ldr	r2, [pc, #204]	; (8008328 <HAL_DMA_Init+0x440>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d009      	beq.n	8008272 <HAL_DMA_Init+0x38a>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a32      	ldr	r2, [pc, #200]	; (800832c <HAL_DMA_Init+0x444>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d004      	beq.n	8008272 <HAL_DMA_Init+0x38a>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a30      	ldr	r2, [pc, #192]	; (8008330 <HAL_DMA_Init+0x448>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d101      	bne.n	8008276 <HAL_DMA_Init+0x38e>
 8008272:	2301      	movs	r3, #1
 8008274:	e000      	b.n	8008278 <HAL_DMA_Init+0x390>
 8008276:	2300      	movs	r3, #0
 8008278:	2b00      	cmp	r3, #0
 800827a:	f000 8097 	beq.w	80083ac <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a24      	ldr	r2, [pc, #144]	; (8008314 <HAL_DMA_Init+0x42c>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d021      	beq.n	80082cc <HAL_DMA_Init+0x3e4>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a22      	ldr	r2, [pc, #136]	; (8008318 <HAL_DMA_Init+0x430>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d01c      	beq.n	80082cc <HAL_DMA_Init+0x3e4>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a21      	ldr	r2, [pc, #132]	; (800831c <HAL_DMA_Init+0x434>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d017      	beq.n	80082cc <HAL_DMA_Init+0x3e4>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a1f      	ldr	r2, [pc, #124]	; (8008320 <HAL_DMA_Init+0x438>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d012      	beq.n	80082cc <HAL_DMA_Init+0x3e4>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a1e      	ldr	r2, [pc, #120]	; (8008324 <HAL_DMA_Init+0x43c>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d00d      	beq.n	80082cc <HAL_DMA_Init+0x3e4>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a1c      	ldr	r2, [pc, #112]	; (8008328 <HAL_DMA_Init+0x440>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d008      	beq.n	80082cc <HAL_DMA_Init+0x3e4>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a1b      	ldr	r2, [pc, #108]	; (800832c <HAL_DMA_Init+0x444>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d003      	beq.n	80082cc <HAL_DMA_Init+0x3e4>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a19      	ldr	r2, [pc, #100]	; (8008330 <HAL_DMA_Init+0x448>)
 80082ca:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2202      	movs	r2, #2
 80082d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80082e4:	697a      	ldr	r2, [r7, #20]
 80082e6:	4b13      	ldr	r3, [pc, #76]	; (8008334 <HAL_DMA_Init+0x44c>)
 80082e8:	4013      	ands	r3, r2
 80082ea:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	2b40      	cmp	r3, #64	; 0x40
 80082f2:	d021      	beq.n	8008338 <HAL_DMA_Init+0x450>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	2b80      	cmp	r3, #128	; 0x80
 80082fa:	d102      	bne.n	8008302 <HAL_DMA_Init+0x41a>
 80082fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008300:	e01b      	b.n	800833a <HAL_DMA_Init+0x452>
 8008302:	2300      	movs	r3, #0
 8008304:	e019      	b.n	800833a <HAL_DMA_Init+0x452>
 8008306:	bf00      	nop
 8008308:	fe10803f 	.word	0xfe10803f
 800830c:	5c001000 	.word	0x5c001000
 8008310:	ffff0000 	.word	0xffff0000
 8008314:	58025408 	.word	0x58025408
 8008318:	5802541c 	.word	0x5802541c
 800831c:	58025430 	.word	0x58025430
 8008320:	58025444 	.word	0x58025444
 8008324:	58025458 	.word	0x58025458
 8008328:	5802546c 	.word	0x5802546c
 800832c:	58025480 	.word	0x58025480
 8008330:	58025494 	.word	0x58025494
 8008334:	fffe000f 	.word	0xfffe000f
 8008338:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	68d2      	ldr	r2, [r2, #12]
 800833e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008340:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	691b      	ldr	r3, [r3, #16]
 8008346:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8008348:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	695b      	ldr	r3, [r3, #20]
 800834e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008350:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	699b      	ldr	r3, [r3, #24]
 8008356:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8008358:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	69db      	ldr	r3, [r3, #28]
 800835e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008360:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a1b      	ldr	r3, [r3, #32]
 8008366:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8008368:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800836a:	697a      	ldr	r2, [r7, #20]
 800836c:	4313      	orrs	r3, r2
 800836e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	697a      	ldr	r2, [r7, #20]
 8008376:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	461a      	mov	r2, r3
 800837e:	4b6e      	ldr	r3, [pc, #440]	; (8008538 <HAL_DMA_Init+0x650>)
 8008380:	4413      	add	r3, r2
 8008382:	4a6e      	ldr	r2, [pc, #440]	; (800853c <HAL_DMA_Init+0x654>)
 8008384:	fba2 2303 	umull	r2, r3, r2, r3
 8008388:	091b      	lsrs	r3, r3, #4
 800838a:	009a      	lsls	r2, r3, #2
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f002 f925 	bl	800a5e0 <DMA_CalcBaseAndBitshift>
 8008396:	4603      	mov	r3, r0
 8008398:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800839e:	f003 031f 	and.w	r3, r3, #31
 80083a2:	2201      	movs	r2, #1
 80083a4:	409a      	lsls	r2, r3
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	605a      	str	r2, [r3, #4]
 80083aa:	e008      	b.n	80083be <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2240      	movs	r2, #64	; 0x40
 80083b0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2203      	movs	r2, #3
 80083b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e0b7      	b.n	800852e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a5f      	ldr	r2, [pc, #380]	; (8008540 <HAL_DMA_Init+0x658>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d072      	beq.n	80084ae <HAL_DMA_Init+0x5c6>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a5d      	ldr	r2, [pc, #372]	; (8008544 <HAL_DMA_Init+0x65c>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d06d      	beq.n	80084ae <HAL_DMA_Init+0x5c6>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a5c      	ldr	r2, [pc, #368]	; (8008548 <HAL_DMA_Init+0x660>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d068      	beq.n	80084ae <HAL_DMA_Init+0x5c6>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a5a      	ldr	r2, [pc, #360]	; (800854c <HAL_DMA_Init+0x664>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d063      	beq.n	80084ae <HAL_DMA_Init+0x5c6>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a59      	ldr	r2, [pc, #356]	; (8008550 <HAL_DMA_Init+0x668>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d05e      	beq.n	80084ae <HAL_DMA_Init+0x5c6>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a57      	ldr	r2, [pc, #348]	; (8008554 <HAL_DMA_Init+0x66c>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d059      	beq.n	80084ae <HAL_DMA_Init+0x5c6>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a56      	ldr	r2, [pc, #344]	; (8008558 <HAL_DMA_Init+0x670>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d054      	beq.n	80084ae <HAL_DMA_Init+0x5c6>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a54      	ldr	r2, [pc, #336]	; (800855c <HAL_DMA_Init+0x674>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d04f      	beq.n	80084ae <HAL_DMA_Init+0x5c6>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a53      	ldr	r2, [pc, #332]	; (8008560 <HAL_DMA_Init+0x678>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d04a      	beq.n	80084ae <HAL_DMA_Init+0x5c6>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a51      	ldr	r2, [pc, #324]	; (8008564 <HAL_DMA_Init+0x67c>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d045      	beq.n	80084ae <HAL_DMA_Init+0x5c6>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a50      	ldr	r2, [pc, #320]	; (8008568 <HAL_DMA_Init+0x680>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d040      	beq.n	80084ae <HAL_DMA_Init+0x5c6>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a4e      	ldr	r2, [pc, #312]	; (800856c <HAL_DMA_Init+0x684>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d03b      	beq.n	80084ae <HAL_DMA_Init+0x5c6>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a4d      	ldr	r2, [pc, #308]	; (8008570 <HAL_DMA_Init+0x688>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d036      	beq.n	80084ae <HAL_DMA_Init+0x5c6>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a4b      	ldr	r2, [pc, #300]	; (8008574 <HAL_DMA_Init+0x68c>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d031      	beq.n	80084ae <HAL_DMA_Init+0x5c6>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a4a      	ldr	r2, [pc, #296]	; (8008578 <HAL_DMA_Init+0x690>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d02c      	beq.n	80084ae <HAL_DMA_Init+0x5c6>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a48      	ldr	r2, [pc, #288]	; (800857c <HAL_DMA_Init+0x694>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d027      	beq.n	80084ae <HAL_DMA_Init+0x5c6>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a47      	ldr	r2, [pc, #284]	; (8008580 <HAL_DMA_Init+0x698>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d022      	beq.n	80084ae <HAL_DMA_Init+0x5c6>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a45      	ldr	r2, [pc, #276]	; (8008584 <HAL_DMA_Init+0x69c>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d01d      	beq.n	80084ae <HAL_DMA_Init+0x5c6>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a44      	ldr	r2, [pc, #272]	; (8008588 <HAL_DMA_Init+0x6a0>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d018      	beq.n	80084ae <HAL_DMA_Init+0x5c6>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a42      	ldr	r2, [pc, #264]	; (800858c <HAL_DMA_Init+0x6a4>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d013      	beq.n	80084ae <HAL_DMA_Init+0x5c6>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a41      	ldr	r2, [pc, #260]	; (8008590 <HAL_DMA_Init+0x6a8>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d00e      	beq.n	80084ae <HAL_DMA_Init+0x5c6>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a3f      	ldr	r2, [pc, #252]	; (8008594 <HAL_DMA_Init+0x6ac>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d009      	beq.n	80084ae <HAL_DMA_Init+0x5c6>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a3e      	ldr	r2, [pc, #248]	; (8008598 <HAL_DMA_Init+0x6b0>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d004      	beq.n	80084ae <HAL_DMA_Init+0x5c6>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a3c      	ldr	r2, [pc, #240]	; (800859c <HAL_DMA_Init+0x6b4>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d101      	bne.n	80084b2 <HAL_DMA_Init+0x5ca>
 80084ae:	2301      	movs	r3, #1
 80084b0:	e000      	b.n	80084b4 <HAL_DMA_Init+0x5cc>
 80084b2:	2300      	movs	r3, #0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d032      	beq.n	800851e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f002 f9bf 	bl	800a83c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	2b80      	cmp	r3, #128	; 0x80
 80084c4:	d102      	bne.n	80084cc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	685a      	ldr	r2, [r3, #4]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084d4:	b2d2      	uxtb	r2, r2
 80084d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80084e0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d010      	beq.n	800850c <HAL_DMA_Init+0x624>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	2b08      	cmp	r3, #8
 80084f0:	d80c      	bhi.n	800850c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f002 fa3c 	bl	800a970 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084fc:	2200      	movs	r2, #0
 80084fe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008508:	605a      	str	r2, [r3, #4]
 800850a:	e008      	b.n	800851e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	3718      	adds	r7, #24
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	a7fdabf8 	.word	0xa7fdabf8
 800853c:	cccccccd 	.word	0xcccccccd
 8008540:	40020010 	.word	0x40020010
 8008544:	40020028 	.word	0x40020028
 8008548:	40020040 	.word	0x40020040
 800854c:	40020058 	.word	0x40020058
 8008550:	40020070 	.word	0x40020070
 8008554:	40020088 	.word	0x40020088
 8008558:	400200a0 	.word	0x400200a0
 800855c:	400200b8 	.word	0x400200b8
 8008560:	40020410 	.word	0x40020410
 8008564:	40020428 	.word	0x40020428
 8008568:	40020440 	.word	0x40020440
 800856c:	40020458 	.word	0x40020458
 8008570:	40020470 	.word	0x40020470
 8008574:	40020488 	.word	0x40020488
 8008578:	400204a0 	.word	0x400204a0
 800857c:	400204b8 	.word	0x400204b8
 8008580:	58025408 	.word	0x58025408
 8008584:	5802541c 	.word	0x5802541c
 8008588:	58025430 	.word	0x58025430
 800858c:	58025444 	.word	0x58025444
 8008590:	58025458 	.word	0x58025458
 8008594:	5802546c 	.word	0x5802546c
 8008598:	58025480 	.word	0x58025480
 800859c:	58025494 	.word	0x58025494

080085a0 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d101      	bne.n	80085b2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	e1a8      	b.n	8008904 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a82      	ldr	r2, [pc, #520]	; (80087c0 <HAL_DMA_DeInit+0x220>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d04a      	beq.n	8008652 <HAL_DMA_DeInit+0xb2>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a80      	ldr	r2, [pc, #512]	; (80087c4 <HAL_DMA_DeInit+0x224>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d045      	beq.n	8008652 <HAL_DMA_DeInit+0xb2>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a7f      	ldr	r2, [pc, #508]	; (80087c8 <HAL_DMA_DeInit+0x228>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d040      	beq.n	8008652 <HAL_DMA_DeInit+0xb2>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a7d      	ldr	r2, [pc, #500]	; (80087cc <HAL_DMA_DeInit+0x22c>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d03b      	beq.n	8008652 <HAL_DMA_DeInit+0xb2>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a7c      	ldr	r2, [pc, #496]	; (80087d0 <HAL_DMA_DeInit+0x230>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d036      	beq.n	8008652 <HAL_DMA_DeInit+0xb2>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a7a      	ldr	r2, [pc, #488]	; (80087d4 <HAL_DMA_DeInit+0x234>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d031      	beq.n	8008652 <HAL_DMA_DeInit+0xb2>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a79      	ldr	r2, [pc, #484]	; (80087d8 <HAL_DMA_DeInit+0x238>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d02c      	beq.n	8008652 <HAL_DMA_DeInit+0xb2>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a77      	ldr	r2, [pc, #476]	; (80087dc <HAL_DMA_DeInit+0x23c>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d027      	beq.n	8008652 <HAL_DMA_DeInit+0xb2>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a76      	ldr	r2, [pc, #472]	; (80087e0 <HAL_DMA_DeInit+0x240>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d022      	beq.n	8008652 <HAL_DMA_DeInit+0xb2>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a74      	ldr	r2, [pc, #464]	; (80087e4 <HAL_DMA_DeInit+0x244>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d01d      	beq.n	8008652 <HAL_DMA_DeInit+0xb2>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a73      	ldr	r2, [pc, #460]	; (80087e8 <HAL_DMA_DeInit+0x248>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d018      	beq.n	8008652 <HAL_DMA_DeInit+0xb2>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a71      	ldr	r2, [pc, #452]	; (80087ec <HAL_DMA_DeInit+0x24c>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d013      	beq.n	8008652 <HAL_DMA_DeInit+0xb2>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a70      	ldr	r2, [pc, #448]	; (80087f0 <HAL_DMA_DeInit+0x250>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d00e      	beq.n	8008652 <HAL_DMA_DeInit+0xb2>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a6e      	ldr	r2, [pc, #440]	; (80087f4 <HAL_DMA_DeInit+0x254>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d009      	beq.n	8008652 <HAL_DMA_DeInit+0xb2>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a6d      	ldr	r2, [pc, #436]	; (80087f8 <HAL_DMA_DeInit+0x258>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d004      	beq.n	8008652 <HAL_DMA_DeInit+0xb2>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a6b      	ldr	r2, [pc, #428]	; (80087fc <HAL_DMA_DeInit+0x25c>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d108      	bne.n	8008664 <HAL_DMA_DeInit+0xc4>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f022 0201 	bic.w	r2, r2, #1
 8008660:	601a      	str	r2, [r3, #0]
 8008662:	e007      	b.n	8008674 <HAL_DMA_DeInit+0xd4>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f022 0201 	bic.w	r2, r2, #1
 8008672:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a51      	ldr	r2, [pc, #324]	; (80087c0 <HAL_DMA_DeInit+0x220>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d04a      	beq.n	8008714 <HAL_DMA_DeInit+0x174>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a50      	ldr	r2, [pc, #320]	; (80087c4 <HAL_DMA_DeInit+0x224>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d045      	beq.n	8008714 <HAL_DMA_DeInit+0x174>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a4e      	ldr	r2, [pc, #312]	; (80087c8 <HAL_DMA_DeInit+0x228>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d040      	beq.n	8008714 <HAL_DMA_DeInit+0x174>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a4d      	ldr	r2, [pc, #308]	; (80087cc <HAL_DMA_DeInit+0x22c>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d03b      	beq.n	8008714 <HAL_DMA_DeInit+0x174>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a4b      	ldr	r2, [pc, #300]	; (80087d0 <HAL_DMA_DeInit+0x230>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d036      	beq.n	8008714 <HAL_DMA_DeInit+0x174>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a4a      	ldr	r2, [pc, #296]	; (80087d4 <HAL_DMA_DeInit+0x234>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d031      	beq.n	8008714 <HAL_DMA_DeInit+0x174>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a48      	ldr	r2, [pc, #288]	; (80087d8 <HAL_DMA_DeInit+0x238>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d02c      	beq.n	8008714 <HAL_DMA_DeInit+0x174>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a47      	ldr	r2, [pc, #284]	; (80087dc <HAL_DMA_DeInit+0x23c>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d027      	beq.n	8008714 <HAL_DMA_DeInit+0x174>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a45      	ldr	r2, [pc, #276]	; (80087e0 <HAL_DMA_DeInit+0x240>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d022      	beq.n	8008714 <HAL_DMA_DeInit+0x174>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a44      	ldr	r2, [pc, #272]	; (80087e4 <HAL_DMA_DeInit+0x244>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d01d      	beq.n	8008714 <HAL_DMA_DeInit+0x174>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a42      	ldr	r2, [pc, #264]	; (80087e8 <HAL_DMA_DeInit+0x248>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d018      	beq.n	8008714 <HAL_DMA_DeInit+0x174>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a41      	ldr	r2, [pc, #260]	; (80087ec <HAL_DMA_DeInit+0x24c>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d013      	beq.n	8008714 <HAL_DMA_DeInit+0x174>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a3f      	ldr	r2, [pc, #252]	; (80087f0 <HAL_DMA_DeInit+0x250>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d00e      	beq.n	8008714 <HAL_DMA_DeInit+0x174>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a3e      	ldr	r2, [pc, #248]	; (80087f4 <HAL_DMA_DeInit+0x254>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d009      	beq.n	8008714 <HAL_DMA_DeInit+0x174>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a3c      	ldr	r2, [pc, #240]	; (80087f8 <HAL_DMA_DeInit+0x258>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d004      	beq.n	8008714 <HAL_DMA_DeInit+0x174>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a3b      	ldr	r2, [pc, #236]	; (80087fc <HAL_DMA_DeInit+0x25c>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d101      	bne.n	8008718 <HAL_DMA_DeInit+0x178>
 8008714:	2301      	movs	r3, #1
 8008716:	e000      	b.n	800871a <HAL_DMA_DeInit+0x17a>
 8008718:	2300      	movs	r3, #0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d025      	beq.n	800876a <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2200      	movs	r2, #0
 8008724:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2200      	movs	r2, #0
 800872c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2200      	movs	r2, #0
 8008734:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2200      	movs	r2, #0
 800873c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2200      	movs	r2, #0
 8008744:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2221      	movs	r2, #33	; 0x21
 800874c:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f001 ff46 	bl	800a5e0 <DMA_CalcBaseAndBitshift>
 8008754:	4603      	mov	r3, r0
 8008756:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800875c:	f003 031f 	and.w	r3, r3, #31
 8008760:	223f      	movs	r2, #63	; 0x3f
 8008762:	409a      	lsls	r2, r3
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	609a      	str	r2, [r3, #8]
 8008768:	e081      	b.n	800886e <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a24      	ldr	r2, [pc, #144]	; (8008800 <HAL_DMA_DeInit+0x260>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d022      	beq.n	80087ba <HAL_DMA_DeInit+0x21a>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a22      	ldr	r2, [pc, #136]	; (8008804 <HAL_DMA_DeInit+0x264>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d01d      	beq.n	80087ba <HAL_DMA_DeInit+0x21a>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a21      	ldr	r2, [pc, #132]	; (8008808 <HAL_DMA_DeInit+0x268>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d018      	beq.n	80087ba <HAL_DMA_DeInit+0x21a>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a1f      	ldr	r2, [pc, #124]	; (800880c <HAL_DMA_DeInit+0x26c>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d013      	beq.n	80087ba <HAL_DMA_DeInit+0x21a>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a1e      	ldr	r2, [pc, #120]	; (8008810 <HAL_DMA_DeInit+0x270>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d00e      	beq.n	80087ba <HAL_DMA_DeInit+0x21a>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a1c      	ldr	r2, [pc, #112]	; (8008814 <HAL_DMA_DeInit+0x274>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d009      	beq.n	80087ba <HAL_DMA_DeInit+0x21a>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a1b      	ldr	r2, [pc, #108]	; (8008818 <HAL_DMA_DeInit+0x278>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d004      	beq.n	80087ba <HAL_DMA_DeInit+0x21a>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a19      	ldr	r2, [pc, #100]	; (800881c <HAL_DMA_DeInit+0x27c>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d132      	bne.n	8008820 <HAL_DMA_DeInit+0x280>
 80087ba:	2301      	movs	r3, #1
 80087bc:	e031      	b.n	8008822 <HAL_DMA_DeInit+0x282>
 80087be:	bf00      	nop
 80087c0:	40020010 	.word	0x40020010
 80087c4:	40020028 	.word	0x40020028
 80087c8:	40020040 	.word	0x40020040
 80087cc:	40020058 	.word	0x40020058
 80087d0:	40020070 	.word	0x40020070
 80087d4:	40020088 	.word	0x40020088
 80087d8:	400200a0 	.word	0x400200a0
 80087dc:	400200b8 	.word	0x400200b8
 80087e0:	40020410 	.word	0x40020410
 80087e4:	40020428 	.word	0x40020428
 80087e8:	40020440 	.word	0x40020440
 80087ec:	40020458 	.word	0x40020458
 80087f0:	40020470 	.word	0x40020470
 80087f4:	40020488 	.word	0x40020488
 80087f8:	400204a0 	.word	0x400204a0
 80087fc:	400204b8 	.word	0x400204b8
 8008800:	58025408 	.word	0x58025408
 8008804:	5802541c 	.word	0x5802541c
 8008808:	58025430 	.word	0x58025430
 800880c:	58025444 	.word	0x58025444
 8008810:	58025458 	.word	0x58025458
 8008814:	5802546c 	.word	0x5802546c
 8008818:	58025480 	.word	0x58025480
 800881c:	58025494 	.word	0x58025494
 8008820:	2300      	movs	r3, #0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d021      	beq.n	800886a <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2200      	movs	r2, #0
 800882c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2200      	movs	r2, #0
 8008834:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2200      	movs	r2, #0
 800883c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2200      	movs	r2, #0
 8008844:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2200      	movs	r2, #0
 800884c:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f001 fec6 	bl	800a5e0 <DMA_CalcBaseAndBitshift>
 8008854:	4603      	mov	r3, r0
 8008856:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800885c:	f003 031f 	and.w	r3, r3, #31
 8008860:	2201      	movs	r2, #1
 8008862:	409a      	lsls	r2, r3
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	605a      	str	r2, [r3, #4]
 8008868:	e001      	b.n	800886e <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e04a      	b.n	8008904 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f001 ffe4 	bl	800a83c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008878:	2b00      	cmp	r3, #0
 800887a:	d008      	beq.n	800888e <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008880:	2200      	movs	r2, #0
 8008882:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800888c:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00f      	beq.n	80088b6 <HAL_DMA_DeInit+0x316>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	2b08      	cmp	r3, #8
 800889c:	d80b      	bhi.n	80088b6 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f002 f866 	bl	800a970 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088a8:	2200      	movs	r2, #0
 80088aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80088b4:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	675a      	str	r2, [r3, #116]	; 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback     = NULL;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback      = NULL;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback      = NULL;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b086      	sub	sp, #24
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
 8008918:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800891a:	2300      	movs	r3, #0
 800891c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d101      	bne.n	8008928 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	e226      	b.n	8008d76 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800892e:	2b01      	cmp	r3, #1
 8008930:	d101      	bne.n	8008936 <HAL_DMA_Start_IT+0x2a>
 8008932:	2302      	movs	r3, #2
 8008934:	e21f      	b.n	8008d76 <HAL_DMA_Start_IT+0x46a>
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2201      	movs	r2, #1
 800893a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b01      	cmp	r3, #1
 8008948:	f040 820a 	bne.w	8008d60 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2202      	movs	r2, #2
 8008950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a68      	ldr	r2, [pc, #416]	; (8008b00 <HAL_DMA_Start_IT+0x1f4>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d04a      	beq.n	80089fa <HAL_DMA_Start_IT+0xee>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a66      	ldr	r2, [pc, #408]	; (8008b04 <HAL_DMA_Start_IT+0x1f8>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d045      	beq.n	80089fa <HAL_DMA_Start_IT+0xee>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a65      	ldr	r2, [pc, #404]	; (8008b08 <HAL_DMA_Start_IT+0x1fc>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d040      	beq.n	80089fa <HAL_DMA_Start_IT+0xee>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a63      	ldr	r2, [pc, #396]	; (8008b0c <HAL_DMA_Start_IT+0x200>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d03b      	beq.n	80089fa <HAL_DMA_Start_IT+0xee>
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a62      	ldr	r2, [pc, #392]	; (8008b10 <HAL_DMA_Start_IT+0x204>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d036      	beq.n	80089fa <HAL_DMA_Start_IT+0xee>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a60      	ldr	r2, [pc, #384]	; (8008b14 <HAL_DMA_Start_IT+0x208>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d031      	beq.n	80089fa <HAL_DMA_Start_IT+0xee>
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a5f      	ldr	r2, [pc, #380]	; (8008b18 <HAL_DMA_Start_IT+0x20c>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d02c      	beq.n	80089fa <HAL_DMA_Start_IT+0xee>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a5d      	ldr	r2, [pc, #372]	; (8008b1c <HAL_DMA_Start_IT+0x210>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d027      	beq.n	80089fa <HAL_DMA_Start_IT+0xee>
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a5c      	ldr	r2, [pc, #368]	; (8008b20 <HAL_DMA_Start_IT+0x214>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d022      	beq.n	80089fa <HAL_DMA_Start_IT+0xee>
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a5a      	ldr	r2, [pc, #360]	; (8008b24 <HAL_DMA_Start_IT+0x218>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d01d      	beq.n	80089fa <HAL_DMA_Start_IT+0xee>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a59      	ldr	r2, [pc, #356]	; (8008b28 <HAL_DMA_Start_IT+0x21c>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d018      	beq.n	80089fa <HAL_DMA_Start_IT+0xee>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a57      	ldr	r2, [pc, #348]	; (8008b2c <HAL_DMA_Start_IT+0x220>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d013      	beq.n	80089fa <HAL_DMA_Start_IT+0xee>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a56      	ldr	r2, [pc, #344]	; (8008b30 <HAL_DMA_Start_IT+0x224>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d00e      	beq.n	80089fa <HAL_DMA_Start_IT+0xee>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a54      	ldr	r2, [pc, #336]	; (8008b34 <HAL_DMA_Start_IT+0x228>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d009      	beq.n	80089fa <HAL_DMA_Start_IT+0xee>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a53      	ldr	r2, [pc, #332]	; (8008b38 <HAL_DMA_Start_IT+0x22c>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d004      	beq.n	80089fa <HAL_DMA_Start_IT+0xee>
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a51      	ldr	r2, [pc, #324]	; (8008b3c <HAL_DMA_Start_IT+0x230>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d108      	bne.n	8008a0c <HAL_DMA_Start_IT+0x100>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f022 0201 	bic.w	r2, r2, #1
 8008a08:	601a      	str	r2, [r3, #0]
 8008a0a:	e007      	b.n	8008a1c <HAL_DMA_Start_IT+0x110>
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f022 0201 	bic.w	r2, r2, #1
 8008a1a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	68b9      	ldr	r1, [r7, #8]
 8008a22:	68f8      	ldr	r0, [r7, #12]
 8008a24:	f001 fc30 	bl	800a288 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a34      	ldr	r2, [pc, #208]	; (8008b00 <HAL_DMA_Start_IT+0x1f4>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d04a      	beq.n	8008ac8 <HAL_DMA_Start_IT+0x1bc>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a33      	ldr	r2, [pc, #204]	; (8008b04 <HAL_DMA_Start_IT+0x1f8>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d045      	beq.n	8008ac8 <HAL_DMA_Start_IT+0x1bc>
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a31      	ldr	r2, [pc, #196]	; (8008b08 <HAL_DMA_Start_IT+0x1fc>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d040      	beq.n	8008ac8 <HAL_DMA_Start_IT+0x1bc>
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a30      	ldr	r2, [pc, #192]	; (8008b0c <HAL_DMA_Start_IT+0x200>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d03b      	beq.n	8008ac8 <HAL_DMA_Start_IT+0x1bc>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a2e      	ldr	r2, [pc, #184]	; (8008b10 <HAL_DMA_Start_IT+0x204>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d036      	beq.n	8008ac8 <HAL_DMA_Start_IT+0x1bc>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a2d      	ldr	r2, [pc, #180]	; (8008b14 <HAL_DMA_Start_IT+0x208>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d031      	beq.n	8008ac8 <HAL_DMA_Start_IT+0x1bc>
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a2b      	ldr	r2, [pc, #172]	; (8008b18 <HAL_DMA_Start_IT+0x20c>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d02c      	beq.n	8008ac8 <HAL_DMA_Start_IT+0x1bc>
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a2a      	ldr	r2, [pc, #168]	; (8008b1c <HAL_DMA_Start_IT+0x210>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d027      	beq.n	8008ac8 <HAL_DMA_Start_IT+0x1bc>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a28      	ldr	r2, [pc, #160]	; (8008b20 <HAL_DMA_Start_IT+0x214>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d022      	beq.n	8008ac8 <HAL_DMA_Start_IT+0x1bc>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a27      	ldr	r2, [pc, #156]	; (8008b24 <HAL_DMA_Start_IT+0x218>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d01d      	beq.n	8008ac8 <HAL_DMA_Start_IT+0x1bc>
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a25      	ldr	r2, [pc, #148]	; (8008b28 <HAL_DMA_Start_IT+0x21c>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d018      	beq.n	8008ac8 <HAL_DMA_Start_IT+0x1bc>
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a24      	ldr	r2, [pc, #144]	; (8008b2c <HAL_DMA_Start_IT+0x220>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d013      	beq.n	8008ac8 <HAL_DMA_Start_IT+0x1bc>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a22      	ldr	r2, [pc, #136]	; (8008b30 <HAL_DMA_Start_IT+0x224>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d00e      	beq.n	8008ac8 <HAL_DMA_Start_IT+0x1bc>
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a21      	ldr	r2, [pc, #132]	; (8008b34 <HAL_DMA_Start_IT+0x228>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d009      	beq.n	8008ac8 <HAL_DMA_Start_IT+0x1bc>
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a1f      	ldr	r2, [pc, #124]	; (8008b38 <HAL_DMA_Start_IT+0x22c>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d004      	beq.n	8008ac8 <HAL_DMA_Start_IT+0x1bc>
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a1e      	ldr	r2, [pc, #120]	; (8008b3c <HAL_DMA_Start_IT+0x230>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d101      	bne.n	8008acc <HAL_DMA_Start_IT+0x1c0>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e000      	b.n	8008ace <HAL_DMA_Start_IT+0x1c2>
 8008acc:	2300      	movs	r3, #0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d036      	beq.n	8008b40 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f023 021e 	bic.w	r2, r3, #30
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f042 0216 	orr.w	r2, r2, #22
 8008ae4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d03e      	beq.n	8008b6c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f042 0208 	orr.w	r2, r2, #8
 8008afc:	601a      	str	r2, [r3, #0]
 8008afe:	e035      	b.n	8008b6c <HAL_DMA_Start_IT+0x260>
 8008b00:	40020010 	.word	0x40020010
 8008b04:	40020028 	.word	0x40020028
 8008b08:	40020040 	.word	0x40020040
 8008b0c:	40020058 	.word	0x40020058
 8008b10:	40020070 	.word	0x40020070
 8008b14:	40020088 	.word	0x40020088
 8008b18:	400200a0 	.word	0x400200a0
 8008b1c:	400200b8 	.word	0x400200b8
 8008b20:	40020410 	.word	0x40020410
 8008b24:	40020428 	.word	0x40020428
 8008b28:	40020440 	.word	0x40020440
 8008b2c:	40020458 	.word	0x40020458
 8008b30:	40020470 	.word	0x40020470
 8008b34:	40020488 	.word	0x40020488
 8008b38:	400204a0 	.word	0x400204a0
 8008b3c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f023 020e 	bic.w	r2, r3, #14
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f042 020a 	orr.w	r2, r2, #10
 8008b52:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d007      	beq.n	8008b6c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f042 0204 	orr.w	r2, r2, #4
 8008b6a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a83      	ldr	r2, [pc, #524]	; (8008d80 <HAL_DMA_Start_IT+0x474>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d072      	beq.n	8008c5c <HAL_DMA_Start_IT+0x350>
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a82      	ldr	r2, [pc, #520]	; (8008d84 <HAL_DMA_Start_IT+0x478>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d06d      	beq.n	8008c5c <HAL_DMA_Start_IT+0x350>
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a80      	ldr	r2, [pc, #512]	; (8008d88 <HAL_DMA_Start_IT+0x47c>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d068      	beq.n	8008c5c <HAL_DMA_Start_IT+0x350>
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a7f      	ldr	r2, [pc, #508]	; (8008d8c <HAL_DMA_Start_IT+0x480>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d063      	beq.n	8008c5c <HAL_DMA_Start_IT+0x350>
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a7d      	ldr	r2, [pc, #500]	; (8008d90 <HAL_DMA_Start_IT+0x484>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d05e      	beq.n	8008c5c <HAL_DMA_Start_IT+0x350>
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a7c      	ldr	r2, [pc, #496]	; (8008d94 <HAL_DMA_Start_IT+0x488>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d059      	beq.n	8008c5c <HAL_DMA_Start_IT+0x350>
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a7a      	ldr	r2, [pc, #488]	; (8008d98 <HAL_DMA_Start_IT+0x48c>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d054      	beq.n	8008c5c <HAL_DMA_Start_IT+0x350>
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a79      	ldr	r2, [pc, #484]	; (8008d9c <HAL_DMA_Start_IT+0x490>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d04f      	beq.n	8008c5c <HAL_DMA_Start_IT+0x350>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a77      	ldr	r2, [pc, #476]	; (8008da0 <HAL_DMA_Start_IT+0x494>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d04a      	beq.n	8008c5c <HAL_DMA_Start_IT+0x350>
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a76      	ldr	r2, [pc, #472]	; (8008da4 <HAL_DMA_Start_IT+0x498>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d045      	beq.n	8008c5c <HAL_DMA_Start_IT+0x350>
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a74      	ldr	r2, [pc, #464]	; (8008da8 <HAL_DMA_Start_IT+0x49c>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d040      	beq.n	8008c5c <HAL_DMA_Start_IT+0x350>
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a73      	ldr	r2, [pc, #460]	; (8008dac <HAL_DMA_Start_IT+0x4a0>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d03b      	beq.n	8008c5c <HAL_DMA_Start_IT+0x350>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a71      	ldr	r2, [pc, #452]	; (8008db0 <HAL_DMA_Start_IT+0x4a4>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d036      	beq.n	8008c5c <HAL_DMA_Start_IT+0x350>
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a70      	ldr	r2, [pc, #448]	; (8008db4 <HAL_DMA_Start_IT+0x4a8>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d031      	beq.n	8008c5c <HAL_DMA_Start_IT+0x350>
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a6e      	ldr	r2, [pc, #440]	; (8008db8 <HAL_DMA_Start_IT+0x4ac>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d02c      	beq.n	8008c5c <HAL_DMA_Start_IT+0x350>
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a6d      	ldr	r2, [pc, #436]	; (8008dbc <HAL_DMA_Start_IT+0x4b0>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d027      	beq.n	8008c5c <HAL_DMA_Start_IT+0x350>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a6b      	ldr	r2, [pc, #428]	; (8008dc0 <HAL_DMA_Start_IT+0x4b4>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d022      	beq.n	8008c5c <HAL_DMA_Start_IT+0x350>
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a6a      	ldr	r2, [pc, #424]	; (8008dc4 <HAL_DMA_Start_IT+0x4b8>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d01d      	beq.n	8008c5c <HAL_DMA_Start_IT+0x350>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a68      	ldr	r2, [pc, #416]	; (8008dc8 <HAL_DMA_Start_IT+0x4bc>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d018      	beq.n	8008c5c <HAL_DMA_Start_IT+0x350>
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a67      	ldr	r2, [pc, #412]	; (8008dcc <HAL_DMA_Start_IT+0x4c0>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d013      	beq.n	8008c5c <HAL_DMA_Start_IT+0x350>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a65      	ldr	r2, [pc, #404]	; (8008dd0 <HAL_DMA_Start_IT+0x4c4>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d00e      	beq.n	8008c5c <HAL_DMA_Start_IT+0x350>
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a64      	ldr	r2, [pc, #400]	; (8008dd4 <HAL_DMA_Start_IT+0x4c8>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d009      	beq.n	8008c5c <HAL_DMA_Start_IT+0x350>
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a62      	ldr	r2, [pc, #392]	; (8008dd8 <HAL_DMA_Start_IT+0x4cc>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d004      	beq.n	8008c5c <HAL_DMA_Start_IT+0x350>
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a61      	ldr	r2, [pc, #388]	; (8008ddc <HAL_DMA_Start_IT+0x4d0>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d101      	bne.n	8008c60 <HAL_DMA_Start_IT+0x354>
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e000      	b.n	8008c62 <HAL_DMA_Start_IT+0x356>
 8008c60:	2300      	movs	r3, #0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d01a      	beq.n	8008c9c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d007      	beq.n	8008c84 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c82:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d007      	beq.n	8008c9c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c9a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a37      	ldr	r2, [pc, #220]	; (8008d80 <HAL_DMA_Start_IT+0x474>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d04a      	beq.n	8008d3c <HAL_DMA_Start_IT+0x430>
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a36      	ldr	r2, [pc, #216]	; (8008d84 <HAL_DMA_Start_IT+0x478>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d045      	beq.n	8008d3c <HAL_DMA_Start_IT+0x430>
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a34      	ldr	r2, [pc, #208]	; (8008d88 <HAL_DMA_Start_IT+0x47c>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d040      	beq.n	8008d3c <HAL_DMA_Start_IT+0x430>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a33      	ldr	r2, [pc, #204]	; (8008d8c <HAL_DMA_Start_IT+0x480>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d03b      	beq.n	8008d3c <HAL_DMA_Start_IT+0x430>
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a31      	ldr	r2, [pc, #196]	; (8008d90 <HAL_DMA_Start_IT+0x484>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d036      	beq.n	8008d3c <HAL_DMA_Start_IT+0x430>
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a30      	ldr	r2, [pc, #192]	; (8008d94 <HAL_DMA_Start_IT+0x488>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d031      	beq.n	8008d3c <HAL_DMA_Start_IT+0x430>
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a2e      	ldr	r2, [pc, #184]	; (8008d98 <HAL_DMA_Start_IT+0x48c>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d02c      	beq.n	8008d3c <HAL_DMA_Start_IT+0x430>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a2d      	ldr	r2, [pc, #180]	; (8008d9c <HAL_DMA_Start_IT+0x490>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d027      	beq.n	8008d3c <HAL_DMA_Start_IT+0x430>
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a2b      	ldr	r2, [pc, #172]	; (8008da0 <HAL_DMA_Start_IT+0x494>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d022      	beq.n	8008d3c <HAL_DMA_Start_IT+0x430>
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a2a      	ldr	r2, [pc, #168]	; (8008da4 <HAL_DMA_Start_IT+0x498>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d01d      	beq.n	8008d3c <HAL_DMA_Start_IT+0x430>
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a28      	ldr	r2, [pc, #160]	; (8008da8 <HAL_DMA_Start_IT+0x49c>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d018      	beq.n	8008d3c <HAL_DMA_Start_IT+0x430>
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a27      	ldr	r2, [pc, #156]	; (8008dac <HAL_DMA_Start_IT+0x4a0>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d013      	beq.n	8008d3c <HAL_DMA_Start_IT+0x430>
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a25      	ldr	r2, [pc, #148]	; (8008db0 <HAL_DMA_Start_IT+0x4a4>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d00e      	beq.n	8008d3c <HAL_DMA_Start_IT+0x430>
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a24      	ldr	r2, [pc, #144]	; (8008db4 <HAL_DMA_Start_IT+0x4a8>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d009      	beq.n	8008d3c <HAL_DMA_Start_IT+0x430>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a22      	ldr	r2, [pc, #136]	; (8008db8 <HAL_DMA_Start_IT+0x4ac>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d004      	beq.n	8008d3c <HAL_DMA_Start_IT+0x430>
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a21      	ldr	r2, [pc, #132]	; (8008dbc <HAL_DMA_Start_IT+0x4b0>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d108      	bne.n	8008d4e <HAL_DMA_Start_IT+0x442>
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f042 0201 	orr.w	r2, r2, #1
 8008d4a:	601a      	str	r2, [r3, #0]
 8008d4c:	e012      	b.n	8008d74 <HAL_DMA_Start_IT+0x468>
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f042 0201 	orr.w	r2, r2, #1
 8008d5c:	601a      	str	r2, [r3, #0]
 8008d5e:	e009      	b.n	8008d74 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d66:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3718      	adds	r7, #24
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	40020010 	.word	0x40020010
 8008d84:	40020028 	.word	0x40020028
 8008d88:	40020040 	.word	0x40020040
 8008d8c:	40020058 	.word	0x40020058
 8008d90:	40020070 	.word	0x40020070
 8008d94:	40020088 	.word	0x40020088
 8008d98:	400200a0 	.word	0x400200a0
 8008d9c:	400200b8 	.word	0x400200b8
 8008da0:	40020410 	.word	0x40020410
 8008da4:	40020428 	.word	0x40020428
 8008da8:	40020440 	.word	0x40020440
 8008dac:	40020458 	.word	0x40020458
 8008db0:	40020470 	.word	0x40020470
 8008db4:	40020488 	.word	0x40020488
 8008db8:	400204a0 	.word	0x400204a0
 8008dbc:	400204b8 	.word	0x400204b8
 8008dc0:	58025408 	.word	0x58025408
 8008dc4:	5802541c 	.word	0x5802541c
 8008dc8:	58025430 	.word	0x58025430
 8008dcc:	58025444 	.word	0x58025444
 8008dd0:	58025458 	.word	0x58025458
 8008dd4:	5802546c 	.word	0x5802546c
 8008dd8:	58025480 	.word	0x58025480
 8008ddc:	58025494 	.word	0x58025494

08008de0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b086      	sub	sp, #24
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8008de8:	f7fe fe74 	bl	8007ad4 <HAL_GetTick>
 8008dec:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d101      	bne.n	8008df8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	e2dc      	b.n	80093b2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d008      	beq.n	8008e16 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2280      	movs	r2, #128	; 0x80
 8008e08:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e2cd      	b.n	80093b2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a76      	ldr	r2, [pc, #472]	; (8008ff4 <HAL_DMA_Abort+0x214>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d04a      	beq.n	8008eb6 <HAL_DMA_Abort+0xd6>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a74      	ldr	r2, [pc, #464]	; (8008ff8 <HAL_DMA_Abort+0x218>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d045      	beq.n	8008eb6 <HAL_DMA_Abort+0xd6>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a73      	ldr	r2, [pc, #460]	; (8008ffc <HAL_DMA_Abort+0x21c>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d040      	beq.n	8008eb6 <HAL_DMA_Abort+0xd6>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a71      	ldr	r2, [pc, #452]	; (8009000 <HAL_DMA_Abort+0x220>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d03b      	beq.n	8008eb6 <HAL_DMA_Abort+0xd6>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a70      	ldr	r2, [pc, #448]	; (8009004 <HAL_DMA_Abort+0x224>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d036      	beq.n	8008eb6 <HAL_DMA_Abort+0xd6>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a6e      	ldr	r2, [pc, #440]	; (8009008 <HAL_DMA_Abort+0x228>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d031      	beq.n	8008eb6 <HAL_DMA_Abort+0xd6>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a6d      	ldr	r2, [pc, #436]	; (800900c <HAL_DMA_Abort+0x22c>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d02c      	beq.n	8008eb6 <HAL_DMA_Abort+0xd6>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a6b      	ldr	r2, [pc, #428]	; (8009010 <HAL_DMA_Abort+0x230>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d027      	beq.n	8008eb6 <HAL_DMA_Abort+0xd6>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a6a      	ldr	r2, [pc, #424]	; (8009014 <HAL_DMA_Abort+0x234>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d022      	beq.n	8008eb6 <HAL_DMA_Abort+0xd6>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a68      	ldr	r2, [pc, #416]	; (8009018 <HAL_DMA_Abort+0x238>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d01d      	beq.n	8008eb6 <HAL_DMA_Abort+0xd6>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a67      	ldr	r2, [pc, #412]	; (800901c <HAL_DMA_Abort+0x23c>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d018      	beq.n	8008eb6 <HAL_DMA_Abort+0xd6>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a65      	ldr	r2, [pc, #404]	; (8009020 <HAL_DMA_Abort+0x240>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d013      	beq.n	8008eb6 <HAL_DMA_Abort+0xd6>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a64      	ldr	r2, [pc, #400]	; (8009024 <HAL_DMA_Abort+0x244>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d00e      	beq.n	8008eb6 <HAL_DMA_Abort+0xd6>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a62      	ldr	r2, [pc, #392]	; (8009028 <HAL_DMA_Abort+0x248>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d009      	beq.n	8008eb6 <HAL_DMA_Abort+0xd6>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a61      	ldr	r2, [pc, #388]	; (800902c <HAL_DMA_Abort+0x24c>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d004      	beq.n	8008eb6 <HAL_DMA_Abort+0xd6>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a5f      	ldr	r2, [pc, #380]	; (8009030 <HAL_DMA_Abort+0x250>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d101      	bne.n	8008eba <HAL_DMA_Abort+0xda>
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e000      	b.n	8008ebc <HAL_DMA_Abort+0xdc>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d013      	beq.n	8008ee8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f022 021e 	bic.w	r2, r2, #30
 8008ece:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	695a      	ldr	r2, [r3, #20]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ede:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	617b      	str	r3, [r7, #20]
 8008ee6:	e00a      	b.n	8008efe <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f022 020e 	bic.w	r2, r2, #14
 8008ef6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a3c      	ldr	r2, [pc, #240]	; (8008ff4 <HAL_DMA_Abort+0x214>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d072      	beq.n	8008fee <HAL_DMA_Abort+0x20e>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a3a      	ldr	r2, [pc, #232]	; (8008ff8 <HAL_DMA_Abort+0x218>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d06d      	beq.n	8008fee <HAL_DMA_Abort+0x20e>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a39      	ldr	r2, [pc, #228]	; (8008ffc <HAL_DMA_Abort+0x21c>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d068      	beq.n	8008fee <HAL_DMA_Abort+0x20e>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a37      	ldr	r2, [pc, #220]	; (8009000 <HAL_DMA_Abort+0x220>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d063      	beq.n	8008fee <HAL_DMA_Abort+0x20e>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a36      	ldr	r2, [pc, #216]	; (8009004 <HAL_DMA_Abort+0x224>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d05e      	beq.n	8008fee <HAL_DMA_Abort+0x20e>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a34      	ldr	r2, [pc, #208]	; (8009008 <HAL_DMA_Abort+0x228>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d059      	beq.n	8008fee <HAL_DMA_Abort+0x20e>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a33      	ldr	r2, [pc, #204]	; (800900c <HAL_DMA_Abort+0x22c>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d054      	beq.n	8008fee <HAL_DMA_Abort+0x20e>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a31      	ldr	r2, [pc, #196]	; (8009010 <HAL_DMA_Abort+0x230>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d04f      	beq.n	8008fee <HAL_DMA_Abort+0x20e>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a30      	ldr	r2, [pc, #192]	; (8009014 <HAL_DMA_Abort+0x234>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d04a      	beq.n	8008fee <HAL_DMA_Abort+0x20e>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a2e      	ldr	r2, [pc, #184]	; (8009018 <HAL_DMA_Abort+0x238>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d045      	beq.n	8008fee <HAL_DMA_Abort+0x20e>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a2d      	ldr	r2, [pc, #180]	; (800901c <HAL_DMA_Abort+0x23c>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d040      	beq.n	8008fee <HAL_DMA_Abort+0x20e>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a2b      	ldr	r2, [pc, #172]	; (8009020 <HAL_DMA_Abort+0x240>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d03b      	beq.n	8008fee <HAL_DMA_Abort+0x20e>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a2a      	ldr	r2, [pc, #168]	; (8009024 <HAL_DMA_Abort+0x244>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d036      	beq.n	8008fee <HAL_DMA_Abort+0x20e>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a28      	ldr	r2, [pc, #160]	; (8009028 <HAL_DMA_Abort+0x248>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d031      	beq.n	8008fee <HAL_DMA_Abort+0x20e>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a27      	ldr	r2, [pc, #156]	; (800902c <HAL_DMA_Abort+0x24c>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d02c      	beq.n	8008fee <HAL_DMA_Abort+0x20e>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a25      	ldr	r2, [pc, #148]	; (8009030 <HAL_DMA_Abort+0x250>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d027      	beq.n	8008fee <HAL_DMA_Abort+0x20e>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a24      	ldr	r2, [pc, #144]	; (8009034 <HAL_DMA_Abort+0x254>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d022      	beq.n	8008fee <HAL_DMA_Abort+0x20e>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a22      	ldr	r2, [pc, #136]	; (8009038 <HAL_DMA_Abort+0x258>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d01d      	beq.n	8008fee <HAL_DMA_Abort+0x20e>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a21      	ldr	r2, [pc, #132]	; (800903c <HAL_DMA_Abort+0x25c>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d018      	beq.n	8008fee <HAL_DMA_Abort+0x20e>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a1f      	ldr	r2, [pc, #124]	; (8009040 <HAL_DMA_Abort+0x260>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d013      	beq.n	8008fee <HAL_DMA_Abort+0x20e>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a1e      	ldr	r2, [pc, #120]	; (8009044 <HAL_DMA_Abort+0x264>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d00e      	beq.n	8008fee <HAL_DMA_Abort+0x20e>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a1c      	ldr	r2, [pc, #112]	; (8009048 <HAL_DMA_Abort+0x268>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d009      	beq.n	8008fee <HAL_DMA_Abort+0x20e>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a1b      	ldr	r2, [pc, #108]	; (800904c <HAL_DMA_Abort+0x26c>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d004      	beq.n	8008fee <HAL_DMA_Abort+0x20e>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a19      	ldr	r2, [pc, #100]	; (8009050 <HAL_DMA_Abort+0x270>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d132      	bne.n	8009054 <HAL_DMA_Abort+0x274>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e031      	b.n	8009056 <HAL_DMA_Abort+0x276>
 8008ff2:	bf00      	nop
 8008ff4:	40020010 	.word	0x40020010
 8008ff8:	40020028 	.word	0x40020028
 8008ffc:	40020040 	.word	0x40020040
 8009000:	40020058 	.word	0x40020058
 8009004:	40020070 	.word	0x40020070
 8009008:	40020088 	.word	0x40020088
 800900c:	400200a0 	.word	0x400200a0
 8009010:	400200b8 	.word	0x400200b8
 8009014:	40020410 	.word	0x40020410
 8009018:	40020428 	.word	0x40020428
 800901c:	40020440 	.word	0x40020440
 8009020:	40020458 	.word	0x40020458
 8009024:	40020470 	.word	0x40020470
 8009028:	40020488 	.word	0x40020488
 800902c:	400204a0 	.word	0x400204a0
 8009030:	400204b8 	.word	0x400204b8
 8009034:	58025408 	.word	0x58025408
 8009038:	5802541c 	.word	0x5802541c
 800903c:	58025430 	.word	0x58025430
 8009040:	58025444 	.word	0x58025444
 8009044:	58025458 	.word	0x58025458
 8009048:	5802546c 	.word	0x5802546c
 800904c:	58025480 	.word	0x58025480
 8009050:	58025494 	.word	0x58025494
 8009054:	2300      	movs	r3, #0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d007      	beq.n	800906a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009064:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009068:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a6d      	ldr	r2, [pc, #436]	; (8009224 <HAL_DMA_Abort+0x444>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d04a      	beq.n	800910a <HAL_DMA_Abort+0x32a>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a6b      	ldr	r2, [pc, #428]	; (8009228 <HAL_DMA_Abort+0x448>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d045      	beq.n	800910a <HAL_DMA_Abort+0x32a>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a6a      	ldr	r2, [pc, #424]	; (800922c <HAL_DMA_Abort+0x44c>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d040      	beq.n	800910a <HAL_DMA_Abort+0x32a>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a68      	ldr	r2, [pc, #416]	; (8009230 <HAL_DMA_Abort+0x450>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d03b      	beq.n	800910a <HAL_DMA_Abort+0x32a>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a67      	ldr	r2, [pc, #412]	; (8009234 <HAL_DMA_Abort+0x454>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d036      	beq.n	800910a <HAL_DMA_Abort+0x32a>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a65      	ldr	r2, [pc, #404]	; (8009238 <HAL_DMA_Abort+0x458>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d031      	beq.n	800910a <HAL_DMA_Abort+0x32a>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a64      	ldr	r2, [pc, #400]	; (800923c <HAL_DMA_Abort+0x45c>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d02c      	beq.n	800910a <HAL_DMA_Abort+0x32a>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a62      	ldr	r2, [pc, #392]	; (8009240 <HAL_DMA_Abort+0x460>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d027      	beq.n	800910a <HAL_DMA_Abort+0x32a>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a61      	ldr	r2, [pc, #388]	; (8009244 <HAL_DMA_Abort+0x464>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d022      	beq.n	800910a <HAL_DMA_Abort+0x32a>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a5f      	ldr	r2, [pc, #380]	; (8009248 <HAL_DMA_Abort+0x468>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d01d      	beq.n	800910a <HAL_DMA_Abort+0x32a>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a5e      	ldr	r2, [pc, #376]	; (800924c <HAL_DMA_Abort+0x46c>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d018      	beq.n	800910a <HAL_DMA_Abort+0x32a>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a5c      	ldr	r2, [pc, #368]	; (8009250 <HAL_DMA_Abort+0x470>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d013      	beq.n	800910a <HAL_DMA_Abort+0x32a>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a5b      	ldr	r2, [pc, #364]	; (8009254 <HAL_DMA_Abort+0x474>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d00e      	beq.n	800910a <HAL_DMA_Abort+0x32a>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a59      	ldr	r2, [pc, #356]	; (8009258 <HAL_DMA_Abort+0x478>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d009      	beq.n	800910a <HAL_DMA_Abort+0x32a>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a58      	ldr	r2, [pc, #352]	; (800925c <HAL_DMA_Abort+0x47c>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d004      	beq.n	800910a <HAL_DMA_Abort+0x32a>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a56      	ldr	r2, [pc, #344]	; (8009260 <HAL_DMA_Abort+0x480>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d108      	bne.n	800911c <HAL_DMA_Abort+0x33c>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f022 0201 	bic.w	r2, r2, #1
 8009118:	601a      	str	r2, [r3, #0]
 800911a:	e007      	b.n	800912c <HAL_DMA_Abort+0x34c>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f022 0201 	bic.w	r2, r2, #1
 800912a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800912c:	e013      	b.n	8009156 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800912e:	f7fe fcd1 	bl	8007ad4 <HAL_GetTick>
 8009132:	4602      	mov	r2, r0
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	1ad3      	subs	r3, r2, r3
 8009138:	2b05      	cmp	r3, #5
 800913a:	d90c      	bls.n	8009156 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2220      	movs	r2, #32
 8009140:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2203      	movs	r2, #3
 8009146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	e12d      	b.n	80093b2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f003 0301 	and.w	r3, r3, #1
 800915e:	2b00      	cmp	r3, #0
 8009160:	d1e5      	bne.n	800912e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a2f      	ldr	r2, [pc, #188]	; (8009224 <HAL_DMA_Abort+0x444>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d04a      	beq.n	8009202 <HAL_DMA_Abort+0x422>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a2d      	ldr	r2, [pc, #180]	; (8009228 <HAL_DMA_Abort+0x448>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d045      	beq.n	8009202 <HAL_DMA_Abort+0x422>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a2c      	ldr	r2, [pc, #176]	; (800922c <HAL_DMA_Abort+0x44c>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d040      	beq.n	8009202 <HAL_DMA_Abort+0x422>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a2a      	ldr	r2, [pc, #168]	; (8009230 <HAL_DMA_Abort+0x450>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d03b      	beq.n	8009202 <HAL_DMA_Abort+0x422>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a29      	ldr	r2, [pc, #164]	; (8009234 <HAL_DMA_Abort+0x454>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d036      	beq.n	8009202 <HAL_DMA_Abort+0x422>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a27      	ldr	r2, [pc, #156]	; (8009238 <HAL_DMA_Abort+0x458>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d031      	beq.n	8009202 <HAL_DMA_Abort+0x422>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a26      	ldr	r2, [pc, #152]	; (800923c <HAL_DMA_Abort+0x45c>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d02c      	beq.n	8009202 <HAL_DMA_Abort+0x422>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a24      	ldr	r2, [pc, #144]	; (8009240 <HAL_DMA_Abort+0x460>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d027      	beq.n	8009202 <HAL_DMA_Abort+0x422>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a23      	ldr	r2, [pc, #140]	; (8009244 <HAL_DMA_Abort+0x464>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d022      	beq.n	8009202 <HAL_DMA_Abort+0x422>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a21      	ldr	r2, [pc, #132]	; (8009248 <HAL_DMA_Abort+0x468>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d01d      	beq.n	8009202 <HAL_DMA_Abort+0x422>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a20      	ldr	r2, [pc, #128]	; (800924c <HAL_DMA_Abort+0x46c>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d018      	beq.n	8009202 <HAL_DMA_Abort+0x422>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a1e      	ldr	r2, [pc, #120]	; (8009250 <HAL_DMA_Abort+0x470>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d013      	beq.n	8009202 <HAL_DMA_Abort+0x422>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a1d      	ldr	r2, [pc, #116]	; (8009254 <HAL_DMA_Abort+0x474>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d00e      	beq.n	8009202 <HAL_DMA_Abort+0x422>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a1b      	ldr	r2, [pc, #108]	; (8009258 <HAL_DMA_Abort+0x478>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d009      	beq.n	8009202 <HAL_DMA_Abort+0x422>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a1a      	ldr	r2, [pc, #104]	; (800925c <HAL_DMA_Abort+0x47c>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d004      	beq.n	8009202 <HAL_DMA_Abort+0x422>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a18      	ldr	r2, [pc, #96]	; (8009260 <HAL_DMA_Abort+0x480>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d101      	bne.n	8009206 <HAL_DMA_Abort+0x426>
 8009202:	2301      	movs	r3, #1
 8009204:	e000      	b.n	8009208 <HAL_DMA_Abort+0x428>
 8009206:	2300      	movs	r3, #0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d02b      	beq.n	8009264 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009210:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009216:	f003 031f 	and.w	r3, r3, #31
 800921a:	223f      	movs	r2, #63	; 0x3f
 800921c:	409a      	lsls	r2, r3
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	609a      	str	r2, [r3, #8]
 8009222:	e02a      	b.n	800927a <HAL_DMA_Abort+0x49a>
 8009224:	40020010 	.word	0x40020010
 8009228:	40020028 	.word	0x40020028
 800922c:	40020040 	.word	0x40020040
 8009230:	40020058 	.word	0x40020058
 8009234:	40020070 	.word	0x40020070
 8009238:	40020088 	.word	0x40020088
 800923c:	400200a0 	.word	0x400200a0
 8009240:	400200b8 	.word	0x400200b8
 8009244:	40020410 	.word	0x40020410
 8009248:	40020428 	.word	0x40020428
 800924c:	40020440 	.word	0x40020440
 8009250:	40020458 	.word	0x40020458
 8009254:	40020470 	.word	0x40020470
 8009258:	40020488 	.word	0x40020488
 800925c:	400204a0 	.word	0x400204a0
 8009260:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009268:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800926e:	f003 031f 	and.w	r3, r3, #31
 8009272:	2201      	movs	r2, #1
 8009274:	409a      	lsls	r2, r3
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a4f      	ldr	r2, [pc, #316]	; (80093bc <HAL_DMA_Abort+0x5dc>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d072      	beq.n	800936a <HAL_DMA_Abort+0x58a>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a4d      	ldr	r2, [pc, #308]	; (80093c0 <HAL_DMA_Abort+0x5e0>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d06d      	beq.n	800936a <HAL_DMA_Abort+0x58a>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a4c      	ldr	r2, [pc, #304]	; (80093c4 <HAL_DMA_Abort+0x5e4>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d068      	beq.n	800936a <HAL_DMA_Abort+0x58a>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a4a      	ldr	r2, [pc, #296]	; (80093c8 <HAL_DMA_Abort+0x5e8>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d063      	beq.n	800936a <HAL_DMA_Abort+0x58a>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a49      	ldr	r2, [pc, #292]	; (80093cc <HAL_DMA_Abort+0x5ec>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d05e      	beq.n	800936a <HAL_DMA_Abort+0x58a>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a47      	ldr	r2, [pc, #284]	; (80093d0 <HAL_DMA_Abort+0x5f0>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d059      	beq.n	800936a <HAL_DMA_Abort+0x58a>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a46      	ldr	r2, [pc, #280]	; (80093d4 <HAL_DMA_Abort+0x5f4>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d054      	beq.n	800936a <HAL_DMA_Abort+0x58a>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a44      	ldr	r2, [pc, #272]	; (80093d8 <HAL_DMA_Abort+0x5f8>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d04f      	beq.n	800936a <HAL_DMA_Abort+0x58a>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a43      	ldr	r2, [pc, #268]	; (80093dc <HAL_DMA_Abort+0x5fc>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d04a      	beq.n	800936a <HAL_DMA_Abort+0x58a>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a41      	ldr	r2, [pc, #260]	; (80093e0 <HAL_DMA_Abort+0x600>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d045      	beq.n	800936a <HAL_DMA_Abort+0x58a>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a40      	ldr	r2, [pc, #256]	; (80093e4 <HAL_DMA_Abort+0x604>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d040      	beq.n	800936a <HAL_DMA_Abort+0x58a>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a3e      	ldr	r2, [pc, #248]	; (80093e8 <HAL_DMA_Abort+0x608>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d03b      	beq.n	800936a <HAL_DMA_Abort+0x58a>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a3d      	ldr	r2, [pc, #244]	; (80093ec <HAL_DMA_Abort+0x60c>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d036      	beq.n	800936a <HAL_DMA_Abort+0x58a>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a3b      	ldr	r2, [pc, #236]	; (80093f0 <HAL_DMA_Abort+0x610>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d031      	beq.n	800936a <HAL_DMA_Abort+0x58a>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a3a      	ldr	r2, [pc, #232]	; (80093f4 <HAL_DMA_Abort+0x614>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d02c      	beq.n	800936a <HAL_DMA_Abort+0x58a>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a38      	ldr	r2, [pc, #224]	; (80093f8 <HAL_DMA_Abort+0x618>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d027      	beq.n	800936a <HAL_DMA_Abort+0x58a>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a37      	ldr	r2, [pc, #220]	; (80093fc <HAL_DMA_Abort+0x61c>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d022      	beq.n	800936a <HAL_DMA_Abort+0x58a>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a35      	ldr	r2, [pc, #212]	; (8009400 <HAL_DMA_Abort+0x620>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d01d      	beq.n	800936a <HAL_DMA_Abort+0x58a>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a34      	ldr	r2, [pc, #208]	; (8009404 <HAL_DMA_Abort+0x624>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d018      	beq.n	800936a <HAL_DMA_Abort+0x58a>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a32      	ldr	r2, [pc, #200]	; (8009408 <HAL_DMA_Abort+0x628>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d013      	beq.n	800936a <HAL_DMA_Abort+0x58a>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a31      	ldr	r2, [pc, #196]	; (800940c <HAL_DMA_Abort+0x62c>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d00e      	beq.n	800936a <HAL_DMA_Abort+0x58a>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a2f      	ldr	r2, [pc, #188]	; (8009410 <HAL_DMA_Abort+0x630>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d009      	beq.n	800936a <HAL_DMA_Abort+0x58a>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a2e      	ldr	r2, [pc, #184]	; (8009414 <HAL_DMA_Abort+0x634>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d004      	beq.n	800936a <HAL_DMA_Abort+0x58a>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a2c      	ldr	r2, [pc, #176]	; (8009418 <HAL_DMA_Abort+0x638>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d101      	bne.n	800936e <HAL_DMA_Abort+0x58e>
 800936a:	2301      	movs	r3, #1
 800936c:	e000      	b.n	8009370 <HAL_DMA_Abort+0x590>
 800936e:	2300      	movs	r3, #0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d015      	beq.n	80093a0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800937c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00c      	beq.n	80093a0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009390:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009394:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800939e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3718      	adds	r7, #24
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	40020010 	.word	0x40020010
 80093c0:	40020028 	.word	0x40020028
 80093c4:	40020040 	.word	0x40020040
 80093c8:	40020058 	.word	0x40020058
 80093cc:	40020070 	.word	0x40020070
 80093d0:	40020088 	.word	0x40020088
 80093d4:	400200a0 	.word	0x400200a0
 80093d8:	400200b8 	.word	0x400200b8
 80093dc:	40020410 	.word	0x40020410
 80093e0:	40020428 	.word	0x40020428
 80093e4:	40020440 	.word	0x40020440
 80093e8:	40020458 	.word	0x40020458
 80093ec:	40020470 	.word	0x40020470
 80093f0:	40020488 	.word	0x40020488
 80093f4:	400204a0 	.word	0x400204a0
 80093f8:	400204b8 	.word	0x400204b8
 80093fc:	58025408 	.word	0x58025408
 8009400:	5802541c 	.word	0x5802541c
 8009404:	58025430 	.word	0x58025430
 8009408:	58025444 	.word	0x58025444
 800940c:	58025458 	.word	0x58025458
 8009410:	5802546c 	.word	0x5802546c
 8009414:	58025480 	.word	0x58025480
 8009418:	58025494 	.word	0x58025494

0800941c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b08a      	sub	sp, #40	; 0x28
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8009424:	2300      	movs	r3, #0
 8009426:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009428:	4b67      	ldr	r3, [pc, #412]	; (80095c8 <HAL_DMA_IRQHandler+0x1ac>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a67      	ldr	r2, [pc, #412]	; (80095cc <HAL_DMA_IRQHandler+0x1b0>)
 800942e:	fba2 2303 	umull	r2, r3, r2, r3
 8009432:	0a9b      	lsrs	r3, r3, #10
 8009434:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800943a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009440:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8009442:	6a3b      	ldr	r3, [r7, #32]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a5f      	ldr	r2, [pc, #380]	; (80095d0 <HAL_DMA_IRQHandler+0x1b4>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d04a      	beq.n	80094ee <HAL_DMA_IRQHandler+0xd2>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a5d      	ldr	r2, [pc, #372]	; (80095d4 <HAL_DMA_IRQHandler+0x1b8>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d045      	beq.n	80094ee <HAL_DMA_IRQHandler+0xd2>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a5c      	ldr	r2, [pc, #368]	; (80095d8 <HAL_DMA_IRQHandler+0x1bc>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d040      	beq.n	80094ee <HAL_DMA_IRQHandler+0xd2>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a5a      	ldr	r2, [pc, #360]	; (80095dc <HAL_DMA_IRQHandler+0x1c0>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d03b      	beq.n	80094ee <HAL_DMA_IRQHandler+0xd2>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a59      	ldr	r2, [pc, #356]	; (80095e0 <HAL_DMA_IRQHandler+0x1c4>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d036      	beq.n	80094ee <HAL_DMA_IRQHandler+0xd2>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a57      	ldr	r2, [pc, #348]	; (80095e4 <HAL_DMA_IRQHandler+0x1c8>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d031      	beq.n	80094ee <HAL_DMA_IRQHandler+0xd2>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a56      	ldr	r2, [pc, #344]	; (80095e8 <HAL_DMA_IRQHandler+0x1cc>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d02c      	beq.n	80094ee <HAL_DMA_IRQHandler+0xd2>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a54      	ldr	r2, [pc, #336]	; (80095ec <HAL_DMA_IRQHandler+0x1d0>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d027      	beq.n	80094ee <HAL_DMA_IRQHandler+0xd2>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a53      	ldr	r2, [pc, #332]	; (80095f0 <HAL_DMA_IRQHandler+0x1d4>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d022      	beq.n	80094ee <HAL_DMA_IRQHandler+0xd2>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a51      	ldr	r2, [pc, #324]	; (80095f4 <HAL_DMA_IRQHandler+0x1d8>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d01d      	beq.n	80094ee <HAL_DMA_IRQHandler+0xd2>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a50      	ldr	r2, [pc, #320]	; (80095f8 <HAL_DMA_IRQHandler+0x1dc>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d018      	beq.n	80094ee <HAL_DMA_IRQHandler+0xd2>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a4e      	ldr	r2, [pc, #312]	; (80095fc <HAL_DMA_IRQHandler+0x1e0>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d013      	beq.n	80094ee <HAL_DMA_IRQHandler+0xd2>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a4d      	ldr	r2, [pc, #308]	; (8009600 <HAL_DMA_IRQHandler+0x1e4>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d00e      	beq.n	80094ee <HAL_DMA_IRQHandler+0xd2>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a4b      	ldr	r2, [pc, #300]	; (8009604 <HAL_DMA_IRQHandler+0x1e8>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d009      	beq.n	80094ee <HAL_DMA_IRQHandler+0xd2>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a4a      	ldr	r2, [pc, #296]	; (8009608 <HAL_DMA_IRQHandler+0x1ec>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d004      	beq.n	80094ee <HAL_DMA_IRQHandler+0xd2>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a48      	ldr	r2, [pc, #288]	; (800960c <HAL_DMA_IRQHandler+0x1f0>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d101      	bne.n	80094f2 <HAL_DMA_IRQHandler+0xd6>
 80094ee:	2301      	movs	r3, #1
 80094f0:	e000      	b.n	80094f4 <HAL_DMA_IRQHandler+0xd8>
 80094f2:	2300      	movs	r3, #0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	f000 842b 	beq.w	8009d50 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094fe:	f003 031f 	and.w	r3, r3, #31
 8009502:	2208      	movs	r2, #8
 8009504:	409a      	lsls	r2, r3
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	4013      	ands	r3, r2
 800950a:	2b00      	cmp	r3, #0
 800950c:	f000 80a2 	beq.w	8009654 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a2e      	ldr	r2, [pc, #184]	; (80095d0 <HAL_DMA_IRQHandler+0x1b4>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d04a      	beq.n	80095b0 <HAL_DMA_IRQHandler+0x194>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a2d      	ldr	r2, [pc, #180]	; (80095d4 <HAL_DMA_IRQHandler+0x1b8>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d045      	beq.n	80095b0 <HAL_DMA_IRQHandler+0x194>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a2b      	ldr	r2, [pc, #172]	; (80095d8 <HAL_DMA_IRQHandler+0x1bc>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d040      	beq.n	80095b0 <HAL_DMA_IRQHandler+0x194>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a2a      	ldr	r2, [pc, #168]	; (80095dc <HAL_DMA_IRQHandler+0x1c0>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d03b      	beq.n	80095b0 <HAL_DMA_IRQHandler+0x194>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a28      	ldr	r2, [pc, #160]	; (80095e0 <HAL_DMA_IRQHandler+0x1c4>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d036      	beq.n	80095b0 <HAL_DMA_IRQHandler+0x194>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a27      	ldr	r2, [pc, #156]	; (80095e4 <HAL_DMA_IRQHandler+0x1c8>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d031      	beq.n	80095b0 <HAL_DMA_IRQHandler+0x194>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a25      	ldr	r2, [pc, #148]	; (80095e8 <HAL_DMA_IRQHandler+0x1cc>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d02c      	beq.n	80095b0 <HAL_DMA_IRQHandler+0x194>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4a24      	ldr	r2, [pc, #144]	; (80095ec <HAL_DMA_IRQHandler+0x1d0>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d027      	beq.n	80095b0 <HAL_DMA_IRQHandler+0x194>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a22      	ldr	r2, [pc, #136]	; (80095f0 <HAL_DMA_IRQHandler+0x1d4>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d022      	beq.n	80095b0 <HAL_DMA_IRQHandler+0x194>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a21      	ldr	r2, [pc, #132]	; (80095f4 <HAL_DMA_IRQHandler+0x1d8>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d01d      	beq.n	80095b0 <HAL_DMA_IRQHandler+0x194>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a1f      	ldr	r2, [pc, #124]	; (80095f8 <HAL_DMA_IRQHandler+0x1dc>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d018      	beq.n	80095b0 <HAL_DMA_IRQHandler+0x194>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a1e      	ldr	r2, [pc, #120]	; (80095fc <HAL_DMA_IRQHandler+0x1e0>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d013      	beq.n	80095b0 <HAL_DMA_IRQHandler+0x194>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a1c      	ldr	r2, [pc, #112]	; (8009600 <HAL_DMA_IRQHandler+0x1e4>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d00e      	beq.n	80095b0 <HAL_DMA_IRQHandler+0x194>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a1b      	ldr	r2, [pc, #108]	; (8009604 <HAL_DMA_IRQHandler+0x1e8>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d009      	beq.n	80095b0 <HAL_DMA_IRQHandler+0x194>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a19      	ldr	r2, [pc, #100]	; (8009608 <HAL_DMA_IRQHandler+0x1ec>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d004      	beq.n	80095b0 <HAL_DMA_IRQHandler+0x194>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a18      	ldr	r2, [pc, #96]	; (800960c <HAL_DMA_IRQHandler+0x1f0>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d12f      	bne.n	8009610 <HAL_DMA_IRQHandler+0x1f4>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f003 0304 	and.w	r3, r3, #4
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	bf14      	ite	ne
 80095be:	2301      	movne	r3, #1
 80095c0:	2300      	moveq	r3, #0
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	e02e      	b.n	8009624 <HAL_DMA_IRQHandler+0x208>
 80095c6:	bf00      	nop
 80095c8:	240004dc 	.word	0x240004dc
 80095cc:	1b4e81b5 	.word	0x1b4e81b5
 80095d0:	40020010 	.word	0x40020010
 80095d4:	40020028 	.word	0x40020028
 80095d8:	40020040 	.word	0x40020040
 80095dc:	40020058 	.word	0x40020058
 80095e0:	40020070 	.word	0x40020070
 80095e4:	40020088 	.word	0x40020088
 80095e8:	400200a0 	.word	0x400200a0
 80095ec:	400200b8 	.word	0x400200b8
 80095f0:	40020410 	.word	0x40020410
 80095f4:	40020428 	.word	0x40020428
 80095f8:	40020440 	.word	0x40020440
 80095fc:	40020458 	.word	0x40020458
 8009600:	40020470 	.word	0x40020470
 8009604:	40020488 	.word	0x40020488
 8009608:	400204a0 	.word	0x400204a0
 800960c:	400204b8 	.word	0x400204b8
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f003 0308 	and.w	r3, r3, #8
 800961a:	2b00      	cmp	r3, #0
 800961c:	bf14      	ite	ne
 800961e:	2301      	movne	r3, #1
 8009620:	2300      	moveq	r3, #0
 8009622:	b2db      	uxtb	r3, r3
 8009624:	2b00      	cmp	r3, #0
 8009626:	d015      	beq.n	8009654 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f022 0204 	bic.w	r2, r2, #4
 8009636:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800963c:	f003 031f 	and.w	r3, r3, #31
 8009640:	2208      	movs	r2, #8
 8009642:	409a      	lsls	r2, r3
 8009644:	6a3b      	ldr	r3, [r7, #32]
 8009646:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800964c:	f043 0201 	orr.w	r2, r3, #1
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009658:	f003 031f 	and.w	r3, r3, #31
 800965c:	69ba      	ldr	r2, [r7, #24]
 800965e:	fa22 f303 	lsr.w	r3, r2, r3
 8009662:	f003 0301 	and.w	r3, r3, #1
 8009666:	2b00      	cmp	r3, #0
 8009668:	d06e      	beq.n	8009748 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a69      	ldr	r2, [pc, #420]	; (8009814 <HAL_DMA_IRQHandler+0x3f8>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d04a      	beq.n	800970a <HAL_DMA_IRQHandler+0x2ee>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a67      	ldr	r2, [pc, #412]	; (8009818 <HAL_DMA_IRQHandler+0x3fc>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d045      	beq.n	800970a <HAL_DMA_IRQHandler+0x2ee>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a66      	ldr	r2, [pc, #408]	; (800981c <HAL_DMA_IRQHandler+0x400>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d040      	beq.n	800970a <HAL_DMA_IRQHandler+0x2ee>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a64      	ldr	r2, [pc, #400]	; (8009820 <HAL_DMA_IRQHandler+0x404>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d03b      	beq.n	800970a <HAL_DMA_IRQHandler+0x2ee>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a63      	ldr	r2, [pc, #396]	; (8009824 <HAL_DMA_IRQHandler+0x408>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d036      	beq.n	800970a <HAL_DMA_IRQHandler+0x2ee>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a61      	ldr	r2, [pc, #388]	; (8009828 <HAL_DMA_IRQHandler+0x40c>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d031      	beq.n	800970a <HAL_DMA_IRQHandler+0x2ee>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a60      	ldr	r2, [pc, #384]	; (800982c <HAL_DMA_IRQHandler+0x410>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d02c      	beq.n	800970a <HAL_DMA_IRQHandler+0x2ee>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a5e      	ldr	r2, [pc, #376]	; (8009830 <HAL_DMA_IRQHandler+0x414>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d027      	beq.n	800970a <HAL_DMA_IRQHandler+0x2ee>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a5d      	ldr	r2, [pc, #372]	; (8009834 <HAL_DMA_IRQHandler+0x418>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d022      	beq.n	800970a <HAL_DMA_IRQHandler+0x2ee>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a5b      	ldr	r2, [pc, #364]	; (8009838 <HAL_DMA_IRQHandler+0x41c>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d01d      	beq.n	800970a <HAL_DMA_IRQHandler+0x2ee>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a5a      	ldr	r2, [pc, #360]	; (800983c <HAL_DMA_IRQHandler+0x420>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d018      	beq.n	800970a <HAL_DMA_IRQHandler+0x2ee>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a58      	ldr	r2, [pc, #352]	; (8009840 <HAL_DMA_IRQHandler+0x424>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d013      	beq.n	800970a <HAL_DMA_IRQHandler+0x2ee>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a57      	ldr	r2, [pc, #348]	; (8009844 <HAL_DMA_IRQHandler+0x428>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d00e      	beq.n	800970a <HAL_DMA_IRQHandler+0x2ee>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a55      	ldr	r2, [pc, #340]	; (8009848 <HAL_DMA_IRQHandler+0x42c>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d009      	beq.n	800970a <HAL_DMA_IRQHandler+0x2ee>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a54      	ldr	r2, [pc, #336]	; (800984c <HAL_DMA_IRQHandler+0x430>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d004      	beq.n	800970a <HAL_DMA_IRQHandler+0x2ee>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a52      	ldr	r2, [pc, #328]	; (8009850 <HAL_DMA_IRQHandler+0x434>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d10a      	bne.n	8009720 <HAL_DMA_IRQHandler+0x304>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	695b      	ldr	r3, [r3, #20]
 8009710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009714:	2b00      	cmp	r3, #0
 8009716:	bf14      	ite	ne
 8009718:	2301      	movne	r3, #1
 800971a:	2300      	moveq	r3, #0
 800971c:	b2db      	uxtb	r3, r3
 800971e:	e003      	b.n	8009728 <HAL_DMA_IRQHandler+0x30c>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2300      	movs	r3, #0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00d      	beq.n	8009748 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009730:	f003 031f 	and.w	r3, r3, #31
 8009734:	2201      	movs	r2, #1
 8009736:	409a      	lsls	r2, r3
 8009738:	6a3b      	ldr	r3, [r7, #32]
 800973a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009740:	f043 0202 	orr.w	r2, r3, #2
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800974c:	f003 031f 	and.w	r3, r3, #31
 8009750:	2204      	movs	r2, #4
 8009752:	409a      	lsls	r2, r3
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	4013      	ands	r3, r2
 8009758:	2b00      	cmp	r3, #0
 800975a:	f000 808f 	beq.w	800987c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a2c      	ldr	r2, [pc, #176]	; (8009814 <HAL_DMA_IRQHandler+0x3f8>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d04a      	beq.n	80097fe <HAL_DMA_IRQHandler+0x3e2>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a2a      	ldr	r2, [pc, #168]	; (8009818 <HAL_DMA_IRQHandler+0x3fc>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d045      	beq.n	80097fe <HAL_DMA_IRQHandler+0x3e2>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a29      	ldr	r2, [pc, #164]	; (800981c <HAL_DMA_IRQHandler+0x400>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d040      	beq.n	80097fe <HAL_DMA_IRQHandler+0x3e2>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a27      	ldr	r2, [pc, #156]	; (8009820 <HAL_DMA_IRQHandler+0x404>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d03b      	beq.n	80097fe <HAL_DMA_IRQHandler+0x3e2>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a26      	ldr	r2, [pc, #152]	; (8009824 <HAL_DMA_IRQHandler+0x408>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d036      	beq.n	80097fe <HAL_DMA_IRQHandler+0x3e2>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a24      	ldr	r2, [pc, #144]	; (8009828 <HAL_DMA_IRQHandler+0x40c>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d031      	beq.n	80097fe <HAL_DMA_IRQHandler+0x3e2>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a23      	ldr	r2, [pc, #140]	; (800982c <HAL_DMA_IRQHandler+0x410>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d02c      	beq.n	80097fe <HAL_DMA_IRQHandler+0x3e2>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a21      	ldr	r2, [pc, #132]	; (8009830 <HAL_DMA_IRQHandler+0x414>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d027      	beq.n	80097fe <HAL_DMA_IRQHandler+0x3e2>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a20      	ldr	r2, [pc, #128]	; (8009834 <HAL_DMA_IRQHandler+0x418>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d022      	beq.n	80097fe <HAL_DMA_IRQHandler+0x3e2>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a1e      	ldr	r2, [pc, #120]	; (8009838 <HAL_DMA_IRQHandler+0x41c>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d01d      	beq.n	80097fe <HAL_DMA_IRQHandler+0x3e2>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a1d      	ldr	r2, [pc, #116]	; (800983c <HAL_DMA_IRQHandler+0x420>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d018      	beq.n	80097fe <HAL_DMA_IRQHandler+0x3e2>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a1b      	ldr	r2, [pc, #108]	; (8009840 <HAL_DMA_IRQHandler+0x424>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d013      	beq.n	80097fe <HAL_DMA_IRQHandler+0x3e2>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a1a      	ldr	r2, [pc, #104]	; (8009844 <HAL_DMA_IRQHandler+0x428>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d00e      	beq.n	80097fe <HAL_DMA_IRQHandler+0x3e2>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a18      	ldr	r2, [pc, #96]	; (8009848 <HAL_DMA_IRQHandler+0x42c>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d009      	beq.n	80097fe <HAL_DMA_IRQHandler+0x3e2>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a17      	ldr	r2, [pc, #92]	; (800984c <HAL_DMA_IRQHandler+0x430>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d004      	beq.n	80097fe <HAL_DMA_IRQHandler+0x3e2>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a15      	ldr	r2, [pc, #84]	; (8009850 <HAL_DMA_IRQHandler+0x434>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d12a      	bne.n	8009854 <HAL_DMA_IRQHandler+0x438>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f003 0302 	and.w	r3, r3, #2
 8009808:	2b00      	cmp	r3, #0
 800980a:	bf14      	ite	ne
 800980c:	2301      	movne	r3, #1
 800980e:	2300      	moveq	r3, #0
 8009810:	b2db      	uxtb	r3, r3
 8009812:	e023      	b.n	800985c <HAL_DMA_IRQHandler+0x440>
 8009814:	40020010 	.word	0x40020010
 8009818:	40020028 	.word	0x40020028
 800981c:	40020040 	.word	0x40020040
 8009820:	40020058 	.word	0x40020058
 8009824:	40020070 	.word	0x40020070
 8009828:	40020088 	.word	0x40020088
 800982c:	400200a0 	.word	0x400200a0
 8009830:	400200b8 	.word	0x400200b8
 8009834:	40020410 	.word	0x40020410
 8009838:	40020428 	.word	0x40020428
 800983c:	40020440 	.word	0x40020440
 8009840:	40020458 	.word	0x40020458
 8009844:	40020470 	.word	0x40020470
 8009848:	40020488 	.word	0x40020488
 800984c:	400204a0 	.word	0x400204a0
 8009850:	400204b8 	.word	0x400204b8
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2300      	movs	r3, #0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00d      	beq.n	800987c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009864:	f003 031f 	and.w	r3, r3, #31
 8009868:	2204      	movs	r2, #4
 800986a:	409a      	lsls	r2, r3
 800986c:	6a3b      	ldr	r3, [r7, #32]
 800986e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009874:	f043 0204 	orr.w	r2, r3, #4
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009880:	f003 031f 	and.w	r3, r3, #31
 8009884:	2210      	movs	r2, #16
 8009886:	409a      	lsls	r2, r3
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	4013      	ands	r3, r2
 800988c:	2b00      	cmp	r3, #0
 800988e:	f000 80a6 	beq.w	80099de <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a85      	ldr	r2, [pc, #532]	; (8009aac <HAL_DMA_IRQHandler+0x690>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d04a      	beq.n	8009932 <HAL_DMA_IRQHandler+0x516>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a83      	ldr	r2, [pc, #524]	; (8009ab0 <HAL_DMA_IRQHandler+0x694>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d045      	beq.n	8009932 <HAL_DMA_IRQHandler+0x516>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a82      	ldr	r2, [pc, #520]	; (8009ab4 <HAL_DMA_IRQHandler+0x698>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d040      	beq.n	8009932 <HAL_DMA_IRQHandler+0x516>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a80      	ldr	r2, [pc, #512]	; (8009ab8 <HAL_DMA_IRQHandler+0x69c>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d03b      	beq.n	8009932 <HAL_DMA_IRQHandler+0x516>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a7f      	ldr	r2, [pc, #508]	; (8009abc <HAL_DMA_IRQHandler+0x6a0>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d036      	beq.n	8009932 <HAL_DMA_IRQHandler+0x516>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a7d      	ldr	r2, [pc, #500]	; (8009ac0 <HAL_DMA_IRQHandler+0x6a4>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d031      	beq.n	8009932 <HAL_DMA_IRQHandler+0x516>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a7c      	ldr	r2, [pc, #496]	; (8009ac4 <HAL_DMA_IRQHandler+0x6a8>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d02c      	beq.n	8009932 <HAL_DMA_IRQHandler+0x516>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a7a      	ldr	r2, [pc, #488]	; (8009ac8 <HAL_DMA_IRQHandler+0x6ac>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d027      	beq.n	8009932 <HAL_DMA_IRQHandler+0x516>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a79      	ldr	r2, [pc, #484]	; (8009acc <HAL_DMA_IRQHandler+0x6b0>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d022      	beq.n	8009932 <HAL_DMA_IRQHandler+0x516>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a77      	ldr	r2, [pc, #476]	; (8009ad0 <HAL_DMA_IRQHandler+0x6b4>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d01d      	beq.n	8009932 <HAL_DMA_IRQHandler+0x516>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a76      	ldr	r2, [pc, #472]	; (8009ad4 <HAL_DMA_IRQHandler+0x6b8>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d018      	beq.n	8009932 <HAL_DMA_IRQHandler+0x516>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a74      	ldr	r2, [pc, #464]	; (8009ad8 <HAL_DMA_IRQHandler+0x6bc>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d013      	beq.n	8009932 <HAL_DMA_IRQHandler+0x516>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a73      	ldr	r2, [pc, #460]	; (8009adc <HAL_DMA_IRQHandler+0x6c0>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d00e      	beq.n	8009932 <HAL_DMA_IRQHandler+0x516>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a71      	ldr	r2, [pc, #452]	; (8009ae0 <HAL_DMA_IRQHandler+0x6c4>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d009      	beq.n	8009932 <HAL_DMA_IRQHandler+0x516>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4a70      	ldr	r2, [pc, #448]	; (8009ae4 <HAL_DMA_IRQHandler+0x6c8>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d004      	beq.n	8009932 <HAL_DMA_IRQHandler+0x516>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a6e      	ldr	r2, [pc, #440]	; (8009ae8 <HAL_DMA_IRQHandler+0x6cc>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d10a      	bne.n	8009948 <HAL_DMA_IRQHandler+0x52c>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f003 0308 	and.w	r3, r3, #8
 800993c:	2b00      	cmp	r3, #0
 800993e:	bf14      	ite	ne
 8009940:	2301      	movne	r3, #1
 8009942:	2300      	moveq	r3, #0
 8009944:	b2db      	uxtb	r3, r3
 8009946:	e009      	b.n	800995c <HAL_DMA_IRQHandler+0x540>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f003 0304 	and.w	r3, r3, #4
 8009952:	2b00      	cmp	r3, #0
 8009954:	bf14      	ite	ne
 8009956:	2301      	movne	r3, #1
 8009958:	2300      	moveq	r3, #0
 800995a:	b2db      	uxtb	r3, r3
 800995c:	2b00      	cmp	r3, #0
 800995e:	d03e      	beq.n	80099de <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009964:	f003 031f 	and.w	r3, r3, #31
 8009968:	2210      	movs	r2, #16
 800996a:	409a      	lsls	r2, r3
 800996c:	6a3b      	ldr	r3, [r7, #32]
 800996e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800997a:	2b00      	cmp	r3, #0
 800997c:	d018      	beq.n	80099b0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009988:	2b00      	cmp	r3, #0
 800998a:	d108      	bne.n	800999e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009990:	2b00      	cmp	r3, #0
 8009992:	d024      	beq.n	80099de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	4798      	blx	r3
 800999c:	e01f      	b.n	80099de <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d01b      	beq.n	80099de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	4798      	blx	r3
 80099ae:	e016      	b.n	80099de <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d107      	bne.n	80099ce <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f022 0208 	bic.w	r2, r2, #8
 80099cc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d003      	beq.n	80099de <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099e2:	f003 031f 	and.w	r3, r3, #31
 80099e6:	2220      	movs	r2, #32
 80099e8:	409a      	lsls	r2, r3
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	4013      	ands	r3, r2
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	f000 8110 	beq.w	8009c14 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a2c      	ldr	r2, [pc, #176]	; (8009aac <HAL_DMA_IRQHandler+0x690>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d04a      	beq.n	8009a94 <HAL_DMA_IRQHandler+0x678>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a2b      	ldr	r2, [pc, #172]	; (8009ab0 <HAL_DMA_IRQHandler+0x694>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d045      	beq.n	8009a94 <HAL_DMA_IRQHandler+0x678>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a29      	ldr	r2, [pc, #164]	; (8009ab4 <HAL_DMA_IRQHandler+0x698>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d040      	beq.n	8009a94 <HAL_DMA_IRQHandler+0x678>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a28      	ldr	r2, [pc, #160]	; (8009ab8 <HAL_DMA_IRQHandler+0x69c>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d03b      	beq.n	8009a94 <HAL_DMA_IRQHandler+0x678>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a26      	ldr	r2, [pc, #152]	; (8009abc <HAL_DMA_IRQHandler+0x6a0>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d036      	beq.n	8009a94 <HAL_DMA_IRQHandler+0x678>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a25      	ldr	r2, [pc, #148]	; (8009ac0 <HAL_DMA_IRQHandler+0x6a4>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d031      	beq.n	8009a94 <HAL_DMA_IRQHandler+0x678>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a23      	ldr	r2, [pc, #140]	; (8009ac4 <HAL_DMA_IRQHandler+0x6a8>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d02c      	beq.n	8009a94 <HAL_DMA_IRQHandler+0x678>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a22      	ldr	r2, [pc, #136]	; (8009ac8 <HAL_DMA_IRQHandler+0x6ac>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d027      	beq.n	8009a94 <HAL_DMA_IRQHandler+0x678>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a20      	ldr	r2, [pc, #128]	; (8009acc <HAL_DMA_IRQHandler+0x6b0>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d022      	beq.n	8009a94 <HAL_DMA_IRQHandler+0x678>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a1f      	ldr	r2, [pc, #124]	; (8009ad0 <HAL_DMA_IRQHandler+0x6b4>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d01d      	beq.n	8009a94 <HAL_DMA_IRQHandler+0x678>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a1d      	ldr	r2, [pc, #116]	; (8009ad4 <HAL_DMA_IRQHandler+0x6b8>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d018      	beq.n	8009a94 <HAL_DMA_IRQHandler+0x678>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a1c      	ldr	r2, [pc, #112]	; (8009ad8 <HAL_DMA_IRQHandler+0x6bc>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d013      	beq.n	8009a94 <HAL_DMA_IRQHandler+0x678>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a1a      	ldr	r2, [pc, #104]	; (8009adc <HAL_DMA_IRQHandler+0x6c0>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d00e      	beq.n	8009a94 <HAL_DMA_IRQHandler+0x678>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a19      	ldr	r2, [pc, #100]	; (8009ae0 <HAL_DMA_IRQHandler+0x6c4>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d009      	beq.n	8009a94 <HAL_DMA_IRQHandler+0x678>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a17      	ldr	r2, [pc, #92]	; (8009ae4 <HAL_DMA_IRQHandler+0x6c8>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d004      	beq.n	8009a94 <HAL_DMA_IRQHandler+0x678>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a16      	ldr	r2, [pc, #88]	; (8009ae8 <HAL_DMA_IRQHandler+0x6cc>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d12b      	bne.n	8009aec <HAL_DMA_IRQHandler+0x6d0>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f003 0310 	and.w	r3, r3, #16
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	bf14      	ite	ne
 8009aa2:	2301      	movne	r3, #1
 8009aa4:	2300      	moveq	r3, #0
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	e02a      	b.n	8009b00 <HAL_DMA_IRQHandler+0x6e4>
 8009aaa:	bf00      	nop
 8009aac:	40020010 	.word	0x40020010
 8009ab0:	40020028 	.word	0x40020028
 8009ab4:	40020040 	.word	0x40020040
 8009ab8:	40020058 	.word	0x40020058
 8009abc:	40020070 	.word	0x40020070
 8009ac0:	40020088 	.word	0x40020088
 8009ac4:	400200a0 	.word	0x400200a0
 8009ac8:	400200b8 	.word	0x400200b8
 8009acc:	40020410 	.word	0x40020410
 8009ad0:	40020428 	.word	0x40020428
 8009ad4:	40020440 	.word	0x40020440
 8009ad8:	40020458 	.word	0x40020458
 8009adc:	40020470 	.word	0x40020470
 8009ae0:	40020488 	.word	0x40020488
 8009ae4:	400204a0 	.word	0x400204a0
 8009ae8:	400204b8 	.word	0x400204b8
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f003 0302 	and.w	r3, r3, #2
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	bf14      	ite	ne
 8009afa:	2301      	movne	r3, #1
 8009afc:	2300      	moveq	r3, #0
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f000 8087 	beq.w	8009c14 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b0a:	f003 031f 	and.w	r3, r3, #31
 8009b0e:	2220      	movs	r2, #32
 8009b10:	409a      	lsls	r2, r3
 8009b12:	6a3b      	ldr	r3, [r7, #32]
 8009b14:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	2b04      	cmp	r3, #4
 8009b20:	d139      	bne.n	8009b96 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f022 0216 	bic.w	r2, r2, #22
 8009b30:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	695a      	ldr	r2, [r3, #20]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b40:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d103      	bne.n	8009b52 <HAL_DMA_IRQHandler+0x736>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d007      	beq.n	8009b62 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f022 0208 	bic.w	r2, r2, #8
 8009b60:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b66:	f003 031f 	and.w	r3, r3, #31
 8009b6a:	223f      	movs	r2, #63	; 0x3f
 8009b6c:	409a      	lsls	r2, r3
 8009b6e:	6a3b      	ldr	r3, [r7, #32]
 8009b70:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2201      	movs	r2, #1
 8009b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	f000 834a 	beq.w	800a220 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	4798      	blx	r3
          }
          return;
 8009b94:	e344      	b.n	800a220 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d018      	beq.n	8009bd6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d108      	bne.n	8009bc4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d02c      	beq.n	8009c14 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	4798      	blx	r3
 8009bc2:	e027      	b.n	8009c14 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d023      	beq.n	8009c14 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	4798      	blx	r3
 8009bd4:	e01e      	b.n	8009c14 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d10f      	bne.n	8009c04 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f022 0210 	bic.w	r2, r2, #16
 8009bf2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d003      	beq.n	8009c14 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	f000 8306 	beq.w	800a22a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c22:	f003 0301 	and.w	r3, r3, #1
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f000 8088 	beq.w	8009d3c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2204      	movs	r2, #4
 8009c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a7a      	ldr	r2, [pc, #488]	; (8009e24 <HAL_DMA_IRQHandler+0xa08>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d04a      	beq.n	8009cd4 <HAL_DMA_IRQHandler+0x8b8>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a79      	ldr	r2, [pc, #484]	; (8009e28 <HAL_DMA_IRQHandler+0xa0c>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d045      	beq.n	8009cd4 <HAL_DMA_IRQHandler+0x8b8>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a77      	ldr	r2, [pc, #476]	; (8009e2c <HAL_DMA_IRQHandler+0xa10>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d040      	beq.n	8009cd4 <HAL_DMA_IRQHandler+0x8b8>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a76      	ldr	r2, [pc, #472]	; (8009e30 <HAL_DMA_IRQHandler+0xa14>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d03b      	beq.n	8009cd4 <HAL_DMA_IRQHandler+0x8b8>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a74      	ldr	r2, [pc, #464]	; (8009e34 <HAL_DMA_IRQHandler+0xa18>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d036      	beq.n	8009cd4 <HAL_DMA_IRQHandler+0x8b8>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a73      	ldr	r2, [pc, #460]	; (8009e38 <HAL_DMA_IRQHandler+0xa1c>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d031      	beq.n	8009cd4 <HAL_DMA_IRQHandler+0x8b8>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a71      	ldr	r2, [pc, #452]	; (8009e3c <HAL_DMA_IRQHandler+0xa20>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d02c      	beq.n	8009cd4 <HAL_DMA_IRQHandler+0x8b8>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a70      	ldr	r2, [pc, #448]	; (8009e40 <HAL_DMA_IRQHandler+0xa24>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d027      	beq.n	8009cd4 <HAL_DMA_IRQHandler+0x8b8>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a6e      	ldr	r2, [pc, #440]	; (8009e44 <HAL_DMA_IRQHandler+0xa28>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d022      	beq.n	8009cd4 <HAL_DMA_IRQHandler+0x8b8>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a6d      	ldr	r2, [pc, #436]	; (8009e48 <HAL_DMA_IRQHandler+0xa2c>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d01d      	beq.n	8009cd4 <HAL_DMA_IRQHandler+0x8b8>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a6b      	ldr	r2, [pc, #428]	; (8009e4c <HAL_DMA_IRQHandler+0xa30>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d018      	beq.n	8009cd4 <HAL_DMA_IRQHandler+0x8b8>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a6a      	ldr	r2, [pc, #424]	; (8009e50 <HAL_DMA_IRQHandler+0xa34>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d013      	beq.n	8009cd4 <HAL_DMA_IRQHandler+0x8b8>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a68      	ldr	r2, [pc, #416]	; (8009e54 <HAL_DMA_IRQHandler+0xa38>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d00e      	beq.n	8009cd4 <HAL_DMA_IRQHandler+0x8b8>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a67      	ldr	r2, [pc, #412]	; (8009e58 <HAL_DMA_IRQHandler+0xa3c>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d009      	beq.n	8009cd4 <HAL_DMA_IRQHandler+0x8b8>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a65      	ldr	r2, [pc, #404]	; (8009e5c <HAL_DMA_IRQHandler+0xa40>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d004      	beq.n	8009cd4 <HAL_DMA_IRQHandler+0x8b8>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a64      	ldr	r2, [pc, #400]	; (8009e60 <HAL_DMA_IRQHandler+0xa44>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d108      	bne.n	8009ce6 <HAL_DMA_IRQHandler+0x8ca>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f022 0201 	bic.w	r2, r2, #1
 8009ce2:	601a      	str	r2, [r3, #0]
 8009ce4:	e007      	b.n	8009cf6 <HAL_DMA_IRQHandler+0x8da>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f022 0201 	bic.w	r2, r2, #1
 8009cf4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	60fb      	str	r3, [r7, #12]
 8009cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d307      	bcc.n	8009d12 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f003 0301 	and.w	r3, r3, #1
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d1f2      	bne.n	8009cf6 <HAL_DMA_IRQHandler+0x8da>
 8009d10:	e000      	b.n	8009d14 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8009d12:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f003 0301 	and.w	r3, r3, #1
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d004      	beq.n	8009d2c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2203      	movs	r2, #3
 8009d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8009d2a:	e003      	b.n	8009d34 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	f000 8272 	beq.w	800a22a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	4798      	blx	r3
 8009d4e:	e26c      	b.n	800a22a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a43      	ldr	r2, [pc, #268]	; (8009e64 <HAL_DMA_IRQHandler+0xa48>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d022      	beq.n	8009da0 <HAL_DMA_IRQHandler+0x984>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a42      	ldr	r2, [pc, #264]	; (8009e68 <HAL_DMA_IRQHandler+0xa4c>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d01d      	beq.n	8009da0 <HAL_DMA_IRQHandler+0x984>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a40      	ldr	r2, [pc, #256]	; (8009e6c <HAL_DMA_IRQHandler+0xa50>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d018      	beq.n	8009da0 <HAL_DMA_IRQHandler+0x984>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a3f      	ldr	r2, [pc, #252]	; (8009e70 <HAL_DMA_IRQHandler+0xa54>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d013      	beq.n	8009da0 <HAL_DMA_IRQHandler+0x984>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a3d      	ldr	r2, [pc, #244]	; (8009e74 <HAL_DMA_IRQHandler+0xa58>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d00e      	beq.n	8009da0 <HAL_DMA_IRQHandler+0x984>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a3c      	ldr	r2, [pc, #240]	; (8009e78 <HAL_DMA_IRQHandler+0xa5c>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d009      	beq.n	8009da0 <HAL_DMA_IRQHandler+0x984>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a3a      	ldr	r2, [pc, #232]	; (8009e7c <HAL_DMA_IRQHandler+0xa60>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d004      	beq.n	8009da0 <HAL_DMA_IRQHandler+0x984>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a39      	ldr	r2, [pc, #228]	; (8009e80 <HAL_DMA_IRQHandler+0xa64>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d101      	bne.n	8009da4 <HAL_DMA_IRQHandler+0x988>
 8009da0:	2301      	movs	r3, #1
 8009da2:	e000      	b.n	8009da6 <HAL_DMA_IRQHandler+0x98a>
 8009da4:	2300      	movs	r3, #0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	f000 823f 	beq.w	800a22a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009db8:	f003 031f 	and.w	r3, r3, #31
 8009dbc:	2204      	movs	r2, #4
 8009dbe:	409a      	lsls	r2, r3
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	4013      	ands	r3, r2
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f000 80cd 	beq.w	8009f64 <HAL_DMA_IRQHandler+0xb48>
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	f003 0304 	and.w	r3, r3, #4
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	f000 80c7 	beq.w	8009f64 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dda:	f003 031f 	and.w	r3, r3, #31
 8009dde:	2204      	movs	r2, #4
 8009de0:	409a      	lsls	r2, r3
 8009de2:	69fb      	ldr	r3, [r7, #28]
 8009de4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d049      	beq.n	8009e84 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d109      	bne.n	8009e0e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	f000 8210 	beq.w	800a224 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009e0c:	e20a      	b.n	800a224 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f000 8206 	beq.w	800a224 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009e20:	e200      	b.n	800a224 <HAL_DMA_IRQHandler+0xe08>
 8009e22:	bf00      	nop
 8009e24:	40020010 	.word	0x40020010
 8009e28:	40020028 	.word	0x40020028
 8009e2c:	40020040 	.word	0x40020040
 8009e30:	40020058 	.word	0x40020058
 8009e34:	40020070 	.word	0x40020070
 8009e38:	40020088 	.word	0x40020088
 8009e3c:	400200a0 	.word	0x400200a0
 8009e40:	400200b8 	.word	0x400200b8
 8009e44:	40020410 	.word	0x40020410
 8009e48:	40020428 	.word	0x40020428
 8009e4c:	40020440 	.word	0x40020440
 8009e50:	40020458 	.word	0x40020458
 8009e54:	40020470 	.word	0x40020470
 8009e58:	40020488 	.word	0x40020488
 8009e5c:	400204a0 	.word	0x400204a0
 8009e60:	400204b8 	.word	0x400204b8
 8009e64:	58025408 	.word	0x58025408
 8009e68:	5802541c 	.word	0x5802541c
 8009e6c:	58025430 	.word	0x58025430
 8009e70:	58025444 	.word	0x58025444
 8009e74:	58025458 	.word	0x58025458
 8009e78:	5802546c 	.word	0x5802546c
 8009e7c:	58025480 	.word	0x58025480
 8009e80:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	f003 0320 	and.w	r3, r3, #32
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d160      	bne.n	8009f50 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a7f      	ldr	r2, [pc, #508]	; (800a090 <HAL_DMA_IRQHandler+0xc74>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d04a      	beq.n	8009f2e <HAL_DMA_IRQHandler+0xb12>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a7d      	ldr	r2, [pc, #500]	; (800a094 <HAL_DMA_IRQHandler+0xc78>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d045      	beq.n	8009f2e <HAL_DMA_IRQHandler+0xb12>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4a7c      	ldr	r2, [pc, #496]	; (800a098 <HAL_DMA_IRQHandler+0xc7c>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d040      	beq.n	8009f2e <HAL_DMA_IRQHandler+0xb12>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a7a      	ldr	r2, [pc, #488]	; (800a09c <HAL_DMA_IRQHandler+0xc80>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d03b      	beq.n	8009f2e <HAL_DMA_IRQHandler+0xb12>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a79      	ldr	r2, [pc, #484]	; (800a0a0 <HAL_DMA_IRQHandler+0xc84>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d036      	beq.n	8009f2e <HAL_DMA_IRQHandler+0xb12>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a77      	ldr	r2, [pc, #476]	; (800a0a4 <HAL_DMA_IRQHandler+0xc88>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d031      	beq.n	8009f2e <HAL_DMA_IRQHandler+0xb12>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4a76      	ldr	r2, [pc, #472]	; (800a0a8 <HAL_DMA_IRQHandler+0xc8c>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d02c      	beq.n	8009f2e <HAL_DMA_IRQHandler+0xb12>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a74      	ldr	r2, [pc, #464]	; (800a0ac <HAL_DMA_IRQHandler+0xc90>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d027      	beq.n	8009f2e <HAL_DMA_IRQHandler+0xb12>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a73      	ldr	r2, [pc, #460]	; (800a0b0 <HAL_DMA_IRQHandler+0xc94>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d022      	beq.n	8009f2e <HAL_DMA_IRQHandler+0xb12>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a71      	ldr	r2, [pc, #452]	; (800a0b4 <HAL_DMA_IRQHandler+0xc98>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d01d      	beq.n	8009f2e <HAL_DMA_IRQHandler+0xb12>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a70      	ldr	r2, [pc, #448]	; (800a0b8 <HAL_DMA_IRQHandler+0xc9c>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d018      	beq.n	8009f2e <HAL_DMA_IRQHandler+0xb12>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a6e      	ldr	r2, [pc, #440]	; (800a0bc <HAL_DMA_IRQHandler+0xca0>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d013      	beq.n	8009f2e <HAL_DMA_IRQHandler+0xb12>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a6d      	ldr	r2, [pc, #436]	; (800a0c0 <HAL_DMA_IRQHandler+0xca4>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d00e      	beq.n	8009f2e <HAL_DMA_IRQHandler+0xb12>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a6b      	ldr	r2, [pc, #428]	; (800a0c4 <HAL_DMA_IRQHandler+0xca8>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d009      	beq.n	8009f2e <HAL_DMA_IRQHandler+0xb12>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a6a      	ldr	r2, [pc, #424]	; (800a0c8 <HAL_DMA_IRQHandler+0xcac>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d004      	beq.n	8009f2e <HAL_DMA_IRQHandler+0xb12>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a68      	ldr	r2, [pc, #416]	; (800a0cc <HAL_DMA_IRQHandler+0xcb0>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d108      	bne.n	8009f40 <HAL_DMA_IRQHandler+0xb24>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f022 0208 	bic.w	r2, r2, #8
 8009f3c:	601a      	str	r2, [r3, #0]
 8009f3e:	e007      	b.n	8009f50 <HAL_DMA_IRQHandler+0xb34>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f022 0204 	bic.w	r2, r2, #4
 8009f4e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	f000 8165 	beq.w	800a224 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009f62:	e15f      	b.n	800a224 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f68:	f003 031f 	and.w	r3, r3, #31
 8009f6c:	2202      	movs	r2, #2
 8009f6e:	409a      	lsls	r2, r3
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	4013      	ands	r3, r2
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	f000 80c5 	beq.w	800a104 <HAL_DMA_IRQHandler+0xce8>
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	f003 0302 	and.w	r3, r3, #2
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f000 80bf 	beq.w	800a104 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f8a:	f003 031f 	and.w	r3, r3, #31
 8009f8e:	2202      	movs	r2, #2
 8009f90:	409a      	lsls	r2, r3
 8009f92:	69fb      	ldr	r3, [r7, #28]
 8009f94:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d018      	beq.n	8009fd2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d109      	bne.n	8009fbe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	f000 813a 	beq.w	800a228 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009fbc:	e134      	b.n	800a228 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	f000 8130 	beq.w	800a228 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009fd0:	e12a      	b.n	800a228 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	f003 0320 	and.w	r3, r3, #32
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f040 8089 	bne.w	800a0f0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a2b      	ldr	r2, [pc, #172]	; (800a090 <HAL_DMA_IRQHandler+0xc74>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d04a      	beq.n	800a07e <HAL_DMA_IRQHandler+0xc62>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a29      	ldr	r2, [pc, #164]	; (800a094 <HAL_DMA_IRQHandler+0xc78>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d045      	beq.n	800a07e <HAL_DMA_IRQHandler+0xc62>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a28      	ldr	r2, [pc, #160]	; (800a098 <HAL_DMA_IRQHandler+0xc7c>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d040      	beq.n	800a07e <HAL_DMA_IRQHandler+0xc62>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a26      	ldr	r2, [pc, #152]	; (800a09c <HAL_DMA_IRQHandler+0xc80>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d03b      	beq.n	800a07e <HAL_DMA_IRQHandler+0xc62>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a25      	ldr	r2, [pc, #148]	; (800a0a0 <HAL_DMA_IRQHandler+0xc84>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d036      	beq.n	800a07e <HAL_DMA_IRQHandler+0xc62>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a23      	ldr	r2, [pc, #140]	; (800a0a4 <HAL_DMA_IRQHandler+0xc88>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d031      	beq.n	800a07e <HAL_DMA_IRQHandler+0xc62>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a22      	ldr	r2, [pc, #136]	; (800a0a8 <HAL_DMA_IRQHandler+0xc8c>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d02c      	beq.n	800a07e <HAL_DMA_IRQHandler+0xc62>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a20      	ldr	r2, [pc, #128]	; (800a0ac <HAL_DMA_IRQHandler+0xc90>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d027      	beq.n	800a07e <HAL_DMA_IRQHandler+0xc62>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a1f      	ldr	r2, [pc, #124]	; (800a0b0 <HAL_DMA_IRQHandler+0xc94>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d022      	beq.n	800a07e <HAL_DMA_IRQHandler+0xc62>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a1d      	ldr	r2, [pc, #116]	; (800a0b4 <HAL_DMA_IRQHandler+0xc98>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d01d      	beq.n	800a07e <HAL_DMA_IRQHandler+0xc62>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a1c      	ldr	r2, [pc, #112]	; (800a0b8 <HAL_DMA_IRQHandler+0xc9c>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d018      	beq.n	800a07e <HAL_DMA_IRQHandler+0xc62>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a1a      	ldr	r2, [pc, #104]	; (800a0bc <HAL_DMA_IRQHandler+0xca0>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d013      	beq.n	800a07e <HAL_DMA_IRQHandler+0xc62>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a19      	ldr	r2, [pc, #100]	; (800a0c0 <HAL_DMA_IRQHandler+0xca4>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d00e      	beq.n	800a07e <HAL_DMA_IRQHandler+0xc62>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a17      	ldr	r2, [pc, #92]	; (800a0c4 <HAL_DMA_IRQHandler+0xca8>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d009      	beq.n	800a07e <HAL_DMA_IRQHandler+0xc62>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a16      	ldr	r2, [pc, #88]	; (800a0c8 <HAL_DMA_IRQHandler+0xcac>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d004      	beq.n	800a07e <HAL_DMA_IRQHandler+0xc62>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a14      	ldr	r2, [pc, #80]	; (800a0cc <HAL_DMA_IRQHandler+0xcb0>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d128      	bne.n	800a0d0 <HAL_DMA_IRQHandler+0xcb4>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f022 0214 	bic.w	r2, r2, #20
 800a08c:	601a      	str	r2, [r3, #0]
 800a08e:	e027      	b.n	800a0e0 <HAL_DMA_IRQHandler+0xcc4>
 800a090:	40020010 	.word	0x40020010
 800a094:	40020028 	.word	0x40020028
 800a098:	40020040 	.word	0x40020040
 800a09c:	40020058 	.word	0x40020058
 800a0a0:	40020070 	.word	0x40020070
 800a0a4:	40020088 	.word	0x40020088
 800a0a8:	400200a0 	.word	0x400200a0
 800a0ac:	400200b8 	.word	0x400200b8
 800a0b0:	40020410 	.word	0x40020410
 800a0b4:	40020428 	.word	0x40020428
 800a0b8:	40020440 	.word	0x40020440
 800a0bc:	40020458 	.word	0x40020458
 800a0c0:	40020470 	.word	0x40020470
 800a0c4:	40020488 	.word	0x40020488
 800a0c8:	400204a0 	.word	0x400204a0
 800a0cc:	400204b8 	.word	0x400204b8
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f022 020a 	bic.w	r2, r2, #10
 800a0de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	f000 8097 	beq.w	800a228 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a102:	e091      	b.n	800a228 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a108:	f003 031f 	and.w	r3, r3, #31
 800a10c:	2208      	movs	r2, #8
 800a10e:	409a      	lsls	r2, r3
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	4013      	ands	r3, r2
 800a114:	2b00      	cmp	r3, #0
 800a116:	f000 8088 	beq.w	800a22a <HAL_DMA_IRQHandler+0xe0e>
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	f003 0308 	and.w	r3, r3, #8
 800a120:	2b00      	cmp	r3, #0
 800a122:	f000 8082 	beq.w	800a22a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a41      	ldr	r2, [pc, #260]	; (800a230 <HAL_DMA_IRQHandler+0xe14>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d04a      	beq.n	800a1c6 <HAL_DMA_IRQHandler+0xdaa>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a3f      	ldr	r2, [pc, #252]	; (800a234 <HAL_DMA_IRQHandler+0xe18>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d045      	beq.n	800a1c6 <HAL_DMA_IRQHandler+0xdaa>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a3e      	ldr	r2, [pc, #248]	; (800a238 <HAL_DMA_IRQHandler+0xe1c>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d040      	beq.n	800a1c6 <HAL_DMA_IRQHandler+0xdaa>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a3c      	ldr	r2, [pc, #240]	; (800a23c <HAL_DMA_IRQHandler+0xe20>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d03b      	beq.n	800a1c6 <HAL_DMA_IRQHandler+0xdaa>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a3b      	ldr	r2, [pc, #236]	; (800a240 <HAL_DMA_IRQHandler+0xe24>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d036      	beq.n	800a1c6 <HAL_DMA_IRQHandler+0xdaa>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a39      	ldr	r2, [pc, #228]	; (800a244 <HAL_DMA_IRQHandler+0xe28>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d031      	beq.n	800a1c6 <HAL_DMA_IRQHandler+0xdaa>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a38      	ldr	r2, [pc, #224]	; (800a248 <HAL_DMA_IRQHandler+0xe2c>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d02c      	beq.n	800a1c6 <HAL_DMA_IRQHandler+0xdaa>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a36      	ldr	r2, [pc, #216]	; (800a24c <HAL_DMA_IRQHandler+0xe30>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d027      	beq.n	800a1c6 <HAL_DMA_IRQHandler+0xdaa>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a35      	ldr	r2, [pc, #212]	; (800a250 <HAL_DMA_IRQHandler+0xe34>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d022      	beq.n	800a1c6 <HAL_DMA_IRQHandler+0xdaa>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a33      	ldr	r2, [pc, #204]	; (800a254 <HAL_DMA_IRQHandler+0xe38>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d01d      	beq.n	800a1c6 <HAL_DMA_IRQHandler+0xdaa>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a32      	ldr	r2, [pc, #200]	; (800a258 <HAL_DMA_IRQHandler+0xe3c>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d018      	beq.n	800a1c6 <HAL_DMA_IRQHandler+0xdaa>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a30      	ldr	r2, [pc, #192]	; (800a25c <HAL_DMA_IRQHandler+0xe40>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d013      	beq.n	800a1c6 <HAL_DMA_IRQHandler+0xdaa>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4a2f      	ldr	r2, [pc, #188]	; (800a260 <HAL_DMA_IRQHandler+0xe44>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d00e      	beq.n	800a1c6 <HAL_DMA_IRQHandler+0xdaa>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a2d      	ldr	r2, [pc, #180]	; (800a264 <HAL_DMA_IRQHandler+0xe48>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d009      	beq.n	800a1c6 <HAL_DMA_IRQHandler+0xdaa>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a2c      	ldr	r2, [pc, #176]	; (800a268 <HAL_DMA_IRQHandler+0xe4c>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d004      	beq.n	800a1c6 <HAL_DMA_IRQHandler+0xdaa>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a2a      	ldr	r2, [pc, #168]	; (800a26c <HAL_DMA_IRQHandler+0xe50>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d108      	bne.n	800a1d8 <HAL_DMA_IRQHandler+0xdbc>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f022 021c 	bic.w	r2, r2, #28
 800a1d4:	601a      	str	r2, [r3, #0]
 800a1d6:	e007      	b.n	800a1e8 <HAL_DMA_IRQHandler+0xdcc>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f022 020e 	bic.w	r2, r2, #14
 800a1e6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1ec:	f003 031f 	and.w	r3, r3, #31
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	409a      	lsls	r2, r3
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2201      	movs	r2, #1
 800a202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a212:	2b00      	cmp	r3, #0
 800a214:	d009      	beq.n	800a22a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	4798      	blx	r3
 800a21e:	e004      	b.n	800a22a <HAL_DMA_IRQHandler+0xe0e>
          return;
 800a220:	bf00      	nop
 800a222:	e002      	b.n	800a22a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a224:	bf00      	nop
 800a226:	e000      	b.n	800a22a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a228:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a22a:	3728      	adds	r7, #40	; 0x28
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	40020010 	.word	0x40020010
 800a234:	40020028 	.word	0x40020028
 800a238:	40020040 	.word	0x40020040
 800a23c:	40020058 	.word	0x40020058
 800a240:	40020070 	.word	0x40020070
 800a244:	40020088 	.word	0x40020088
 800a248:	400200a0 	.word	0x400200a0
 800a24c:	400200b8 	.word	0x400200b8
 800a250:	40020410 	.word	0x40020410
 800a254:	40020428 	.word	0x40020428
 800a258:	40020440 	.word	0x40020440
 800a25c:	40020458 	.word	0x40020458
 800a260:	40020470 	.word	0x40020470
 800a264:	40020488 	.word	0x40020488
 800a268:	400204a0 	.word	0x400204a0
 800a26c:	400204b8 	.word	0x400204b8

0800a270 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	370c      	adds	r7, #12
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a288:	b480      	push	{r7}
 800a28a:	b087      	sub	sp, #28
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	60f8      	str	r0, [r7, #12]
 800a290:	60b9      	str	r1, [r7, #8]
 800a292:	607a      	str	r2, [r7, #4]
 800a294:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a29a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2a0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a7f      	ldr	r2, [pc, #508]	; (800a4a4 <DMA_SetConfig+0x21c>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d072      	beq.n	800a392 <DMA_SetConfig+0x10a>
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a7d      	ldr	r2, [pc, #500]	; (800a4a8 <DMA_SetConfig+0x220>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d06d      	beq.n	800a392 <DMA_SetConfig+0x10a>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a7c      	ldr	r2, [pc, #496]	; (800a4ac <DMA_SetConfig+0x224>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d068      	beq.n	800a392 <DMA_SetConfig+0x10a>
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a7a      	ldr	r2, [pc, #488]	; (800a4b0 <DMA_SetConfig+0x228>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d063      	beq.n	800a392 <DMA_SetConfig+0x10a>
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a79      	ldr	r2, [pc, #484]	; (800a4b4 <DMA_SetConfig+0x22c>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d05e      	beq.n	800a392 <DMA_SetConfig+0x10a>
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a77      	ldr	r2, [pc, #476]	; (800a4b8 <DMA_SetConfig+0x230>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d059      	beq.n	800a392 <DMA_SetConfig+0x10a>
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a76      	ldr	r2, [pc, #472]	; (800a4bc <DMA_SetConfig+0x234>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d054      	beq.n	800a392 <DMA_SetConfig+0x10a>
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a74      	ldr	r2, [pc, #464]	; (800a4c0 <DMA_SetConfig+0x238>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d04f      	beq.n	800a392 <DMA_SetConfig+0x10a>
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a73      	ldr	r2, [pc, #460]	; (800a4c4 <DMA_SetConfig+0x23c>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d04a      	beq.n	800a392 <DMA_SetConfig+0x10a>
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a71      	ldr	r2, [pc, #452]	; (800a4c8 <DMA_SetConfig+0x240>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d045      	beq.n	800a392 <DMA_SetConfig+0x10a>
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a70      	ldr	r2, [pc, #448]	; (800a4cc <DMA_SetConfig+0x244>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d040      	beq.n	800a392 <DMA_SetConfig+0x10a>
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a6e      	ldr	r2, [pc, #440]	; (800a4d0 <DMA_SetConfig+0x248>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d03b      	beq.n	800a392 <DMA_SetConfig+0x10a>
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a6d      	ldr	r2, [pc, #436]	; (800a4d4 <DMA_SetConfig+0x24c>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d036      	beq.n	800a392 <DMA_SetConfig+0x10a>
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a6b      	ldr	r2, [pc, #428]	; (800a4d8 <DMA_SetConfig+0x250>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d031      	beq.n	800a392 <DMA_SetConfig+0x10a>
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a6a      	ldr	r2, [pc, #424]	; (800a4dc <DMA_SetConfig+0x254>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d02c      	beq.n	800a392 <DMA_SetConfig+0x10a>
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a68      	ldr	r2, [pc, #416]	; (800a4e0 <DMA_SetConfig+0x258>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d027      	beq.n	800a392 <DMA_SetConfig+0x10a>
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a67      	ldr	r2, [pc, #412]	; (800a4e4 <DMA_SetConfig+0x25c>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d022      	beq.n	800a392 <DMA_SetConfig+0x10a>
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a65      	ldr	r2, [pc, #404]	; (800a4e8 <DMA_SetConfig+0x260>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d01d      	beq.n	800a392 <DMA_SetConfig+0x10a>
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a64      	ldr	r2, [pc, #400]	; (800a4ec <DMA_SetConfig+0x264>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d018      	beq.n	800a392 <DMA_SetConfig+0x10a>
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a62      	ldr	r2, [pc, #392]	; (800a4f0 <DMA_SetConfig+0x268>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d013      	beq.n	800a392 <DMA_SetConfig+0x10a>
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4a61      	ldr	r2, [pc, #388]	; (800a4f4 <DMA_SetConfig+0x26c>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d00e      	beq.n	800a392 <DMA_SetConfig+0x10a>
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a5f      	ldr	r2, [pc, #380]	; (800a4f8 <DMA_SetConfig+0x270>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d009      	beq.n	800a392 <DMA_SetConfig+0x10a>
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4a5e      	ldr	r2, [pc, #376]	; (800a4fc <DMA_SetConfig+0x274>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d004      	beq.n	800a392 <DMA_SetConfig+0x10a>
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a5c      	ldr	r2, [pc, #368]	; (800a500 <DMA_SetConfig+0x278>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d101      	bne.n	800a396 <DMA_SetConfig+0x10e>
 800a392:	2301      	movs	r3, #1
 800a394:	e000      	b.n	800a398 <DMA_SetConfig+0x110>
 800a396:	2300      	movs	r3, #0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d00d      	beq.n	800a3b8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3a0:	68fa      	ldr	r2, [r7, #12]
 800a3a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a3a4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d004      	beq.n	800a3b8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3b2:	68fa      	ldr	r2, [r7, #12]
 800a3b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a3b6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a39      	ldr	r2, [pc, #228]	; (800a4a4 <DMA_SetConfig+0x21c>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d04a      	beq.n	800a458 <DMA_SetConfig+0x1d0>
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a38      	ldr	r2, [pc, #224]	; (800a4a8 <DMA_SetConfig+0x220>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d045      	beq.n	800a458 <DMA_SetConfig+0x1d0>
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a36      	ldr	r2, [pc, #216]	; (800a4ac <DMA_SetConfig+0x224>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d040      	beq.n	800a458 <DMA_SetConfig+0x1d0>
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a35      	ldr	r2, [pc, #212]	; (800a4b0 <DMA_SetConfig+0x228>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d03b      	beq.n	800a458 <DMA_SetConfig+0x1d0>
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a33      	ldr	r2, [pc, #204]	; (800a4b4 <DMA_SetConfig+0x22c>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d036      	beq.n	800a458 <DMA_SetConfig+0x1d0>
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a32      	ldr	r2, [pc, #200]	; (800a4b8 <DMA_SetConfig+0x230>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d031      	beq.n	800a458 <DMA_SetConfig+0x1d0>
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a30      	ldr	r2, [pc, #192]	; (800a4bc <DMA_SetConfig+0x234>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d02c      	beq.n	800a458 <DMA_SetConfig+0x1d0>
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a2f      	ldr	r2, [pc, #188]	; (800a4c0 <DMA_SetConfig+0x238>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d027      	beq.n	800a458 <DMA_SetConfig+0x1d0>
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a2d      	ldr	r2, [pc, #180]	; (800a4c4 <DMA_SetConfig+0x23c>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d022      	beq.n	800a458 <DMA_SetConfig+0x1d0>
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4a2c      	ldr	r2, [pc, #176]	; (800a4c8 <DMA_SetConfig+0x240>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d01d      	beq.n	800a458 <DMA_SetConfig+0x1d0>
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a2a      	ldr	r2, [pc, #168]	; (800a4cc <DMA_SetConfig+0x244>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d018      	beq.n	800a458 <DMA_SetConfig+0x1d0>
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a29      	ldr	r2, [pc, #164]	; (800a4d0 <DMA_SetConfig+0x248>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d013      	beq.n	800a458 <DMA_SetConfig+0x1d0>
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4a27      	ldr	r2, [pc, #156]	; (800a4d4 <DMA_SetConfig+0x24c>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d00e      	beq.n	800a458 <DMA_SetConfig+0x1d0>
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4a26      	ldr	r2, [pc, #152]	; (800a4d8 <DMA_SetConfig+0x250>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d009      	beq.n	800a458 <DMA_SetConfig+0x1d0>
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4a24      	ldr	r2, [pc, #144]	; (800a4dc <DMA_SetConfig+0x254>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d004      	beq.n	800a458 <DMA_SetConfig+0x1d0>
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4a23      	ldr	r2, [pc, #140]	; (800a4e0 <DMA_SetConfig+0x258>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d101      	bne.n	800a45c <DMA_SetConfig+0x1d4>
 800a458:	2301      	movs	r3, #1
 800a45a:	e000      	b.n	800a45e <DMA_SetConfig+0x1d6>
 800a45c:	2300      	movs	r3, #0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d059      	beq.n	800a516 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a466:	f003 031f 	and.w	r3, r3, #31
 800a46a:	223f      	movs	r2, #63	; 0x3f
 800a46c:	409a      	lsls	r2, r3
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a480:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	683a      	ldr	r2, [r7, #0]
 800a488:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	689b      	ldr	r3, [r3, #8]
 800a48e:	2b40      	cmp	r3, #64	; 0x40
 800a490:	d138      	bne.n	800a504 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	687a      	ldr	r2, [r7, #4]
 800a498:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	68ba      	ldr	r2, [r7, #8]
 800a4a0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a4a2:	e086      	b.n	800a5b2 <DMA_SetConfig+0x32a>
 800a4a4:	40020010 	.word	0x40020010
 800a4a8:	40020028 	.word	0x40020028
 800a4ac:	40020040 	.word	0x40020040
 800a4b0:	40020058 	.word	0x40020058
 800a4b4:	40020070 	.word	0x40020070
 800a4b8:	40020088 	.word	0x40020088
 800a4bc:	400200a0 	.word	0x400200a0
 800a4c0:	400200b8 	.word	0x400200b8
 800a4c4:	40020410 	.word	0x40020410
 800a4c8:	40020428 	.word	0x40020428
 800a4cc:	40020440 	.word	0x40020440
 800a4d0:	40020458 	.word	0x40020458
 800a4d4:	40020470 	.word	0x40020470
 800a4d8:	40020488 	.word	0x40020488
 800a4dc:	400204a0 	.word	0x400204a0
 800a4e0:	400204b8 	.word	0x400204b8
 800a4e4:	58025408 	.word	0x58025408
 800a4e8:	5802541c 	.word	0x5802541c
 800a4ec:	58025430 	.word	0x58025430
 800a4f0:	58025444 	.word	0x58025444
 800a4f4:	58025458 	.word	0x58025458
 800a4f8:	5802546c 	.word	0x5802546c
 800a4fc:	58025480 	.word	0x58025480
 800a500:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	68ba      	ldr	r2, [r7, #8]
 800a50a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	60da      	str	r2, [r3, #12]
}
 800a514:	e04d      	b.n	800a5b2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a29      	ldr	r2, [pc, #164]	; (800a5c0 <DMA_SetConfig+0x338>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d022      	beq.n	800a566 <DMA_SetConfig+0x2de>
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a27      	ldr	r2, [pc, #156]	; (800a5c4 <DMA_SetConfig+0x33c>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d01d      	beq.n	800a566 <DMA_SetConfig+0x2de>
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4a26      	ldr	r2, [pc, #152]	; (800a5c8 <DMA_SetConfig+0x340>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d018      	beq.n	800a566 <DMA_SetConfig+0x2de>
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a24      	ldr	r2, [pc, #144]	; (800a5cc <DMA_SetConfig+0x344>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d013      	beq.n	800a566 <DMA_SetConfig+0x2de>
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a23      	ldr	r2, [pc, #140]	; (800a5d0 <DMA_SetConfig+0x348>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d00e      	beq.n	800a566 <DMA_SetConfig+0x2de>
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a21      	ldr	r2, [pc, #132]	; (800a5d4 <DMA_SetConfig+0x34c>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d009      	beq.n	800a566 <DMA_SetConfig+0x2de>
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a20      	ldr	r2, [pc, #128]	; (800a5d8 <DMA_SetConfig+0x350>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d004      	beq.n	800a566 <DMA_SetConfig+0x2de>
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a1e      	ldr	r2, [pc, #120]	; (800a5dc <DMA_SetConfig+0x354>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d101      	bne.n	800a56a <DMA_SetConfig+0x2e2>
 800a566:	2301      	movs	r3, #1
 800a568:	e000      	b.n	800a56c <DMA_SetConfig+0x2e4>
 800a56a:	2300      	movs	r3, #0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d020      	beq.n	800a5b2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a574:	f003 031f 	and.w	r3, r3, #31
 800a578:	2201      	movs	r2, #1
 800a57a:	409a      	lsls	r2, r3
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	683a      	ldr	r2, [r7, #0]
 800a586:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	2b40      	cmp	r3, #64	; 0x40
 800a58e:	d108      	bne.n	800a5a2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	68ba      	ldr	r2, [r7, #8]
 800a59e:	60da      	str	r2, [r3, #12]
}
 800a5a0:	e007      	b.n	800a5b2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	68ba      	ldr	r2, [r7, #8]
 800a5a8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	60da      	str	r2, [r3, #12]
}
 800a5b2:	bf00      	nop
 800a5b4:	371c      	adds	r7, #28
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop
 800a5c0:	58025408 	.word	0x58025408
 800a5c4:	5802541c 	.word	0x5802541c
 800a5c8:	58025430 	.word	0x58025430
 800a5cc:	58025444 	.word	0x58025444
 800a5d0:	58025458 	.word	0x58025458
 800a5d4:	5802546c 	.word	0x5802546c
 800a5d8:	58025480 	.word	0x58025480
 800a5dc:	58025494 	.word	0x58025494

0800a5e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b085      	sub	sp, #20
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a42      	ldr	r2, [pc, #264]	; (800a6f8 <DMA_CalcBaseAndBitshift+0x118>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d04a      	beq.n	800a688 <DMA_CalcBaseAndBitshift+0xa8>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4a41      	ldr	r2, [pc, #260]	; (800a6fc <DMA_CalcBaseAndBitshift+0x11c>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d045      	beq.n	800a688 <DMA_CalcBaseAndBitshift+0xa8>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a3f      	ldr	r2, [pc, #252]	; (800a700 <DMA_CalcBaseAndBitshift+0x120>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d040      	beq.n	800a688 <DMA_CalcBaseAndBitshift+0xa8>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a3e      	ldr	r2, [pc, #248]	; (800a704 <DMA_CalcBaseAndBitshift+0x124>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d03b      	beq.n	800a688 <DMA_CalcBaseAndBitshift+0xa8>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4a3c      	ldr	r2, [pc, #240]	; (800a708 <DMA_CalcBaseAndBitshift+0x128>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d036      	beq.n	800a688 <DMA_CalcBaseAndBitshift+0xa8>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4a3b      	ldr	r2, [pc, #236]	; (800a70c <DMA_CalcBaseAndBitshift+0x12c>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d031      	beq.n	800a688 <DMA_CalcBaseAndBitshift+0xa8>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a39      	ldr	r2, [pc, #228]	; (800a710 <DMA_CalcBaseAndBitshift+0x130>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d02c      	beq.n	800a688 <DMA_CalcBaseAndBitshift+0xa8>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a38      	ldr	r2, [pc, #224]	; (800a714 <DMA_CalcBaseAndBitshift+0x134>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d027      	beq.n	800a688 <DMA_CalcBaseAndBitshift+0xa8>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a36      	ldr	r2, [pc, #216]	; (800a718 <DMA_CalcBaseAndBitshift+0x138>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d022      	beq.n	800a688 <DMA_CalcBaseAndBitshift+0xa8>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4a35      	ldr	r2, [pc, #212]	; (800a71c <DMA_CalcBaseAndBitshift+0x13c>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d01d      	beq.n	800a688 <DMA_CalcBaseAndBitshift+0xa8>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4a33      	ldr	r2, [pc, #204]	; (800a720 <DMA_CalcBaseAndBitshift+0x140>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d018      	beq.n	800a688 <DMA_CalcBaseAndBitshift+0xa8>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a32      	ldr	r2, [pc, #200]	; (800a724 <DMA_CalcBaseAndBitshift+0x144>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d013      	beq.n	800a688 <DMA_CalcBaseAndBitshift+0xa8>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4a30      	ldr	r2, [pc, #192]	; (800a728 <DMA_CalcBaseAndBitshift+0x148>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d00e      	beq.n	800a688 <DMA_CalcBaseAndBitshift+0xa8>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a2f      	ldr	r2, [pc, #188]	; (800a72c <DMA_CalcBaseAndBitshift+0x14c>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d009      	beq.n	800a688 <DMA_CalcBaseAndBitshift+0xa8>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a2d      	ldr	r2, [pc, #180]	; (800a730 <DMA_CalcBaseAndBitshift+0x150>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d004      	beq.n	800a688 <DMA_CalcBaseAndBitshift+0xa8>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4a2c      	ldr	r2, [pc, #176]	; (800a734 <DMA_CalcBaseAndBitshift+0x154>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d101      	bne.n	800a68c <DMA_CalcBaseAndBitshift+0xac>
 800a688:	2301      	movs	r3, #1
 800a68a:	e000      	b.n	800a68e <DMA_CalcBaseAndBitshift+0xae>
 800a68c:	2300      	movs	r3, #0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d024      	beq.n	800a6dc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	b2db      	uxtb	r3, r3
 800a698:	3b10      	subs	r3, #16
 800a69a:	4a27      	ldr	r2, [pc, #156]	; (800a738 <DMA_CalcBaseAndBitshift+0x158>)
 800a69c:	fba2 2303 	umull	r2, r3, r2, r3
 800a6a0:	091b      	lsrs	r3, r3, #4
 800a6a2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f003 0307 	and.w	r3, r3, #7
 800a6aa:	4a24      	ldr	r2, [pc, #144]	; (800a73c <DMA_CalcBaseAndBitshift+0x15c>)
 800a6ac:	5cd3      	ldrb	r3, [r2, r3]
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2b03      	cmp	r3, #3
 800a6b8:	d908      	bls.n	800a6cc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	461a      	mov	r2, r3
 800a6c0:	4b1f      	ldr	r3, [pc, #124]	; (800a740 <DMA_CalcBaseAndBitshift+0x160>)
 800a6c2:	4013      	ands	r3, r2
 800a6c4:	1d1a      	adds	r2, r3, #4
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	659a      	str	r2, [r3, #88]	; 0x58
 800a6ca:	e00d      	b.n	800a6e8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	4b1b      	ldr	r3, [pc, #108]	; (800a740 <DMA_CalcBaseAndBitshift+0x160>)
 800a6d4:	4013      	ands	r3, r2
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	6593      	str	r3, [r2, #88]	; 0x58
 800a6da:	e005      	b.n	800a6e8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3714      	adds	r7, #20
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr
 800a6f8:	40020010 	.word	0x40020010
 800a6fc:	40020028 	.word	0x40020028
 800a700:	40020040 	.word	0x40020040
 800a704:	40020058 	.word	0x40020058
 800a708:	40020070 	.word	0x40020070
 800a70c:	40020088 	.word	0x40020088
 800a710:	400200a0 	.word	0x400200a0
 800a714:	400200b8 	.word	0x400200b8
 800a718:	40020410 	.word	0x40020410
 800a71c:	40020428 	.word	0x40020428
 800a720:	40020440 	.word	0x40020440
 800a724:	40020458 	.word	0x40020458
 800a728:	40020470 	.word	0x40020470
 800a72c:	40020488 	.word	0x40020488
 800a730:	400204a0 	.word	0x400204a0
 800a734:	400204b8 	.word	0x400204b8
 800a738:	aaaaaaab 	.word	0xaaaaaaab
 800a73c:	0801b3e4 	.word	0x0801b3e4
 800a740:	fffffc00 	.word	0xfffffc00

0800a744 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a744:	b480      	push	{r7}
 800a746:	b085      	sub	sp, #20
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a74c:	2300      	movs	r3, #0
 800a74e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	699b      	ldr	r3, [r3, #24]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d120      	bne.n	800a79a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a75c:	2b03      	cmp	r3, #3
 800a75e:	d858      	bhi.n	800a812 <DMA_CheckFifoParam+0xce>
 800a760:	a201      	add	r2, pc, #4	; (adr r2, 800a768 <DMA_CheckFifoParam+0x24>)
 800a762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a766:	bf00      	nop
 800a768:	0800a779 	.word	0x0800a779
 800a76c:	0800a78b 	.word	0x0800a78b
 800a770:	0800a779 	.word	0x0800a779
 800a774:	0800a813 	.word	0x0800a813
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a77c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a780:	2b00      	cmp	r3, #0
 800a782:	d048      	beq.n	800a816 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a788:	e045      	b.n	800a816 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a78e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a792:	d142      	bne.n	800a81a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a798:	e03f      	b.n	800a81a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	699b      	ldr	r3, [r3, #24]
 800a79e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7a2:	d123      	bne.n	800a7ec <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7a8:	2b03      	cmp	r3, #3
 800a7aa:	d838      	bhi.n	800a81e <DMA_CheckFifoParam+0xda>
 800a7ac:	a201      	add	r2, pc, #4	; (adr r2, 800a7b4 <DMA_CheckFifoParam+0x70>)
 800a7ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b2:	bf00      	nop
 800a7b4:	0800a7c5 	.word	0x0800a7c5
 800a7b8:	0800a7cb 	.word	0x0800a7cb
 800a7bc:	0800a7c5 	.word	0x0800a7c5
 800a7c0:	0800a7dd 	.word	0x0800a7dd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	73fb      	strb	r3, [r7, #15]
        break;
 800a7c8:	e030      	b.n	800a82c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d025      	beq.n	800a822 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a7da:	e022      	b.n	800a822 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a7e4:	d11f      	bne.n	800a826 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a7ea:	e01c      	b.n	800a826 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7f0:	2b02      	cmp	r3, #2
 800a7f2:	d902      	bls.n	800a7fa <DMA_CheckFifoParam+0xb6>
 800a7f4:	2b03      	cmp	r3, #3
 800a7f6:	d003      	beq.n	800a800 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800a7f8:	e018      	b.n	800a82c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	73fb      	strb	r3, [r7, #15]
        break;
 800a7fe:	e015      	b.n	800a82c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a804:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d00e      	beq.n	800a82a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800a80c:	2301      	movs	r3, #1
 800a80e:	73fb      	strb	r3, [r7, #15]
    break;
 800a810:	e00b      	b.n	800a82a <DMA_CheckFifoParam+0xe6>
        break;
 800a812:	bf00      	nop
 800a814:	e00a      	b.n	800a82c <DMA_CheckFifoParam+0xe8>
        break;
 800a816:	bf00      	nop
 800a818:	e008      	b.n	800a82c <DMA_CheckFifoParam+0xe8>
        break;
 800a81a:	bf00      	nop
 800a81c:	e006      	b.n	800a82c <DMA_CheckFifoParam+0xe8>
        break;
 800a81e:	bf00      	nop
 800a820:	e004      	b.n	800a82c <DMA_CheckFifoParam+0xe8>
        break;
 800a822:	bf00      	nop
 800a824:	e002      	b.n	800a82c <DMA_CheckFifoParam+0xe8>
        break;
 800a826:	bf00      	nop
 800a828:	e000      	b.n	800a82c <DMA_CheckFifoParam+0xe8>
    break;
 800a82a:	bf00      	nop
    }
  }

  return status;
 800a82c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a82e:	4618      	mov	r0, r3
 800a830:	3714      	adds	r7, #20
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop

0800a83c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b085      	sub	sp, #20
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a38      	ldr	r2, [pc, #224]	; (800a930 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d022      	beq.n	800a89a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a36      	ldr	r2, [pc, #216]	; (800a934 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d01d      	beq.n	800a89a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a35      	ldr	r2, [pc, #212]	; (800a938 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d018      	beq.n	800a89a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a33      	ldr	r2, [pc, #204]	; (800a93c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d013      	beq.n	800a89a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a32      	ldr	r2, [pc, #200]	; (800a940 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d00e      	beq.n	800a89a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4a30      	ldr	r2, [pc, #192]	; (800a944 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d009      	beq.n	800a89a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a2f      	ldr	r2, [pc, #188]	; (800a948 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d004      	beq.n	800a89a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4a2d      	ldr	r2, [pc, #180]	; (800a94c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d101      	bne.n	800a89e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800a89a:	2301      	movs	r3, #1
 800a89c:	e000      	b.n	800a8a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800a89e:	2300      	movs	r3, #0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d01a      	beq.n	800a8da <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	b2db      	uxtb	r3, r3
 800a8aa:	3b08      	subs	r3, #8
 800a8ac:	4a28      	ldr	r2, [pc, #160]	; (800a950 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800a8ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a8b2:	091b      	lsrs	r3, r3, #4
 800a8b4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800a8b6:	68fa      	ldr	r2, [r7, #12]
 800a8b8:	4b26      	ldr	r3, [pc, #152]	; (800a954 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800a8ba:	4413      	add	r3, r2
 800a8bc:	009b      	lsls	r3, r3, #2
 800a8be:	461a      	mov	r2, r3
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	4a24      	ldr	r2, [pc, #144]	; (800a958 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800a8c8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f003 031f 	and.w	r3, r3, #31
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	409a      	lsls	r2, r3
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800a8d8:	e024      	b.n	800a924 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	3b10      	subs	r3, #16
 800a8e2:	4a1e      	ldr	r2, [pc, #120]	; (800a95c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800a8e4:	fba2 2303 	umull	r2, r3, r2, r3
 800a8e8:	091b      	lsrs	r3, r3, #4
 800a8ea:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	4a1c      	ldr	r2, [pc, #112]	; (800a960 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d806      	bhi.n	800a902 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	4a1b      	ldr	r2, [pc, #108]	; (800a964 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d902      	bls.n	800a902 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	3308      	adds	r3, #8
 800a900:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800a902:	68fa      	ldr	r2, [r7, #12]
 800a904:	4b18      	ldr	r3, [pc, #96]	; (800a968 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800a906:	4413      	add	r3, r2
 800a908:	009b      	lsls	r3, r3, #2
 800a90a:	461a      	mov	r2, r3
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4a16      	ldr	r2, [pc, #88]	; (800a96c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800a914:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f003 031f 	and.w	r3, r3, #31
 800a91c:	2201      	movs	r2, #1
 800a91e:	409a      	lsls	r2, r3
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a924:	bf00      	nop
 800a926:	3714      	adds	r7, #20
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr
 800a930:	58025408 	.word	0x58025408
 800a934:	5802541c 	.word	0x5802541c
 800a938:	58025430 	.word	0x58025430
 800a93c:	58025444 	.word	0x58025444
 800a940:	58025458 	.word	0x58025458
 800a944:	5802546c 	.word	0x5802546c
 800a948:	58025480 	.word	0x58025480
 800a94c:	58025494 	.word	0x58025494
 800a950:	cccccccd 	.word	0xcccccccd
 800a954:	16009600 	.word	0x16009600
 800a958:	58025880 	.word	0x58025880
 800a95c:	aaaaaaab 	.word	0xaaaaaaab
 800a960:	400204b8 	.word	0x400204b8
 800a964:	4002040f 	.word	0x4002040f
 800a968:	10008200 	.word	0x10008200
 800a96c:	40020880 	.word	0x40020880

0800a970 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a970:	b480      	push	{r7}
 800a972:	b085      	sub	sp, #20
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d04a      	beq.n	800aa1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2b08      	cmp	r3, #8
 800a98a:	d847      	bhi.n	800aa1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a25      	ldr	r2, [pc, #148]	; (800aa28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d022      	beq.n	800a9dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a24      	ldr	r2, [pc, #144]	; (800aa2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d01d      	beq.n	800a9dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4a22      	ldr	r2, [pc, #136]	; (800aa30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d018      	beq.n	800a9dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4a21      	ldr	r2, [pc, #132]	; (800aa34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d013      	beq.n	800a9dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4a1f      	ldr	r2, [pc, #124]	; (800aa38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d00e      	beq.n	800a9dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4a1e      	ldr	r2, [pc, #120]	; (800aa3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d009      	beq.n	800a9dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4a1c      	ldr	r2, [pc, #112]	; (800aa40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d004      	beq.n	800a9dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4a1b      	ldr	r2, [pc, #108]	; (800aa44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d101      	bne.n	800a9e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a9dc:	2301      	movs	r3, #1
 800a9de:	e000      	b.n	800a9e2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d00a      	beq.n	800a9fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a9e6:	68fa      	ldr	r2, [r7, #12]
 800a9e8:	4b17      	ldr	r3, [pc, #92]	; (800aa48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a9ea:	4413      	add	r3, r2
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	4a15      	ldr	r2, [pc, #84]	; (800aa4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a9f8:	671a      	str	r2, [r3, #112]	; 0x70
 800a9fa:	e009      	b.n	800aa10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a9fc:	68fa      	ldr	r2, [r7, #12]
 800a9fe:	4b14      	ldr	r3, [pc, #80]	; (800aa50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800aa00:	4413      	add	r3, r2
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	461a      	mov	r2, r3
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	4a11      	ldr	r2, [pc, #68]	; (800aa54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800aa0e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	3b01      	subs	r3, #1
 800aa14:	2201      	movs	r2, #1
 800aa16:	409a      	lsls	r2, r3
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800aa1c:	bf00      	nop
 800aa1e:	3714      	adds	r7, #20
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr
 800aa28:	58025408 	.word	0x58025408
 800aa2c:	5802541c 	.word	0x5802541c
 800aa30:	58025430 	.word	0x58025430
 800aa34:	58025444 	.word	0x58025444
 800aa38:	58025458 	.word	0x58025458
 800aa3c:	5802546c 	.word	0x5802546c
 800aa40:	58025480 	.word	0x58025480
 800aa44:	58025494 	.word	0x58025494
 800aa48:	1600963f 	.word	0x1600963f
 800aa4c:	58025940 	.word	0x58025940
 800aa50:	1000823f 	.word	0x1000823f
 800aa54:	40020940 	.word	0x40020940

0800aa58 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d101      	bne.n	800aa6a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	e04f      	b.n	800ab0a <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d106      	bne.n	800aa84 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 f84e 	bl	800ab20 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2202      	movs	r2, #2
 800aa88:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	4b20      	ldr	r3, [pc, #128]	; (800ab14 <HAL_DMA2D_Init+0xbc>)
 800aa94:	4013      	ands	r3, r2
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	6851      	ldr	r1, [r2, #4]
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	69d2      	ldr	r2, [r2, #28]
 800aa9e:	4311      	orrs	r1, r2
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	6812      	ldr	r2, [r2, #0]
 800aaa4:	430b      	orrs	r3, r1
 800aaa6:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aaae:	4b1a      	ldr	r3, [pc, #104]	; (800ab18 <HAL_DMA2D_Init+0xc0>)
 800aab0:	4013      	ands	r3, r2
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	6891      	ldr	r1, [r2, #8]
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	6992      	ldr	r2, [r2, #24]
 800aaba:	4311      	orrs	r1, r2
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	6812      	ldr	r2, [r2, #0]
 800aac0:	430b      	orrs	r3, r1
 800aac2:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aaca:	4b14      	ldr	r3, [pc, #80]	; (800ab1c <HAL_DMA2D_Init+0xc4>)
 800aacc:	4013      	ands	r3, r2
 800aace:	687a      	ldr	r2, [r7, #4]
 800aad0:	68d1      	ldr	r1, [r2, #12]
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	6812      	ldr	r2, [r2, #0]
 800aad6:	430b      	orrs	r3, r1
 800aad8:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aae0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	691b      	ldr	r3, [r3, #16]
 800aae8:	051a      	lsls	r2, r3, #20
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	695b      	ldr	r3, [r3, #20]
 800aaee:	055b      	lsls	r3, r3, #21
 800aaf0:	431a      	orrs	r2, r3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	430a      	orrs	r2, r1
 800aaf8:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2200      	movs	r2, #0
 800aafe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2201      	movs	r2, #1
 800ab04:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 800ab08:	2300      	movs	r3, #0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3708      	adds	r7, #8
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	fff8ffbf 	.word	0xfff8ffbf
 800ab18:	fffffef8 	.word	0xfffffef8
 800ab1c:	ffff0000 	.word	0xffff0000

0800ab20 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800ab28:	bf00      	nop
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b086      	sub	sp, #24
 800ab38:	af02      	add	r7, sp, #8
 800ab3a:	60f8      	str	r0, [r7, #12]
 800ab3c:	60b9      	str	r1, [r7, #8]
 800ab3e:	607a      	str	r2, [r7, #4]
 800ab40:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	d101      	bne.n	800ab50 <HAL_DMA2D_Start+0x1c>
 800ab4c:	2302      	movs	r3, #2
 800ab4e:	e018      	b.n	800ab82 <HAL_DMA2D_Start+0x4e>
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2201      	movs	r2, #1
 800ab54:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2202      	movs	r2, #2
 800ab5c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	9300      	str	r3, [sp, #0]
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	687a      	ldr	r2, [r7, #4]
 800ab68:	68b9      	ldr	r1, [r7, #8]
 800ab6a:	68f8      	ldr	r0, [r7, #12]
 800ab6c:	f000 f9a4 	bl	800aeb8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f042 0201 	orr.w	r2, r2, #1
 800ab7e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ab80:	2300      	movs	r3, #0
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3710      	adds	r7, #16
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b086      	sub	sp, #24
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
 800ab92:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800ab94:	2300      	movs	r3, #0
 800ab96:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f003 0301 	and.w	r3, r3, #1
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d056      	beq.n	800ac54 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800aba6:	f7fc ff95 	bl	8007ad4 <HAL_GetTick>
 800abaa:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800abac:	e04b      	b.n	800ac46 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d023      	beq.n	800ac08 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f003 0320 	and.w	r3, r3, #32
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d005      	beq.n	800abd6 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abce:	f043 0202 	orr.w	r2, r3, #2
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f003 0301 	and.w	r3, r3, #1
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d005      	beq.n	800abec <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abe4:	f043 0201 	orr.w	r2, r3, #1
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	2221      	movs	r2, #33	; 0x21
 800abf2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2204      	movs	r2, #4
 800abf8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2200      	movs	r2, #0
 800ac00:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800ac04:	2301      	movs	r3, #1
 800ac06:	e0a5      	b.n	800ad54 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac0e:	d01a      	beq.n	800ac46 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ac10:	f7fc ff60 	bl	8007ad4 <HAL_GetTick>
 800ac14:	4602      	mov	r2, r0
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	1ad3      	subs	r3, r2, r3
 800ac1a:	683a      	ldr	r2, [r7, #0]
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d302      	bcc.n	800ac26 <HAL_DMA2D_PollForTransfer+0x9c>
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d10f      	bne.n	800ac46 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac2a:	f043 0220 	orr.w	r2, r3, #32
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2203      	movs	r2, #3
 800ac36:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 800ac42:	2303      	movs	r3, #3
 800ac44:	e086      	b.n	800ad54 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	f003 0302 	and.w	r3, r3, #2
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d0ac      	beq.n	800abae <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	69db      	ldr	r3, [r3, #28]
 800ac5a:	f003 0320 	and.w	r3, r3, #32
 800ac5e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac66:	f003 0320 	and.w	r3, r3, #32
 800ac6a:	693a      	ldr	r2, [r7, #16]
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d061      	beq.n	800ad3a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800ac76:	f7fc ff2d 	bl	8007ad4 <HAL_GetTick>
 800ac7a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800ac7c:	e056      	b.n	800ad2c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d02e      	beq.n	800acee <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f003 0308 	and.w	r3, r3, #8
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d005      	beq.n	800aca6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac9e:	f043 0204 	orr.w	r2, r3, #4
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f003 0320 	and.w	r3, r3, #32
 800acac:	2b00      	cmp	r3, #0
 800acae:	d005      	beq.n	800acbc <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acb4:	f043 0202 	orr.w	r2, r3, #2
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f003 0301 	and.w	r3, r3, #1
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d005      	beq.n	800acd2 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acca:	f043 0201 	orr.w	r2, r3, #1
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	2229      	movs	r2, #41	; 0x29
 800acd8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2204      	movs	r2, #4
 800acde:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800acea:	2301      	movs	r3, #1
 800acec:	e032      	b.n	800ad54 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acf4:	d01a      	beq.n	800ad2c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800acf6:	f7fc feed 	bl	8007ad4 <HAL_GetTick>
 800acfa:	4602      	mov	r2, r0
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	1ad3      	subs	r3, r2, r3
 800ad00:	683a      	ldr	r2, [r7, #0]
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d302      	bcc.n	800ad0c <HAL_DMA2D_PollForTransfer+0x182>
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d10f      	bne.n	800ad2c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad10:	f043 0220 	orr.w	r2, r3, #32
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2203      	movs	r2, #3
 800ad1c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 800ad28:	2303      	movs	r3, #3
 800ad2a:	e013      	b.n	800ad54 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	f003 0310 	and.w	r3, r3, #16
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d0a1      	beq.n	800ac7e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	2212      	movs	r2, #18
 800ad40:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2201      	movs	r2, #1
 800ad46:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3718      	adds	r7, #24
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b087      	sub	sp, #28
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d101      	bne.n	800ad80 <HAL_DMA2D_ConfigLayer+0x24>
 800ad7c:	2302      	movs	r3, #2
 800ad7e:	e092      	b.n	800aea6 <HAL_DMA2D_ConfigLayer+0x14a>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2201      	movs	r2, #1
 800ad84:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2202      	movs	r2, #2
 800ad8c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800ad90:	683a      	ldr	r2, [r7, #0]
 800ad92:	4613      	mov	r3, r2
 800ad94:	00db      	lsls	r3, r3, #3
 800ad96:	1a9b      	subs	r3, r3, r2
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	3328      	adds	r3, #40	; 0x28
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	4413      	add	r3, r2
 800ada0:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	685a      	ldr	r2, [r3, #4]
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	689b      	ldr	r3, [r3, #8]
 800adaa:	041b      	lsls	r3, r3, #16
 800adac:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	691b      	ldr	r3, [r3, #16]
 800adb2:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800adb4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	695b      	ldr	r3, [r3, #20]
 800adba:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800adbc:	4313      	orrs	r3, r2
 800adbe:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800adc0:	4b3c      	ldr	r3, [pc, #240]	; (800aeb4 <HAL_DMA2D_ConfigLayer+0x158>)
 800adc2:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	2b0a      	cmp	r3, #10
 800adca:	d003      	beq.n	800add4 <HAL_DMA2D_ConfigLayer+0x78>
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	2b09      	cmp	r3, #9
 800add2:	d107      	bne.n	800ade4 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800addc:	693a      	ldr	r2, [r7, #16]
 800adde:	4313      	orrs	r3, r2
 800ade0:	613b      	str	r3, [r7, #16]
 800ade2:	e005      	b.n	800adf0 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	061b      	lsls	r3, r3, #24
 800adea:	693a      	ldr	r2, [r7, #16]
 800adec:	4313      	orrs	r3, r2
 800adee:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d120      	bne.n	800ae38 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	43db      	mvns	r3, r3
 800ae00:	ea02 0103 	and.w	r1, r2, r3
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	693a      	ldr	r2, [r7, #16]
 800ae0a:	430a      	orrs	r2, r1
 800ae0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	68fa      	ldr	r2, [r7, #12]
 800ae14:	6812      	ldr	r2, [r2, #0]
 800ae16:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	2b0a      	cmp	r3, #10
 800ae1e:	d003      	beq.n	800ae28 <HAL_DMA2D_ConfigLayer+0xcc>
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	2b09      	cmp	r3, #9
 800ae26:	d135      	bne.n	800ae94 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	68da      	ldr	r2, [r3, #12]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800ae34:	629a      	str	r2, [r3, #40]	; 0x28
 800ae36:	e02d      	b.n	800ae94 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	2b0b      	cmp	r3, #11
 800ae3e:	d109      	bne.n	800ae54 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	699b      	ldr	r3, [r3, #24]
 800ae44:	049b      	lsls	r3, r3, #18
 800ae46:	693a      	ldr	r2, [r7, #16]
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800ae52:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	69da      	ldr	r2, [r3, #28]
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	43db      	mvns	r3, r3
 800ae5e:	ea02 0103 	and.w	r1, r2, r3
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	693a      	ldr	r2, [r7, #16]
 800ae68:	430a      	orrs	r2, r1
 800ae6a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	68fa      	ldr	r2, [r7, #12]
 800ae72:	6812      	ldr	r2, [r2, #0]
 800ae74:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	2b0a      	cmp	r3, #10
 800ae7c:	d003      	beq.n	800ae86 <HAL_DMA2D_ConfigLayer+0x12a>
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	2b09      	cmp	r3, #9
 800ae84:	d106      	bne.n	800ae94 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	68da      	ldr	r2, [r3, #12]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800ae92:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2201      	movs	r2, #1
 800ae98:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800aea4:	2300      	movs	r3, #0
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	371c      	adds	r7, #28
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop
 800aeb4:	ff33000f 	.word	0xff33000f

0800aeb8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b08b      	sub	sp, #44	; 0x2c
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	60b9      	str	r1, [r7, #8]
 800aec2:	607a      	str	r2, [r7, #4]
 800aec4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aecc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	041a      	lsls	r2, r3, #16
 800aed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed6:	431a      	orrs	r2, r3
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	430a      	orrs	r2, r1
 800aede:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aef0:	d174      	bne.n	800afdc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800aef8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800af00:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800af08:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	689b      	ldr	r3, [r3, #8]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d108      	bne.n	800af2a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800af18:	69ba      	ldr	r2, [r7, #24]
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	431a      	orrs	r2, r3
 800af1e:	6a3b      	ldr	r3, [r7, #32]
 800af20:	4313      	orrs	r3, r2
 800af22:	697a      	ldr	r2, [r7, #20]
 800af24:	4313      	orrs	r3, r2
 800af26:	627b      	str	r3, [r7, #36]	; 0x24
 800af28:	e053      	b.n	800afd2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d106      	bne.n	800af40 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800af32:	69ba      	ldr	r2, [r7, #24]
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	4313      	orrs	r3, r2
 800af38:	697a      	ldr	r2, [r7, #20]
 800af3a:	4313      	orrs	r3, r2
 800af3c:	627b      	str	r3, [r7, #36]	; 0x24
 800af3e:	e048      	b.n	800afd2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	689b      	ldr	r3, [r3, #8]
 800af44:	2b02      	cmp	r3, #2
 800af46:	d111      	bne.n	800af6c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800af48:	69fb      	ldr	r3, [r7, #28]
 800af4a:	0cdb      	lsrs	r3, r3, #19
 800af4c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800af4e:	69bb      	ldr	r3, [r7, #24]
 800af50:	0a9b      	lsrs	r3, r3, #10
 800af52:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	08db      	lsrs	r3, r3, #3
 800af58:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800af5a:	69bb      	ldr	r3, [r7, #24]
 800af5c:	015a      	lsls	r2, r3, #5
 800af5e:	69fb      	ldr	r3, [r7, #28]
 800af60:	02db      	lsls	r3, r3, #11
 800af62:	4313      	orrs	r3, r2
 800af64:	697a      	ldr	r2, [r7, #20]
 800af66:	4313      	orrs	r3, r2
 800af68:	627b      	str	r3, [r7, #36]	; 0x24
 800af6a:	e032      	b.n	800afd2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	2b03      	cmp	r3, #3
 800af72:	d117      	bne.n	800afa4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800af74:	6a3b      	ldr	r3, [r7, #32]
 800af76:	0fdb      	lsrs	r3, r3, #31
 800af78:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800af7a:	69fb      	ldr	r3, [r7, #28]
 800af7c:	0cdb      	lsrs	r3, r3, #19
 800af7e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800af80:	69bb      	ldr	r3, [r7, #24]
 800af82:	0adb      	lsrs	r3, r3, #11
 800af84:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	08db      	lsrs	r3, r3, #3
 800af8a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800af8c:	69bb      	ldr	r3, [r7, #24]
 800af8e:	015a      	lsls	r2, r3, #5
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	029b      	lsls	r3, r3, #10
 800af94:	431a      	orrs	r2, r3
 800af96:	6a3b      	ldr	r3, [r7, #32]
 800af98:	03db      	lsls	r3, r3, #15
 800af9a:	4313      	orrs	r3, r2
 800af9c:	697a      	ldr	r2, [r7, #20]
 800af9e:	4313      	orrs	r3, r2
 800afa0:	627b      	str	r3, [r7, #36]	; 0x24
 800afa2:	e016      	b.n	800afd2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800afa4:	6a3b      	ldr	r3, [r7, #32]
 800afa6:	0f1b      	lsrs	r3, r3, #28
 800afa8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800afaa:	69fb      	ldr	r3, [r7, #28]
 800afac:	0d1b      	lsrs	r3, r3, #20
 800afae:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800afb0:	69bb      	ldr	r3, [r7, #24]
 800afb2:	0b1b      	lsrs	r3, r3, #12
 800afb4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	091b      	lsrs	r3, r3, #4
 800afba:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800afbc:	69bb      	ldr	r3, [r7, #24]
 800afbe:	011a      	lsls	r2, r3, #4
 800afc0:	69fb      	ldr	r3, [r7, #28]
 800afc2:	021b      	lsls	r3, r3, #8
 800afc4:	431a      	orrs	r2, r3
 800afc6:	6a3b      	ldr	r3, [r7, #32]
 800afc8:	031b      	lsls	r3, r3, #12
 800afca:	4313      	orrs	r3, r2
 800afcc:	697a      	ldr	r2, [r7, #20]
 800afce:	4313      	orrs	r3, r2
 800afd0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afd8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800afda:	e00d      	b.n	800aff8 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800afe4:	d104      	bne.n	800aff0 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	68ba      	ldr	r2, [r7, #8]
 800afec:	615a      	str	r2, [r3, #20]
}
 800afee:	e003      	b.n	800aff8 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	68ba      	ldr	r2, [r7, #8]
 800aff6:	60da      	str	r2, [r3, #12]
}
 800aff8:	bf00      	nop
 800affa:	372c      	adds	r7, #44	; 0x2c
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800b004:	b480      	push	{r7}
 800b006:	b087      	sub	sp, #28
 800b008:	af00      	add	r7, sp, #0
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	460b      	mov	r3, r1
 800b00e:	607a      	str	r2, [r7, #4]
 800b010:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b012:	2300      	movs	r3, #0
 800b014:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d101      	bne.n	800b020 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800b01c:	2301      	movs	r3, #1
 800b01e:	e00a      	b.n	800b036 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 800b020:	7afb      	ldrb	r3, [r7, #11]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d103      	bne.n	800b02e <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	605a      	str	r2, [r3, #4]
      break;
 800b02c:	e002      	b.n	800b034 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800b02e:	2301      	movs	r3, #1
 800b030:	75fb      	strb	r3, [r7, #23]
      break;
 800b032:	bf00      	nop
  }

  return status;
 800b034:	7dfb      	ldrb	r3, [r7, #23]
}
 800b036:	4618      	mov	r0, r3
 800b038:	371c      	adds	r7, #28
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr

0800b042 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800b042:	b480      	push	{r7}
 800b044:	b083      	sub	sp, #12
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
 800b04a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d101      	bne.n	800b056 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800b052:	2301      	movs	r3, #1
 800b054:	e003      	b.n	800b05e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	683a      	ldr	r2, [r7, #0]
 800b05a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800b05c:	2300      	movs	r3, #0
  }
}
 800b05e:	4618      	mov	r0, r3
 800b060:	370c      	adds	r7, #12
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr
	...

0800b06c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b089      	sub	sp, #36	; 0x24
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b076:	2300      	movs	r3, #0
 800b078:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b07a:	4b89      	ldr	r3, [pc, #548]	; (800b2a0 <HAL_GPIO_Init+0x234>)
 800b07c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b07e:	e194      	b.n	800b3aa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	681a      	ldr	r2, [r3, #0]
 800b084:	2101      	movs	r1, #1
 800b086:	69fb      	ldr	r3, [r7, #28]
 800b088:	fa01 f303 	lsl.w	r3, r1, r3
 800b08c:	4013      	ands	r3, r2
 800b08e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	2b00      	cmp	r3, #0
 800b094:	f000 8186 	beq.w	800b3a4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	f003 0303 	and.w	r3, r3, #3
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d005      	beq.n	800b0b0 <HAL_GPIO_Init+0x44>
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	f003 0303 	and.w	r3, r3, #3
 800b0ac:	2b02      	cmp	r3, #2
 800b0ae:	d130      	bne.n	800b112 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	689b      	ldr	r3, [r3, #8]
 800b0b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	005b      	lsls	r3, r3, #1
 800b0ba:	2203      	movs	r2, #3
 800b0bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b0c0:	43db      	mvns	r3, r3
 800b0c2:	69ba      	ldr	r2, [r7, #24]
 800b0c4:	4013      	ands	r3, r2
 800b0c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	68da      	ldr	r2, [r3, #12]
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	005b      	lsls	r3, r3, #1
 800b0d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b0d4:	69ba      	ldr	r2, [r7, #24]
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	69ba      	ldr	r2, [r7, #24]
 800b0de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	69fb      	ldr	r3, [r7, #28]
 800b0ea:	fa02 f303 	lsl.w	r3, r2, r3
 800b0ee:	43db      	mvns	r3, r3
 800b0f0:	69ba      	ldr	r2, [r7, #24]
 800b0f2:	4013      	ands	r3, r2
 800b0f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	091b      	lsrs	r3, r3, #4
 800b0fc:	f003 0201 	and.w	r2, r3, #1
 800b100:	69fb      	ldr	r3, [r7, #28]
 800b102:	fa02 f303 	lsl.w	r3, r2, r3
 800b106:	69ba      	ldr	r2, [r7, #24]
 800b108:	4313      	orrs	r3, r2
 800b10a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	69ba      	ldr	r2, [r7, #24]
 800b110:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	f003 0303 	and.w	r3, r3, #3
 800b11a:	2b03      	cmp	r3, #3
 800b11c:	d017      	beq.n	800b14e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	68db      	ldr	r3, [r3, #12]
 800b122:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b124:	69fb      	ldr	r3, [r7, #28]
 800b126:	005b      	lsls	r3, r3, #1
 800b128:	2203      	movs	r2, #3
 800b12a:	fa02 f303 	lsl.w	r3, r2, r3
 800b12e:	43db      	mvns	r3, r3
 800b130:	69ba      	ldr	r2, [r7, #24]
 800b132:	4013      	ands	r3, r2
 800b134:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	689a      	ldr	r2, [r3, #8]
 800b13a:	69fb      	ldr	r3, [r7, #28]
 800b13c:	005b      	lsls	r3, r3, #1
 800b13e:	fa02 f303 	lsl.w	r3, r2, r3
 800b142:	69ba      	ldr	r2, [r7, #24]
 800b144:	4313      	orrs	r3, r2
 800b146:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	69ba      	ldr	r2, [r7, #24]
 800b14c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	f003 0303 	and.w	r3, r3, #3
 800b156:	2b02      	cmp	r3, #2
 800b158:	d123      	bne.n	800b1a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b15a:	69fb      	ldr	r3, [r7, #28]
 800b15c:	08da      	lsrs	r2, r3, #3
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	3208      	adds	r2, #8
 800b162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b166:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b168:	69fb      	ldr	r3, [r7, #28]
 800b16a:	f003 0307 	and.w	r3, r3, #7
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	220f      	movs	r2, #15
 800b172:	fa02 f303 	lsl.w	r3, r2, r3
 800b176:	43db      	mvns	r3, r3
 800b178:	69ba      	ldr	r2, [r7, #24]
 800b17a:	4013      	ands	r3, r2
 800b17c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	691a      	ldr	r2, [r3, #16]
 800b182:	69fb      	ldr	r3, [r7, #28]
 800b184:	f003 0307 	and.w	r3, r3, #7
 800b188:	009b      	lsls	r3, r3, #2
 800b18a:	fa02 f303 	lsl.w	r3, r2, r3
 800b18e:	69ba      	ldr	r2, [r7, #24]
 800b190:	4313      	orrs	r3, r2
 800b192:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b194:	69fb      	ldr	r3, [r7, #28]
 800b196:	08da      	lsrs	r2, r3, #3
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	3208      	adds	r2, #8
 800b19c:	69b9      	ldr	r1, [r7, #24]
 800b19e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	005b      	lsls	r3, r3, #1
 800b1ac:	2203      	movs	r2, #3
 800b1ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b1b2:	43db      	mvns	r3, r3
 800b1b4:	69ba      	ldr	r2, [r7, #24]
 800b1b6:	4013      	ands	r3, r2
 800b1b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	f003 0203 	and.w	r2, r3, #3
 800b1c2:	69fb      	ldr	r3, [r7, #28]
 800b1c4:	005b      	lsls	r3, r3, #1
 800b1c6:	fa02 f303 	lsl.w	r3, r2, r3
 800b1ca:	69ba      	ldr	r2, [r7, #24]
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	69ba      	ldr	r2, [r7, #24]
 800b1d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	f000 80e0 	beq.w	800b3a4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b1e4:	4b2f      	ldr	r3, [pc, #188]	; (800b2a4 <HAL_GPIO_Init+0x238>)
 800b1e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b1ea:	4a2e      	ldr	r2, [pc, #184]	; (800b2a4 <HAL_GPIO_Init+0x238>)
 800b1ec:	f043 0302 	orr.w	r3, r3, #2
 800b1f0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800b1f4:	4b2b      	ldr	r3, [pc, #172]	; (800b2a4 <HAL_GPIO_Init+0x238>)
 800b1f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b1fa:	f003 0302 	and.w	r3, r3, #2
 800b1fe:	60fb      	str	r3, [r7, #12]
 800b200:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b202:	4a29      	ldr	r2, [pc, #164]	; (800b2a8 <HAL_GPIO_Init+0x23c>)
 800b204:	69fb      	ldr	r3, [r7, #28]
 800b206:	089b      	lsrs	r3, r3, #2
 800b208:	3302      	adds	r3, #2
 800b20a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b20e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b210:	69fb      	ldr	r3, [r7, #28]
 800b212:	f003 0303 	and.w	r3, r3, #3
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	220f      	movs	r2, #15
 800b21a:	fa02 f303 	lsl.w	r3, r2, r3
 800b21e:	43db      	mvns	r3, r3
 800b220:	69ba      	ldr	r2, [r7, #24]
 800b222:	4013      	ands	r3, r2
 800b224:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	4a20      	ldr	r2, [pc, #128]	; (800b2ac <HAL_GPIO_Init+0x240>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d052      	beq.n	800b2d4 <HAL_GPIO_Init+0x268>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	4a1f      	ldr	r2, [pc, #124]	; (800b2b0 <HAL_GPIO_Init+0x244>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d031      	beq.n	800b29a <HAL_GPIO_Init+0x22e>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	4a1e      	ldr	r2, [pc, #120]	; (800b2b4 <HAL_GPIO_Init+0x248>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d02b      	beq.n	800b296 <HAL_GPIO_Init+0x22a>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	4a1d      	ldr	r2, [pc, #116]	; (800b2b8 <HAL_GPIO_Init+0x24c>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d025      	beq.n	800b292 <HAL_GPIO_Init+0x226>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	4a1c      	ldr	r2, [pc, #112]	; (800b2bc <HAL_GPIO_Init+0x250>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d01f      	beq.n	800b28e <HAL_GPIO_Init+0x222>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	4a1b      	ldr	r2, [pc, #108]	; (800b2c0 <HAL_GPIO_Init+0x254>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d019      	beq.n	800b28a <HAL_GPIO_Init+0x21e>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	4a1a      	ldr	r2, [pc, #104]	; (800b2c4 <HAL_GPIO_Init+0x258>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d013      	beq.n	800b286 <HAL_GPIO_Init+0x21a>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	4a19      	ldr	r2, [pc, #100]	; (800b2c8 <HAL_GPIO_Init+0x25c>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d00d      	beq.n	800b282 <HAL_GPIO_Init+0x216>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	4a18      	ldr	r2, [pc, #96]	; (800b2cc <HAL_GPIO_Init+0x260>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d007      	beq.n	800b27e <HAL_GPIO_Init+0x212>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	4a17      	ldr	r2, [pc, #92]	; (800b2d0 <HAL_GPIO_Init+0x264>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d101      	bne.n	800b27a <HAL_GPIO_Init+0x20e>
 800b276:	2309      	movs	r3, #9
 800b278:	e02d      	b.n	800b2d6 <HAL_GPIO_Init+0x26a>
 800b27a:	230a      	movs	r3, #10
 800b27c:	e02b      	b.n	800b2d6 <HAL_GPIO_Init+0x26a>
 800b27e:	2308      	movs	r3, #8
 800b280:	e029      	b.n	800b2d6 <HAL_GPIO_Init+0x26a>
 800b282:	2307      	movs	r3, #7
 800b284:	e027      	b.n	800b2d6 <HAL_GPIO_Init+0x26a>
 800b286:	2306      	movs	r3, #6
 800b288:	e025      	b.n	800b2d6 <HAL_GPIO_Init+0x26a>
 800b28a:	2305      	movs	r3, #5
 800b28c:	e023      	b.n	800b2d6 <HAL_GPIO_Init+0x26a>
 800b28e:	2304      	movs	r3, #4
 800b290:	e021      	b.n	800b2d6 <HAL_GPIO_Init+0x26a>
 800b292:	2303      	movs	r3, #3
 800b294:	e01f      	b.n	800b2d6 <HAL_GPIO_Init+0x26a>
 800b296:	2302      	movs	r3, #2
 800b298:	e01d      	b.n	800b2d6 <HAL_GPIO_Init+0x26a>
 800b29a:	2301      	movs	r3, #1
 800b29c:	e01b      	b.n	800b2d6 <HAL_GPIO_Init+0x26a>
 800b29e:	bf00      	nop
 800b2a0:	58000080 	.word	0x58000080
 800b2a4:	58024400 	.word	0x58024400
 800b2a8:	58000400 	.word	0x58000400
 800b2ac:	58020000 	.word	0x58020000
 800b2b0:	58020400 	.word	0x58020400
 800b2b4:	58020800 	.word	0x58020800
 800b2b8:	58020c00 	.word	0x58020c00
 800b2bc:	58021000 	.word	0x58021000
 800b2c0:	58021400 	.word	0x58021400
 800b2c4:	58021800 	.word	0x58021800
 800b2c8:	58021c00 	.word	0x58021c00
 800b2cc:	58022000 	.word	0x58022000
 800b2d0:	58022400 	.word	0x58022400
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	69fa      	ldr	r2, [r7, #28]
 800b2d8:	f002 0203 	and.w	r2, r2, #3
 800b2dc:	0092      	lsls	r2, r2, #2
 800b2de:	4093      	lsls	r3, r2
 800b2e0:	69ba      	ldr	r2, [r7, #24]
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b2e6:	4938      	ldr	r1, [pc, #224]	; (800b3c8 <HAL_GPIO_Init+0x35c>)
 800b2e8:	69fb      	ldr	r3, [r7, #28]
 800b2ea:	089b      	lsrs	r3, r3, #2
 800b2ec:	3302      	adds	r3, #2
 800b2ee:	69ba      	ldr	r2, [r7, #24]
 800b2f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b2f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	43db      	mvns	r3, r3
 800b300:	69ba      	ldr	r2, [r7, #24]
 800b302:	4013      	ands	r3, r2
 800b304:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d003      	beq.n	800b31a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800b312:	69ba      	ldr	r2, [r7, #24]
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	4313      	orrs	r3, r2
 800b318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b31a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b31e:	69bb      	ldr	r3, [r7, #24]
 800b320:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b326:	685b      	ldr	r3, [r3, #4]
 800b328:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	43db      	mvns	r3, r3
 800b32e:	69ba      	ldr	r2, [r7, #24]
 800b330:	4013      	ands	r3, r2
 800b332:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d003      	beq.n	800b348 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b340:	69ba      	ldr	r2, [r7, #24]
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	4313      	orrs	r3, r2
 800b346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b348:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b34c:	69bb      	ldr	r3, [r7, #24]
 800b34e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	43db      	mvns	r3, r3
 800b35a:	69ba      	ldr	r2, [r7, #24]
 800b35c:	4013      	ands	r3, r2
 800b35e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d003      	beq.n	800b374 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800b36c:	69ba      	ldr	r2, [r7, #24]
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	4313      	orrs	r3, r2
 800b372:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	69ba      	ldr	r2, [r7, #24]
 800b378:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	43db      	mvns	r3, r3
 800b384:	69ba      	ldr	r2, [r7, #24]
 800b386:	4013      	ands	r3, r2
 800b388:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b392:	2b00      	cmp	r3, #0
 800b394:	d003      	beq.n	800b39e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800b396:	69ba      	ldr	r2, [r7, #24]
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	4313      	orrs	r3, r2
 800b39c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	69ba      	ldr	r2, [r7, #24]
 800b3a2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b3a4:	69fb      	ldr	r3, [r7, #28]
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	681a      	ldr	r2, [r3, #0]
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	fa22 f303 	lsr.w	r3, r2, r3
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	f47f ae63 	bne.w	800b080 <HAL_GPIO_Init+0x14>
  }
}
 800b3ba:	bf00      	nop
 800b3bc:	bf00      	nop
 800b3be:	3724      	adds	r7, #36	; 0x24
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr
 800b3c8:	58000400 	.word	0x58000400

0800b3cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b087      	sub	sp, #28
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b3da:	4b75      	ldr	r3, [pc, #468]	; (800b5b0 <HAL_GPIO_DeInit+0x1e4>)
 800b3dc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800b3de:	e0d9      	b.n	800b594 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	fa02 f303 	lsl.w	r3, r2, r3
 800b3e8:	683a      	ldr	r2, [r7, #0]
 800b3ea:	4013      	ands	r3, r2
 800b3ec:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	f000 80cc 	beq.w	800b58e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800b3f6:	4a6f      	ldr	r2, [pc, #444]	; (800b5b4 <HAL_GPIO_DeInit+0x1e8>)
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	089b      	lsrs	r3, r3, #2
 800b3fc:	3302      	adds	r3, #2
 800b3fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b402:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	f003 0303 	and.w	r3, r3, #3
 800b40a:	009b      	lsls	r3, r3, #2
 800b40c:	220f      	movs	r2, #15
 800b40e:	fa02 f303 	lsl.w	r3, r2, r3
 800b412:	68ba      	ldr	r2, [r7, #8]
 800b414:	4013      	ands	r3, r2
 800b416:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	4a67      	ldr	r2, [pc, #412]	; (800b5b8 <HAL_GPIO_DeInit+0x1ec>)
 800b41c:	4293      	cmp	r3, r2
 800b41e:	d037      	beq.n	800b490 <HAL_GPIO_DeInit+0xc4>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	4a66      	ldr	r2, [pc, #408]	; (800b5bc <HAL_GPIO_DeInit+0x1f0>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d031      	beq.n	800b48c <HAL_GPIO_DeInit+0xc0>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	4a65      	ldr	r2, [pc, #404]	; (800b5c0 <HAL_GPIO_DeInit+0x1f4>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d02b      	beq.n	800b488 <HAL_GPIO_DeInit+0xbc>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	4a64      	ldr	r2, [pc, #400]	; (800b5c4 <HAL_GPIO_DeInit+0x1f8>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d025      	beq.n	800b484 <HAL_GPIO_DeInit+0xb8>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	4a63      	ldr	r2, [pc, #396]	; (800b5c8 <HAL_GPIO_DeInit+0x1fc>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d01f      	beq.n	800b480 <HAL_GPIO_DeInit+0xb4>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	4a62      	ldr	r2, [pc, #392]	; (800b5cc <HAL_GPIO_DeInit+0x200>)
 800b444:	4293      	cmp	r3, r2
 800b446:	d019      	beq.n	800b47c <HAL_GPIO_DeInit+0xb0>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	4a61      	ldr	r2, [pc, #388]	; (800b5d0 <HAL_GPIO_DeInit+0x204>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d013      	beq.n	800b478 <HAL_GPIO_DeInit+0xac>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	4a60      	ldr	r2, [pc, #384]	; (800b5d4 <HAL_GPIO_DeInit+0x208>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d00d      	beq.n	800b474 <HAL_GPIO_DeInit+0xa8>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	4a5f      	ldr	r2, [pc, #380]	; (800b5d8 <HAL_GPIO_DeInit+0x20c>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d007      	beq.n	800b470 <HAL_GPIO_DeInit+0xa4>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	4a5e      	ldr	r2, [pc, #376]	; (800b5dc <HAL_GPIO_DeInit+0x210>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d101      	bne.n	800b46c <HAL_GPIO_DeInit+0xa0>
 800b468:	2309      	movs	r3, #9
 800b46a:	e012      	b.n	800b492 <HAL_GPIO_DeInit+0xc6>
 800b46c:	230a      	movs	r3, #10
 800b46e:	e010      	b.n	800b492 <HAL_GPIO_DeInit+0xc6>
 800b470:	2308      	movs	r3, #8
 800b472:	e00e      	b.n	800b492 <HAL_GPIO_DeInit+0xc6>
 800b474:	2307      	movs	r3, #7
 800b476:	e00c      	b.n	800b492 <HAL_GPIO_DeInit+0xc6>
 800b478:	2306      	movs	r3, #6
 800b47a:	e00a      	b.n	800b492 <HAL_GPIO_DeInit+0xc6>
 800b47c:	2305      	movs	r3, #5
 800b47e:	e008      	b.n	800b492 <HAL_GPIO_DeInit+0xc6>
 800b480:	2304      	movs	r3, #4
 800b482:	e006      	b.n	800b492 <HAL_GPIO_DeInit+0xc6>
 800b484:	2303      	movs	r3, #3
 800b486:	e004      	b.n	800b492 <HAL_GPIO_DeInit+0xc6>
 800b488:	2302      	movs	r3, #2
 800b48a:	e002      	b.n	800b492 <HAL_GPIO_DeInit+0xc6>
 800b48c:	2301      	movs	r3, #1
 800b48e:	e000      	b.n	800b492 <HAL_GPIO_DeInit+0xc6>
 800b490:	2300      	movs	r3, #0
 800b492:	697a      	ldr	r2, [r7, #20]
 800b494:	f002 0203 	and.w	r2, r2, #3
 800b498:	0092      	lsls	r2, r2, #2
 800b49a:	4093      	lsls	r3, r2
 800b49c:	68ba      	ldr	r2, [r7, #8]
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	d136      	bne.n	800b510 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	43db      	mvns	r3, r3
 800b4aa:	401a      	ands	r2, r3
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	685a      	ldr	r2, [r3, #4]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	43db      	mvns	r3, r3
 800b4b8:	401a      	ands	r2, r3
 800b4ba:	693b      	ldr	r3, [r7, #16]
 800b4bc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800b4be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b4c2:	685a      	ldr	r2, [r3, #4]
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	43db      	mvns	r3, r3
 800b4c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b4cc:	4013      	ands	r3, r2
 800b4ce:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800b4d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b4d4:	681a      	ldr	r2, [r3, #0]
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	43db      	mvns	r3, r3
 800b4da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b4de:	4013      	ands	r3, r2
 800b4e0:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	f003 0303 	and.w	r3, r3, #3
 800b4e8:	009b      	lsls	r3, r3, #2
 800b4ea:	220f      	movs	r2, #15
 800b4ec:	fa02 f303 	lsl.w	r3, r2, r3
 800b4f0:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800b4f2:	4a30      	ldr	r2, [pc, #192]	; (800b5b4 <HAL_GPIO_DeInit+0x1e8>)
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	089b      	lsrs	r3, r3, #2
 800b4f8:	3302      	adds	r3, #2
 800b4fa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	43da      	mvns	r2, r3
 800b502:	482c      	ldr	r0, [pc, #176]	; (800b5b4 <HAL_GPIO_DeInit+0x1e8>)
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	089b      	lsrs	r3, r3, #2
 800b508:	400a      	ands	r2, r1
 800b50a:	3302      	adds	r3, #2
 800b50c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681a      	ldr	r2, [r3, #0]
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	005b      	lsls	r3, r3, #1
 800b518:	2103      	movs	r1, #3
 800b51a:	fa01 f303 	lsl.w	r3, r1, r3
 800b51e:	431a      	orrs	r2, r3
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800b524:	697b      	ldr	r3, [r7, #20]
 800b526:	08da      	lsrs	r2, r3, #3
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	3208      	adds	r2, #8
 800b52c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	f003 0307 	and.w	r3, r3, #7
 800b536:	009b      	lsls	r3, r3, #2
 800b538:	220f      	movs	r2, #15
 800b53a:	fa02 f303 	lsl.w	r3, r2, r3
 800b53e:	43db      	mvns	r3, r3
 800b540:	697a      	ldr	r2, [r7, #20]
 800b542:	08d2      	lsrs	r2, r2, #3
 800b544:	4019      	ands	r1, r3
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	3208      	adds	r2, #8
 800b54a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	68da      	ldr	r2, [r3, #12]
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	005b      	lsls	r3, r3, #1
 800b556:	2103      	movs	r1, #3
 800b558:	fa01 f303 	lsl.w	r3, r1, r3
 800b55c:	43db      	mvns	r3, r3
 800b55e:	401a      	ands	r2, r3
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	685a      	ldr	r2, [r3, #4]
 800b568:	2101      	movs	r1, #1
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	fa01 f303 	lsl.w	r3, r1, r3
 800b570:	43db      	mvns	r3, r3
 800b572:	401a      	ands	r2, r3
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	689a      	ldr	r2, [r3, #8]
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	005b      	lsls	r3, r3, #1
 800b580:	2103      	movs	r1, #3
 800b582:	fa01 f303 	lsl.w	r3, r1, r3
 800b586:	43db      	mvns	r3, r3
 800b588:	401a      	ands	r2, r3
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	3301      	adds	r3, #1
 800b592:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800b594:	683a      	ldr	r2, [r7, #0]
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	fa22 f303 	lsr.w	r3, r2, r3
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	f47f af1f 	bne.w	800b3e0 <HAL_GPIO_DeInit+0x14>
  }
}
 800b5a2:	bf00      	nop
 800b5a4:	bf00      	nop
 800b5a6:	371c      	adds	r7, #28
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr
 800b5b0:	58000080 	.word	0x58000080
 800b5b4:	58000400 	.word	0x58000400
 800b5b8:	58020000 	.word	0x58020000
 800b5bc:	58020400 	.word	0x58020400
 800b5c0:	58020800 	.word	0x58020800
 800b5c4:	58020c00 	.word	0x58020c00
 800b5c8:	58021000 	.word	0x58021000
 800b5cc:	58021400 	.word	0x58021400
 800b5d0:	58021800 	.word	0x58021800
 800b5d4:	58021c00 	.word	0x58021c00
 800b5d8:	58022000 	.word	0x58022000
 800b5dc:	58022400 	.word	0x58022400

0800b5e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b085      	sub	sp, #20
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	460b      	mov	r3, r1
 800b5ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	691a      	ldr	r2, [r3, #16]
 800b5f0:	887b      	ldrh	r3, [r7, #2]
 800b5f2:	4013      	ands	r3, r2
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d002      	beq.n	800b5fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	73fb      	strb	r3, [r7, #15]
 800b5fc:	e001      	b.n	800b602 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b5fe:	2300      	movs	r3, #0
 800b600:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b602:	7bfb      	ldrb	r3, [r7, #15]
}
 800b604:	4618      	mov	r0, r3
 800b606:	3714      	adds	r7, #20
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	460b      	mov	r3, r1
 800b61a:	807b      	strh	r3, [r7, #2]
 800b61c:	4613      	mov	r3, r2
 800b61e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b620:	787b      	ldrb	r3, [r7, #1]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d003      	beq.n	800b62e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b626:	887a      	ldrh	r2, [r7, #2]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b62c:	e003      	b.n	800b636 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b62e:	887b      	ldrh	r3, [r7, #2]
 800b630:	041a      	lsls	r2, r3, #16
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	619a      	str	r2, [r3, #24]
}
 800b636:	bf00      	nop
 800b638:	370c      	adds	r7, #12
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr
	...

0800b644 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d101      	bne.n	800b656 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b652:	2301      	movs	r3, #1
 800b654:	e07f      	b.n	800b756 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b65c:	b2db      	uxtb	r3, r3
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d106      	bne.n	800b670 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2200      	movs	r2, #0
 800b666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 f8a9 	bl	800b7c2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2224      	movs	r2, #36	; 0x24
 800b674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f022 0201 	bic.w	r2, r2, #1
 800b686:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	685a      	ldr	r2, [r3, #4]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b694:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	689a      	ldr	r2, [r3, #8]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b6a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d107      	bne.n	800b6be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	689a      	ldr	r2, [r3, #8]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b6ba:	609a      	str	r2, [r3, #8]
 800b6bc:	e006      	b.n	800b6cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	689a      	ldr	r2, [r3, #8]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b6ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	68db      	ldr	r3, [r3, #12]
 800b6d0:	2b02      	cmp	r3, #2
 800b6d2:	d104      	bne.n	800b6de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b6dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	6859      	ldr	r1, [r3, #4]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681a      	ldr	r2, [r3, #0]
 800b6e8:	4b1d      	ldr	r3, [pc, #116]	; (800b760 <HAL_I2C_Init+0x11c>)
 800b6ea:	430b      	orrs	r3, r1
 800b6ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	68da      	ldr	r2, [r3, #12]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b6fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	691a      	ldr	r2, [r3, #16]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	695b      	ldr	r3, [r3, #20]
 800b706:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	699b      	ldr	r3, [r3, #24]
 800b70e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	430a      	orrs	r2, r1
 800b716:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	69d9      	ldr	r1, [r3, #28]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6a1a      	ldr	r2, [r3, #32]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	430a      	orrs	r2, r1
 800b726:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f042 0201 	orr.w	r2, r2, #1
 800b736:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2220      	movs	r2, #32
 800b742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2200      	movs	r2, #0
 800b74a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2200      	movs	r2, #0
 800b750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b754:	2300      	movs	r3, #0
}
 800b756:	4618      	mov	r0, r3
 800b758:	3708      	adds	r7, #8
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	02008000 	.word	0x02008000

0800b764 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b082      	sub	sp, #8
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d101      	bne.n	800b776 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800b772:	2301      	movs	r3, #1
 800b774:	e021      	b.n	800b7ba <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2224      	movs	r2, #36	; 0x24
 800b77a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f022 0201 	bic.w	r2, r2, #1
 800b78c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 f821 	bl	800b7d6 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2200      	movs	r2, #0
 800b79e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b7b8:	2300      	movs	r3, #0
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3708      	adds	r7, #8
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800b7c2:	b480      	push	{r7}
 800b7c4:	b083      	sub	sp, #12
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800b7ca:	bf00      	nop
 800b7cc:	370c      	adds	r7, #12
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr

0800b7d6 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800b7d6:	b480      	push	{r7}
 800b7d8:	b083      	sub	sp, #12
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800b7de:	bf00      	nop
 800b7e0:	370c      	adds	r7, #12
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr
	...

0800b7ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b088      	sub	sp, #32
 800b7f0:	af02      	add	r7, sp, #8
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	4608      	mov	r0, r1
 800b7f6:	4611      	mov	r1, r2
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	817b      	strh	r3, [r7, #10]
 800b7fe:	460b      	mov	r3, r1
 800b800:	813b      	strh	r3, [r7, #8]
 800b802:	4613      	mov	r3, r2
 800b804:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b80c:	b2db      	uxtb	r3, r3
 800b80e:	2b20      	cmp	r3, #32
 800b810:	f040 80f9 	bne.w	800ba06 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b814:	6a3b      	ldr	r3, [r7, #32]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d002      	beq.n	800b820 <HAL_I2C_Mem_Write+0x34>
 800b81a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d105      	bne.n	800b82c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b826:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b828:	2301      	movs	r3, #1
 800b82a:	e0ed      	b.n	800ba08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b832:	2b01      	cmp	r3, #1
 800b834:	d101      	bne.n	800b83a <HAL_I2C_Mem_Write+0x4e>
 800b836:	2302      	movs	r3, #2
 800b838:	e0e6      	b.n	800ba08 <HAL_I2C_Mem_Write+0x21c>
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2201      	movs	r2, #1
 800b83e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b842:	f7fc f947 	bl	8007ad4 <HAL_GetTick>
 800b846:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	9300      	str	r3, [sp, #0]
 800b84c:	2319      	movs	r3, #25
 800b84e:	2201      	movs	r2, #1
 800b850:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b854:	68f8      	ldr	r0, [r7, #12]
 800b856:	f000 fadd 	bl	800be14 <I2C_WaitOnFlagUntilTimeout>
 800b85a:	4603      	mov	r3, r0
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d001      	beq.n	800b864 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800b860:	2301      	movs	r3, #1
 800b862:	e0d1      	b.n	800ba08 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2221      	movs	r2, #33	; 0x21
 800b868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2240      	movs	r2, #64	; 0x40
 800b870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2200      	movs	r2, #0
 800b878:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	6a3a      	ldr	r2, [r7, #32]
 800b87e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b884:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	2200      	movs	r2, #0
 800b88a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b88c:	88f8      	ldrh	r0, [r7, #6]
 800b88e:	893a      	ldrh	r2, [r7, #8]
 800b890:	8979      	ldrh	r1, [r7, #10]
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	9301      	str	r3, [sp, #4]
 800b896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b898:	9300      	str	r3, [sp, #0]
 800b89a:	4603      	mov	r3, r0
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	f000 f9ed 	bl	800bc7c <I2C_RequestMemoryWrite>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d005      	beq.n	800b8b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	e0a9      	b.n	800ba08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	2bff      	cmp	r3, #255	; 0xff
 800b8bc:	d90e      	bls.n	800b8dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	22ff      	movs	r2, #255	; 0xff
 800b8c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8c8:	b2da      	uxtb	r2, r3
 800b8ca:	8979      	ldrh	r1, [r7, #10]
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	9300      	str	r3, [sp, #0]
 800b8d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b8d4:	68f8      	ldr	r0, [r7, #12]
 800b8d6:	f000 fc57 	bl	800c188 <I2C_TransferConfig>
 800b8da:	e00f      	b.n	800b8fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8e0:	b29a      	uxth	r2, r3
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8ea:	b2da      	uxtb	r2, r3
 800b8ec:	8979      	ldrh	r1, [r7, #10]
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	9300      	str	r3, [sp, #0]
 800b8f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b8f6:	68f8      	ldr	r0, [r7, #12]
 800b8f8:	f000 fc46 	bl	800c188 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b8fc:	697a      	ldr	r2, [r7, #20]
 800b8fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b900:	68f8      	ldr	r0, [r7, #12]
 800b902:	f000 fad6 	bl	800beb2 <I2C_WaitOnTXISFlagUntilTimeout>
 800b906:	4603      	mov	r3, r0
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d001      	beq.n	800b910 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800b90c:	2301      	movs	r3, #1
 800b90e:	e07b      	b.n	800ba08 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b914:	781a      	ldrb	r2, [r3, #0]
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b920:	1c5a      	adds	r2, r3, #1
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b92a:	b29b      	uxth	r3, r3
 800b92c:	3b01      	subs	r3, #1
 800b92e:	b29a      	uxth	r2, r3
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b938:	3b01      	subs	r3, #1
 800b93a:	b29a      	uxth	r2, r3
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b944:	b29b      	uxth	r3, r3
 800b946:	2b00      	cmp	r3, #0
 800b948:	d034      	beq.n	800b9b4 <HAL_I2C_Mem_Write+0x1c8>
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d130      	bne.n	800b9b4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	9300      	str	r3, [sp, #0]
 800b956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b958:	2200      	movs	r2, #0
 800b95a:	2180      	movs	r1, #128	; 0x80
 800b95c:	68f8      	ldr	r0, [r7, #12]
 800b95e:	f000 fa59 	bl	800be14 <I2C_WaitOnFlagUntilTimeout>
 800b962:	4603      	mov	r3, r0
 800b964:	2b00      	cmp	r3, #0
 800b966:	d001      	beq.n	800b96c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800b968:	2301      	movs	r3, #1
 800b96a:	e04d      	b.n	800ba08 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b970:	b29b      	uxth	r3, r3
 800b972:	2bff      	cmp	r3, #255	; 0xff
 800b974:	d90e      	bls.n	800b994 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	22ff      	movs	r2, #255	; 0xff
 800b97a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b980:	b2da      	uxtb	r2, r3
 800b982:	8979      	ldrh	r1, [r7, #10]
 800b984:	2300      	movs	r3, #0
 800b986:	9300      	str	r3, [sp, #0]
 800b988:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b98c:	68f8      	ldr	r0, [r7, #12]
 800b98e:	f000 fbfb 	bl	800c188 <I2C_TransferConfig>
 800b992:	e00f      	b.n	800b9b4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b998:	b29a      	uxth	r2, r3
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9a2:	b2da      	uxtb	r2, r3
 800b9a4:	8979      	ldrh	r1, [r7, #10]
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	9300      	str	r3, [sp, #0]
 800b9aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b9ae:	68f8      	ldr	r0, [r7, #12]
 800b9b0:	f000 fbea 	bl	800c188 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9b8:	b29b      	uxth	r3, r3
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d19e      	bne.n	800b8fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b9be:	697a      	ldr	r2, [r7, #20]
 800b9c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9c2:	68f8      	ldr	r0, [r7, #12]
 800b9c4:	f000 fabc 	bl	800bf40 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d001      	beq.n	800b9d2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	e01a      	b.n	800ba08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	2220      	movs	r2, #32
 800b9d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	6859      	ldr	r1, [r3, #4]
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681a      	ldr	r2, [r3, #0]
 800b9e4:	4b0a      	ldr	r3, [pc, #40]	; (800ba10 <HAL_I2C_Mem_Write+0x224>)
 800b9e6:	400b      	ands	r3, r1
 800b9e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2220      	movs	r2, #32
 800b9ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ba02:	2300      	movs	r3, #0
 800ba04:	e000      	b.n	800ba08 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800ba06:	2302      	movs	r3, #2
  }
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3718      	adds	r7, #24
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	fe00e800 	.word	0xfe00e800

0800ba14 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b088      	sub	sp, #32
 800ba18:	af02      	add	r7, sp, #8
 800ba1a:	60f8      	str	r0, [r7, #12]
 800ba1c:	4608      	mov	r0, r1
 800ba1e:	4611      	mov	r1, r2
 800ba20:	461a      	mov	r2, r3
 800ba22:	4603      	mov	r3, r0
 800ba24:	817b      	strh	r3, [r7, #10]
 800ba26:	460b      	mov	r3, r1
 800ba28:	813b      	strh	r3, [r7, #8]
 800ba2a:	4613      	mov	r3, r2
 800ba2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba34:	b2db      	uxtb	r3, r3
 800ba36:	2b20      	cmp	r3, #32
 800ba38:	f040 80fd 	bne.w	800bc36 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba3c:	6a3b      	ldr	r3, [r7, #32]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d002      	beq.n	800ba48 <HAL_I2C_Mem_Read+0x34>
 800ba42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d105      	bne.n	800ba54 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba4e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800ba50:	2301      	movs	r3, #1
 800ba52:	e0f1      	b.n	800bc38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d101      	bne.n	800ba62 <HAL_I2C_Mem_Read+0x4e>
 800ba5e:	2302      	movs	r3, #2
 800ba60:	e0ea      	b.n	800bc38 <HAL_I2C_Mem_Read+0x224>
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2201      	movs	r2, #1
 800ba66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ba6a:	f7fc f833 	bl	8007ad4 <HAL_GetTick>
 800ba6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	9300      	str	r3, [sp, #0]
 800ba74:	2319      	movs	r3, #25
 800ba76:	2201      	movs	r2, #1
 800ba78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ba7c:	68f8      	ldr	r0, [r7, #12]
 800ba7e:	f000 f9c9 	bl	800be14 <I2C_WaitOnFlagUntilTimeout>
 800ba82:	4603      	mov	r3, r0
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d001      	beq.n	800ba8c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	e0d5      	b.n	800bc38 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2222      	movs	r2, #34	; 0x22
 800ba90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2240      	movs	r2, #64	; 0x40
 800ba98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	6a3a      	ldr	r2, [r7, #32]
 800baa6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800baac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2200      	movs	r2, #0
 800bab2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bab4:	88f8      	ldrh	r0, [r7, #6]
 800bab6:	893a      	ldrh	r2, [r7, #8]
 800bab8:	8979      	ldrh	r1, [r7, #10]
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	9301      	str	r3, [sp, #4]
 800babe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac0:	9300      	str	r3, [sp, #0]
 800bac2:	4603      	mov	r3, r0
 800bac4:	68f8      	ldr	r0, [r7, #12]
 800bac6:	f000 f92d 	bl	800bd24 <I2C_RequestMemoryRead>
 800baca:	4603      	mov	r3, r0
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d005      	beq.n	800badc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	2200      	movs	r2, #0
 800bad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800bad8:	2301      	movs	r3, #1
 800bada:	e0ad      	b.n	800bc38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	2bff      	cmp	r3, #255	; 0xff
 800bae4:	d90e      	bls.n	800bb04 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	22ff      	movs	r2, #255	; 0xff
 800baea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800baf0:	b2da      	uxtb	r2, r3
 800baf2:	8979      	ldrh	r1, [r7, #10]
 800baf4:	4b52      	ldr	r3, [pc, #328]	; (800bc40 <HAL_I2C_Mem_Read+0x22c>)
 800baf6:	9300      	str	r3, [sp, #0]
 800baf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bafc:	68f8      	ldr	r0, [r7, #12]
 800bafe:	f000 fb43 	bl	800c188 <I2C_TransferConfig>
 800bb02:	e00f      	b.n	800bb24 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb08:	b29a      	uxth	r2, r3
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb12:	b2da      	uxtb	r2, r3
 800bb14:	8979      	ldrh	r1, [r7, #10]
 800bb16:	4b4a      	ldr	r3, [pc, #296]	; (800bc40 <HAL_I2C_Mem_Read+0x22c>)
 800bb18:	9300      	str	r3, [sp, #0]
 800bb1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bb1e:	68f8      	ldr	r0, [r7, #12]
 800bb20:	f000 fb32 	bl	800c188 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	9300      	str	r3, [sp, #0]
 800bb28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	2104      	movs	r1, #4
 800bb2e:	68f8      	ldr	r0, [r7, #12]
 800bb30:	f000 f970 	bl	800be14 <I2C_WaitOnFlagUntilTimeout>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d001      	beq.n	800bb3e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	e07c      	b.n	800bc38 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb48:	b2d2      	uxtb	r2, r2
 800bb4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb50:	1c5a      	adds	r2, r3, #1
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb5a:	3b01      	subs	r3, #1
 800bb5c:	b29a      	uxth	r2, r3
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb66:	b29b      	uxth	r3, r3
 800bb68:	3b01      	subs	r3, #1
 800bb6a:	b29a      	uxth	r2, r3
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d034      	beq.n	800bbe4 <HAL_I2C_Mem_Read+0x1d0>
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d130      	bne.n	800bbe4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	9300      	str	r3, [sp, #0]
 800bb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb88:	2200      	movs	r2, #0
 800bb8a:	2180      	movs	r1, #128	; 0x80
 800bb8c:	68f8      	ldr	r0, [r7, #12]
 800bb8e:	f000 f941 	bl	800be14 <I2C_WaitOnFlagUntilTimeout>
 800bb92:	4603      	mov	r3, r0
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d001      	beq.n	800bb9c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800bb98:	2301      	movs	r3, #1
 800bb9a:	e04d      	b.n	800bc38 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	2bff      	cmp	r3, #255	; 0xff
 800bba4:	d90e      	bls.n	800bbc4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	22ff      	movs	r2, #255	; 0xff
 800bbaa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbb0:	b2da      	uxtb	r2, r3
 800bbb2:	8979      	ldrh	r1, [r7, #10]
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	9300      	str	r3, [sp, #0]
 800bbb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bbbc:	68f8      	ldr	r0, [r7, #12]
 800bbbe:	f000 fae3 	bl	800c188 <I2C_TransferConfig>
 800bbc2:	e00f      	b.n	800bbe4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbc8:	b29a      	uxth	r2, r3
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbd2:	b2da      	uxtb	r2, r3
 800bbd4:	8979      	ldrh	r1, [r7, #10]
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	9300      	str	r3, [sp, #0]
 800bbda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bbde:	68f8      	ldr	r0, [r7, #12]
 800bbe0:	f000 fad2 	bl	800c188 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d19a      	bne.n	800bb24 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bbee:	697a      	ldr	r2, [r7, #20]
 800bbf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bbf2:	68f8      	ldr	r0, [r7, #12]
 800bbf4:	f000 f9a4 	bl	800bf40 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d001      	beq.n	800bc02 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800bbfe:	2301      	movs	r3, #1
 800bc00:	e01a      	b.n	800bc38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2220      	movs	r2, #32
 800bc08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	6859      	ldr	r1, [r3, #4]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	4b0b      	ldr	r3, [pc, #44]	; (800bc44 <HAL_I2C_Mem_Read+0x230>)
 800bc16:	400b      	ands	r3, r1
 800bc18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2220      	movs	r2, #32
 800bc1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2200      	movs	r2, #0
 800bc26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bc32:	2300      	movs	r3, #0
 800bc34:	e000      	b.n	800bc38 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800bc36:	2302      	movs	r3, #2
  }
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3718      	adds	r7, #24
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}
 800bc40:	80002400 	.word	0x80002400
 800bc44:	fe00e800 	.word	0xfe00e800

0800bc48 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b083      	sub	sp, #12
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc56:	b2db      	uxtb	r3, r3
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	370c      	adds	r7, #12
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr

0800bc64 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b083      	sub	sp, #12
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	370c      	adds	r7, #12
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b086      	sub	sp, #24
 800bc80:	af02      	add	r7, sp, #8
 800bc82:	60f8      	str	r0, [r7, #12]
 800bc84:	4608      	mov	r0, r1
 800bc86:	4611      	mov	r1, r2
 800bc88:	461a      	mov	r2, r3
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	817b      	strh	r3, [r7, #10]
 800bc8e:	460b      	mov	r3, r1
 800bc90:	813b      	strh	r3, [r7, #8]
 800bc92:	4613      	mov	r3, r2
 800bc94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bc96:	88fb      	ldrh	r3, [r7, #6]
 800bc98:	b2da      	uxtb	r2, r3
 800bc9a:	8979      	ldrh	r1, [r7, #10]
 800bc9c:	4b20      	ldr	r3, [pc, #128]	; (800bd20 <I2C_RequestMemoryWrite+0xa4>)
 800bc9e:	9300      	str	r3, [sp, #0]
 800bca0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bca4:	68f8      	ldr	r0, [r7, #12]
 800bca6:	f000 fa6f 	bl	800c188 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bcaa:	69fa      	ldr	r2, [r7, #28]
 800bcac:	69b9      	ldr	r1, [r7, #24]
 800bcae:	68f8      	ldr	r0, [r7, #12]
 800bcb0:	f000 f8ff 	bl	800beb2 <I2C_WaitOnTXISFlagUntilTimeout>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d001      	beq.n	800bcbe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800bcba:	2301      	movs	r3, #1
 800bcbc:	e02c      	b.n	800bd18 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bcbe:	88fb      	ldrh	r3, [r7, #6]
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	d105      	bne.n	800bcd0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bcc4:	893b      	ldrh	r3, [r7, #8]
 800bcc6:	b2da      	uxtb	r2, r3
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	629a      	str	r2, [r3, #40]	; 0x28
 800bcce:	e015      	b.n	800bcfc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bcd0:	893b      	ldrh	r3, [r7, #8]
 800bcd2:	0a1b      	lsrs	r3, r3, #8
 800bcd4:	b29b      	uxth	r3, r3
 800bcd6:	b2da      	uxtb	r2, r3
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bcde:	69fa      	ldr	r2, [r7, #28]
 800bce0:	69b9      	ldr	r1, [r7, #24]
 800bce2:	68f8      	ldr	r0, [r7, #12]
 800bce4:	f000 f8e5 	bl	800beb2 <I2C_WaitOnTXISFlagUntilTimeout>
 800bce8:	4603      	mov	r3, r0
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d001      	beq.n	800bcf2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800bcee:	2301      	movs	r3, #1
 800bcf0:	e012      	b.n	800bd18 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bcf2:	893b      	ldrh	r3, [r7, #8]
 800bcf4:	b2da      	uxtb	r2, r3
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800bcfc:	69fb      	ldr	r3, [r7, #28]
 800bcfe:	9300      	str	r3, [sp, #0]
 800bd00:	69bb      	ldr	r3, [r7, #24]
 800bd02:	2200      	movs	r2, #0
 800bd04:	2180      	movs	r1, #128	; 0x80
 800bd06:	68f8      	ldr	r0, [r7, #12]
 800bd08:	f000 f884 	bl	800be14 <I2C_WaitOnFlagUntilTimeout>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d001      	beq.n	800bd16 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800bd12:	2301      	movs	r3, #1
 800bd14:	e000      	b.n	800bd18 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800bd16:	2300      	movs	r3, #0
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3710      	adds	r7, #16
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}
 800bd20:	80002000 	.word	0x80002000

0800bd24 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b086      	sub	sp, #24
 800bd28:	af02      	add	r7, sp, #8
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	4608      	mov	r0, r1
 800bd2e:	4611      	mov	r1, r2
 800bd30:	461a      	mov	r2, r3
 800bd32:	4603      	mov	r3, r0
 800bd34:	817b      	strh	r3, [r7, #10]
 800bd36:	460b      	mov	r3, r1
 800bd38:	813b      	strh	r3, [r7, #8]
 800bd3a:	4613      	mov	r3, r2
 800bd3c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bd3e:	88fb      	ldrh	r3, [r7, #6]
 800bd40:	b2da      	uxtb	r2, r3
 800bd42:	8979      	ldrh	r1, [r7, #10]
 800bd44:	4b20      	ldr	r3, [pc, #128]	; (800bdc8 <I2C_RequestMemoryRead+0xa4>)
 800bd46:	9300      	str	r3, [sp, #0]
 800bd48:	2300      	movs	r3, #0
 800bd4a:	68f8      	ldr	r0, [r7, #12]
 800bd4c:	f000 fa1c 	bl	800c188 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd50:	69fa      	ldr	r2, [r7, #28]
 800bd52:	69b9      	ldr	r1, [r7, #24]
 800bd54:	68f8      	ldr	r0, [r7, #12]
 800bd56:	f000 f8ac 	bl	800beb2 <I2C_WaitOnTXISFlagUntilTimeout>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d001      	beq.n	800bd64 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800bd60:	2301      	movs	r3, #1
 800bd62:	e02c      	b.n	800bdbe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bd64:	88fb      	ldrh	r3, [r7, #6]
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d105      	bne.n	800bd76 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bd6a:	893b      	ldrh	r3, [r7, #8]
 800bd6c:	b2da      	uxtb	r2, r3
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	629a      	str	r2, [r3, #40]	; 0x28
 800bd74:	e015      	b.n	800bda2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bd76:	893b      	ldrh	r3, [r7, #8]
 800bd78:	0a1b      	lsrs	r3, r3, #8
 800bd7a:	b29b      	uxth	r3, r3
 800bd7c:	b2da      	uxtb	r2, r3
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd84:	69fa      	ldr	r2, [r7, #28]
 800bd86:	69b9      	ldr	r1, [r7, #24]
 800bd88:	68f8      	ldr	r0, [r7, #12]
 800bd8a:	f000 f892 	bl	800beb2 <I2C_WaitOnTXISFlagUntilTimeout>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d001      	beq.n	800bd98 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800bd94:	2301      	movs	r3, #1
 800bd96:	e012      	b.n	800bdbe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bd98:	893b      	ldrh	r3, [r7, #8]
 800bd9a:	b2da      	uxtb	r2, r3
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800bda2:	69fb      	ldr	r3, [r7, #28]
 800bda4:	9300      	str	r3, [sp, #0]
 800bda6:	69bb      	ldr	r3, [r7, #24]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	2140      	movs	r1, #64	; 0x40
 800bdac:	68f8      	ldr	r0, [r7, #12]
 800bdae:	f000 f831 	bl	800be14 <I2C_WaitOnFlagUntilTimeout>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d001      	beq.n	800bdbc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800bdb8:	2301      	movs	r3, #1
 800bdba:	e000      	b.n	800bdbe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800bdbc:	2300      	movs	r3, #0
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3710      	adds	r7, #16
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	80002000 	.word	0x80002000

0800bdcc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b083      	sub	sp, #12
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	699b      	ldr	r3, [r3, #24]
 800bdda:	f003 0302 	and.w	r3, r3, #2
 800bdde:	2b02      	cmp	r3, #2
 800bde0:	d103      	bne.n	800bdea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	2200      	movs	r2, #0
 800bde8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	699b      	ldr	r3, [r3, #24]
 800bdf0:	f003 0301 	and.w	r3, r3, #1
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	d007      	beq.n	800be08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	699a      	ldr	r2, [r3, #24]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f042 0201 	orr.w	r2, r2, #1
 800be06:	619a      	str	r2, [r3, #24]
  }
}
 800be08:	bf00      	nop
 800be0a:	370c      	adds	r7, #12
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr

0800be14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	60b9      	str	r1, [r7, #8]
 800be1e:	603b      	str	r3, [r7, #0]
 800be20:	4613      	mov	r3, r2
 800be22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800be24:	e031      	b.n	800be8a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be2c:	d02d      	beq.n	800be8a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be2e:	f7fb fe51 	bl	8007ad4 <HAL_GetTick>
 800be32:	4602      	mov	r2, r0
 800be34:	69bb      	ldr	r3, [r7, #24]
 800be36:	1ad3      	subs	r3, r2, r3
 800be38:	683a      	ldr	r2, [r7, #0]
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d302      	bcc.n	800be44 <I2C_WaitOnFlagUntilTimeout+0x30>
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d122      	bne.n	800be8a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	699a      	ldr	r2, [r3, #24]
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	4013      	ands	r3, r2
 800be4e:	68ba      	ldr	r2, [r7, #8]
 800be50:	429a      	cmp	r2, r3
 800be52:	bf0c      	ite	eq
 800be54:	2301      	moveq	r3, #1
 800be56:	2300      	movne	r3, #0
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	461a      	mov	r2, r3
 800be5c:	79fb      	ldrb	r3, [r7, #7]
 800be5e:	429a      	cmp	r2, r3
 800be60:	d113      	bne.n	800be8a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be66:	f043 0220 	orr.w	r2, r3, #32
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	2220      	movs	r2, #32
 800be72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	2200      	movs	r2, #0
 800be7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2200      	movs	r2, #0
 800be82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800be86:	2301      	movs	r3, #1
 800be88:	e00f      	b.n	800beaa <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	699a      	ldr	r2, [r3, #24]
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	4013      	ands	r3, r2
 800be94:	68ba      	ldr	r2, [r7, #8]
 800be96:	429a      	cmp	r2, r3
 800be98:	bf0c      	ite	eq
 800be9a:	2301      	moveq	r3, #1
 800be9c:	2300      	movne	r3, #0
 800be9e:	b2db      	uxtb	r3, r3
 800bea0:	461a      	mov	r2, r3
 800bea2:	79fb      	ldrb	r3, [r7, #7]
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d0be      	beq.n	800be26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bea8:	2300      	movs	r3, #0
}
 800beaa:	4618      	mov	r0, r3
 800beac:	3710      	adds	r7, #16
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}

0800beb2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800beb2:	b580      	push	{r7, lr}
 800beb4:	b084      	sub	sp, #16
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	60f8      	str	r0, [r7, #12]
 800beba:	60b9      	str	r1, [r7, #8]
 800bebc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bebe:	e033      	b.n	800bf28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bec0:	687a      	ldr	r2, [r7, #4]
 800bec2:	68b9      	ldr	r1, [r7, #8]
 800bec4:	68f8      	ldr	r0, [r7, #12]
 800bec6:	f000 f87f 	bl	800bfc8 <I2C_IsErrorOccurred>
 800beca:	4603      	mov	r3, r0
 800becc:	2b00      	cmp	r3, #0
 800bece:	d001      	beq.n	800bed4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bed0:	2301      	movs	r3, #1
 800bed2:	e031      	b.n	800bf38 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800beda:	d025      	beq.n	800bf28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bedc:	f7fb fdfa 	bl	8007ad4 <HAL_GetTick>
 800bee0:	4602      	mov	r2, r0
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	1ad3      	subs	r3, r2, r3
 800bee6:	68ba      	ldr	r2, [r7, #8]
 800bee8:	429a      	cmp	r2, r3
 800beea:	d302      	bcc.n	800bef2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d11a      	bne.n	800bf28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	699b      	ldr	r3, [r3, #24]
 800bef8:	f003 0302 	and.w	r3, r3, #2
 800befc:	2b02      	cmp	r3, #2
 800befe:	d013      	beq.n	800bf28 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf04:	f043 0220 	orr.w	r2, r3, #32
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2220      	movs	r2, #32
 800bf10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2200      	movs	r2, #0
 800bf18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800bf24:	2301      	movs	r3, #1
 800bf26:	e007      	b.n	800bf38 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	699b      	ldr	r3, [r3, #24]
 800bf2e:	f003 0302 	and.w	r3, r3, #2
 800bf32:	2b02      	cmp	r3, #2
 800bf34:	d1c4      	bne.n	800bec0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bf36:	2300      	movs	r3, #0
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3710      	adds	r7, #16
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	60b9      	str	r1, [r7, #8]
 800bf4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bf4c:	e02f      	b.n	800bfae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf4e:	687a      	ldr	r2, [r7, #4]
 800bf50:	68b9      	ldr	r1, [r7, #8]
 800bf52:	68f8      	ldr	r0, [r7, #12]
 800bf54:	f000 f838 	bl	800bfc8 <I2C_IsErrorOccurred>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d001      	beq.n	800bf62 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bf5e:	2301      	movs	r3, #1
 800bf60:	e02d      	b.n	800bfbe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf62:	f7fb fdb7 	bl	8007ad4 <HAL_GetTick>
 800bf66:	4602      	mov	r2, r0
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	1ad3      	subs	r3, r2, r3
 800bf6c:	68ba      	ldr	r2, [r7, #8]
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	d302      	bcc.n	800bf78 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d11a      	bne.n	800bfae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	699b      	ldr	r3, [r3, #24]
 800bf7e:	f003 0320 	and.w	r3, r3, #32
 800bf82:	2b20      	cmp	r3, #32
 800bf84:	d013      	beq.n	800bfae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf8a:	f043 0220 	orr.w	r2, r3, #32
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2220      	movs	r2, #32
 800bf96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	e007      	b.n	800bfbe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	699b      	ldr	r3, [r3, #24]
 800bfb4:	f003 0320 	and.w	r3, r3, #32
 800bfb8:	2b20      	cmp	r3, #32
 800bfba:	d1c8      	bne.n	800bf4e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bfbc:	2300      	movs	r3, #0
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3710      	adds	r7, #16
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
	...

0800bfc8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b08a      	sub	sp, #40	; 0x28
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	60f8      	str	r0, [r7, #12]
 800bfd0:	60b9      	str	r1, [r7, #8]
 800bfd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	699b      	ldr	r3, [r3, #24]
 800bfe0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800bfea:	69bb      	ldr	r3, [r7, #24]
 800bfec:	f003 0310 	and.w	r3, r3, #16
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d068      	beq.n	800c0c6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	2210      	movs	r2, #16
 800bffa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bffc:	e049      	b.n	800c092 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c004:	d045      	beq.n	800c092 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c006:	f7fb fd65 	bl	8007ad4 <HAL_GetTick>
 800c00a:	4602      	mov	r2, r0
 800c00c:	69fb      	ldr	r3, [r7, #28]
 800c00e:	1ad3      	subs	r3, r2, r3
 800c010:	68ba      	ldr	r2, [r7, #8]
 800c012:	429a      	cmp	r2, r3
 800c014:	d302      	bcc.n	800c01c <I2C_IsErrorOccurred+0x54>
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d13a      	bne.n	800c092 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c026:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c02e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	699b      	ldr	r3, [r3, #24]
 800c036:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c03a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c03e:	d121      	bne.n	800c084 <I2C_IsErrorOccurred+0xbc>
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c046:	d01d      	beq.n	800c084 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800c048:	7cfb      	ldrb	r3, [r7, #19]
 800c04a:	2b20      	cmp	r3, #32
 800c04c:	d01a      	beq.n	800c084 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	685a      	ldr	r2, [r3, #4]
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c05c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800c05e:	f7fb fd39 	bl	8007ad4 <HAL_GetTick>
 800c062:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c064:	e00e      	b.n	800c084 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800c066:	f7fb fd35 	bl	8007ad4 <HAL_GetTick>
 800c06a:	4602      	mov	r2, r0
 800c06c:	69fb      	ldr	r3, [r7, #28]
 800c06e:	1ad3      	subs	r3, r2, r3
 800c070:	2b19      	cmp	r3, #25
 800c072:	d907      	bls.n	800c084 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800c074:	6a3b      	ldr	r3, [r7, #32]
 800c076:	f043 0320 	orr.w	r3, r3, #32
 800c07a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800c07c:	2301      	movs	r3, #1
 800c07e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800c082:	e006      	b.n	800c092 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	699b      	ldr	r3, [r3, #24]
 800c08a:	f003 0320 	and.w	r3, r3, #32
 800c08e:	2b20      	cmp	r3, #32
 800c090:	d1e9      	bne.n	800c066 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	699b      	ldr	r3, [r3, #24]
 800c098:	f003 0320 	and.w	r3, r3, #32
 800c09c:	2b20      	cmp	r3, #32
 800c09e:	d003      	beq.n	800c0a8 <I2C_IsErrorOccurred+0xe0>
 800c0a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d0aa      	beq.n	800bffe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800c0a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d103      	bne.n	800c0b8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	2220      	movs	r2, #32
 800c0b6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800c0b8:	6a3b      	ldr	r3, [r7, #32]
 800c0ba:	f043 0304 	orr.w	r3, r3, #4
 800c0be:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	699b      	ldr	r3, [r3, #24]
 800c0cc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800c0ce:	69bb      	ldr	r3, [r7, #24]
 800c0d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d00b      	beq.n	800c0f0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800c0d8:	6a3b      	ldr	r3, [r7, #32]
 800c0da:	f043 0301 	orr.w	r3, r3, #1
 800c0de:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c0e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800c0f0:	69bb      	ldr	r3, [r7, #24]
 800c0f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d00b      	beq.n	800c112 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800c0fa:	6a3b      	ldr	r3, [r7, #32]
 800c0fc:	f043 0308 	orr.w	r3, r3, #8
 800c100:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c10a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c10c:	2301      	movs	r3, #1
 800c10e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800c112:	69bb      	ldr	r3, [r7, #24]
 800c114:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d00b      	beq.n	800c134 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800c11c:	6a3b      	ldr	r3, [r7, #32]
 800c11e:	f043 0302 	orr.w	r3, r3, #2
 800c122:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c12c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c12e:	2301      	movs	r3, #1
 800c130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800c134:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d01c      	beq.n	800c176 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c13c:	68f8      	ldr	r0, [r7, #12]
 800c13e:	f7ff fe45 	bl	800bdcc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	6859      	ldr	r1, [r3, #4]
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681a      	ldr	r2, [r3, #0]
 800c14c:	4b0d      	ldr	r3, [pc, #52]	; (800c184 <I2C_IsErrorOccurred+0x1bc>)
 800c14e:	400b      	ands	r3, r1
 800c150:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c156:	6a3b      	ldr	r3, [r7, #32]
 800c158:	431a      	orrs	r2, r3
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	2220      	movs	r2, #32
 800c162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2200      	movs	r2, #0
 800c16a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2200      	movs	r2, #0
 800c172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800c176:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3728      	adds	r7, #40	; 0x28
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
 800c182:	bf00      	nop
 800c184:	fe00e800 	.word	0xfe00e800

0800c188 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c188:	b480      	push	{r7}
 800c18a:	b087      	sub	sp, #28
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	60f8      	str	r0, [r7, #12]
 800c190:	607b      	str	r3, [r7, #4]
 800c192:	460b      	mov	r3, r1
 800c194:	817b      	strh	r3, [r7, #10]
 800c196:	4613      	mov	r3, r2
 800c198:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c19a:	897b      	ldrh	r3, [r7, #10]
 800c19c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c1a0:	7a7b      	ldrb	r3, [r7, #9]
 800c1a2:	041b      	lsls	r3, r3, #16
 800c1a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c1a8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c1ae:	6a3b      	ldr	r3, [r7, #32]
 800c1b0:	4313      	orrs	r3, r2
 800c1b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c1b6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	685a      	ldr	r2, [r3, #4]
 800c1be:	6a3b      	ldr	r3, [r7, #32]
 800c1c0:	0d5b      	lsrs	r3, r3, #21
 800c1c2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800c1c6:	4b08      	ldr	r3, [pc, #32]	; (800c1e8 <I2C_TransferConfig+0x60>)
 800c1c8:	430b      	orrs	r3, r1
 800c1ca:	43db      	mvns	r3, r3
 800c1cc:	ea02 0103 	and.w	r1, r2, r3
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	697a      	ldr	r2, [r7, #20]
 800c1d6:	430a      	orrs	r2, r1
 800c1d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c1da:	bf00      	nop
 800c1dc:	371c      	adds	r7, #28
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr
 800c1e6:	bf00      	nop
 800c1e8:	03ff63ff 	.word	0x03ff63ff

0800c1ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b083      	sub	sp, #12
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1fc:	b2db      	uxtb	r3, r3
 800c1fe:	2b20      	cmp	r3, #32
 800c200:	d138      	bne.n	800c274 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c208:	2b01      	cmp	r3, #1
 800c20a:	d101      	bne.n	800c210 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c20c:	2302      	movs	r3, #2
 800c20e:	e032      	b.n	800c276 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2201      	movs	r2, #1
 800c214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2224      	movs	r2, #36	; 0x24
 800c21c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	681a      	ldr	r2, [r3, #0]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f022 0201 	bic.w	r2, r2, #1
 800c22e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	681a      	ldr	r2, [r3, #0]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c23e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	6819      	ldr	r1, [r3, #0]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	683a      	ldr	r2, [r7, #0]
 800c24c:	430a      	orrs	r2, r1
 800c24e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	681a      	ldr	r2, [r3, #0]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f042 0201 	orr.w	r2, r2, #1
 800c25e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2220      	movs	r2, #32
 800c264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2200      	movs	r2, #0
 800c26c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c270:	2300      	movs	r3, #0
 800c272:	e000      	b.n	800c276 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c274:	2302      	movs	r3, #2
  }
}
 800c276:	4618      	mov	r0, r3
 800c278:	370c      	adds	r7, #12
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr

0800c282 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c282:	b480      	push	{r7}
 800c284:	b085      	sub	sp, #20
 800c286:	af00      	add	r7, sp, #0
 800c288:	6078      	str	r0, [r7, #4]
 800c28a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c292:	b2db      	uxtb	r3, r3
 800c294:	2b20      	cmp	r3, #32
 800c296:	d139      	bne.n	800c30c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d101      	bne.n	800c2a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c2a2:	2302      	movs	r3, #2
 800c2a4:	e033      	b.n	800c30e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2201      	movs	r2, #1
 800c2aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2224      	movs	r2, #36	; 0x24
 800c2b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f022 0201 	bic.w	r2, r2, #1
 800c2c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c2d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	021b      	lsls	r3, r3, #8
 800c2da:	68fa      	ldr	r2, [r7, #12]
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	68fa      	ldr	r2, [r7, #12]
 800c2e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	681a      	ldr	r2, [r3, #0]
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f042 0201 	orr.w	r2, r2, #1
 800c2f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2220      	movs	r2, #32
 800c2fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2200      	movs	r2, #0
 800c304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c308:	2300      	movs	r3, #0
 800c30a:	e000      	b.n	800c30e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c30c:	2302      	movs	r3, #2
  }
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3714      	adds	r7, #20
 800c312:	46bd      	mov	sp, r7
 800c314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c318:	4770      	bx	lr
	...

0800c31c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d101      	bne.n	800c32e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800c32a:	2301      	movs	r3, #1
 800c32c:	e0bf      	b.n	800c4ae <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800c334:	b2db      	uxtb	r3, r3
 800c336:	2b00      	cmp	r3, #0
 800c338:	d106      	bne.n	800c348 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2200      	movs	r2, #0
 800c33e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 f8ba 	bl	800c4bc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2202      	movs	r2, #2
 800c34c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	699a      	ldr	r2, [r3, #24]
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800c35e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	6999      	ldr	r1, [r3, #24]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	685a      	ldr	r2, [r3, #4]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	689b      	ldr	r3, [r3, #8]
 800c36e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c374:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	691b      	ldr	r3, [r3, #16]
 800c37a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	430a      	orrs	r2, r1
 800c382:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	6899      	ldr	r1, [r3, #8]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681a      	ldr	r2, [r3, #0]
 800c38e:	4b4a      	ldr	r3, [pc, #296]	; (800c4b8 <HAL_LTDC_Init+0x19c>)
 800c390:	400b      	ands	r3, r1
 800c392:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	695b      	ldr	r3, [r3, #20]
 800c398:	041b      	lsls	r3, r3, #16
 800c39a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	6899      	ldr	r1, [r3, #8]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	699a      	ldr	r2, [r3, #24]
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	431a      	orrs	r2, r3
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	430a      	orrs	r2, r1
 800c3b0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	68d9      	ldr	r1, [r3, #12]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681a      	ldr	r2, [r3, #0]
 800c3bc:	4b3e      	ldr	r3, [pc, #248]	; (800c4b8 <HAL_LTDC_Init+0x19c>)
 800c3be:	400b      	ands	r3, r1
 800c3c0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	69db      	ldr	r3, [r3, #28]
 800c3c6:	041b      	lsls	r3, r3, #16
 800c3c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	68d9      	ldr	r1, [r3, #12]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6a1a      	ldr	r2, [r3, #32]
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	431a      	orrs	r2, r3
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	430a      	orrs	r2, r1
 800c3de:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	6919      	ldr	r1, [r3, #16]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	4b33      	ldr	r3, [pc, #204]	; (800c4b8 <HAL_LTDC_Init+0x19c>)
 800c3ec:	400b      	ands	r3, r1
 800c3ee:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3f4:	041b      	lsls	r3, r3, #16
 800c3f6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	6919      	ldr	r1, [r3, #16]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	431a      	orrs	r2, r3
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	430a      	orrs	r2, r1
 800c40c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	6959      	ldr	r1, [r3, #20]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681a      	ldr	r2, [r3, #0]
 800c418:	4b27      	ldr	r3, [pc, #156]	; (800c4b8 <HAL_LTDC_Init+0x19c>)
 800c41a:	400b      	ands	r3, r1
 800c41c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c422:	041b      	lsls	r3, r3, #16
 800c424:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	6959      	ldr	r1, [r3, #20]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	431a      	orrs	r2, r3
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	430a      	orrs	r2, r1
 800c43a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c442:	021b      	lsls	r3, r3, #8
 800c444:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800c44c:	041b      	lsls	r3, r3, #16
 800c44e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800c45e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c466:	68ba      	ldr	r2, [r7, #8]
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	4313      	orrs	r3, r2
 800c46c:	687a      	ldr	r2, [r7, #4]
 800c46e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800c472:	431a      	orrs	r2, r3
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	430a      	orrs	r2, r1
 800c47a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f042 0206 	orr.w	r2, r2, #6
 800c48a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	699a      	ldr	r2, [r3, #24]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f042 0201 	orr.w	r2, r2, #1
 800c49a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800c4ac:	2300      	movs	r3, #0
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3710      	adds	r7, #16
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	f000f800 	.word	0xf000f800

0800c4bc <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b083      	sub	sp, #12
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800c4c4:	bf00      	nop
 800c4c6:	370c      	adds	r7, #12
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ce:	4770      	bx	lr

0800c4d0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800c4d0:	b5b0      	push	{r4, r5, r7, lr}
 800c4d2:	b084      	sub	sp, #16
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	60f8      	str	r0, [r7, #12]
 800c4d8:	60b9      	str	r1, [r7, #8]
 800c4da:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800c4e2:	2b01      	cmp	r3, #1
 800c4e4:	d101      	bne.n	800c4ea <HAL_LTDC_ConfigLayer+0x1a>
 800c4e6:	2302      	movs	r3, #2
 800c4e8:	e02c      	b.n	800c544 <HAL_LTDC_ConfigLayer+0x74>
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2201      	movs	r2, #1
 800c4ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2202      	movs	r2, #2
 800c4f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800c4fa:	68fa      	ldr	r2, [r7, #12]
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2134      	movs	r1, #52	; 0x34
 800c500:	fb01 f303 	mul.w	r3, r1, r3
 800c504:	4413      	add	r3, r2
 800c506:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	4614      	mov	r4, r2
 800c50e:	461d      	mov	r5, r3
 800c510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c514:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c516:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c518:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c51a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c51c:	682b      	ldr	r3, [r5, #0]
 800c51e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800c520:	687a      	ldr	r2, [r7, #4]
 800c522:	68b9      	ldr	r1, [r7, #8]
 800c524:	68f8      	ldr	r0, [r7, #12]
 800c526:	f000 f811 	bl	800c54c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	2201      	movs	r2, #1
 800c530:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2201      	movs	r2, #1
 800c536:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	2200      	movs	r2, #0
 800c53e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800c542:	2300      	movs	r3, #0
}
 800c544:	4618      	mov	r0, r3
 800c546:	3710      	adds	r7, #16
 800c548:	46bd      	mov	sp, r7
 800c54a:	bdb0      	pop	{r4, r5, r7, pc}

0800c54c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800c54c:	b480      	push	{r7}
 800c54e:	b089      	sub	sp, #36	; 0x24
 800c550:	af00      	add	r7, sp, #0
 800c552:	60f8      	str	r0, [r7, #12]
 800c554:	60b9      	str	r1, [r7, #8]
 800c556:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	685a      	ldr	r2, [r3, #4]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	68db      	ldr	r3, [r3, #12]
 800c562:	0c1b      	lsrs	r3, r3, #16
 800c564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c568:	4413      	add	r3, r2
 800c56a:	041b      	lsls	r3, r3, #16
 800c56c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	461a      	mov	r2, r3
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	01db      	lsls	r3, r3, #7
 800c578:	4413      	add	r3, r2
 800c57a:	3384      	adds	r3, #132	; 0x84
 800c57c:	685b      	ldr	r3, [r3, #4]
 800c57e:	68fa      	ldr	r2, [r7, #12]
 800c580:	6812      	ldr	r2, [r2, #0]
 800c582:	4611      	mov	r1, r2
 800c584:	687a      	ldr	r2, [r7, #4]
 800c586:	01d2      	lsls	r2, r2, #7
 800c588:	440a      	add	r2, r1
 800c58a:	3284      	adds	r2, #132	; 0x84
 800c58c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800c590:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	68db      	ldr	r3, [r3, #12]
 800c59c:	0c1b      	lsrs	r3, r3, #16
 800c59e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c5a2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c5a4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	01db      	lsls	r3, r3, #7
 800c5b0:	440b      	add	r3, r1
 800c5b2:	3384      	adds	r3, #132	; 0x84
 800c5b4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800c5b6:	69fb      	ldr	r3, [r7, #28]
 800c5b8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800c5ba:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	68da      	ldr	r2, [r3, #12]
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	68db      	ldr	r3, [r3, #12]
 800c5c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c5ca:	4413      	add	r3, r2
 800c5cc:	041b      	lsls	r3, r3, #16
 800c5ce:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	461a      	mov	r2, r3
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	01db      	lsls	r3, r3, #7
 800c5da:	4413      	add	r3, r2
 800c5dc:	3384      	adds	r3, #132	; 0x84
 800c5de:	689b      	ldr	r3, [r3, #8]
 800c5e0:	68fa      	ldr	r2, [r7, #12]
 800c5e2:	6812      	ldr	r2, [r2, #0]
 800c5e4:	4611      	mov	r1, r2
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	01d2      	lsls	r2, r2, #7
 800c5ea:	440a      	add	r2, r1
 800c5ec:	3284      	adds	r2, #132	; 0x84
 800c5ee:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800c5f2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	689a      	ldr	r2, [r3, #8]
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	68db      	ldr	r3, [r3, #12]
 800c5fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c602:	4413      	add	r3, r2
 800c604:	1c5a      	adds	r2, r3, #1
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	4619      	mov	r1, r3
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	01db      	lsls	r3, r3, #7
 800c610:	440b      	add	r3, r1
 800c612:	3384      	adds	r3, #132	; 0x84
 800c614:	4619      	mov	r1, r3
 800c616:	69fb      	ldr	r3, [r7, #28]
 800c618:	4313      	orrs	r3, r2
 800c61a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	461a      	mov	r2, r3
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	01db      	lsls	r3, r3, #7
 800c626:	4413      	add	r3, r2
 800c628:	3384      	adds	r3, #132	; 0x84
 800c62a:	691b      	ldr	r3, [r3, #16]
 800c62c:	68fa      	ldr	r2, [r7, #12]
 800c62e:	6812      	ldr	r2, [r2, #0]
 800c630:	4611      	mov	r1, r2
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	01d2      	lsls	r2, r2, #7
 800c636:	440a      	add	r2, r1
 800c638:	3284      	adds	r2, #132	; 0x84
 800c63a:	f023 0307 	bic.w	r3, r3, #7
 800c63e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	461a      	mov	r2, r3
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	01db      	lsls	r3, r3, #7
 800c64a:	4413      	add	r3, r2
 800c64c:	3384      	adds	r3, #132	; 0x84
 800c64e:	461a      	mov	r2, r3
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	691b      	ldr	r3, [r3, #16]
 800c654:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c65c:	021b      	lsls	r3, r3, #8
 800c65e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c666:	041b      	lsls	r3, r3, #16
 800c668:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	699b      	ldr	r3, [r3, #24]
 800c66e:	061b      	lsls	r3, r3, #24
 800c670:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	461a      	mov	r2, r3
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	01db      	lsls	r3, r3, #7
 800c67c:	4413      	add	r3, r2
 800c67e:	3384      	adds	r3, #132	; 0x84
 800c680:	699b      	ldr	r3, [r3, #24]
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	461a      	mov	r2, r3
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	01db      	lsls	r3, r3, #7
 800c68c:	4413      	add	r3, r2
 800c68e:	3384      	adds	r3, #132	; 0x84
 800c690:	461a      	mov	r2, r3
 800c692:	2300      	movs	r3, #0
 800c694:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c69c:	461a      	mov	r2, r3
 800c69e:	69fb      	ldr	r3, [r7, #28]
 800c6a0:	431a      	orrs	r2, r3
 800c6a2:	69bb      	ldr	r3, [r7, #24]
 800c6a4:	431a      	orrs	r2, r3
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	01db      	lsls	r3, r3, #7
 800c6b0:	440b      	add	r3, r1
 800c6b2:	3384      	adds	r3, #132	; 0x84
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	4313      	orrs	r3, r2
 800c6ba:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	461a      	mov	r2, r3
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	01db      	lsls	r3, r3, #7
 800c6c6:	4413      	add	r3, r2
 800c6c8:	3384      	adds	r3, #132	; 0x84
 800c6ca:	695b      	ldr	r3, [r3, #20]
 800c6cc:	68fa      	ldr	r2, [r7, #12]
 800c6ce:	6812      	ldr	r2, [r2, #0]
 800c6d0:	4611      	mov	r1, r2
 800c6d2:	687a      	ldr	r2, [r7, #4]
 800c6d4:	01d2      	lsls	r2, r2, #7
 800c6d6:	440a      	add	r2, r1
 800c6d8:	3284      	adds	r2, #132	; 0x84
 800c6da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c6de:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	01db      	lsls	r3, r3, #7
 800c6ea:	4413      	add	r3, r2
 800c6ec:	3384      	adds	r3, #132	; 0x84
 800c6ee:	461a      	mov	r2, r3
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	695b      	ldr	r3, [r3, #20]
 800c6f4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	01db      	lsls	r3, r3, #7
 800c700:	4413      	add	r3, r2
 800c702:	3384      	adds	r3, #132	; 0x84
 800c704:	69da      	ldr	r2, [r3, #28]
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	4619      	mov	r1, r3
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	01db      	lsls	r3, r3, #7
 800c710:	440b      	add	r3, r1
 800c712:	3384      	adds	r3, #132	; 0x84
 800c714:	4619      	mov	r1, r3
 800c716:	4b58      	ldr	r3, [pc, #352]	; (800c878 <LTDC_SetConfig+0x32c>)
 800c718:	4013      	ands	r3, r2
 800c71a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	69da      	ldr	r2, [r3, #28]
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	6a1b      	ldr	r3, [r3, #32]
 800c724:	68f9      	ldr	r1, [r7, #12]
 800c726:	6809      	ldr	r1, [r1, #0]
 800c728:	4608      	mov	r0, r1
 800c72a:	6879      	ldr	r1, [r7, #4]
 800c72c:	01c9      	lsls	r1, r1, #7
 800c72e:	4401      	add	r1, r0
 800c730:	3184      	adds	r1, #132	; 0x84
 800c732:	4313      	orrs	r3, r2
 800c734:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	461a      	mov	r2, r3
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	01db      	lsls	r3, r3, #7
 800c740:	4413      	add	r3, r2
 800c742:	3384      	adds	r3, #132	; 0x84
 800c744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	461a      	mov	r2, r3
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	01db      	lsls	r3, r3, #7
 800c750:	4413      	add	r3, r2
 800c752:	3384      	adds	r3, #132	; 0x84
 800c754:	461a      	mov	r2, r3
 800c756:	2300      	movs	r3, #0
 800c758:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	461a      	mov	r2, r3
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	01db      	lsls	r3, r3, #7
 800c764:	4413      	add	r3, r2
 800c766:	3384      	adds	r3, #132	; 0x84
 800c768:	461a      	mov	r2, r3
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c76e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	691b      	ldr	r3, [r3, #16]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d102      	bne.n	800c77e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800c778:	2304      	movs	r3, #4
 800c77a:	61fb      	str	r3, [r7, #28]
 800c77c:	e01b      	b.n	800c7b6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	691b      	ldr	r3, [r3, #16]
 800c782:	2b01      	cmp	r3, #1
 800c784:	d102      	bne.n	800c78c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800c786:	2303      	movs	r3, #3
 800c788:	61fb      	str	r3, [r7, #28]
 800c78a:	e014      	b.n	800c7b6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	691b      	ldr	r3, [r3, #16]
 800c790:	2b04      	cmp	r3, #4
 800c792:	d00b      	beq.n	800c7ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800c798:	2b02      	cmp	r3, #2
 800c79a:	d007      	beq.n	800c7ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800c7a0:	2b03      	cmp	r3, #3
 800c7a2:	d003      	beq.n	800c7ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800c7a8:	2b07      	cmp	r3, #7
 800c7aa:	d102      	bne.n	800c7b2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800c7ac:	2302      	movs	r3, #2
 800c7ae:	61fb      	str	r3, [r7, #28]
 800c7b0:	e001      	b.n	800c7b6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	01db      	lsls	r3, r3, #7
 800c7c0:	4413      	add	r3, r2
 800c7c2:	3384      	adds	r3, #132	; 0x84
 800c7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7c6:	68fa      	ldr	r2, [r7, #12]
 800c7c8:	6812      	ldr	r2, [r2, #0]
 800c7ca:	4611      	mov	r1, r2
 800c7cc:	687a      	ldr	r2, [r7, #4]
 800c7ce:	01d2      	lsls	r2, r2, #7
 800c7d0:	440a      	add	r2, r1
 800c7d2:	3284      	adds	r2, #132	; 0x84
 800c7d4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800c7d8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7de:	69fa      	ldr	r2, [r7, #28]
 800c7e0:	fb02 f303 	mul.w	r3, r2, r3
 800c7e4:	041a      	lsls	r2, r3, #16
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	6859      	ldr	r1, [r3, #4]
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	1acb      	subs	r3, r1, r3
 800c7f0:	69f9      	ldr	r1, [r7, #28]
 800c7f2:	fb01 f303 	mul.w	r3, r1, r3
 800c7f6:	3307      	adds	r3, #7
 800c7f8:	68f9      	ldr	r1, [r7, #12]
 800c7fa:	6809      	ldr	r1, [r1, #0]
 800c7fc:	4608      	mov	r0, r1
 800c7fe:	6879      	ldr	r1, [r7, #4]
 800c800:	01c9      	lsls	r1, r1, #7
 800c802:	4401      	add	r1, r0
 800c804:	3184      	adds	r1, #132	; 0x84
 800c806:	4313      	orrs	r3, r2
 800c808:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	461a      	mov	r2, r3
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	01db      	lsls	r3, r3, #7
 800c814:	4413      	add	r3, r2
 800c816:	3384      	adds	r3, #132	; 0x84
 800c818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	4619      	mov	r1, r3
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	01db      	lsls	r3, r3, #7
 800c824:	440b      	add	r3, r1
 800c826:	3384      	adds	r3, #132	; 0x84
 800c828:	4619      	mov	r1, r3
 800c82a:	4b14      	ldr	r3, [pc, #80]	; (800c87c <LTDC_SetConfig+0x330>)
 800c82c:	4013      	ands	r3, r2
 800c82e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	461a      	mov	r2, r3
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	01db      	lsls	r3, r3, #7
 800c83a:	4413      	add	r3, r2
 800c83c:	3384      	adds	r3, #132	; 0x84
 800c83e:	461a      	mov	r2, r3
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c844:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	461a      	mov	r2, r3
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	01db      	lsls	r3, r3, #7
 800c850:	4413      	add	r3, r2
 800c852:	3384      	adds	r3, #132	; 0x84
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	68fa      	ldr	r2, [r7, #12]
 800c858:	6812      	ldr	r2, [r2, #0]
 800c85a:	4611      	mov	r1, r2
 800c85c:	687a      	ldr	r2, [r7, #4]
 800c85e:	01d2      	lsls	r2, r2, #7
 800c860:	440a      	add	r2, r1
 800c862:	3284      	adds	r2, #132	; 0x84
 800c864:	f043 0301 	orr.w	r3, r3, #1
 800c868:	6013      	str	r3, [r2, #0]
}
 800c86a:	bf00      	nop
 800c86c:	3724      	adds	r7, #36	; 0x24
 800c86e:	46bd      	mov	sp, r7
 800c870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c874:	4770      	bx	lr
 800c876:	bf00      	nop
 800c878:	fffff8f8 	.word	0xfffff8f8
 800c87c:	fffff800 	.word	0xfffff800

0800c880 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c888:	f7fb f924 	bl	8007ad4 <HAL_GetTick>
 800c88c:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d101      	bne.n	800c898 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800c894:	2301      	movs	r3, #1
 800c896:	e03b      	b.n	800c910 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2200      	movs	r2, #0
 800c89c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2202      	movs	r2, #2
 800c8a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	68da      	ldr	r2, [r3, #12]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f022 0201 	bic.w	r2, r2, #1
 800c8b6:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800c8b8:	e00f      	b.n	800c8da <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800c8ba:	f7fb f90b 	bl	8007ad4 <HAL_GetTick>
 800c8be:	4602      	mov	r2, r0
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	1ad3      	subs	r3, r2, r3
 800c8c4:	2b05      	cmp	r3, #5
 800c8c6:	d908      	bls.n	800c8da <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2240      	movs	r2, #64	; 0x40
 800c8cc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2203      	movs	r2, #3
 800c8d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	e01a      	b.n	800c910 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	68db      	ldr	r3, [r3, #12]
 800c8e0:	f003 0301 	and.w	r3, r3, #1
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d1e8      	bne.n	800c8ba <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f000 f86d 	bl	800c9c8 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2200      	movs	r2, #0
 800c904:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2201      	movs	r2, #1
 800c90a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c90e:	2300      	movs	r3, #0
}
 800c910:	4618      	mov	r0, r3
 800c912:	3710      	adds	r7, #16
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}

0800c918 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 800c918:	b480      	push	{r7}
 800c91a:	b083      	sub	sp, #12
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d101      	bne.n	800c92a <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800c926:	2301      	movs	r3, #1
 800c928:	e048      	b.n	800c9bc <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	68da      	ldr	r2, [r3, #12]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f022 0201 	bic.w	r2, r2, #1
 800c938:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	2200      	movs	r2, #0
 800c940:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	2200      	movs	r2, #0
 800c948:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	2200      	movs	r2, #0
 800c950:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	2200      	movs	r2, #0
 800c958:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	2200      	movs	r2, #0
 800c960:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	2200      	movs	r2, #0
 800c968:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	2200      	movs	r2, #0
 800c970:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	2200      	movs	r2, #0
 800c978:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	2200      	movs	r2, #0
 800c980:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	2200      	movs	r2, #0
 800c988:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	221f      	movs	r2, #31
 800c990:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2200      	movs	r2, #0
 800c996:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2200      	movs	r2, #0
 800c99c:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c9ba:	2300      	movs	r3, #0
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	370c      	adds	r7, #12
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c6:	4770      	bx	lr

0800c9c8 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b085      	sub	sp, #20
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	68d9      	ldr	r1, [r3, #12]
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	691a      	ldr	r2, [r3, #16]
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	430a      	orrs	r2, r1
 800c9de:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	695a      	ldr	r2, [r3, #20]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	699b      	ldr	r3, [r3, #24]
 800c9e8:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800c9ee:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6a1b      	ldr	r3, [r3, #32]
 800c9f4:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800c9fa:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca00:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800ca06:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca0c:	3b01      	subs	r3, #1
 800ca0e:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800ca10:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800ca1c:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800ca1e:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca28:	d107      	bne.n	800ca3a <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	691a      	ldr	r2, [r3, #16]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800ca38:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	da11      	bge.n	800ca6e <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	695a      	ldr	r2, [r3, #20]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ca58:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca5e:	425b      	negs	r3, r3
 800ca60:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	68fa      	ldr	r2, [r7, #12]
 800ca68:	b292      	uxth	r2, r2
 800ca6a:	621a      	str	r2, [r3, #32]
 800ca6c:	e006      	b.n	800ca7c <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca72:	461a      	mov	r2, r3
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	b292      	uxth	r2, r2
 800ca7a:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	da15      	bge.n	800cab0 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	695a      	ldr	r2, [r3, #20]
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800ca92:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca98:	425b      	negs	r3, r3
 800ca9a:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	6a19      	ldr	r1, [r3, #32]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	041a      	lsls	r2, r3, #16
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	430a      	orrs	r2, r1
 800caac:	621a      	str	r2, [r3, #32]
 800caae:	e009      	b.n	800cac4 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	6a19      	ldr	r1, [r3, #32]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caba:	041a      	lsls	r2, r3, #16
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	430a      	orrs	r2, r1
 800cac2:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	685b      	ldr	r3, [r3, #4]
 800cac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cacc:	d006      	beq.n	800cadc <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	685a      	ldr	r2, [r3, #4]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	b2d2      	uxtb	r2, r2
 800cad8:	629a      	str	r2, [r3, #40]	; 0x28
 800cada:	e003      	b.n	800cae4 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	2200      	movs	r2, #0
 800cae2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	2200      	movs	r2, #0
 800caea:	625a      	str	r2, [r3, #36]	; 0x24
}
 800caec:	bf00      	nop
 800caee:	3714      	adds	r7, #20
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr

0800caf8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b084      	sub	sp, #16
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800cb00:	4b19      	ldr	r3, [pc, #100]	; (800cb68 <HAL_PWREx_ConfigSupply+0x70>)
 800cb02:	68db      	ldr	r3, [r3, #12]
 800cb04:	f003 0304 	and.w	r3, r3, #4
 800cb08:	2b04      	cmp	r3, #4
 800cb0a:	d00a      	beq.n	800cb22 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800cb0c:	4b16      	ldr	r3, [pc, #88]	; (800cb68 <HAL_PWREx_ConfigSupply+0x70>)
 800cb0e:	68db      	ldr	r3, [r3, #12]
 800cb10:	f003 0307 	and.w	r3, r3, #7
 800cb14:	687a      	ldr	r2, [r7, #4]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d001      	beq.n	800cb1e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	e01f      	b.n	800cb5e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	e01d      	b.n	800cb5e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800cb22:	4b11      	ldr	r3, [pc, #68]	; (800cb68 <HAL_PWREx_ConfigSupply+0x70>)
 800cb24:	68db      	ldr	r3, [r3, #12]
 800cb26:	f023 0207 	bic.w	r2, r3, #7
 800cb2a:	490f      	ldr	r1, [pc, #60]	; (800cb68 <HAL_PWREx_ConfigSupply+0x70>)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	4313      	orrs	r3, r2
 800cb30:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800cb32:	f7fa ffcf 	bl	8007ad4 <HAL_GetTick>
 800cb36:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800cb38:	e009      	b.n	800cb4e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800cb3a:	f7fa ffcb 	bl	8007ad4 <HAL_GetTick>
 800cb3e:	4602      	mov	r2, r0
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	1ad3      	subs	r3, r2, r3
 800cb44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cb48:	d901      	bls.n	800cb4e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	e007      	b.n	800cb5e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800cb4e:	4b06      	ldr	r3, [pc, #24]	; (800cb68 <HAL_PWREx_ConfigSupply+0x70>)
 800cb50:	685b      	ldr	r3, [r3, #4]
 800cb52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cb56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb5a:	d1ee      	bne.n	800cb3a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800cb5c:	2300      	movs	r3, #0
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3710      	adds	r7, #16
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
 800cb66:	bf00      	nop
 800cb68:	58024800 	.word	0x58024800

0800cb6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b08c      	sub	sp, #48	; 0x30
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d102      	bne.n	800cb80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	f000 bc48 	b.w	800d410 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f003 0301 	and.w	r3, r3, #1
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	f000 8088 	beq.w	800cc9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cb8e:	4b99      	ldr	r3, [pc, #612]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cb90:	691b      	ldr	r3, [r3, #16]
 800cb92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cb96:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cb98:	4b96      	ldr	r3, [pc, #600]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cb9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb9c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800cb9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba0:	2b10      	cmp	r3, #16
 800cba2:	d007      	beq.n	800cbb4 <HAL_RCC_OscConfig+0x48>
 800cba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba6:	2b18      	cmp	r3, #24
 800cba8:	d111      	bne.n	800cbce <HAL_RCC_OscConfig+0x62>
 800cbaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbac:	f003 0303 	and.w	r3, r3, #3
 800cbb0:	2b02      	cmp	r3, #2
 800cbb2:	d10c      	bne.n	800cbce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cbb4:	4b8f      	ldr	r3, [pc, #572]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d06d      	beq.n	800cc9c <HAL_RCC_OscConfig+0x130>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d169      	bne.n	800cc9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800cbc8:	2301      	movs	r3, #1
 800cbca:	f000 bc21 	b.w	800d410 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	685b      	ldr	r3, [r3, #4]
 800cbd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbd6:	d106      	bne.n	800cbe6 <HAL_RCC_OscConfig+0x7a>
 800cbd8:	4b86      	ldr	r3, [pc, #536]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	4a85      	ldr	r2, [pc, #532]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cbde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cbe2:	6013      	str	r3, [r2, #0]
 800cbe4:	e02e      	b.n	800cc44 <HAL_RCC_OscConfig+0xd8>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	685b      	ldr	r3, [r3, #4]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d10c      	bne.n	800cc08 <HAL_RCC_OscConfig+0x9c>
 800cbee:	4b81      	ldr	r3, [pc, #516]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	4a80      	ldr	r2, [pc, #512]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cbf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cbf8:	6013      	str	r3, [r2, #0]
 800cbfa:	4b7e      	ldr	r3, [pc, #504]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	4a7d      	ldr	r2, [pc, #500]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cc00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cc04:	6013      	str	r3, [r2, #0]
 800cc06:	e01d      	b.n	800cc44 <HAL_RCC_OscConfig+0xd8>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	685b      	ldr	r3, [r3, #4]
 800cc0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cc10:	d10c      	bne.n	800cc2c <HAL_RCC_OscConfig+0xc0>
 800cc12:	4b78      	ldr	r3, [pc, #480]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4a77      	ldr	r2, [pc, #476]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cc18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cc1c:	6013      	str	r3, [r2, #0]
 800cc1e:	4b75      	ldr	r3, [pc, #468]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	4a74      	ldr	r2, [pc, #464]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cc24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc28:	6013      	str	r3, [r2, #0]
 800cc2a:	e00b      	b.n	800cc44 <HAL_RCC_OscConfig+0xd8>
 800cc2c:	4b71      	ldr	r3, [pc, #452]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	4a70      	ldr	r2, [pc, #448]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cc32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc36:	6013      	str	r3, [r2, #0]
 800cc38:	4b6e      	ldr	r3, [pc, #440]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	4a6d      	ldr	r2, [pc, #436]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cc3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cc42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	685b      	ldr	r3, [r3, #4]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d013      	beq.n	800cc74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc4c:	f7fa ff42 	bl	8007ad4 <HAL_GetTick>
 800cc50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cc52:	e008      	b.n	800cc66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cc54:	f7fa ff3e 	bl	8007ad4 <HAL_GetTick>
 800cc58:	4602      	mov	r2, r0
 800cc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5c:	1ad3      	subs	r3, r2, r3
 800cc5e:	2b64      	cmp	r3, #100	; 0x64
 800cc60:	d901      	bls.n	800cc66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cc62:	2303      	movs	r3, #3
 800cc64:	e3d4      	b.n	800d410 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cc66:	4b63      	ldr	r3, [pc, #396]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d0f0      	beq.n	800cc54 <HAL_RCC_OscConfig+0xe8>
 800cc72:	e014      	b.n	800cc9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc74:	f7fa ff2e 	bl	8007ad4 <HAL_GetTick>
 800cc78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800cc7a:	e008      	b.n	800cc8e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cc7c:	f7fa ff2a 	bl	8007ad4 <HAL_GetTick>
 800cc80:	4602      	mov	r2, r0
 800cc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc84:	1ad3      	subs	r3, r2, r3
 800cc86:	2b64      	cmp	r3, #100	; 0x64
 800cc88:	d901      	bls.n	800cc8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800cc8a:	2303      	movs	r3, #3
 800cc8c:	e3c0      	b.n	800d410 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800cc8e:	4b59      	ldr	r3, [pc, #356]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d1f0      	bne.n	800cc7c <HAL_RCC_OscConfig+0x110>
 800cc9a:	e000      	b.n	800cc9e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cc9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f003 0302 	and.w	r3, r3, #2
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	f000 80ca 	beq.w	800ce40 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ccac:	4b51      	ldr	r3, [pc, #324]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800ccae:	691b      	ldr	r3, [r3, #16]
 800ccb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ccb4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ccb6:	4b4f      	ldr	r3, [pc, #316]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800ccb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ccbc:	6a3b      	ldr	r3, [r7, #32]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d007      	beq.n	800ccd2 <HAL_RCC_OscConfig+0x166>
 800ccc2:	6a3b      	ldr	r3, [r7, #32]
 800ccc4:	2b18      	cmp	r3, #24
 800ccc6:	d156      	bne.n	800cd76 <HAL_RCC_OscConfig+0x20a>
 800ccc8:	69fb      	ldr	r3, [r7, #28]
 800ccca:	f003 0303 	and.w	r3, r3, #3
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d151      	bne.n	800cd76 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ccd2:	4b48      	ldr	r3, [pc, #288]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	f003 0304 	and.w	r3, r3, #4
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d005      	beq.n	800ccea <HAL_RCC_OscConfig+0x17e>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	68db      	ldr	r3, [r3, #12]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d101      	bne.n	800ccea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800cce6:	2301      	movs	r3, #1
 800cce8:	e392      	b.n	800d410 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ccea:	4b42      	ldr	r3, [pc, #264]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f023 0219 	bic.w	r2, r3, #25
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	68db      	ldr	r3, [r3, #12]
 800ccf6:	493f      	ldr	r1, [pc, #252]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800ccf8:	4313      	orrs	r3, r2
 800ccfa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ccfc:	f7fa feea 	bl	8007ad4 <HAL_GetTick>
 800cd00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cd02:	e008      	b.n	800cd16 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cd04:	f7fa fee6 	bl	8007ad4 <HAL_GetTick>
 800cd08:	4602      	mov	r2, r0
 800cd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0c:	1ad3      	subs	r3, r2, r3
 800cd0e:	2b02      	cmp	r3, #2
 800cd10:	d901      	bls.n	800cd16 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800cd12:	2303      	movs	r3, #3
 800cd14:	e37c      	b.n	800d410 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cd16:	4b37      	ldr	r3, [pc, #220]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f003 0304 	and.w	r3, r3, #4
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d0f0      	beq.n	800cd04 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd22:	f7fa ff07 	bl	8007b34 <HAL_GetREVID>
 800cd26:	4603      	mov	r3, r0
 800cd28:	f241 0203 	movw	r2, #4099	; 0x1003
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d817      	bhi.n	800cd60 <HAL_RCC_OscConfig+0x1f4>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	691b      	ldr	r3, [r3, #16]
 800cd34:	2b40      	cmp	r3, #64	; 0x40
 800cd36:	d108      	bne.n	800cd4a <HAL_RCC_OscConfig+0x1de>
 800cd38:	4b2e      	ldr	r3, [pc, #184]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cd3a:	685b      	ldr	r3, [r3, #4]
 800cd3c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800cd40:	4a2c      	ldr	r2, [pc, #176]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cd42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cd46:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cd48:	e07a      	b.n	800ce40 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd4a:	4b2a      	ldr	r3, [pc, #168]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cd4c:	685b      	ldr	r3, [r3, #4]
 800cd4e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	691b      	ldr	r3, [r3, #16]
 800cd56:	031b      	lsls	r3, r3, #12
 800cd58:	4926      	ldr	r1, [pc, #152]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cd5a:	4313      	orrs	r3, r2
 800cd5c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cd5e:	e06f      	b.n	800ce40 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd60:	4b24      	ldr	r3, [pc, #144]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	691b      	ldr	r3, [r3, #16]
 800cd6c:	061b      	lsls	r3, r3, #24
 800cd6e:	4921      	ldr	r1, [pc, #132]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cd70:	4313      	orrs	r3, r2
 800cd72:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cd74:	e064      	b.n	800ce40 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	68db      	ldr	r3, [r3, #12]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d047      	beq.n	800ce0e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800cd7e:	4b1d      	ldr	r3, [pc, #116]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f023 0219 	bic.w	r2, r3, #25
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	68db      	ldr	r3, [r3, #12]
 800cd8a:	491a      	ldr	r1, [pc, #104]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cd8c:	4313      	orrs	r3, r2
 800cd8e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd90:	f7fa fea0 	bl	8007ad4 <HAL_GetTick>
 800cd94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cd96:	e008      	b.n	800cdaa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cd98:	f7fa fe9c 	bl	8007ad4 <HAL_GetTick>
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda0:	1ad3      	subs	r3, r2, r3
 800cda2:	2b02      	cmp	r3, #2
 800cda4:	d901      	bls.n	800cdaa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800cda6:	2303      	movs	r3, #3
 800cda8:	e332      	b.n	800d410 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cdaa:	4b12      	ldr	r3, [pc, #72]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f003 0304 	and.w	r3, r3, #4
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d0f0      	beq.n	800cd98 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cdb6:	f7fa febd 	bl	8007b34 <HAL_GetREVID>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	f241 0203 	movw	r2, #4099	; 0x1003
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	d819      	bhi.n	800cdf8 <HAL_RCC_OscConfig+0x28c>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	691b      	ldr	r3, [r3, #16]
 800cdc8:	2b40      	cmp	r3, #64	; 0x40
 800cdca:	d108      	bne.n	800cdde <HAL_RCC_OscConfig+0x272>
 800cdcc:	4b09      	ldr	r3, [pc, #36]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cdce:	685b      	ldr	r3, [r3, #4]
 800cdd0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800cdd4:	4a07      	ldr	r2, [pc, #28]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cdd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cdda:	6053      	str	r3, [r2, #4]
 800cddc:	e030      	b.n	800ce40 <HAL_RCC_OscConfig+0x2d4>
 800cdde:	4b05      	ldr	r3, [pc, #20]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	691b      	ldr	r3, [r3, #16]
 800cdea:	031b      	lsls	r3, r3, #12
 800cdec:	4901      	ldr	r1, [pc, #4]	; (800cdf4 <HAL_RCC_OscConfig+0x288>)
 800cdee:	4313      	orrs	r3, r2
 800cdf0:	604b      	str	r3, [r1, #4]
 800cdf2:	e025      	b.n	800ce40 <HAL_RCC_OscConfig+0x2d4>
 800cdf4:	58024400 	.word	0x58024400
 800cdf8:	4b9a      	ldr	r3, [pc, #616]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800cdfa:	685b      	ldr	r3, [r3, #4]
 800cdfc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	691b      	ldr	r3, [r3, #16]
 800ce04:	061b      	lsls	r3, r3, #24
 800ce06:	4997      	ldr	r1, [pc, #604]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800ce08:	4313      	orrs	r3, r2
 800ce0a:	604b      	str	r3, [r1, #4]
 800ce0c:	e018      	b.n	800ce40 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ce0e:	4b95      	ldr	r3, [pc, #596]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	4a94      	ldr	r2, [pc, #592]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800ce14:	f023 0301 	bic.w	r3, r3, #1
 800ce18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce1a:	f7fa fe5b 	bl	8007ad4 <HAL_GetTick>
 800ce1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ce20:	e008      	b.n	800ce34 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ce22:	f7fa fe57 	bl	8007ad4 <HAL_GetTick>
 800ce26:	4602      	mov	r2, r0
 800ce28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce2a:	1ad3      	subs	r3, r2, r3
 800ce2c:	2b02      	cmp	r3, #2
 800ce2e:	d901      	bls.n	800ce34 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800ce30:	2303      	movs	r3, #3
 800ce32:	e2ed      	b.n	800d410 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ce34:	4b8b      	ldr	r3, [pc, #556]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	f003 0304 	and.w	r3, r3, #4
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d1f0      	bne.n	800ce22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f003 0310 	and.w	r3, r3, #16
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	f000 80a9 	beq.w	800cfa0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ce4e:	4b85      	ldr	r3, [pc, #532]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800ce50:	691b      	ldr	r3, [r3, #16]
 800ce52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ce56:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ce58:	4b82      	ldr	r3, [pc, #520]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800ce5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce5c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ce5e:	69bb      	ldr	r3, [r7, #24]
 800ce60:	2b08      	cmp	r3, #8
 800ce62:	d007      	beq.n	800ce74 <HAL_RCC_OscConfig+0x308>
 800ce64:	69bb      	ldr	r3, [r7, #24]
 800ce66:	2b18      	cmp	r3, #24
 800ce68:	d13a      	bne.n	800cee0 <HAL_RCC_OscConfig+0x374>
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	f003 0303 	and.w	r3, r3, #3
 800ce70:	2b01      	cmp	r3, #1
 800ce72:	d135      	bne.n	800cee0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ce74:	4b7b      	ldr	r3, [pc, #492]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d005      	beq.n	800ce8c <HAL_RCC_OscConfig+0x320>
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	69db      	ldr	r3, [r3, #28]
 800ce84:	2b80      	cmp	r3, #128	; 0x80
 800ce86:	d001      	beq.n	800ce8c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800ce88:	2301      	movs	r3, #1
 800ce8a:	e2c1      	b.n	800d410 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ce8c:	f7fa fe52 	bl	8007b34 <HAL_GetREVID>
 800ce90:	4603      	mov	r3, r0
 800ce92:	f241 0203 	movw	r2, #4099	; 0x1003
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d817      	bhi.n	800ceca <HAL_RCC_OscConfig+0x35e>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6a1b      	ldr	r3, [r3, #32]
 800ce9e:	2b20      	cmp	r3, #32
 800cea0:	d108      	bne.n	800ceb4 <HAL_RCC_OscConfig+0x348>
 800cea2:	4b70      	ldr	r3, [pc, #448]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800cea4:	685b      	ldr	r3, [r3, #4]
 800cea6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ceaa:	4a6e      	ldr	r2, [pc, #440]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800ceac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ceb0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ceb2:	e075      	b.n	800cfa0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ceb4:	4b6b      	ldr	r3, [pc, #428]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	6a1b      	ldr	r3, [r3, #32]
 800cec0:	069b      	lsls	r3, r3, #26
 800cec2:	4968      	ldr	r1, [pc, #416]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800cec4:	4313      	orrs	r3, r2
 800cec6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cec8:	e06a      	b.n	800cfa0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ceca:	4b66      	ldr	r3, [pc, #408]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800cecc:	68db      	ldr	r3, [r3, #12]
 800cece:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6a1b      	ldr	r3, [r3, #32]
 800ced6:	061b      	lsls	r3, r3, #24
 800ced8:	4962      	ldr	r1, [pc, #392]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800ceda:	4313      	orrs	r3, r2
 800cedc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cede:	e05f      	b.n	800cfa0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	69db      	ldr	r3, [r3, #28]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d042      	beq.n	800cf6e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800cee8:	4b5e      	ldr	r3, [pc, #376]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4a5d      	ldr	r2, [pc, #372]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800ceee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cef2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cef4:	f7fa fdee 	bl	8007ad4 <HAL_GetTick>
 800cef8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cefa:	e008      	b.n	800cf0e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800cefc:	f7fa fdea 	bl	8007ad4 <HAL_GetTick>
 800cf00:	4602      	mov	r2, r0
 800cf02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf04:	1ad3      	subs	r3, r2, r3
 800cf06:	2b02      	cmp	r3, #2
 800cf08:	d901      	bls.n	800cf0e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800cf0a:	2303      	movs	r3, #3
 800cf0c:	e280      	b.n	800d410 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cf0e:	4b55      	ldr	r3, [pc, #340]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d0f0      	beq.n	800cefc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cf1a:	f7fa fe0b 	bl	8007b34 <HAL_GetREVID>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	f241 0203 	movw	r2, #4099	; 0x1003
 800cf24:	4293      	cmp	r3, r2
 800cf26:	d817      	bhi.n	800cf58 <HAL_RCC_OscConfig+0x3ec>
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6a1b      	ldr	r3, [r3, #32]
 800cf2c:	2b20      	cmp	r3, #32
 800cf2e:	d108      	bne.n	800cf42 <HAL_RCC_OscConfig+0x3d6>
 800cf30:	4b4c      	ldr	r3, [pc, #304]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800cf32:	685b      	ldr	r3, [r3, #4]
 800cf34:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800cf38:	4a4a      	ldr	r2, [pc, #296]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800cf3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cf3e:	6053      	str	r3, [r2, #4]
 800cf40:	e02e      	b.n	800cfa0 <HAL_RCC_OscConfig+0x434>
 800cf42:	4b48      	ldr	r3, [pc, #288]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800cf44:	685b      	ldr	r3, [r3, #4]
 800cf46:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6a1b      	ldr	r3, [r3, #32]
 800cf4e:	069b      	lsls	r3, r3, #26
 800cf50:	4944      	ldr	r1, [pc, #272]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800cf52:	4313      	orrs	r3, r2
 800cf54:	604b      	str	r3, [r1, #4]
 800cf56:	e023      	b.n	800cfa0 <HAL_RCC_OscConfig+0x434>
 800cf58:	4b42      	ldr	r3, [pc, #264]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800cf5a:	68db      	ldr	r3, [r3, #12]
 800cf5c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6a1b      	ldr	r3, [r3, #32]
 800cf64:	061b      	lsls	r3, r3, #24
 800cf66:	493f      	ldr	r1, [pc, #252]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800cf68:	4313      	orrs	r3, r2
 800cf6a:	60cb      	str	r3, [r1, #12]
 800cf6c:	e018      	b.n	800cfa0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800cf6e:	4b3d      	ldr	r3, [pc, #244]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	4a3c      	ldr	r2, [pc, #240]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800cf74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf7a:	f7fa fdab 	bl	8007ad4 <HAL_GetTick>
 800cf7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cf80:	e008      	b.n	800cf94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800cf82:	f7fa fda7 	bl	8007ad4 <HAL_GetTick>
 800cf86:	4602      	mov	r2, r0
 800cf88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8a:	1ad3      	subs	r3, r2, r3
 800cf8c:	2b02      	cmp	r3, #2
 800cf8e:	d901      	bls.n	800cf94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800cf90:	2303      	movs	r3, #3
 800cf92:	e23d      	b.n	800d410 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cf94:	4b33      	ldr	r3, [pc, #204]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d1f0      	bne.n	800cf82 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f003 0308 	and.w	r3, r3, #8
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d036      	beq.n	800d01a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	695b      	ldr	r3, [r3, #20]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d019      	beq.n	800cfe8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cfb4:	4b2b      	ldr	r3, [pc, #172]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800cfb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfb8:	4a2a      	ldr	r2, [pc, #168]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800cfba:	f043 0301 	orr.w	r3, r3, #1
 800cfbe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cfc0:	f7fa fd88 	bl	8007ad4 <HAL_GetTick>
 800cfc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cfc6:	e008      	b.n	800cfda <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cfc8:	f7fa fd84 	bl	8007ad4 <HAL_GetTick>
 800cfcc:	4602      	mov	r2, r0
 800cfce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd0:	1ad3      	subs	r3, r2, r3
 800cfd2:	2b02      	cmp	r3, #2
 800cfd4:	d901      	bls.n	800cfda <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800cfd6:	2303      	movs	r3, #3
 800cfd8:	e21a      	b.n	800d410 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cfda:	4b22      	ldr	r3, [pc, #136]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800cfdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfde:	f003 0302 	and.w	r3, r3, #2
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d0f0      	beq.n	800cfc8 <HAL_RCC_OscConfig+0x45c>
 800cfe6:	e018      	b.n	800d01a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cfe8:	4b1e      	ldr	r3, [pc, #120]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800cfea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfec:	4a1d      	ldr	r2, [pc, #116]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800cfee:	f023 0301 	bic.w	r3, r3, #1
 800cff2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cff4:	f7fa fd6e 	bl	8007ad4 <HAL_GetTick>
 800cff8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cffa:	e008      	b.n	800d00e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cffc:	f7fa fd6a 	bl	8007ad4 <HAL_GetTick>
 800d000:	4602      	mov	r2, r0
 800d002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d004:	1ad3      	subs	r3, r2, r3
 800d006:	2b02      	cmp	r3, #2
 800d008:	d901      	bls.n	800d00e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800d00a:	2303      	movs	r3, #3
 800d00c:	e200      	b.n	800d410 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d00e:	4b15      	ldr	r3, [pc, #84]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800d010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d012:	f003 0302 	and.w	r3, r3, #2
 800d016:	2b00      	cmp	r3, #0
 800d018:	d1f0      	bne.n	800cffc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f003 0320 	and.w	r3, r3, #32
 800d022:	2b00      	cmp	r3, #0
 800d024:	d039      	beq.n	800d09a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	699b      	ldr	r3, [r3, #24]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d01c      	beq.n	800d068 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d02e:	4b0d      	ldr	r3, [pc, #52]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	4a0c      	ldr	r2, [pc, #48]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800d034:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d038:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d03a:	f7fa fd4b 	bl	8007ad4 <HAL_GetTick>
 800d03e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d040:	e008      	b.n	800d054 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d042:	f7fa fd47 	bl	8007ad4 <HAL_GetTick>
 800d046:	4602      	mov	r2, r0
 800d048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04a:	1ad3      	subs	r3, r2, r3
 800d04c:	2b02      	cmp	r3, #2
 800d04e:	d901      	bls.n	800d054 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800d050:	2303      	movs	r3, #3
 800d052:	e1dd      	b.n	800d410 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d054:	4b03      	ldr	r3, [pc, #12]	; (800d064 <HAL_RCC_OscConfig+0x4f8>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d0f0      	beq.n	800d042 <HAL_RCC_OscConfig+0x4d6>
 800d060:	e01b      	b.n	800d09a <HAL_RCC_OscConfig+0x52e>
 800d062:	bf00      	nop
 800d064:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d068:	4b9b      	ldr	r3, [pc, #620]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	4a9a      	ldr	r2, [pc, #616]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d06e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d072:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d074:	f7fa fd2e 	bl	8007ad4 <HAL_GetTick>
 800d078:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d07a:	e008      	b.n	800d08e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d07c:	f7fa fd2a 	bl	8007ad4 <HAL_GetTick>
 800d080:	4602      	mov	r2, r0
 800d082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d084:	1ad3      	subs	r3, r2, r3
 800d086:	2b02      	cmp	r3, #2
 800d088:	d901      	bls.n	800d08e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800d08a:	2303      	movs	r3, #3
 800d08c:	e1c0      	b.n	800d410 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d08e:	4b92      	ldr	r3, [pc, #584]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d096:	2b00      	cmp	r3, #0
 800d098:	d1f0      	bne.n	800d07c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f003 0304 	and.w	r3, r3, #4
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	f000 8081 	beq.w	800d1aa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d0a8:	4b8c      	ldr	r3, [pc, #560]	; (800d2dc <HAL_RCC_OscConfig+0x770>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4a8b      	ldr	r2, [pc, #556]	; (800d2dc <HAL_RCC_OscConfig+0x770>)
 800d0ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d0b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d0b4:	f7fa fd0e 	bl	8007ad4 <HAL_GetTick>
 800d0b8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d0ba:	e008      	b.n	800d0ce <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d0bc:	f7fa fd0a 	bl	8007ad4 <HAL_GetTick>
 800d0c0:	4602      	mov	r2, r0
 800d0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c4:	1ad3      	subs	r3, r2, r3
 800d0c6:	2b64      	cmp	r3, #100	; 0x64
 800d0c8:	d901      	bls.n	800d0ce <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800d0ca:	2303      	movs	r3, #3
 800d0cc:	e1a0      	b.n	800d410 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d0ce:	4b83      	ldr	r3, [pc, #524]	; (800d2dc <HAL_RCC_OscConfig+0x770>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d0f0      	beq.n	800d0bc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	689b      	ldr	r3, [r3, #8]
 800d0de:	2b01      	cmp	r3, #1
 800d0e0:	d106      	bne.n	800d0f0 <HAL_RCC_OscConfig+0x584>
 800d0e2:	4b7d      	ldr	r3, [pc, #500]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d0e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0e6:	4a7c      	ldr	r2, [pc, #496]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d0e8:	f043 0301 	orr.w	r3, r3, #1
 800d0ec:	6713      	str	r3, [r2, #112]	; 0x70
 800d0ee:	e02d      	b.n	800d14c <HAL_RCC_OscConfig+0x5e0>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	689b      	ldr	r3, [r3, #8]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d10c      	bne.n	800d112 <HAL_RCC_OscConfig+0x5a6>
 800d0f8:	4b77      	ldr	r3, [pc, #476]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d0fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0fc:	4a76      	ldr	r2, [pc, #472]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d0fe:	f023 0301 	bic.w	r3, r3, #1
 800d102:	6713      	str	r3, [r2, #112]	; 0x70
 800d104:	4b74      	ldr	r3, [pc, #464]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d108:	4a73      	ldr	r2, [pc, #460]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d10a:	f023 0304 	bic.w	r3, r3, #4
 800d10e:	6713      	str	r3, [r2, #112]	; 0x70
 800d110:	e01c      	b.n	800d14c <HAL_RCC_OscConfig+0x5e0>
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	689b      	ldr	r3, [r3, #8]
 800d116:	2b05      	cmp	r3, #5
 800d118:	d10c      	bne.n	800d134 <HAL_RCC_OscConfig+0x5c8>
 800d11a:	4b6f      	ldr	r3, [pc, #444]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d11c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d11e:	4a6e      	ldr	r2, [pc, #440]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d120:	f043 0304 	orr.w	r3, r3, #4
 800d124:	6713      	str	r3, [r2, #112]	; 0x70
 800d126:	4b6c      	ldr	r3, [pc, #432]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d12a:	4a6b      	ldr	r2, [pc, #428]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d12c:	f043 0301 	orr.w	r3, r3, #1
 800d130:	6713      	str	r3, [r2, #112]	; 0x70
 800d132:	e00b      	b.n	800d14c <HAL_RCC_OscConfig+0x5e0>
 800d134:	4b68      	ldr	r3, [pc, #416]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d138:	4a67      	ldr	r2, [pc, #412]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d13a:	f023 0301 	bic.w	r3, r3, #1
 800d13e:	6713      	str	r3, [r2, #112]	; 0x70
 800d140:	4b65      	ldr	r3, [pc, #404]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d144:	4a64      	ldr	r2, [pc, #400]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d146:	f023 0304 	bic.w	r3, r3, #4
 800d14a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	689b      	ldr	r3, [r3, #8]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d015      	beq.n	800d180 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d154:	f7fa fcbe 	bl	8007ad4 <HAL_GetTick>
 800d158:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d15a:	e00a      	b.n	800d172 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d15c:	f7fa fcba 	bl	8007ad4 <HAL_GetTick>
 800d160:	4602      	mov	r2, r0
 800d162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d164:	1ad3      	subs	r3, r2, r3
 800d166:	f241 3288 	movw	r2, #5000	; 0x1388
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d901      	bls.n	800d172 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800d16e:	2303      	movs	r3, #3
 800d170:	e14e      	b.n	800d410 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d172:	4b59      	ldr	r3, [pc, #356]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d176:	f003 0302 	and.w	r3, r3, #2
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d0ee      	beq.n	800d15c <HAL_RCC_OscConfig+0x5f0>
 800d17e:	e014      	b.n	800d1aa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d180:	f7fa fca8 	bl	8007ad4 <HAL_GetTick>
 800d184:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d186:	e00a      	b.n	800d19e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d188:	f7fa fca4 	bl	8007ad4 <HAL_GetTick>
 800d18c:	4602      	mov	r2, r0
 800d18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d190:	1ad3      	subs	r3, r2, r3
 800d192:	f241 3288 	movw	r2, #5000	; 0x1388
 800d196:	4293      	cmp	r3, r2
 800d198:	d901      	bls.n	800d19e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800d19a:	2303      	movs	r3, #3
 800d19c:	e138      	b.n	800d410 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d19e:	4b4e      	ldr	r3, [pc, #312]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d1a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1a2:	f003 0302 	and.w	r3, r3, #2
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d1ee      	bne.n	800d188 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	f000 812d 	beq.w	800d40e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800d1b4:	4b48      	ldr	r3, [pc, #288]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d1b6:	691b      	ldr	r3, [r3, #16]
 800d1b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d1bc:	2b18      	cmp	r3, #24
 800d1be:	f000 80bd 	beq.w	800d33c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1c6:	2b02      	cmp	r3, #2
 800d1c8:	f040 809e 	bne.w	800d308 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d1cc:	4b42      	ldr	r3, [pc, #264]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4a41      	ldr	r2, [pc, #260]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d1d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d1d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d1d8:	f7fa fc7c 	bl	8007ad4 <HAL_GetTick>
 800d1dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d1de:	e008      	b.n	800d1f2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d1e0:	f7fa fc78 	bl	8007ad4 <HAL_GetTick>
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e8:	1ad3      	subs	r3, r2, r3
 800d1ea:	2b02      	cmp	r3, #2
 800d1ec:	d901      	bls.n	800d1f2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800d1ee:	2303      	movs	r3, #3
 800d1f0:	e10e      	b.n	800d410 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d1f2:	4b39      	ldr	r3, [pc, #228]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d1f0      	bne.n	800d1e0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d1fe:	4b36      	ldr	r3, [pc, #216]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d200:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d202:	4b37      	ldr	r3, [pc, #220]	; (800d2e0 <HAL_RCC_OscConfig+0x774>)
 800d204:	4013      	ands	r3, r2
 800d206:	687a      	ldr	r2, [r7, #4]
 800d208:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800d20a:	687a      	ldr	r2, [r7, #4]
 800d20c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d20e:	0112      	lsls	r2, r2, #4
 800d210:	430a      	orrs	r2, r1
 800d212:	4931      	ldr	r1, [pc, #196]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d214:	4313      	orrs	r3, r2
 800d216:	628b      	str	r3, [r1, #40]	; 0x28
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d21c:	3b01      	subs	r3, #1
 800d21e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d226:	3b01      	subs	r3, #1
 800d228:	025b      	lsls	r3, r3, #9
 800d22a:	b29b      	uxth	r3, r3
 800d22c:	431a      	orrs	r2, r3
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d232:	3b01      	subs	r3, #1
 800d234:	041b      	lsls	r3, r3, #16
 800d236:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d23a:	431a      	orrs	r2, r3
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d240:	3b01      	subs	r3, #1
 800d242:	061b      	lsls	r3, r3, #24
 800d244:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d248:	4923      	ldr	r1, [pc, #140]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d24a:	4313      	orrs	r3, r2
 800d24c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800d24e:	4b22      	ldr	r3, [pc, #136]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d252:	4a21      	ldr	r2, [pc, #132]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d254:	f023 0301 	bic.w	r3, r3, #1
 800d258:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d25a:	4b1f      	ldr	r3, [pc, #124]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d25c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d25e:	4b21      	ldr	r3, [pc, #132]	; (800d2e4 <HAL_RCC_OscConfig+0x778>)
 800d260:	4013      	ands	r3, r2
 800d262:	687a      	ldr	r2, [r7, #4]
 800d264:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d266:	00d2      	lsls	r2, r2, #3
 800d268:	491b      	ldr	r1, [pc, #108]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d26a:	4313      	orrs	r3, r2
 800d26c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d26e:	4b1a      	ldr	r3, [pc, #104]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d272:	f023 020c 	bic.w	r2, r3, #12
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d27a:	4917      	ldr	r1, [pc, #92]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d27c:	4313      	orrs	r3, r2
 800d27e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d280:	4b15      	ldr	r3, [pc, #84]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d284:	f023 0202 	bic.w	r2, r3, #2
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d28c:	4912      	ldr	r1, [pc, #72]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d28e:	4313      	orrs	r3, r2
 800d290:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d292:	4b11      	ldr	r3, [pc, #68]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d296:	4a10      	ldr	r2, [pc, #64]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d29c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d29e:	4b0e      	ldr	r3, [pc, #56]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a2:	4a0d      	ldr	r2, [pc, #52]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d2a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d2a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d2aa:	4b0b      	ldr	r3, [pc, #44]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ae:	4a0a      	ldr	r2, [pc, #40]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d2b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d2b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800d2b6:	4b08      	ldr	r3, [pc, #32]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d2b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ba:	4a07      	ldr	r2, [pc, #28]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d2bc:	f043 0301 	orr.w	r3, r3, #1
 800d2c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d2c2:	4b05      	ldr	r3, [pc, #20]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	4a04      	ldr	r2, [pc, #16]	; (800d2d8 <HAL_RCC_OscConfig+0x76c>)
 800d2c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d2cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2ce:	f7fa fc01 	bl	8007ad4 <HAL_GetTick>
 800d2d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d2d4:	e011      	b.n	800d2fa <HAL_RCC_OscConfig+0x78e>
 800d2d6:	bf00      	nop
 800d2d8:	58024400 	.word	0x58024400
 800d2dc:	58024800 	.word	0x58024800
 800d2e0:	fffffc0c 	.word	0xfffffc0c
 800d2e4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d2e8:	f7fa fbf4 	bl	8007ad4 <HAL_GetTick>
 800d2ec:	4602      	mov	r2, r0
 800d2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2f0:	1ad3      	subs	r3, r2, r3
 800d2f2:	2b02      	cmp	r3, #2
 800d2f4:	d901      	bls.n	800d2fa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800d2f6:	2303      	movs	r3, #3
 800d2f8:	e08a      	b.n	800d410 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d2fa:	4b47      	ldr	r3, [pc, #284]	; (800d418 <HAL_RCC_OscConfig+0x8ac>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d302:	2b00      	cmp	r3, #0
 800d304:	d0f0      	beq.n	800d2e8 <HAL_RCC_OscConfig+0x77c>
 800d306:	e082      	b.n	800d40e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d308:	4b43      	ldr	r3, [pc, #268]	; (800d418 <HAL_RCC_OscConfig+0x8ac>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	4a42      	ldr	r2, [pc, #264]	; (800d418 <HAL_RCC_OscConfig+0x8ac>)
 800d30e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d314:	f7fa fbde 	bl	8007ad4 <HAL_GetTick>
 800d318:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d31a:	e008      	b.n	800d32e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d31c:	f7fa fbda 	bl	8007ad4 <HAL_GetTick>
 800d320:	4602      	mov	r2, r0
 800d322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d324:	1ad3      	subs	r3, r2, r3
 800d326:	2b02      	cmp	r3, #2
 800d328:	d901      	bls.n	800d32e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800d32a:	2303      	movs	r3, #3
 800d32c:	e070      	b.n	800d410 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d32e:	4b3a      	ldr	r3, [pc, #232]	; (800d418 <HAL_RCC_OscConfig+0x8ac>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d336:	2b00      	cmp	r3, #0
 800d338:	d1f0      	bne.n	800d31c <HAL_RCC_OscConfig+0x7b0>
 800d33a:	e068      	b.n	800d40e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d33c:	4b36      	ldr	r3, [pc, #216]	; (800d418 <HAL_RCC_OscConfig+0x8ac>)
 800d33e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d340:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d342:	4b35      	ldr	r3, [pc, #212]	; (800d418 <HAL_RCC_OscConfig+0x8ac>)
 800d344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d346:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d34c:	2b01      	cmp	r3, #1
 800d34e:	d031      	beq.n	800d3b4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	f003 0203 	and.w	r2, r3, #3
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d12a      	bne.n	800d3b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	091b      	lsrs	r3, r3, #4
 800d362:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d122      	bne.n	800d3b4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d378:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d11a      	bne.n	800d3b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	0a5b      	lsrs	r3, r3, #9
 800d382:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d38a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d111      	bne.n	800d3b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	0c1b      	lsrs	r3, r3, #16
 800d394:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d39c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d39e:	429a      	cmp	r2, r3
 800d3a0:	d108      	bne.n	800d3b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	0e1b      	lsrs	r3, r3, #24
 800d3a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3ae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	d001      	beq.n	800d3b8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	e02b      	b.n	800d410 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800d3b8:	4b17      	ldr	r3, [pc, #92]	; (800d418 <HAL_RCC_OscConfig+0x8ac>)
 800d3ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3bc:	08db      	lsrs	r3, r3, #3
 800d3be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d3c2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3c8:	693a      	ldr	r2, [r7, #16]
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	d01f      	beq.n	800d40e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800d3ce:	4b12      	ldr	r3, [pc, #72]	; (800d418 <HAL_RCC_OscConfig+0x8ac>)
 800d3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3d2:	4a11      	ldr	r2, [pc, #68]	; (800d418 <HAL_RCC_OscConfig+0x8ac>)
 800d3d4:	f023 0301 	bic.w	r3, r3, #1
 800d3d8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d3da:	f7fa fb7b 	bl	8007ad4 <HAL_GetTick>
 800d3de:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800d3e0:	bf00      	nop
 800d3e2:	f7fa fb77 	bl	8007ad4 <HAL_GetTick>
 800d3e6:	4602      	mov	r2, r0
 800d3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ea:	4293      	cmp	r3, r2
 800d3ec:	d0f9      	beq.n	800d3e2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d3ee:	4b0a      	ldr	r3, [pc, #40]	; (800d418 <HAL_RCC_OscConfig+0x8ac>)
 800d3f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3f2:	4b0a      	ldr	r3, [pc, #40]	; (800d41c <HAL_RCC_OscConfig+0x8b0>)
 800d3f4:	4013      	ands	r3, r2
 800d3f6:	687a      	ldr	r2, [r7, #4]
 800d3f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d3fa:	00d2      	lsls	r2, r2, #3
 800d3fc:	4906      	ldr	r1, [pc, #24]	; (800d418 <HAL_RCC_OscConfig+0x8ac>)
 800d3fe:	4313      	orrs	r3, r2
 800d400:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800d402:	4b05      	ldr	r3, [pc, #20]	; (800d418 <HAL_RCC_OscConfig+0x8ac>)
 800d404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d406:	4a04      	ldr	r2, [pc, #16]	; (800d418 <HAL_RCC_OscConfig+0x8ac>)
 800d408:	f043 0301 	orr.w	r3, r3, #1
 800d40c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800d40e:	2300      	movs	r3, #0
}
 800d410:	4618      	mov	r0, r3
 800d412:	3730      	adds	r7, #48	; 0x30
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}
 800d418:	58024400 	.word	0x58024400
 800d41c:	ffff0007 	.word	0xffff0007

0800d420 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b086      	sub	sp, #24
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d101      	bne.n	800d434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d430:	2301      	movs	r3, #1
 800d432:	e19c      	b.n	800d76e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d434:	4b8a      	ldr	r3, [pc, #552]	; (800d660 <HAL_RCC_ClockConfig+0x240>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f003 030f 	and.w	r3, r3, #15
 800d43c:	683a      	ldr	r2, [r7, #0]
 800d43e:	429a      	cmp	r2, r3
 800d440:	d910      	bls.n	800d464 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d442:	4b87      	ldr	r3, [pc, #540]	; (800d660 <HAL_RCC_ClockConfig+0x240>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f023 020f 	bic.w	r2, r3, #15
 800d44a:	4985      	ldr	r1, [pc, #532]	; (800d660 <HAL_RCC_ClockConfig+0x240>)
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	4313      	orrs	r3, r2
 800d450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d452:	4b83      	ldr	r3, [pc, #524]	; (800d660 <HAL_RCC_ClockConfig+0x240>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	f003 030f 	and.w	r3, r3, #15
 800d45a:	683a      	ldr	r2, [r7, #0]
 800d45c:	429a      	cmp	r2, r3
 800d45e:	d001      	beq.n	800d464 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d460:	2301      	movs	r3, #1
 800d462:	e184      	b.n	800d76e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f003 0304 	and.w	r3, r3, #4
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d010      	beq.n	800d492 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	691a      	ldr	r2, [r3, #16]
 800d474:	4b7b      	ldr	r3, [pc, #492]	; (800d664 <HAL_RCC_ClockConfig+0x244>)
 800d476:	699b      	ldr	r3, [r3, #24]
 800d478:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d47c:	429a      	cmp	r2, r3
 800d47e:	d908      	bls.n	800d492 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d480:	4b78      	ldr	r3, [pc, #480]	; (800d664 <HAL_RCC_ClockConfig+0x244>)
 800d482:	699b      	ldr	r3, [r3, #24]
 800d484:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	691b      	ldr	r3, [r3, #16]
 800d48c:	4975      	ldr	r1, [pc, #468]	; (800d664 <HAL_RCC_ClockConfig+0x244>)
 800d48e:	4313      	orrs	r3, r2
 800d490:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f003 0308 	and.w	r3, r3, #8
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d010      	beq.n	800d4c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	695a      	ldr	r2, [r3, #20]
 800d4a2:	4b70      	ldr	r3, [pc, #448]	; (800d664 <HAL_RCC_ClockConfig+0x244>)
 800d4a4:	69db      	ldr	r3, [r3, #28]
 800d4a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d908      	bls.n	800d4c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d4ae:	4b6d      	ldr	r3, [pc, #436]	; (800d664 <HAL_RCC_ClockConfig+0x244>)
 800d4b0:	69db      	ldr	r3, [r3, #28]
 800d4b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	695b      	ldr	r3, [r3, #20]
 800d4ba:	496a      	ldr	r1, [pc, #424]	; (800d664 <HAL_RCC_ClockConfig+0x244>)
 800d4bc:	4313      	orrs	r3, r2
 800d4be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	f003 0310 	and.w	r3, r3, #16
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d010      	beq.n	800d4ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	699a      	ldr	r2, [r3, #24]
 800d4d0:	4b64      	ldr	r3, [pc, #400]	; (800d664 <HAL_RCC_ClockConfig+0x244>)
 800d4d2:	69db      	ldr	r3, [r3, #28]
 800d4d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d4d8:	429a      	cmp	r2, r3
 800d4da:	d908      	bls.n	800d4ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d4dc:	4b61      	ldr	r3, [pc, #388]	; (800d664 <HAL_RCC_ClockConfig+0x244>)
 800d4de:	69db      	ldr	r3, [r3, #28]
 800d4e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	699b      	ldr	r3, [r3, #24]
 800d4e8:	495e      	ldr	r1, [pc, #376]	; (800d664 <HAL_RCC_ClockConfig+0x244>)
 800d4ea:	4313      	orrs	r3, r2
 800d4ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	f003 0320 	and.w	r3, r3, #32
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d010      	beq.n	800d51c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	69da      	ldr	r2, [r3, #28]
 800d4fe:	4b59      	ldr	r3, [pc, #356]	; (800d664 <HAL_RCC_ClockConfig+0x244>)
 800d500:	6a1b      	ldr	r3, [r3, #32]
 800d502:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d506:	429a      	cmp	r2, r3
 800d508:	d908      	bls.n	800d51c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d50a:	4b56      	ldr	r3, [pc, #344]	; (800d664 <HAL_RCC_ClockConfig+0x244>)
 800d50c:	6a1b      	ldr	r3, [r3, #32]
 800d50e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	69db      	ldr	r3, [r3, #28]
 800d516:	4953      	ldr	r1, [pc, #332]	; (800d664 <HAL_RCC_ClockConfig+0x244>)
 800d518:	4313      	orrs	r3, r2
 800d51a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	f003 0302 	and.w	r3, r3, #2
 800d524:	2b00      	cmp	r3, #0
 800d526:	d010      	beq.n	800d54a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	68da      	ldr	r2, [r3, #12]
 800d52c:	4b4d      	ldr	r3, [pc, #308]	; (800d664 <HAL_RCC_ClockConfig+0x244>)
 800d52e:	699b      	ldr	r3, [r3, #24]
 800d530:	f003 030f 	and.w	r3, r3, #15
 800d534:	429a      	cmp	r2, r3
 800d536:	d908      	bls.n	800d54a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d538:	4b4a      	ldr	r3, [pc, #296]	; (800d664 <HAL_RCC_ClockConfig+0x244>)
 800d53a:	699b      	ldr	r3, [r3, #24]
 800d53c:	f023 020f 	bic.w	r2, r3, #15
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	68db      	ldr	r3, [r3, #12]
 800d544:	4947      	ldr	r1, [pc, #284]	; (800d664 <HAL_RCC_ClockConfig+0x244>)
 800d546:	4313      	orrs	r3, r2
 800d548:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	f003 0301 	and.w	r3, r3, #1
 800d552:	2b00      	cmp	r3, #0
 800d554:	d055      	beq.n	800d602 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d556:	4b43      	ldr	r3, [pc, #268]	; (800d664 <HAL_RCC_ClockConfig+0x244>)
 800d558:	699b      	ldr	r3, [r3, #24]
 800d55a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	689b      	ldr	r3, [r3, #8]
 800d562:	4940      	ldr	r1, [pc, #256]	; (800d664 <HAL_RCC_ClockConfig+0x244>)
 800d564:	4313      	orrs	r3, r2
 800d566:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	685b      	ldr	r3, [r3, #4]
 800d56c:	2b02      	cmp	r3, #2
 800d56e:	d107      	bne.n	800d580 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d570:	4b3c      	ldr	r3, [pc, #240]	; (800d664 <HAL_RCC_ClockConfig+0x244>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d121      	bne.n	800d5c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d57c:	2301      	movs	r3, #1
 800d57e:	e0f6      	b.n	800d76e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	685b      	ldr	r3, [r3, #4]
 800d584:	2b03      	cmp	r3, #3
 800d586:	d107      	bne.n	800d598 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d588:	4b36      	ldr	r3, [pc, #216]	; (800d664 <HAL_RCC_ClockConfig+0x244>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d590:	2b00      	cmp	r3, #0
 800d592:	d115      	bne.n	800d5c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d594:	2301      	movs	r3, #1
 800d596:	e0ea      	b.n	800d76e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	685b      	ldr	r3, [r3, #4]
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d107      	bne.n	800d5b0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d5a0:	4b30      	ldr	r3, [pc, #192]	; (800d664 <HAL_RCC_ClockConfig+0x244>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d109      	bne.n	800d5c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	e0de      	b.n	800d76e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d5b0:	4b2c      	ldr	r3, [pc, #176]	; (800d664 <HAL_RCC_ClockConfig+0x244>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f003 0304 	and.w	r3, r3, #4
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d101      	bne.n	800d5c0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d5bc:	2301      	movs	r3, #1
 800d5be:	e0d6      	b.n	800d76e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d5c0:	4b28      	ldr	r3, [pc, #160]	; (800d664 <HAL_RCC_ClockConfig+0x244>)
 800d5c2:	691b      	ldr	r3, [r3, #16]
 800d5c4:	f023 0207 	bic.w	r2, r3, #7
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	685b      	ldr	r3, [r3, #4]
 800d5cc:	4925      	ldr	r1, [pc, #148]	; (800d664 <HAL_RCC_ClockConfig+0x244>)
 800d5ce:	4313      	orrs	r3, r2
 800d5d0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d5d2:	f7fa fa7f 	bl	8007ad4 <HAL_GetTick>
 800d5d6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d5d8:	e00a      	b.n	800d5f0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d5da:	f7fa fa7b 	bl	8007ad4 <HAL_GetTick>
 800d5de:	4602      	mov	r2, r0
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	1ad3      	subs	r3, r2, r3
 800d5e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5e8:	4293      	cmp	r3, r2
 800d5ea:	d901      	bls.n	800d5f0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800d5ec:	2303      	movs	r3, #3
 800d5ee:	e0be      	b.n	800d76e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d5f0:	4b1c      	ldr	r3, [pc, #112]	; (800d664 <HAL_RCC_ClockConfig+0x244>)
 800d5f2:	691b      	ldr	r3, [r3, #16]
 800d5f4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	685b      	ldr	r3, [r3, #4]
 800d5fc:	00db      	lsls	r3, r3, #3
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d1eb      	bne.n	800d5da <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f003 0302 	and.w	r3, r3, #2
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d010      	beq.n	800d630 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	68da      	ldr	r2, [r3, #12]
 800d612:	4b14      	ldr	r3, [pc, #80]	; (800d664 <HAL_RCC_ClockConfig+0x244>)
 800d614:	699b      	ldr	r3, [r3, #24]
 800d616:	f003 030f 	and.w	r3, r3, #15
 800d61a:	429a      	cmp	r2, r3
 800d61c:	d208      	bcs.n	800d630 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d61e:	4b11      	ldr	r3, [pc, #68]	; (800d664 <HAL_RCC_ClockConfig+0x244>)
 800d620:	699b      	ldr	r3, [r3, #24]
 800d622:	f023 020f 	bic.w	r2, r3, #15
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	490e      	ldr	r1, [pc, #56]	; (800d664 <HAL_RCC_ClockConfig+0x244>)
 800d62c:	4313      	orrs	r3, r2
 800d62e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d630:	4b0b      	ldr	r3, [pc, #44]	; (800d660 <HAL_RCC_ClockConfig+0x240>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	f003 030f 	and.w	r3, r3, #15
 800d638:	683a      	ldr	r2, [r7, #0]
 800d63a:	429a      	cmp	r2, r3
 800d63c:	d214      	bcs.n	800d668 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d63e:	4b08      	ldr	r3, [pc, #32]	; (800d660 <HAL_RCC_ClockConfig+0x240>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	f023 020f 	bic.w	r2, r3, #15
 800d646:	4906      	ldr	r1, [pc, #24]	; (800d660 <HAL_RCC_ClockConfig+0x240>)
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	4313      	orrs	r3, r2
 800d64c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d64e:	4b04      	ldr	r3, [pc, #16]	; (800d660 <HAL_RCC_ClockConfig+0x240>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f003 030f 	and.w	r3, r3, #15
 800d656:	683a      	ldr	r2, [r7, #0]
 800d658:	429a      	cmp	r2, r3
 800d65a:	d005      	beq.n	800d668 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800d65c:	2301      	movs	r3, #1
 800d65e:	e086      	b.n	800d76e <HAL_RCC_ClockConfig+0x34e>
 800d660:	52002000 	.word	0x52002000
 800d664:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f003 0304 	and.w	r3, r3, #4
 800d670:	2b00      	cmp	r3, #0
 800d672:	d010      	beq.n	800d696 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	691a      	ldr	r2, [r3, #16]
 800d678:	4b3f      	ldr	r3, [pc, #252]	; (800d778 <HAL_RCC_ClockConfig+0x358>)
 800d67a:	699b      	ldr	r3, [r3, #24]
 800d67c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d680:	429a      	cmp	r2, r3
 800d682:	d208      	bcs.n	800d696 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d684:	4b3c      	ldr	r3, [pc, #240]	; (800d778 <HAL_RCC_ClockConfig+0x358>)
 800d686:	699b      	ldr	r3, [r3, #24]
 800d688:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	691b      	ldr	r3, [r3, #16]
 800d690:	4939      	ldr	r1, [pc, #228]	; (800d778 <HAL_RCC_ClockConfig+0x358>)
 800d692:	4313      	orrs	r3, r2
 800d694:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f003 0308 	and.w	r3, r3, #8
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d010      	beq.n	800d6c4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	695a      	ldr	r2, [r3, #20]
 800d6a6:	4b34      	ldr	r3, [pc, #208]	; (800d778 <HAL_RCC_ClockConfig+0x358>)
 800d6a8:	69db      	ldr	r3, [r3, #28]
 800d6aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d208      	bcs.n	800d6c4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d6b2:	4b31      	ldr	r3, [pc, #196]	; (800d778 <HAL_RCC_ClockConfig+0x358>)
 800d6b4:	69db      	ldr	r3, [r3, #28]
 800d6b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	695b      	ldr	r3, [r3, #20]
 800d6be:	492e      	ldr	r1, [pc, #184]	; (800d778 <HAL_RCC_ClockConfig+0x358>)
 800d6c0:	4313      	orrs	r3, r2
 800d6c2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f003 0310 	and.w	r3, r3, #16
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d010      	beq.n	800d6f2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	699a      	ldr	r2, [r3, #24]
 800d6d4:	4b28      	ldr	r3, [pc, #160]	; (800d778 <HAL_RCC_ClockConfig+0x358>)
 800d6d6:	69db      	ldr	r3, [r3, #28]
 800d6d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	d208      	bcs.n	800d6f2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d6e0:	4b25      	ldr	r3, [pc, #148]	; (800d778 <HAL_RCC_ClockConfig+0x358>)
 800d6e2:	69db      	ldr	r3, [r3, #28]
 800d6e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	699b      	ldr	r3, [r3, #24]
 800d6ec:	4922      	ldr	r1, [pc, #136]	; (800d778 <HAL_RCC_ClockConfig+0x358>)
 800d6ee:	4313      	orrs	r3, r2
 800d6f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	f003 0320 	and.w	r3, r3, #32
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d010      	beq.n	800d720 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	69da      	ldr	r2, [r3, #28]
 800d702:	4b1d      	ldr	r3, [pc, #116]	; (800d778 <HAL_RCC_ClockConfig+0x358>)
 800d704:	6a1b      	ldr	r3, [r3, #32]
 800d706:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d70a:	429a      	cmp	r2, r3
 800d70c:	d208      	bcs.n	800d720 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d70e:	4b1a      	ldr	r3, [pc, #104]	; (800d778 <HAL_RCC_ClockConfig+0x358>)
 800d710:	6a1b      	ldr	r3, [r3, #32]
 800d712:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	69db      	ldr	r3, [r3, #28]
 800d71a:	4917      	ldr	r1, [pc, #92]	; (800d778 <HAL_RCC_ClockConfig+0x358>)
 800d71c:	4313      	orrs	r3, r2
 800d71e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d720:	f000 f834 	bl	800d78c <HAL_RCC_GetSysClockFreq>
 800d724:	4602      	mov	r2, r0
 800d726:	4b14      	ldr	r3, [pc, #80]	; (800d778 <HAL_RCC_ClockConfig+0x358>)
 800d728:	699b      	ldr	r3, [r3, #24]
 800d72a:	0a1b      	lsrs	r3, r3, #8
 800d72c:	f003 030f 	and.w	r3, r3, #15
 800d730:	4912      	ldr	r1, [pc, #72]	; (800d77c <HAL_RCC_ClockConfig+0x35c>)
 800d732:	5ccb      	ldrb	r3, [r1, r3]
 800d734:	f003 031f 	and.w	r3, r3, #31
 800d738:	fa22 f303 	lsr.w	r3, r2, r3
 800d73c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d73e:	4b0e      	ldr	r3, [pc, #56]	; (800d778 <HAL_RCC_ClockConfig+0x358>)
 800d740:	699b      	ldr	r3, [r3, #24]
 800d742:	f003 030f 	and.w	r3, r3, #15
 800d746:	4a0d      	ldr	r2, [pc, #52]	; (800d77c <HAL_RCC_ClockConfig+0x35c>)
 800d748:	5cd3      	ldrb	r3, [r2, r3]
 800d74a:	f003 031f 	and.w	r3, r3, #31
 800d74e:	693a      	ldr	r2, [r7, #16]
 800d750:	fa22 f303 	lsr.w	r3, r2, r3
 800d754:	4a0a      	ldr	r2, [pc, #40]	; (800d780 <HAL_RCC_ClockConfig+0x360>)
 800d756:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d758:	4a0a      	ldr	r2, [pc, #40]	; (800d784 <HAL_RCC_ClockConfig+0x364>)
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800d75e:	4b0a      	ldr	r3, [pc, #40]	; (800d788 <HAL_RCC_ClockConfig+0x368>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	4618      	mov	r0, r3
 800d764:	f7fa f96c 	bl	8007a40 <HAL_InitTick>
 800d768:	4603      	mov	r3, r0
 800d76a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800d76c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3718      	adds	r7, #24
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
 800d776:	bf00      	nop
 800d778:	58024400 	.word	0x58024400
 800d77c:	0801b318 	.word	0x0801b318
 800d780:	240004e0 	.word	0x240004e0
 800d784:	240004dc 	.word	0x240004dc
 800d788:	24000544 	.word	0x24000544

0800d78c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d78c:	b480      	push	{r7}
 800d78e:	b089      	sub	sp, #36	; 0x24
 800d790:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d792:	4bb3      	ldr	r3, [pc, #716]	; (800da60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d794:	691b      	ldr	r3, [r3, #16]
 800d796:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d79a:	2b18      	cmp	r3, #24
 800d79c:	f200 8155 	bhi.w	800da4a <HAL_RCC_GetSysClockFreq+0x2be>
 800d7a0:	a201      	add	r2, pc, #4	; (adr r2, 800d7a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800d7a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7a6:	bf00      	nop
 800d7a8:	0800d80d 	.word	0x0800d80d
 800d7ac:	0800da4b 	.word	0x0800da4b
 800d7b0:	0800da4b 	.word	0x0800da4b
 800d7b4:	0800da4b 	.word	0x0800da4b
 800d7b8:	0800da4b 	.word	0x0800da4b
 800d7bc:	0800da4b 	.word	0x0800da4b
 800d7c0:	0800da4b 	.word	0x0800da4b
 800d7c4:	0800da4b 	.word	0x0800da4b
 800d7c8:	0800d833 	.word	0x0800d833
 800d7cc:	0800da4b 	.word	0x0800da4b
 800d7d0:	0800da4b 	.word	0x0800da4b
 800d7d4:	0800da4b 	.word	0x0800da4b
 800d7d8:	0800da4b 	.word	0x0800da4b
 800d7dc:	0800da4b 	.word	0x0800da4b
 800d7e0:	0800da4b 	.word	0x0800da4b
 800d7e4:	0800da4b 	.word	0x0800da4b
 800d7e8:	0800d839 	.word	0x0800d839
 800d7ec:	0800da4b 	.word	0x0800da4b
 800d7f0:	0800da4b 	.word	0x0800da4b
 800d7f4:	0800da4b 	.word	0x0800da4b
 800d7f8:	0800da4b 	.word	0x0800da4b
 800d7fc:	0800da4b 	.word	0x0800da4b
 800d800:	0800da4b 	.word	0x0800da4b
 800d804:	0800da4b 	.word	0x0800da4b
 800d808:	0800d83f 	.word	0x0800d83f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d80c:	4b94      	ldr	r3, [pc, #592]	; (800da60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f003 0320 	and.w	r3, r3, #32
 800d814:	2b00      	cmp	r3, #0
 800d816:	d009      	beq.n	800d82c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d818:	4b91      	ldr	r3, [pc, #580]	; (800da60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	08db      	lsrs	r3, r3, #3
 800d81e:	f003 0303 	and.w	r3, r3, #3
 800d822:	4a90      	ldr	r2, [pc, #576]	; (800da64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d824:	fa22 f303 	lsr.w	r3, r2, r3
 800d828:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800d82a:	e111      	b.n	800da50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d82c:	4b8d      	ldr	r3, [pc, #564]	; (800da64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d82e:	61bb      	str	r3, [r7, #24]
      break;
 800d830:	e10e      	b.n	800da50 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800d832:	4b8d      	ldr	r3, [pc, #564]	; (800da68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d834:	61bb      	str	r3, [r7, #24]
      break;
 800d836:	e10b      	b.n	800da50 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800d838:	4b8c      	ldr	r3, [pc, #560]	; (800da6c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800d83a:	61bb      	str	r3, [r7, #24]
      break;
 800d83c:	e108      	b.n	800da50 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d83e:	4b88      	ldr	r3, [pc, #544]	; (800da60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d842:	f003 0303 	and.w	r3, r3, #3
 800d846:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800d848:	4b85      	ldr	r3, [pc, #532]	; (800da60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d84a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d84c:	091b      	lsrs	r3, r3, #4
 800d84e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d852:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d854:	4b82      	ldr	r3, [pc, #520]	; (800da60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d858:	f003 0301 	and.w	r3, r3, #1
 800d85c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d85e:	4b80      	ldr	r3, [pc, #512]	; (800da60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d862:	08db      	lsrs	r3, r3, #3
 800d864:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d868:	68fa      	ldr	r2, [r7, #12]
 800d86a:	fb02 f303 	mul.w	r3, r2, r3
 800d86e:	ee07 3a90 	vmov	s15, r3
 800d872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d876:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800d87a:	693b      	ldr	r3, [r7, #16]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	f000 80e1 	beq.w	800da44 <HAL_RCC_GetSysClockFreq+0x2b8>
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	2b02      	cmp	r3, #2
 800d886:	f000 8083 	beq.w	800d990 <HAL_RCC_GetSysClockFreq+0x204>
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	2b02      	cmp	r3, #2
 800d88e:	f200 80a1 	bhi.w	800d9d4 <HAL_RCC_GetSysClockFreq+0x248>
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d003      	beq.n	800d8a0 <HAL_RCC_GetSysClockFreq+0x114>
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	2b01      	cmp	r3, #1
 800d89c:	d056      	beq.n	800d94c <HAL_RCC_GetSysClockFreq+0x1c0>
 800d89e:	e099      	b.n	800d9d4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d8a0:	4b6f      	ldr	r3, [pc, #444]	; (800da60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	f003 0320 	and.w	r3, r3, #32
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d02d      	beq.n	800d908 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d8ac:	4b6c      	ldr	r3, [pc, #432]	; (800da60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	08db      	lsrs	r3, r3, #3
 800d8b2:	f003 0303 	and.w	r3, r3, #3
 800d8b6:	4a6b      	ldr	r2, [pc, #428]	; (800da64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d8b8:	fa22 f303 	lsr.w	r3, r2, r3
 800d8bc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	ee07 3a90 	vmov	s15, r3
 800d8c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8c8:	693b      	ldr	r3, [r7, #16]
 800d8ca:	ee07 3a90 	vmov	s15, r3
 800d8ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8d6:	4b62      	ldr	r3, [pc, #392]	; (800da60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8de:	ee07 3a90 	vmov	s15, r3
 800d8e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8e6:	ed97 6a02 	vldr	s12, [r7, #8]
 800d8ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 800da70 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d8ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d8fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d902:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800d906:	e087      	b.n	800da18 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	ee07 3a90 	vmov	s15, r3
 800d90e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d912:	eddf 6a58 	vldr	s13, [pc, #352]	; 800da74 <HAL_RCC_GetSysClockFreq+0x2e8>
 800d916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d91a:	4b51      	ldr	r3, [pc, #324]	; (800da60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d91c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d91e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d922:	ee07 3a90 	vmov	s15, r3
 800d926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d92a:	ed97 6a02 	vldr	s12, [r7, #8]
 800d92e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800da70 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d93a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d93e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d942:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d946:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d94a:	e065      	b.n	800da18 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d94c:	693b      	ldr	r3, [r7, #16]
 800d94e:	ee07 3a90 	vmov	s15, r3
 800d952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d956:	eddf 6a48 	vldr	s13, [pc, #288]	; 800da78 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d95a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d95e:	4b40      	ldr	r3, [pc, #256]	; (800da60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d966:	ee07 3a90 	vmov	s15, r3
 800d96a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d96e:	ed97 6a02 	vldr	s12, [r7, #8]
 800d972:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800da70 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d97a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d97e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d98a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d98e:	e043      	b.n	800da18 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	ee07 3a90 	vmov	s15, r3
 800d996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d99a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800da7c <HAL_RCC_GetSysClockFreq+0x2f0>
 800d99e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9a2:	4b2f      	ldr	r3, [pc, #188]	; (800da60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d9a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9aa:	ee07 3a90 	vmov	s15, r3
 800d9ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9b2:	ed97 6a02 	vldr	s12, [r7, #8]
 800d9b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800da70 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d9ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d9d2:	e021      	b.n	800da18 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	ee07 3a90 	vmov	s15, r3
 800d9da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9de:	eddf 6a26 	vldr	s13, [pc, #152]	; 800da78 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d9e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9e6:	4b1e      	ldr	r3, [pc, #120]	; (800da60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d9e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9ee:	ee07 3a90 	vmov	s15, r3
 800d9f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9f6:	ed97 6a02 	vldr	s12, [r7, #8]
 800d9fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800da70 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d9fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800da16:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800da18:	4b11      	ldr	r3, [pc, #68]	; (800da60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800da1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da1c:	0a5b      	lsrs	r3, r3, #9
 800da1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da22:	3301      	adds	r3, #1
 800da24:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	ee07 3a90 	vmov	s15, r3
 800da2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800da30:	edd7 6a07 	vldr	s13, [r7, #28]
 800da34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da3c:	ee17 3a90 	vmov	r3, s15
 800da40:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800da42:	e005      	b.n	800da50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800da44:	2300      	movs	r3, #0
 800da46:	61bb      	str	r3, [r7, #24]
      break;
 800da48:	e002      	b.n	800da50 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800da4a:	4b07      	ldr	r3, [pc, #28]	; (800da68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800da4c:	61bb      	str	r3, [r7, #24]
      break;
 800da4e:	bf00      	nop
  }

  return sysclockfreq;
 800da50:	69bb      	ldr	r3, [r7, #24]
}
 800da52:	4618      	mov	r0, r3
 800da54:	3724      	adds	r7, #36	; 0x24
 800da56:	46bd      	mov	sp, r7
 800da58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5c:	4770      	bx	lr
 800da5e:	bf00      	nop
 800da60:	58024400 	.word	0x58024400
 800da64:	03d09000 	.word	0x03d09000
 800da68:	003d0900 	.word	0x003d0900
 800da6c:	017d7840 	.word	0x017d7840
 800da70:	46000000 	.word	0x46000000
 800da74:	4c742400 	.word	0x4c742400
 800da78:	4a742400 	.word	0x4a742400
 800da7c:	4bbebc20 	.word	0x4bbebc20

0800da80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b082      	sub	sp, #8
 800da84:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800da86:	f7ff fe81 	bl	800d78c <HAL_RCC_GetSysClockFreq>
 800da8a:	4602      	mov	r2, r0
 800da8c:	4b10      	ldr	r3, [pc, #64]	; (800dad0 <HAL_RCC_GetHCLKFreq+0x50>)
 800da8e:	699b      	ldr	r3, [r3, #24]
 800da90:	0a1b      	lsrs	r3, r3, #8
 800da92:	f003 030f 	and.w	r3, r3, #15
 800da96:	490f      	ldr	r1, [pc, #60]	; (800dad4 <HAL_RCC_GetHCLKFreq+0x54>)
 800da98:	5ccb      	ldrb	r3, [r1, r3]
 800da9a:	f003 031f 	and.w	r3, r3, #31
 800da9e:	fa22 f303 	lsr.w	r3, r2, r3
 800daa2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800daa4:	4b0a      	ldr	r3, [pc, #40]	; (800dad0 <HAL_RCC_GetHCLKFreq+0x50>)
 800daa6:	699b      	ldr	r3, [r3, #24]
 800daa8:	f003 030f 	and.w	r3, r3, #15
 800daac:	4a09      	ldr	r2, [pc, #36]	; (800dad4 <HAL_RCC_GetHCLKFreq+0x54>)
 800daae:	5cd3      	ldrb	r3, [r2, r3]
 800dab0:	f003 031f 	and.w	r3, r3, #31
 800dab4:	687a      	ldr	r2, [r7, #4]
 800dab6:	fa22 f303 	lsr.w	r3, r2, r3
 800daba:	4a07      	ldr	r2, [pc, #28]	; (800dad8 <HAL_RCC_GetHCLKFreq+0x58>)
 800dabc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800dabe:	4a07      	ldr	r2, [pc, #28]	; (800dadc <HAL_RCC_GetHCLKFreq+0x5c>)
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800dac4:	4b04      	ldr	r3, [pc, #16]	; (800dad8 <HAL_RCC_GetHCLKFreq+0x58>)
 800dac6:	681b      	ldr	r3, [r3, #0]
}
 800dac8:	4618      	mov	r0, r3
 800daca:	3708      	adds	r7, #8
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}
 800dad0:	58024400 	.word	0x58024400
 800dad4:	0801b318 	.word	0x0801b318
 800dad8:	240004e0 	.word	0x240004e0
 800dadc:	240004dc 	.word	0x240004dc

0800dae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800dae4:	f7ff ffcc 	bl	800da80 <HAL_RCC_GetHCLKFreq>
 800dae8:	4602      	mov	r2, r0
 800daea:	4b06      	ldr	r3, [pc, #24]	; (800db04 <HAL_RCC_GetPCLK1Freq+0x24>)
 800daec:	69db      	ldr	r3, [r3, #28]
 800daee:	091b      	lsrs	r3, r3, #4
 800daf0:	f003 0307 	and.w	r3, r3, #7
 800daf4:	4904      	ldr	r1, [pc, #16]	; (800db08 <HAL_RCC_GetPCLK1Freq+0x28>)
 800daf6:	5ccb      	ldrb	r3, [r1, r3]
 800daf8:	f003 031f 	and.w	r3, r3, #31
 800dafc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800db00:	4618      	mov	r0, r3
 800db02:	bd80      	pop	{r7, pc}
 800db04:	58024400 	.word	0x58024400
 800db08:	0801b318 	.word	0x0801b318

0800db0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800db10:	f7ff ffb6 	bl	800da80 <HAL_RCC_GetHCLKFreq>
 800db14:	4602      	mov	r2, r0
 800db16:	4b06      	ldr	r3, [pc, #24]	; (800db30 <HAL_RCC_GetPCLK2Freq+0x24>)
 800db18:	69db      	ldr	r3, [r3, #28]
 800db1a:	0a1b      	lsrs	r3, r3, #8
 800db1c:	f003 0307 	and.w	r3, r3, #7
 800db20:	4904      	ldr	r1, [pc, #16]	; (800db34 <HAL_RCC_GetPCLK2Freq+0x28>)
 800db22:	5ccb      	ldrb	r3, [r1, r3]
 800db24:	f003 031f 	and.w	r3, r3, #31
 800db28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	bd80      	pop	{r7, pc}
 800db30:	58024400 	.word	0x58024400
 800db34:	0801b318 	.word	0x0801b318

0800db38 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800db38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800db3c:	b0ca      	sub	sp, #296	; 0x128
 800db3e:	af00      	add	r7, sp, #0
 800db40:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800db44:	2300      	movs	r3, #0
 800db46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800db4a:	2300      	movs	r3, #0
 800db4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800db50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db58:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800db5c:	2500      	movs	r5, #0
 800db5e:	ea54 0305 	orrs.w	r3, r4, r5
 800db62:	d049      	beq.n	800dbf8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800db64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800db6e:	d02f      	beq.n	800dbd0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800db70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800db74:	d828      	bhi.n	800dbc8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800db76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800db7a:	d01a      	beq.n	800dbb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800db7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800db80:	d822      	bhi.n	800dbc8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800db82:	2b00      	cmp	r3, #0
 800db84:	d003      	beq.n	800db8e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800db86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db8a:	d007      	beq.n	800db9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800db8c:	e01c      	b.n	800dbc8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800db8e:	4bb8      	ldr	r3, [pc, #736]	; (800de70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800db90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db92:	4ab7      	ldr	r2, [pc, #732]	; (800de70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800db94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800db98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800db9a:	e01a      	b.n	800dbd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800db9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dba0:	3308      	adds	r3, #8
 800dba2:	2102      	movs	r1, #2
 800dba4:	4618      	mov	r0, r3
 800dba6:	f002 fcf3 	bl	8010590 <RCCEx_PLL2_Config>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800dbb0:	e00f      	b.n	800dbd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dbb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbb6:	3328      	adds	r3, #40	; 0x28
 800dbb8:	2102      	movs	r1, #2
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f002 fd9a 	bl	80106f4 <RCCEx_PLL3_Config>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800dbc6:	e004      	b.n	800dbd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dbc8:	2301      	movs	r3, #1
 800dbca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dbce:	e000      	b.n	800dbd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800dbd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dbd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d10a      	bne.n	800dbf0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800dbda:	4ba5      	ldr	r3, [pc, #660]	; (800de70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dbdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbde:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800dbe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbe8:	4aa1      	ldr	r2, [pc, #644]	; (800de70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dbea:	430b      	orrs	r3, r1
 800dbec:	6513      	str	r3, [r2, #80]	; 0x50
 800dbee:	e003      	b.n	800dbf8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dbf0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dbf4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800dbf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc00:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800dc04:	f04f 0900 	mov.w	r9, #0
 800dc08:	ea58 0309 	orrs.w	r3, r8, r9
 800dc0c:	d047      	beq.n	800dc9e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800dc0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc14:	2b04      	cmp	r3, #4
 800dc16:	d82a      	bhi.n	800dc6e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800dc18:	a201      	add	r2, pc, #4	; (adr r2, 800dc20 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800dc1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc1e:	bf00      	nop
 800dc20:	0800dc35 	.word	0x0800dc35
 800dc24:	0800dc43 	.word	0x0800dc43
 800dc28:	0800dc59 	.word	0x0800dc59
 800dc2c:	0800dc77 	.word	0x0800dc77
 800dc30:	0800dc77 	.word	0x0800dc77
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc34:	4b8e      	ldr	r3, [pc, #568]	; (800de70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dc36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc38:	4a8d      	ldr	r2, [pc, #564]	; (800de70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dc3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dc3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dc40:	e01a      	b.n	800dc78 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dc42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc46:	3308      	adds	r3, #8
 800dc48:	2100      	movs	r1, #0
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f002 fca0 	bl	8010590 <RCCEx_PLL2_Config>
 800dc50:	4603      	mov	r3, r0
 800dc52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dc56:	e00f      	b.n	800dc78 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dc58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc5c:	3328      	adds	r3, #40	; 0x28
 800dc5e:	2100      	movs	r1, #0
 800dc60:	4618      	mov	r0, r3
 800dc62:	f002 fd47 	bl	80106f4 <RCCEx_PLL3_Config>
 800dc66:	4603      	mov	r3, r0
 800dc68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dc6c:	e004      	b.n	800dc78 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dc6e:	2301      	movs	r3, #1
 800dc70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dc74:	e000      	b.n	800dc78 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800dc76:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d10a      	bne.n	800dc96 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800dc80:	4b7b      	ldr	r3, [pc, #492]	; (800de70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dc82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc84:	f023 0107 	bic.w	r1, r3, #7
 800dc88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc8e:	4a78      	ldr	r2, [pc, #480]	; (800de70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dc90:	430b      	orrs	r3, r1
 800dc92:	6513      	str	r3, [r2, #80]	; 0x50
 800dc94:	e003      	b.n	800dc9e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800dc9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800dcaa:	f04f 0b00 	mov.w	fp, #0
 800dcae:	ea5a 030b 	orrs.w	r3, sl, fp
 800dcb2:	d04c      	beq.n	800dd4e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800dcb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dcbe:	d030      	beq.n	800dd22 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800dcc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dcc4:	d829      	bhi.n	800dd1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800dcc6:	2bc0      	cmp	r3, #192	; 0xc0
 800dcc8:	d02d      	beq.n	800dd26 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800dcca:	2bc0      	cmp	r3, #192	; 0xc0
 800dccc:	d825      	bhi.n	800dd1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800dcce:	2b80      	cmp	r3, #128	; 0x80
 800dcd0:	d018      	beq.n	800dd04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800dcd2:	2b80      	cmp	r3, #128	; 0x80
 800dcd4:	d821      	bhi.n	800dd1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d002      	beq.n	800dce0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800dcda:	2b40      	cmp	r3, #64	; 0x40
 800dcdc:	d007      	beq.n	800dcee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800dcde:	e01c      	b.n	800dd1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dce0:	4b63      	ldr	r3, [pc, #396]	; (800de70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dce4:	4a62      	ldr	r2, [pc, #392]	; (800de70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dcea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800dcec:	e01c      	b.n	800dd28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dcee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcf2:	3308      	adds	r3, #8
 800dcf4:	2100      	movs	r1, #0
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f002 fc4a 	bl	8010590 <RCCEx_PLL2_Config>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800dd02:	e011      	b.n	800dd28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dd04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd08:	3328      	adds	r3, #40	; 0x28
 800dd0a:	2100      	movs	r1, #0
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f002 fcf1 	bl	80106f4 <RCCEx_PLL3_Config>
 800dd12:	4603      	mov	r3, r0
 800dd14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800dd18:	e006      	b.n	800dd28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dd20:	e002      	b.n	800dd28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800dd22:	bf00      	nop
 800dd24:	e000      	b.n	800dd28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800dd26:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d10a      	bne.n	800dd46 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800dd30:	4b4f      	ldr	r3, [pc, #316]	; (800de70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dd32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd34:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800dd38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd3e:	4a4c      	ldr	r2, [pc, #304]	; (800de70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dd40:	430b      	orrs	r3, r1
 800dd42:	6513      	str	r3, [r2, #80]	; 0x50
 800dd44:	e003      	b.n	800dd4e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dd4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800dd4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd56:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800dd5a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800dd5e:	2300      	movs	r3, #0
 800dd60:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800dd64:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800dd68:	460b      	mov	r3, r1
 800dd6a:	4313      	orrs	r3, r2
 800dd6c:	d053      	beq.n	800de16 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800dd6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800dd76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dd7a:	d035      	beq.n	800dde8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800dd7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dd80:	d82e      	bhi.n	800dde0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800dd82:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800dd86:	d031      	beq.n	800ddec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800dd88:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800dd8c:	d828      	bhi.n	800dde0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800dd8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dd92:	d01a      	beq.n	800ddca <HAL_RCCEx_PeriphCLKConfig+0x292>
 800dd94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dd98:	d822      	bhi.n	800dde0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d003      	beq.n	800dda6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800dd9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dda2:	d007      	beq.n	800ddb4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800dda4:	e01c      	b.n	800dde0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dda6:	4b32      	ldr	r3, [pc, #200]	; (800de70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dda8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddaa:	4a31      	ldr	r2, [pc, #196]	; (800de70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ddac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ddb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ddb2:	e01c      	b.n	800ddee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ddb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ddb8:	3308      	adds	r3, #8
 800ddba:	2100      	movs	r1, #0
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f002 fbe7 	bl	8010590 <RCCEx_PLL2_Config>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ddc8:	e011      	b.n	800ddee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ddca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ddce:	3328      	adds	r3, #40	; 0x28
 800ddd0:	2100      	movs	r1, #0
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f002 fc8e 	bl	80106f4 <RCCEx_PLL3_Config>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ddde:	e006      	b.n	800ddee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800dde0:	2301      	movs	r3, #1
 800dde2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dde6:	e002      	b.n	800ddee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800dde8:	bf00      	nop
 800ddea:	e000      	b.n	800ddee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ddec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ddee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d10b      	bne.n	800de0e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ddf6:	4b1e      	ldr	r3, [pc, #120]	; (800de70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ddf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ddfa:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ddfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800de06:	4a1a      	ldr	r2, [pc, #104]	; (800de70 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800de08:	430b      	orrs	r3, r1
 800de0a:	6593      	str	r3, [r2, #88]	; 0x58
 800de0c:	e003      	b.n	800de16 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800de12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800de16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de1e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800de22:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800de26:	2300      	movs	r3, #0
 800de28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800de2c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800de30:	460b      	mov	r3, r1
 800de32:	4313      	orrs	r3, r2
 800de34:	d056      	beq.n	800dee4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800de36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800de3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800de42:	d038      	beq.n	800deb6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800de44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800de48:	d831      	bhi.n	800deae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800de4a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800de4e:	d034      	beq.n	800deba <HAL_RCCEx_PeriphCLKConfig+0x382>
 800de50:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800de54:	d82b      	bhi.n	800deae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800de56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de5a:	d01d      	beq.n	800de98 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800de5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de60:	d825      	bhi.n	800deae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800de62:	2b00      	cmp	r3, #0
 800de64:	d006      	beq.n	800de74 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800de66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800de6a:	d00a      	beq.n	800de82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800de6c:	e01f      	b.n	800deae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800de6e:	bf00      	nop
 800de70:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800de74:	4ba2      	ldr	r3, [pc, #648]	; (800e100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800de76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de78:	4aa1      	ldr	r2, [pc, #644]	; (800e100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800de7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800de7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800de80:	e01c      	b.n	800debc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800de82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de86:	3308      	adds	r3, #8
 800de88:	2100      	movs	r1, #0
 800de8a:	4618      	mov	r0, r3
 800de8c:	f002 fb80 	bl	8010590 <RCCEx_PLL2_Config>
 800de90:	4603      	mov	r3, r0
 800de92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800de96:	e011      	b.n	800debc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800de98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de9c:	3328      	adds	r3, #40	; 0x28
 800de9e:	2100      	movs	r1, #0
 800dea0:	4618      	mov	r0, r3
 800dea2:	f002 fc27 	bl	80106f4 <RCCEx_PLL3_Config>
 800dea6:	4603      	mov	r3, r0
 800dea8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800deac:	e006      	b.n	800debc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800deae:	2301      	movs	r3, #1
 800deb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800deb4:	e002      	b.n	800debc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800deb6:	bf00      	nop
 800deb8:	e000      	b.n	800debc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800deba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800debc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d10b      	bne.n	800dedc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800dec4:	4b8e      	ldr	r3, [pc, #568]	; (800e100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dec8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800decc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ded0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ded4:	4a8a      	ldr	r2, [pc, #552]	; (800e100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ded6:	430b      	orrs	r3, r1
 800ded8:	6593      	str	r3, [r2, #88]	; 0x58
 800deda:	e003      	b.n	800dee4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dedc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dee0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800dee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deec:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800def0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800def4:	2300      	movs	r3, #0
 800def6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800defa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800defe:	460b      	mov	r3, r1
 800df00:	4313      	orrs	r3, r2
 800df02:	d03a      	beq.n	800df7a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800df04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df0a:	2b30      	cmp	r3, #48	; 0x30
 800df0c:	d01f      	beq.n	800df4e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800df0e:	2b30      	cmp	r3, #48	; 0x30
 800df10:	d819      	bhi.n	800df46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800df12:	2b20      	cmp	r3, #32
 800df14:	d00c      	beq.n	800df30 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800df16:	2b20      	cmp	r3, #32
 800df18:	d815      	bhi.n	800df46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d019      	beq.n	800df52 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800df1e:	2b10      	cmp	r3, #16
 800df20:	d111      	bne.n	800df46 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df22:	4b77      	ldr	r3, [pc, #476]	; (800e100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800df24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df26:	4a76      	ldr	r2, [pc, #472]	; (800e100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800df28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800df2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800df2e:	e011      	b.n	800df54 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800df30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df34:	3308      	adds	r3, #8
 800df36:	2102      	movs	r1, #2
 800df38:	4618      	mov	r0, r3
 800df3a:	f002 fb29 	bl	8010590 <RCCEx_PLL2_Config>
 800df3e:	4603      	mov	r3, r0
 800df40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800df44:	e006      	b.n	800df54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800df46:	2301      	movs	r3, #1
 800df48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800df4c:	e002      	b.n	800df54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800df4e:	bf00      	nop
 800df50:	e000      	b.n	800df54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800df52:	bf00      	nop
    }

    if (ret == HAL_OK)
 800df54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d10a      	bne.n	800df72 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800df5c:	4b68      	ldr	r3, [pc, #416]	; (800e100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800df5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df60:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800df64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df6a:	4a65      	ldr	r2, [pc, #404]	; (800e100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800df6c:	430b      	orrs	r3, r1
 800df6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800df70:	e003      	b.n	800df7a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800df7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df82:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800df86:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800df8a:	2300      	movs	r3, #0
 800df8c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800df90:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800df94:	460b      	mov	r3, r1
 800df96:	4313      	orrs	r3, r2
 800df98:	d051      	beq.n	800e03e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800df9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dfa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dfa4:	d035      	beq.n	800e012 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800dfa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dfaa:	d82e      	bhi.n	800e00a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800dfac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800dfb0:	d031      	beq.n	800e016 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800dfb2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800dfb6:	d828      	bhi.n	800e00a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800dfb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dfbc:	d01a      	beq.n	800dff4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800dfbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dfc2:	d822      	bhi.n	800e00a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d003      	beq.n	800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800dfc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dfcc:	d007      	beq.n	800dfde <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800dfce:	e01c      	b.n	800e00a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dfd0:	4b4b      	ldr	r3, [pc, #300]	; (800e100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dfd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfd4:	4a4a      	ldr	r2, [pc, #296]	; (800e100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dfd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dfda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dfdc:	e01c      	b.n	800e018 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dfde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dfe2:	3308      	adds	r3, #8
 800dfe4:	2100      	movs	r1, #0
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f002 fad2 	bl	8010590 <RCCEx_PLL2_Config>
 800dfec:	4603      	mov	r3, r0
 800dfee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dff2:	e011      	b.n	800e018 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dff8:	3328      	adds	r3, #40	; 0x28
 800dffa:	2100      	movs	r1, #0
 800dffc:	4618      	mov	r0, r3
 800dffe:	f002 fb79 	bl	80106f4 <RCCEx_PLL3_Config>
 800e002:	4603      	mov	r3, r0
 800e004:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e008:	e006      	b.n	800e018 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e00a:	2301      	movs	r3, #1
 800e00c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e010:	e002      	b.n	800e018 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800e012:	bf00      	nop
 800e014:	e000      	b.n	800e018 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800e016:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e018:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d10a      	bne.n	800e036 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e020:	4b37      	ldr	r3, [pc, #220]	; (800e100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e024:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800e028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e02c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e02e:	4a34      	ldr	r2, [pc, #208]	; (800e100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e030:	430b      	orrs	r3, r1
 800e032:	6513      	str	r3, [r2, #80]	; 0x50
 800e034:	e003      	b.n	800e03e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e036:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e03a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e03e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e046:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800e04a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e04e:	2300      	movs	r3, #0
 800e050:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e054:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800e058:	460b      	mov	r3, r1
 800e05a:	4313      	orrs	r3, r2
 800e05c:	d056      	beq.n	800e10c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800e05e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e062:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e068:	d033      	beq.n	800e0d2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800e06a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e06e:	d82c      	bhi.n	800e0ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e070:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e074:	d02f      	beq.n	800e0d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800e076:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e07a:	d826      	bhi.n	800e0ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e07c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e080:	d02b      	beq.n	800e0da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800e082:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e086:	d820      	bhi.n	800e0ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e088:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e08c:	d012      	beq.n	800e0b4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800e08e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e092:	d81a      	bhi.n	800e0ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e094:	2b00      	cmp	r3, #0
 800e096:	d022      	beq.n	800e0de <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800e098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e09c:	d115      	bne.n	800e0ca <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e09e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e0a2:	3308      	adds	r3, #8
 800e0a4:	2101      	movs	r1, #1
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f002 fa72 	bl	8010590 <RCCEx_PLL2_Config>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e0b2:	e015      	b.n	800e0e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e0b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e0b8:	3328      	adds	r3, #40	; 0x28
 800e0ba:	2101      	movs	r1, #1
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f002 fb19 	bl	80106f4 <RCCEx_PLL3_Config>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e0c8:	e00a      	b.n	800e0e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e0ca:	2301      	movs	r3, #1
 800e0cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e0d0:	e006      	b.n	800e0e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e0d2:	bf00      	nop
 800e0d4:	e004      	b.n	800e0e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e0d6:	bf00      	nop
 800e0d8:	e002      	b.n	800e0e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e0da:	bf00      	nop
 800e0dc:	e000      	b.n	800e0e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e0de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e0e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d10d      	bne.n	800e104 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e0e8:	4b05      	ldr	r3, [pc, #20]	; (800e100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e0ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0ec:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800e0f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e0f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0f6:	4a02      	ldr	r2, [pc, #8]	; (800e100 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e0f8:	430b      	orrs	r3, r1
 800e0fa:	6513      	str	r3, [r2, #80]	; 0x50
 800e0fc:	e006      	b.n	800e10c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800e0fe:	bf00      	nop
 800e100:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e104:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e108:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e10c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e114:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800e118:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e11c:	2300      	movs	r3, #0
 800e11e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e122:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800e126:	460b      	mov	r3, r1
 800e128:	4313      	orrs	r3, r2
 800e12a:	d055      	beq.n	800e1d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800e12c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e130:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e134:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e138:	d033      	beq.n	800e1a2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800e13a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e13e:	d82c      	bhi.n	800e19a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e144:	d02f      	beq.n	800e1a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800e146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e14a:	d826      	bhi.n	800e19a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e14c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e150:	d02b      	beq.n	800e1aa <HAL_RCCEx_PeriphCLKConfig+0x672>
 800e152:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e156:	d820      	bhi.n	800e19a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e15c:	d012      	beq.n	800e184 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800e15e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e162:	d81a      	bhi.n	800e19a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e164:	2b00      	cmp	r3, #0
 800e166:	d022      	beq.n	800e1ae <HAL_RCCEx_PeriphCLKConfig+0x676>
 800e168:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e16c:	d115      	bne.n	800e19a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e16e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e172:	3308      	adds	r3, #8
 800e174:	2101      	movs	r1, #1
 800e176:	4618      	mov	r0, r3
 800e178:	f002 fa0a 	bl	8010590 <RCCEx_PLL2_Config>
 800e17c:	4603      	mov	r3, r0
 800e17e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e182:	e015      	b.n	800e1b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e188:	3328      	adds	r3, #40	; 0x28
 800e18a:	2101      	movs	r1, #1
 800e18c:	4618      	mov	r0, r3
 800e18e:	f002 fab1 	bl	80106f4 <RCCEx_PLL3_Config>
 800e192:	4603      	mov	r3, r0
 800e194:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e198:	e00a      	b.n	800e1b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800e19a:	2301      	movs	r3, #1
 800e19c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e1a0:	e006      	b.n	800e1b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e1a2:	bf00      	nop
 800e1a4:	e004      	b.n	800e1b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e1a6:	bf00      	nop
 800e1a8:	e002      	b.n	800e1b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e1aa:	bf00      	nop
 800e1ac:	e000      	b.n	800e1b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e1ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e1b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d10b      	bne.n	800e1d0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e1b8:	4ba3      	ldr	r3, [pc, #652]	; (800e448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e1ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e1bc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800e1c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e1c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e1c8:	4a9f      	ldr	r2, [pc, #636]	; (800e448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e1ca:	430b      	orrs	r3, r1
 800e1cc:	6593      	str	r3, [r2, #88]	; 0x58
 800e1ce:	e003      	b.n	800e1d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e1d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e1d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800e1e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e1ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800e1f2:	460b      	mov	r3, r1
 800e1f4:	4313      	orrs	r3, r2
 800e1f6:	d037      	beq.n	800e268 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800e1f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e1fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e202:	d00e      	beq.n	800e222 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800e204:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e208:	d816      	bhi.n	800e238 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d018      	beq.n	800e240 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800e20e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e212:	d111      	bne.n	800e238 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e214:	4b8c      	ldr	r3, [pc, #560]	; (800e448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e218:	4a8b      	ldr	r2, [pc, #556]	; (800e448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e21a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e21e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e220:	e00f      	b.n	800e242 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e226:	3308      	adds	r3, #8
 800e228:	2101      	movs	r1, #1
 800e22a:	4618      	mov	r0, r3
 800e22c:	f002 f9b0 	bl	8010590 <RCCEx_PLL2_Config>
 800e230:	4603      	mov	r3, r0
 800e232:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e236:	e004      	b.n	800e242 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e238:	2301      	movs	r3, #1
 800e23a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e23e:	e000      	b.n	800e242 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800e240:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e242:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e246:	2b00      	cmp	r3, #0
 800e248:	d10a      	bne.n	800e260 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e24a:	4b7f      	ldr	r3, [pc, #508]	; (800e448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e24c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e24e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800e252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e258:	4a7b      	ldr	r2, [pc, #492]	; (800e448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e25a:	430b      	orrs	r3, r1
 800e25c:	6513      	str	r3, [r2, #80]	; 0x50
 800e25e:	e003      	b.n	800e268 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e260:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e264:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e268:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e270:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800e274:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e278:	2300      	movs	r3, #0
 800e27a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e27e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800e282:	460b      	mov	r3, r1
 800e284:	4313      	orrs	r3, r2
 800e286:	d039      	beq.n	800e2fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800e288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e28c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e28e:	2b03      	cmp	r3, #3
 800e290:	d81c      	bhi.n	800e2cc <HAL_RCCEx_PeriphCLKConfig+0x794>
 800e292:	a201      	add	r2, pc, #4	; (adr r2, 800e298 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800e294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e298:	0800e2d5 	.word	0x0800e2d5
 800e29c:	0800e2a9 	.word	0x0800e2a9
 800e2a0:	0800e2b7 	.word	0x0800e2b7
 800e2a4:	0800e2d5 	.word	0x0800e2d5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e2a8:	4b67      	ldr	r3, [pc, #412]	; (800e448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2ac:	4a66      	ldr	r2, [pc, #408]	; (800e448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e2ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e2b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e2b4:	e00f      	b.n	800e2d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e2b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e2ba:	3308      	adds	r3, #8
 800e2bc:	2102      	movs	r1, #2
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f002 f966 	bl	8010590 <RCCEx_PLL2_Config>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e2ca:	e004      	b.n	800e2d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e2d2:	e000      	b.n	800e2d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800e2d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e2d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d10a      	bne.n	800e2f4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e2de:	4b5a      	ldr	r3, [pc, #360]	; (800e448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e2e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2e2:	f023 0103 	bic.w	r1, r3, #3
 800e2e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e2ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2ec:	4a56      	ldr	r2, [pc, #344]	; (800e448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e2ee:	430b      	orrs	r3, r1
 800e2f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e2f2:	e003      	b.n	800e2fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e2f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e2fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e304:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800e308:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e30c:	2300      	movs	r3, #0
 800e30e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e312:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800e316:	460b      	mov	r3, r1
 800e318:	4313      	orrs	r3, r2
 800e31a:	f000 809f 	beq.w	800e45c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e31e:	4b4b      	ldr	r3, [pc, #300]	; (800e44c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	4a4a      	ldr	r2, [pc, #296]	; (800e44c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e328:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e32a:	f7f9 fbd3 	bl	8007ad4 <HAL_GetTick>
 800e32e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e332:	e00b      	b.n	800e34c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e334:	f7f9 fbce 	bl	8007ad4 <HAL_GetTick>
 800e338:	4602      	mov	r2, r0
 800e33a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800e33e:	1ad3      	subs	r3, r2, r3
 800e340:	2b64      	cmp	r3, #100	; 0x64
 800e342:	d903      	bls.n	800e34c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800e344:	2303      	movs	r3, #3
 800e346:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e34a:	e005      	b.n	800e358 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e34c:	4b3f      	ldr	r3, [pc, #252]	; (800e44c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e354:	2b00      	cmp	r3, #0
 800e356:	d0ed      	beq.n	800e334 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800e358:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d179      	bne.n	800e454 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e360:	4b39      	ldr	r3, [pc, #228]	; (800e448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e362:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e368:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e36c:	4053      	eors	r3, r2
 800e36e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e372:	2b00      	cmp	r3, #0
 800e374:	d015      	beq.n	800e3a2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e376:	4b34      	ldr	r3, [pc, #208]	; (800e448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e37a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e37e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e382:	4b31      	ldr	r3, [pc, #196]	; (800e448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e386:	4a30      	ldr	r2, [pc, #192]	; (800e448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e38c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e38e:	4b2e      	ldr	r3, [pc, #184]	; (800e448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e392:	4a2d      	ldr	r2, [pc, #180]	; (800e448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e398:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800e39a:	4a2b      	ldr	r2, [pc, #172]	; (800e448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e39c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800e3a0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e3a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e3a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e3aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3ae:	d118      	bne.n	800e3e2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e3b0:	f7f9 fb90 	bl	8007ad4 <HAL_GetTick>
 800e3b4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e3b8:	e00d      	b.n	800e3d6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e3ba:	f7f9 fb8b 	bl	8007ad4 <HAL_GetTick>
 800e3be:	4602      	mov	r2, r0
 800e3c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800e3c4:	1ad2      	subs	r2, r2, r3
 800e3c6:	f241 3388 	movw	r3, #5000	; 0x1388
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d903      	bls.n	800e3d6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800e3ce:	2303      	movs	r3, #3
 800e3d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800e3d4:	e005      	b.n	800e3e2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e3d6:	4b1c      	ldr	r3, [pc, #112]	; (800e448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e3d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3da:	f003 0302 	and.w	r3, r3, #2
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d0eb      	beq.n	800e3ba <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800e3e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d129      	bne.n	800e43e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e3ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e3ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e3f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e3f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e3fa:	d10e      	bne.n	800e41a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800e3fc:	4b12      	ldr	r3, [pc, #72]	; (800e448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e3fe:	691b      	ldr	r3, [r3, #16]
 800e400:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800e404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e408:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e40c:	091a      	lsrs	r2, r3, #4
 800e40e:	4b10      	ldr	r3, [pc, #64]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800e410:	4013      	ands	r3, r2
 800e412:	4a0d      	ldr	r2, [pc, #52]	; (800e448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e414:	430b      	orrs	r3, r1
 800e416:	6113      	str	r3, [r2, #16]
 800e418:	e005      	b.n	800e426 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800e41a:	4b0b      	ldr	r3, [pc, #44]	; (800e448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e41c:	691b      	ldr	r3, [r3, #16]
 800e41e:	4a0a      	ldr	r2, [pc, #40]	; (800e448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e420:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e424:	6113      	str	r3, [r2, #16]
 800e426:	4b08      	ldr	r3, [pc, #32]	; (800e448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e428:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e42a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e42e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e432:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e436:	4a04      	ldr	r2, [pc, #16]	; (800e448 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e438:	430b      	orrs	r3, r1
 800e43a:	6713      	str	r3, [r2, #112]	; 0x70
 800e43c:	e00e      	b.n	800e45c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e43e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e442:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800e446:	e009      	b.n	800e45c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800e448:	58024400 	.word	0x58024400
 800e44c:	58024800 	.word	0x58024800
 800e450:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e454:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e458:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e45c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e464:	f002 0301 	and.w	r3, r2, #1
 800e468:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e46c:	2300      	movs	r3, #0
 800e46e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e472:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e476:	460b      	mov	r3, r1
 800e478:	4313      	orrs	r3, r2
 800e47a:	f000 8089 	beq.w	800e590 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800e47e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e484:	2b28      	cmp	r3, #40	; 0x28
 800e486:	d86b      	bhi.n	800e560 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800e488:	a201      	add	r2, pc, #4	; (adr r2, 800e490 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e48a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e48e:	bf00      	nop
 800e490:	0800e569 	.word	0x0800e569
 800e494:	0800e561 	.word	0x0800e561
 800e498:	0800e561 	.word	0x0800e561
 800e49c:	0800e561 	.word	0x0800e561
 800e4a0:	0800e561 	.word	0x0800e561
 800e4a4:	0800e561 	.word	0x0800e561
 800e4a8:	0800e561 	.word	0x0800e561
 800e4ac:	0800e561 	.word	0x0800e561
 800e4b0:	0800e535 	.word	0x0800e535
 800e4b4:	0800e561 	.word	0x0800e561
 800e4b8:	0800e561 	.word	0x0800e561
 800e4bc:	0800e561 	.word	0x0800e561
 800e4c0:	0800e561 	.word	0x0800e561
 800e4c4:	0800e561 	.word	0x0800e561
 800e4c8:	0800e561 	.word	0x0800e561
 800e4cc:	0800e561 	.word	0x0800e561
 800e4d0:	0800e54b 	.word	0x0800e54b
 800e4d4:	0800e561 	.word	0x0800e561
 800e4d8:	0800e561 	.word	0x0800e561
 800e4dc:	0800e561 	.word	0x0800e561
 800e4e0:	0800e561 	.word	0x0800e561
 800e4e4:	0800e561 	.word	0x0800e561
 800e4e8:	0800e561 	.word	0x0800e561
 800e4ec:	0800e561 	.word	0x0800e561
 800e4f0:	0800e569 	.word	0x0800e569
 800e4f4:	0800e561 	.word	0x0800e561
 800e4f8:	0800e561 	.word	0x0800e561
 800e4fc:	0800e561 	.word	0x0800e561
 800e500:	0800e561 	.word	0x0800e561
 800e504:	0800e561 	.word	0x0800e561
 800e508:	0800e561 	.word	0x0800e561
 800e50c:	0800e561 	.word	0x0800e561
 800e510:	0800e569 	.word	0x0800e569
 800e514:	0800e561 	.word	0x0800e561
 800e518:	0800e561 	.word	0x0800e561
 800e51c:	0800e561 	.word	0x0800e561
 800e520:	0800e561 	.word	0x0800e561
 800e524:	0800e561 	.word	0x0800e561
 800e528:	0800e561 	.word	0x0800e561
 800e52c:	0800e561 	.word	0x0800e561
 800e530:	0800e569 	.word	0x0800e569
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e538:	3308      	adds	r3, #8
 800e53a:	2101      	movs	r1, #1
 800e53c:	4618      	mov	r0, r3
 800e53e:	f002 f827 	bl	8010590 <RCCEx_PLL2_Config>
 800e542:	4603      	mov	r3, r0
 800e544:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e548:	e00f      	b.n	800e56a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e54a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e54e:	3328      	adds	r3, #40	; 0x28
 800e550:	2101      	movs	r1, #1
 800e552:	4618      	mov	r0, r3
 800e554:	f002 f8ce 	bl	80106f4 <RCCEx_PLL3_Config>
 800e558:	4603      	mov	r3, r0
 800e55a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e55e:	e004      	b.n	800e56a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e560:	2301      	movs	r3, #1
 800e562:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e566:	e000      	b.n	800e56a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800e568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e56a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d10a      	bne.n	800e588 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e572:	4bbf      	ldr	r3, [pc, #764]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e576:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800e57a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e57e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e580:	4abb      	ldr	r2, [pc, #748]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e582:	430b      	orrs	r3, r1
 800e584:	6553      	str	r3, [r2, #84]	; 0x54
 800e586:	e003      	b.n	800e590 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e588:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e58c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e598:	f002 0302 	and.w	r3, r2, #2
 800e59c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e5a6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800e5aa:	460b      	mov	r3, r1
 800e5ac:	4313      	orrs	r3, r2
 800e5ae:	d041      	beq.n	800e634 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800e5b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e5b6:	2b05      	cmp	r3, #5
 800e5b8:	d824      	bhi.n	800e604 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800e5ba:	a201      	add	r2, pc, #4	; (adr r2, 800e5c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800e5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5c0:	0800e60d 	.word	0x0800e60d
 800e5c4:	0800e5d9 	.word	0x0800e5d9
 800e5c8:	0800e5ef 	.word	0x0800e5ef
 800e5cc:	0800e60d 	.word	0x0800e60d
 800e5d0:	0800e60d 	.word	0x0800e60d
 800e5d4:	0800e60d 	.word	0x0800e60d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e5d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5dc:	3308      	adds	r3, #8
 800e5de:	2101      	movs	r1, #1
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	f001 ffd5 	bl	8010590 <RCCEx_PLL2_Config>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e5ec:	e00f      	b.n	800e60e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e5ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5f2:	3328      	adds	r3, #40	; 0x28
 800e5f4:	2101      	movs	r1, #1
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f002 f87c 	bl	80106f4 <RCCEx_PLL3_Config>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e602:	e004      	b.n	800e60e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e604:	2301      	movs	r3, #1
 800e606:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e60a:	e000      	b.n	800e60e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800e60c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e60e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e612:	2b00      	cmp	r3, #0
 800e614:	d10a      	bne.n	800e62c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e616:	4b96      	ldr	r3, [pc, #600]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e61a:	f023 0107 	bic.w	r1, r3, #7
 800e61e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e622:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e624:	4a92      	ldr	r2, [pc, #584]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e626:	430b      	orrs	r3, r1
 800e628:	6553      	str	r3, [r2, #84]	; 0x54
 800e62a:	e003      	b.n	800e634 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e62c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e630:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e63c:	f002 0304 	and.w	r3, r2, #4
 800e640:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e644:	2300      	movs	r3, #0
 800e646:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e64a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800e64e:	460b      	mov	r3, r1
 800e650:	4313      	orrs	r3, r2
 800e652:	d044      	beq.n	800e6de <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800e654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e658:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e65c:	2b05      	cmp	r3, #5
 800e65e:	d825      	bhi.n	800e6ac <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800e660:	a201      	add	r2, pc, #4	; (adr r2, 800e668 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800e662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e666:	bf00      	nop
 800e668:	0800e6b5 	.word	0x0800e6b5
 800e66c:	0800e681 	.word	0x0800e681
 800e670:	0800e697 	.word	0x0800e697
 800e674:	0800e6b5 	.word	0x0800e6b5
 800e678:	0800e6b5 	.word	0x0800e6b5
 800e67c:	0800e6b5 	.word	0x0800e6b5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e684:	3308      	adds	r3, #8
 800e686:	2101      	movs	r1, #1
 800e688:	4618      	mov	r0, r3
 800e68a:	f001 ff81 	bl	8010590 <RCCEx_PLL2_Config>
 800e68e:	4603      	mov	r3, r0
 800e690:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e694:	e00f      	b.n	800e6b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e69a:	3328      	adds	r3, #40	; 0x28
 800e69c:	2101      	movs	r1, #1
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f002 f828 	bl	80106f4 <RCCEx_PLL3_Config>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e6aa:	e004      	b.n	800e6b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e6b2:	e000      	b.n	800e6b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800e6b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e6b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d10b      	bne.n	800e6d6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e6be:	4b6c      	ldr	r3, [pc, #432]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e6c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6c2:	f023 0107 	bic.w	r1, r3, #7
 800e6c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e6ce:	4a68      	ldr	r2, [pc, #416]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e6d0:	430b      	orrs	r3, r1
 800e6d2:	6593      	str	r3, [r2, #88]	; 0x58
 800e6d4:	e003      	b.n	800e6de <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e6d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e6da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e6de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e6:	f002 0320 	and.w	r3, r2, #32
 800e6ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e6f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800e6f8:	460b      	mov	r3, r1
 800e6fa:	4313      	orrs	r3, r2
 800e6fc:	d055      	beq.n	800e7aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800e6fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e706:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e70a:	d033      	beq.n	800e774 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800e70c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e710:	d82c      	bhi.n	800e76c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e716:	d02f      	beq.n	800e778 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800e718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e71c:	d826      	bhi.n	800e76c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e71e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e722:	d02b      	beq.n	800e77c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800e724:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e728:	d820      	bhi.n	800e76c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e72a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e72e:	d012      	beq.n	800e756 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800e730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e734:	d81a      	bhi.n	800e76c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e736:	2b00      	cmp	r3, #0
 800e738:	d022      	beq.n	800e780 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800e73a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e73e:	d115      	bne.n	800e76c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e744:	3308      	adds	r3, #8
 800e746:	2100      	movs	r1, #0
 800e748:	4618      	mov	r0, r3
 800e74a:	f001 ff21 	bl	8010590 <RCCEx_PLL2_Config>
 800e74e:	4603      	mov	r3, r0
 800e750:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e754:	e015      	b.n	800e782 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e75a:	3328      	adds	r3, #40	; 0x28
 800e75c:	2102      	movs	r1, #2
 800e75e:	4618      	mov	r0, r3
 800e760:	f001 ffc8 	bl	80106f4 <RCCEx_PLL3_Config>
 800e764:	4603      	mov	r3, r0
 800e766:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e76a:	e00a      	b.n	800e782 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e76c:	2301      	movs	r3, #1
 800e76e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e772:	e006      	b.n	800e782 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e774:	bf00      	nop
 800e776:	e004      	b.n	800e782 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e778:	bf00      	nop
 800e77a:	e002      	b.n	800e782 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e77c:	bf00      	nop
 800e77e:	e000      	b.n	800e782 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e780:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e782:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e786:	2b00      	cmp	r3, #0
 800e788:	d10b      	bne.n	800e7a2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e78a:	4b39      	ldr	r3, [pc, #228]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e78c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e78e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800e792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e79a:	4a35      	ldr	r2, [pc, #212]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e79c:	430b      	orrs	r3, r1
 800e79e:	6553      	str	r3, [r2, #84]	; 0x54
 800e7a0:	e003      	b.n	800e7aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e7a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e7aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800e7b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e7c0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800e7c4:	460b      	mov	r3, r1
 800e7c6:	4313      	orrs	r3, r2
 800e7c8:	d058      	beq.n	800e87c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800e7ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e7ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e7d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800e7d6:	d033      	beq.n	800e840 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800e7d8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800e7dc:	d82c      	bhi.n	800e838 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e7de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e7e2:	d02f      	beq.n	800e844 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800e7e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e7e8:	d826      	bhi.n	800e838 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e7ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e7ee:	d02b      	beq.n	800e848 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800e7f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e7f4:	d820      	bhi.n	800e838 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e7f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e7fa:	d012      	beq.n	800e822 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800e7fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e800:	d81a      	bhi.n	800e838 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e802:	2b00      	cmp	r3, #0
 800e804:	d022      	beq.n	800e84c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800e806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e80a:	d115      	bne.n	800e838 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e80c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e810:	3308      	adds	r3, #8
 800e812:	2100      	movs	r1, #0
 800e814:	4618      	mov	r0, r3
 800e816:	f001 febb 	bl	8010590 <RCCEx_PLL2_Config>
 800e81a:	4603      	mov	r3, r0
 800e81c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e820:	e015      	b.n	800e84e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e826:	3328      	adds	r3, #40	; 0x28
 800e828:	2102      	movs	r1, #2
 800e82a:	4618      	mov	r0, r3
 800e82c:	f001 ff62 	bl	80106f4 <RCCEx_PLL3_Config>
 800e830:	4603      	mov	r3, r0
 800e832:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e836:	e00a      	b.n	800e84e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e838:	2301      	movs	r3, #1
 800e83a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e83e:	e006      	b.n	800e84e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e840:	bf00      	nop
 800e842:	e004      	b.n	800e84e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e844:	bf00      	nop
 800e846:	e002      	b.n	800e84e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e848:	bf00      	nop
 800e84a:	e000      	b.n	800e84e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e84c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e84e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e852:	2b00      	cmp	r3, #0
 800e854:	d10e      	bne.n	800e874 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e856:	4b06      	ldr	r3, [pc, #24]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e85a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800e85e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e862:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e866:	4a02      	ldr	r2, [pc, #8]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e868:	430b      	orrs	r3, r1
 800e86a:	6593      	str	r3, [r2, #88]	; 0x58
 800e86c:	e006      	b.n	800e87c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800e86e:	bf00      	nop
 800e870:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e874:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e878:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e87c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e884:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800e888:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e88c:	2300      	movs	r3, #0
 800e88e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e892:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800e896:	460b      	mov	r3, r1
 800e898:	4313      	orrs	r3, r2
 800e89a:	d055      	beq.n	800e948 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800e89c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e8a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800e8a8:	d033      	beq.n	800e912 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800e8aa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800e8ae:	d82c      	bhi.n	800e90a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e8b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8b4:	d02f      	beq.n	800e916 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800e8b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8ba:	d826      	bhi.n	800e90a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e8bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800e8c0:	d02b      	beq.n	800e91a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800e8c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800e8c6:	d820      	bhi.n	800e90a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e8c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e8cc:	d012      	beq.n	800e8f4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800e8ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e8d2:	d81a      	bhi.n	800e90a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d022      	beq.n	800e91e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800e8d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e8dc:	d115      	bne.n	800e90a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e8de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8e2:	3308      	adds	r3, #8
 800e8e4:	2100      	movs	r1, #0
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f001 fe52 	bl	8010590 <RCCEx_PLL2_Config>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e8f2:	e015      	b.n	800e920 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e8f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8f8:	3328      	adds	r3, #40	; 0x28
 800e8fa:	2102      	movs	r1, #2
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f001 fef9 	bl	80106f4 <RCCEx_PLL3_Config>
 800e902:	4603      	mov	r3, r0
 800e904:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e908:	e00a      	b.n	800e920 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e90a:	2301      	movs	r3, #1
 800e90c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e910:	e006      	b.n	800e920 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e912:	bf00      	nop
 800e914:	e004      	b.n	800e920 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e916:	bf00      	nop
 800e918:	e002      	b.n	800e920 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e91a:	bf00      	nop
 800e91c:	e000      	b.n	800e920 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e91e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e920:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e924:	2b00      	cmp	r3, #0
 800e926:	d10b      	bne.n	800e940 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800e928:	4ba1      	ldr	r3, [pc, #644]	; (800ebb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e92a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e92c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800e930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e934:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e938:	4a9d      	ldr	r2, [pc, #628]	; (800ebb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e93a:	430b      	orrs	r3, r1
 800e93c:	6593      	str	r3, [r2, #88]	; 0x58
 800e93e:	e003      	b.n	800e948 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e940:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e944:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800e948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e950:	f002 0308 	and.w	r3, r2, #8
 800e954:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e958:	2300      	movs	r3, #0
 800e95a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e95e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800e962:	460b      	mov	r3, r1
 800e964:	4313      	orrs	r3, r2
 800e966:	d01e      	beq.n	800e9a6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800e968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e96c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e974:	d10c      	bne.n	800e990 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e97a:	3328      	adds	r3, #40	; 0x28
 800e97c:	2102      	movs	r1, #2
 800e97e:	4618      	mov	r0, r3
 800e980:	f001 feb8 	bl	80106f4 <RCCEx_PLL3_Config>
 800e984:	4603      	mov	r3, r0
 800e986:	2b00      	cmp	r3, #0
 800e988:	d002      	beq.n	800e990 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800e98a:	2301      	movs	r3, #1
 800e98c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800e990:	4b87      	ldr	r3, [pc, #540]	; (800ebb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e994:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e99c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9a0:	4a83      	ldr	r2, [pc, #524]	; (800ebb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e9a2:	430b      	orrs	r3, r1
 800e9a4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e9a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ae:	f002 0310 	and.w	r3, r2, #16
 800e9b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e9bc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800e9c0:	460b      	mov	r3, r1
 800e9c2:	4313      	orrs	r3, r2
 800e9c4:	d01e      	beq.n	800ea04 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800e9c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e9ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9d2:	d10c      	bne.n	800e9ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e9d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9d8:	3328      	adds	r3, #40	; 0x28
 800e9da:	2102      	movs	r1, #2
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f001 fe89 	bl	80106f4 <RCCEx_PLL3_Config>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d002      	beq.n	800e9ee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800e9e8:	2301      	movs	r3, #1
 800e9ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e9ee:	4b70      	ldr	r3, [pc, #448]	; (800ebb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e9f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e9f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e9f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e9fe:	4a6c      	ldr	r2, [pc, #432]	; (800ebb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ea00:	430b      	orrs	r3, r1
 800ea02:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ea04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea0c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800ea10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ea14:	2300      	movs	r3, #0
 800ea16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ea1a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800ea1e:	460b      	mov	r3, r1
 800ea20:	4313      	orrs	r3, r2
 800ea22:	d03e      	beq.n	800eaa2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ea24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ea2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ea30:	d022      	beq.n	800ea78 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800ea32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ea36:	d81b      	bhi.n	800ea70 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d003      	beq.n	800ea44 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800ea3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea40:	d00b      	beq.n	800ea5a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800ea42:	e015      	b.n	800ea70 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ea44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea48:	3308      	adds	r3, #8
 800ea4a:	2100      	movs	r1, #0
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f001 fd9f 	bl	8010590 <RCCEx_PLL2_Config>
 800ea52:	4603      	mov	r3, r0
 800ea54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ea58:	e00f      	b.n	800ea7a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ea5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea5e:	3328      	adds	r3, #40	; 0x28
 800ea60:	2102      	movs	r1, #2
 800ea62:	4618      	mov	r0, r3
 800ea64:	f001 fe46 	bl	80106f4 <RCCEx_PLL3_Config>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ea6e:	e004      	b.n	800ea7a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ea70:	2301      	movs	r3, #1
 800ea72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ea76:	e000      	b.n	800ea7a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800ea78:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ea7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d10b      	bne.n	800ea9a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ea82:	4b4b      	ldr	r3, [pc, #300]	; (800ebb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ea84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea86:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800ea8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ea92:	4a47      	ldr	r2, [pc, #284]	; (800ebb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ea94:	430b      	orrs	r3, r1
 800ea96:	6593      	str	r3, [r2, #88]	; 0x58
 800ea98:	e003      	b.n	800eaa2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ea9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800eaa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eaa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaaa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800eaae:	67bb      	str	r3, [r7, #120]	; 0x78
 800eab0:	2300      	movs	r3, #0
 800eab2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800eab4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800eab8:	460b      	mov	r3, r1
 800eaba:	4313      	orrs	r3, r2
 800eabc:	d03b      	beq.n	800eb36 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800eabe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eac6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800eaca:	d01f      	beq.n	800eb0c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800eacc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ead0:	d818      	bhi.n	800eb04 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800ead2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ead6:	d003      	beq.n	800eae0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800ead8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eadc:	d007      	beq.n	800eaee <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800eade:	e011      	b.n	800eb04 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eae0:	4b33      	ldr	r3, [pc, #204]	; (800ebb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eae4:	4a32      	ldr	r2, [pc, #200]	; (800ebb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eaea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800eaec:	e00f      	b.n	800eb0e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eaee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eaf2:	3328      	adds	r3, #40	; 0x28
 800eaf4:	2101      	movs	r1, #1
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f001 fdfc 	bl	80106f4 <RCCEx_PLL3_Config>
 800eafc:	4603      	mov	r3, r0
 800eafe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800eb02:	e004      	b.n	800eb0e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eb04:	2301      	movs	r3, #1
 800eb06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eb0a:	e000      	b.n	800eb0e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800eb0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d10b      	bne.n	800eb2e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800eb16:	4b26      	ldr	r3, [pc, #152]	; (800ebb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eb18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb1a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800eb1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb26:	4a22      	ldr	r2, [pc, #136]	; (800ebb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eb28:	430b      	orrs	r3, r1
 800eb2a:	6553      	str	r3, [r2, #84]	; 0x54
 800eb2c:	e003      	b.n	800eb36 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eb32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800eb36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb3e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800eb42:	673b      	str	r3, [r7, #112]	; 0x70
 800eb44:	2300      	movs	r3, #0
 800eb46:	677b      	str	r3, [r7, #116]	; 0x74
 800eb48:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800eb4c:	460b      	mov	r3, r1
 800eb4e:	4313      	orrs	r3, r2
 800eb50:	d034      	beq.n	800ebbc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800eb52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d003      	beq.n	800eb64 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800eb5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb60:	d007      	beq.n	800eb72 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800eb62:	e011      	b.n	800eb88 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eb64:	4b12      	ldr	r3, [pc, #72]	; (800ebb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eb66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb68:	4a11      	ldr	r2, [pc, #68]	; (800ebb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eb6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eb6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800eb70:	e00e      	b.n	800eb90 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800eb72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb76:	3308      	adds	r3, #8
 800eb78:	2102      	movs	r1, #2
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	f001 fd08 	bl	8010590 <RCCEx_PLL2_Config>
 800eb80:	4603      	mov	r3, r0
 800eb82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800eb86:	e003      	b.n	800eb90 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800eb88:	2301      	movs	r3, #1
 800eb8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eb8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d10d      	bne.n	800ebb4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800eb98:	4b05      	ldr	r3, [pc, #20]	; (800ebb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eb9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800eba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eba6:	4a02      	ldr	r2, [pc, #8]	; (800ebb0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eba8:	430b      	orrs	r3, r1
 800ebaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ebac:	e006      	b.n	800ebbc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800ebae:	bf00      	nop
 800ebb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ebb8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ebbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800ebc8:	66bb      	str	r3, [r7, #104]	; 0x68
 800ebca:	2300      	movs	r3, #0
 800ebcc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ebce:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800ebd2:	460b      	mov	r3, r1
 800ebd4:	4313      	orrs	r3, r2
 800ebd6:	d00c      	beq.n	800ebf2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ebd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebdc:	3328      	adds	r3, #40	; 0x28
 800ebde:	2102      	movs	r1, #2
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f001 fd87 	bl	80106f4 <RCCEx_PLL3_Config>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d002      	beq.n	800ebf2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ebec:	2301      	movs	r3, #1
 800ebee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ebf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebfa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800ebfe:	663b      	str	r3, [r7, #96]	; 0x60
 800ec00:	2300      	movs	r3, #0
 800ec02:	667b      	str	r3, [r7, #100]	; 0x64
 800ec04:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800ec08:	460b      	mov	r3, r1
 800ec0a:	4313      	orrs	r3, r2
 800ec0c:	d038      	beq.n	800ec80 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ec0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ec1a:	d018      	beq.n	800ec4e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800ec1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ec20:	d811      	bhi.n	800ec46 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ec22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec26:	d014      	beq.n	800ec52 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800ec28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec2c:	d80b      	bhi.n	800ec46 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d011      	beq.n	800ec56 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800ec32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec36:	d106      	bne.n	800ec46 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ec38:	4bc3      	ldr	r3, [pc, #780]	; (800ef48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ec3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec3c:	4ac2      	ldr	r2, [pc, #776]	; (800ef48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ec3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ec42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ec44:	e008      	b.n	800ec58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ec46:	2301      	movs	r3, #1
 800ec48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ec4c:	e004      	b.n	800ec58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ec4e:	bf00      	nop
 800ec50:	e002      	b.n	800ec58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ec52:	bf00      	nop
 800ec54:	e000      	b.n	800ec58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ec56:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ec58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d10b      	bne.n	800ec78 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ec60:	4bb9      	ldr	r3, [pc, #740]	; (800ef48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ec62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec64:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ec68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec70:	4ab5      	ldr	r2, [pc, #724]	; (800ef48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ec72:	430b      	orrs	r3, r1
 800ec74:	6553      	str	r3, [r2, #84]	; 0x54
 800ec76:	e003      	b.n	800ec80 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ec80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec88:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800ec8c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ec8e:	2300      	movs	r3, #0
 800ec90:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ec92:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800ec96:	460b      	mov	r3, r1
 800ec98:	4313      	orrs	r3, r2
 800ec9a:	d009      	beq.n	800ecb0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ec9c:	4baa      	ldr	r3, [pc, #680]	; (800ef48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ec9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eca0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800eca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecaa:	4aa7      	ldr	r2, [pc, #668]	; (800ef48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ecac:	430b      	orrs	r3, r1
 800ecae:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ecb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800ecbc:	653b      	str	r3, [r7, #80]	; 0x50
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	657b      	str	r3, [r7, #84]	; 0x54
 800ecc2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800ecc6:	460b      	mov	r3, r1
 800ecc8:	4313      	orrs	r3, r2
 800ecca:	d00a      	beq.n	800ece2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800eccc:	4b9e      	ldr	r3, [pc, #632]	; (800ef48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ecce:	691b      	ldr	r3, [r3, #16]
 800ecd0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800ecd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecd8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ecdc:	4a9a      	ldr	r2, [pc, #616]	; (800ef48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ecde:	430b      	orrs	r3, r1
 800ece0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ece2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ece6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecea:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800ecee:	64bb      	str	r3, [r7, #72]	; 0x48
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ecf4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800ecf8:	460b      	mov	r3, r1
 800ecfa:	4313      	orrs	r3, r2
 800ecfc:	d009      	beq.n	800ed12 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ecfe:	4b92      	ldr	r3, [pc, #584]	; (800ef48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed02:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800ed06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed0c:	4a8e      	ldr	r2, [pc, #568]	; (800ef48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed0e:	430b      	orrs	r3, r1
 800ed10:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ed12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed1a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800ed1e:	643b      	str	r3, [r7, #64]	; 0x40
 800ed20:	2300      	movs	r3, #0
 800ed22:	647b      	str	r3, [r7, #68]	; 0x44
 800ed24:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800ed28:	460b      	mov	r3, r1
 800ed2a:	4313      	orrs	r3, r2
 800ed2c:	d00e      	beq.n	800ed4c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ed2e:	4b86      	ldr	r3, [pc, #536]	; (800ef48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed30:	691b      	ldr	r3, [r3, #16]
 800ed32:	4a85      	ldr	r2, [pc, #532]	; (800ef48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ed38:	6113      	str	r3, [r2, #16]
 800ed3a:	4b83      	ldr	r3, [pc, #524]	; (800ef48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed3c:	6919      	ldr	r1, [r3, #16]
 800ed3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed42:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ed46:	4a80      	ldr	r2, [pc, #512]	; (800ef48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed48:	430b      	orrs	r3, r1
 800ed4a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ed4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed54:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800ed58:	63bb      	str	r3, [r7, #56]	; 0x38
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed5e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800ed62:	460b      	mov	r3, r1
 800ed64:	4313      	orrs	r3, r2
 800ed66:	d009      	beq.n	800ed7c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ed68:	4b77      	ldr	r3, [pc, #476]	; (800ef48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed6c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ed70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed76:	4a74      	ldr	r2, [pc, #464]	; (800ef48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed78:	430b      	orrs	r3, r1
 800ed7a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ed7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed84:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800ed88:	633b      	str	r3, [r7, #48]	; 0x30
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	637b      	str	r3, [r7, #52]	; 0x34
 800ed8e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800ed92:	460b      	mov	r3, r1
 800ed94:	4313      	orrs	r3, r2
 800ed96:	d00a      	beq.n	800edae <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ed98:	4b6b      	ldr	r3, [pc, #428]	; (800ef48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed9c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800eda0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eda4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eda8:	4a67      	ldr	r2, [pc, #412]	; (800ef48 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800edaa:	430b      	orrs	r3, r1
 800edac:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800edae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb6:	2100      	movs	r1, #0
 800edb8:	62b9      	str	r1, [r7, #40]	; 0x28
 800edba:	f003 0301 	and.w	r3, r3, #1
 800edbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800edc0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800edc4:	460b      	mov	r3, r1
 800edc6:	4313      	orrs	r3, r2
 800edc8:	d011      	beq.n	800edee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800edca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edce:	3308      	adds	r3, #8
 800edd0:	2100      	movs	r1, #0
 800edd2:	4618      	mov	r0, r3
 800edd4:	f001 fbdc 	bl	8010590 <RCCEx_PLL2_Config>
 800edd8:	4603      	mov	r3, r0
 800edda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800edde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d003      	beq.n	800edee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ede6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800edea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800edee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf6:	2100      	movs	r1, #0
 800edf8:	6239      	str	r1, [r7, #32]
 800edfa:	f003 0302 	and.w	r3, r3, #2
 800edfe:	627b      	str	r3, [r7, #36]	; 0x24
 800ee00:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ee04:	460b      	mov	r3, r1
 800ee06:	4313      	orrs	r3, r2
 800ee08:	d011      	beq.n	800ee2e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ee0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee0e:	3308      	adds	r3, #8
 800ee10:	2101      	movs	r1, #1
 800ee12:	4618      	mov	r0, r3
 800ee14:	f001 fbbc 	bl	8010590 <RCCEx_PLL2_Config>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ee1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d003      	beq.n	800ee2e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ee2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee36:	2100      	movs	r1, #0
 800ee38:	61b9      	str	r1, [r7, #24]
 800ee3a:	f003 0304 	and.w	r3, r3, #4
 800ee3e:	61fb      	str	r3, [r7, #28]
 800ee40:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ee44:	460b      	mov	r3, r1
 800ee46:	4313      	orrs	r3, r2
 800ee48:	d011      	beq.n	800ee6e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ee4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee4e:	3308      	adds	r3, #8
 800ee50:	2102      	movs	r1, #2
 800ee52:	4618      	mov	r0, r3
 800ee54:	f001 fb9c 	bl	8010590 <RCCEx_PLL2_Config>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ee5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d003      	beq.n	800ee6e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ee6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee76:	2100      	movs	r1, #0
 800ee78:	6139      	str	r1, [r7, #16]
 800ee7a:	f003 0308 	and.w	r3, r3, #8
 800ee7e:	617b      	str	r3, [r7, #20]
 800ee80:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ee84:	460b      	mov	r3, r1
 800ee86:	4313      	orrs	r3, r2
 800ee88:	d011      	beq.n	800eeae <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ee8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee8e:	3328      	adds	r3, #40	; 0x28
 800ee90:	2100      	movs	r1, #0
 800ee92:	4618      	mov	r0, r3
 800ee94:	f001 fc2e 	bl	80106f4 <RCCEx_PLL3_Config>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800ee9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d003      	beq.n	800eeae <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eea6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eeaa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800eeae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eeb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb6:	2100      	movs	r1, #0
 800eeb8:	60b9      	str	r1, [r7, #8]
 800eeba:	f003 0310 	and.w	r3, r3, #16
 800eebe:	60fb      	str	r3, [r7, #12]
 800eec0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800eec4:	460b      	mov	r3, r1
 800eec6:	4313      	orrs	r3, r2
 800eec8:	d011      	beq.n	800eeee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eeca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eece:	3328      	adds	r3, #40	; 0x28
 800eed0:	2101      	movs	r1, #1
 800eed2:	4618      	mov	r0, r3
 800eed4:	f001 fc0e 	bl	80106f4 <RCCEx_PLL3_Config>
 800eed8:	4603      	mov	r3, r0
 800eeda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800eede:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d003      	beq.n	800eeee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eee6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eeea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800eeee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef6:	2100      	movs	r1, #0
 800eef8:	6039      	str	r1, [r7, #0]
 800eefa:	f003 0320 	and.w	r3, r3, #32
 800eefe:	607b      	str	r3, [r7, #4]
 800ef00:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ef04:	460b      	mov	r3, r1
 800ef06:	4313      	orrs	r3, r2
 800ef08:	d011      	beq.n	800ef2e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ef0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef0e:	3328      	adds	r3, #40	; 0x28
 800ef10:	2102      	movs	r1, #2
 800ef12:	4618      	mov	r0, r3
 800ef14:	f001 fbee 	bl	80106f4 <RCCEx_PLL3_Config>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ef1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d003      	beq.n	800ef2e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800ef2e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d101      	bne.n	800ef3a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800ef36:	2300      	movs	r3, #0
 800ef38:	e000      	b.n	800ef3c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800ef3a:	2301      	movs	r3, #1
}
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800ef42:	46bd      	mov	sp, r7
 800ef44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ef48:	58024400 	.word	0x58024400

0800ef4c <HAL_RCCEx_GetPeriphCLKConfig>:
  * @retval None
  *
  *   (*) : Available on some STM32H7 lines only.
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ef4c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800ef50:	b08b      	sub	sp, #44	; 0x2c
 800ef52:	af00      	add	r7, sp, #0
 800ef54:	6278      	str	r0, [r7, #36]	; 0x24
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection =
 800ef56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef58:	4aab      	ldr	r2, [pc, #684]	; (800f208 <HAL_RCCEx_GetPeriphCLKConfig+0x2bc>)
 800ef5a:	f04f 0300 	mov.w	r3, #0
 800ef5e:	e9c1 2300 	strd	r2, r3, [r1]
    RCC_PERIPHCLK_CKPER;

#if defined(I2C5)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C1235;
#else
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C123;
 800ef62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef68:	f042 0408 	orr.w	r4, r2, #8
 800ef6c:	461d      	mov	r5, r3
 800ef6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef70:	e9c3 4500 	strd	r4, r5, [r3]
#endif /* RCC_CDCCIP1R_SAI2ASEL */
#if defined(RCC_CDCCIP1R_SAI2BSEL)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI2B;
#endif /* RCC_CDCCIP1R_SAI2BSEL */
#if defined(SAI3)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI23;
 800ef74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef7a:	f442 7100 	orr.w	r1, r2, #512	; 0x200
 800ef7e:	61b9      	str	r1, [r7, #24]
 800ef80:	61fb      	str	r3, [r7, #28]
 800ef82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef84:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ef88:	e9c3 1200 	strd	r1, r2, [r3]
#endif /* SAI3 */
#if defined(SAI4)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4A;
 800ef8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef92:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
 800ef96:	6139      	str	r1, [r7, #16]
 800ef98:	617b      	str	r3, [r7, #20]
 800ef9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef9c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800efa0:	e9c3 1200 	strd	r1, r2, [r3]
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4B;
 800efa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efaa:	f442 6100 	orr.w	r1, r2, #2048	; 0x800
 800efae:	60b9      	str	r1, [r7, #8]
 800efb0:	60fb      	str	r3, [r7, #12]
 800efb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800efb8:	e9c3 1200 	strd	r1, r2, [r3]
#endif /* SAI4 */
#if defined(DFSDM2_BASE)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DFSDM2;
#endif /* DFSDM2 */
#if defined(QUADSPI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_QSPI;
 800efbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc2:	f042 7100 	orr.w	r1, r2, #33554432	; 0x2000000
 800efc6:	6039      	str	r1, [r7, #0]
 800efc8:	607b      	str	r3, [r7, #4]
 800efca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efcc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800efd0:	e9c3 1200 	strd	r1, r2, [r3]
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_OSPI;
#endif /* OCTOSPI1 || OCTOSPI2 */
#if defined(HRTIM1)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_HRTIM1;
 800efd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efda:	f042 5a80 	orr.w	sl, r2, #268435456	; 0x10000000
 800efde:	469b      	mov	fp, r3
 800efe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe2:	e9c3 ab00 	strd	sl, fp, [r3]
#endif /* HRTIM1 */
#if defined(LTDC)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_LTDC;
 800efe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efec:	f042 5800 	orr.w	r8, r2, #536870912	; 0x20000000
 800eff0:	4699      	mov	r9, r3
 800eff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff4:	e9c3 8900 	strd	r8, r9, [r3]
#if defined(DSI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DSI;
#endif /* DSI */

  /* Get the PLL3 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL3.PLL3M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> RCC_PLLCKSELR_DIVM3_Pos);
 800eff8:	4b84      	ldr	r3, [pc, #528]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800effa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800effc:	0d1b      	lsrs	r3, r3, #20
 800effe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800f002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f004:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLL3.PLL3N = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) >> RCC_PLL3DIVR_N3_Pos) + 1U;
 800f006:	4b81      	ldr	r3, [pc, #516]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f00a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f00e:	1c5a      	adds	r2, r3, #1
 800f010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f012:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInit->PLL3.PLL3R = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> RCC_PLL3DIVR_R3_Pos) + 1U;
 800f014:	4b7d      	ldr	r3, [pc, #500]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f018:	0e1b      	lsrs	r3, r3, #24
 800f01a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f01e:	1c5a      	adds	r2, r3, #1
 800f020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f022:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInit->PLL3.PLL3P = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> RCC_PLL3DIVR_P3_Pos) + 1U;
 800f024:	4b79      	ldr	r3, [pc, #484]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f028:	0a5b      	lsrs	r3, r3, #9
 800f02a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f02e:	1c5a      	adds	r2, r3, #1
 800f030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f032:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInit->PLL3.PLL3Q = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> RCC_PLL3DIVR_Q3_Pos) + 1U;
 800f034:	4b75      	ldr	r3, [pc, #468]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f038:	0c1b      	lsrs	r3, r3, #16
 800f03a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f03e:	1c5a      	adds	r2, r3, #1
 800f040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f042:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInit->PLL3.PLL3RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3RGE) >> RCC_PLLCFGR_PLL3RGE_Pos);
 800f044:	4b71      	ldr	r3, [pc, #452]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f048:	0a9b      	lsrs	r3, r3, #10
 800f04a:	f003 0203 	and.w	r2, r3, #3
 800f04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f050:	63da      	str	r2, [r3, #60]	; 0x3c
  PeriphClkInit->PLL3.PLL3VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3VCOSEL) >> RCC_PLLCFGR_PLL3VCOSEL_Pos);
 800f052:	4b6e      	ldr	r3, [pc, #440]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f056:	0a5b      	lsrs	r3, r3, #9
 800f058:	f003 0201 	and.w	r2, r3, #1
 800f05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f05e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the PLL2 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL2.PLL2M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> RCC_PLLCKSELR_DIVM2_Pos);
 800f060:	4b6a      	ldr	r3, [pc, #424]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f064:	0b1b      	lsrs	r3, r3, #12
 800f066:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800f06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f06c:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLL2.PLL2N = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) >> RCC_PLL2DIVR_N2_Pos) + 1U;
 800f06e:	4b67      	ldr	r3, [pc, #412]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f076:	1c5a      	adds	r2, r3, #1
 800f078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f07a:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLL2.PLL2R = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> RCC_PLL2DIVR_R2_Pos) + 1U;
 800f07c:	4b63      	ldr	r3, [pc, #396]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f07e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f080:	0e1b      	lsrs	r3, r3, #24
 800f082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f086:	1c5a      	adds	r2, r3, #1
 800f088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f08a:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLL2.PLL2P = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> RCC_PLL2DIVR_P2_Pos) + 1U;
 800f08c:	4b5f      	ldr	r3, [pc, #380]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f090:	0a5b      	lsrs	r3, r3, #9
 800f092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f096:	1c5a      	adds	r2, r3, #1
 800f098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f09a:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLL2.PLL2Q = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> RCC_PLL2DIVR_Q2_Pos) + 1U;
 800f09c:	4b5b      	ldr	r3, [pc, #364]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f09e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0a0:	0c1b      	lsrs	r3, r3, #16
 800f0a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0a6:	1c5a      	adds	r2, r3, #1
 800f0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0aa:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLL2.PLL2RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2RGE) >> RCC_PLLCFGR_PLL2RGE_Pos);
 800f0ac:	4b57      	ldr	r3, [pc, #348]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0b0:	099b      	lsrs	r3, r3, #6
 800f0b2:	f003 0203 	and.w	r2, r3, #3
 800f0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b8:	61da      	str	r2, [r3, #28]
  PeriphClkInit->PLL2.PLL2VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2VCOSEL) >> RCC_PLLCFGR_PLL2VCOSEL_Pos);
 800f0ba:	4b54      	ldr	r3, [pc, #336]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0be:	095b      	lsrs	r3, r3, #5
 800f0c0:	f003 0201 	and.w	r2, r3, #1
 800f0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c6:	621a      	str	r2, [r3, #32]

  /* Get the USART1 configuration --------------------------------------------*/
  PeriphClkInit->Usart16ClockSelection      = __HAL_RCC_GET_USART16_SOURCE();
 800f0c8:	4b50      	ldr	r3, [pc, #320]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f0ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0cc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800f0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d2:	67da      	str	r2, [r3, #124]	; 0x7c
  /* Get the USART2/3/4/5/7/8 clock source -----------------------------------*/
  PeriphClkInit->Usart234578ClockSelection  = __HAL_RCC_GET_USART234578_SOURCE();
 800f0d4:	4b4d      	ldr	r3, [pc, #308]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f0d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0d8:	f003 0207 	and.w	r2, r3, #7
 800f0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0de:	679a      	str	r2, [r3, #120]	; 0x78
  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection      = __HAL_RCC_GET_LPUART1_SOURCE();
 800f0e0:	4b4a      	ldr	r3, [pc, #296]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f0e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0e4:	f003 0207 	and.w	r2, r3, #7
 800f0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if defined(I2C5)
  /* Get the I2C1/2/3/5 clock source -----------------------------------------*/
  PeriphClkInit->I2c1235ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
#else
  /* Get the I2C1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->I2c123ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
 800f0ee:	4b47      	ldr	r3, [pc, #284]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f0f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0f2:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 800f0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /*I2C5*/
  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection       = __HAL_RCC_GET_LPTIM1_SOURCE();
 800f0fc:	4b43      	ldr	r3, [pc, #268]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f0fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f100:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800f104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f106:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection       = __HAL_RCC_GET_LPTIM2_SOURCE();
 800f10a:	4b40      	ldr	r3, [pc, #256]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f10c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f10e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800f112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f114:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  /* Get the LPTIM3/4/5 clock source -----------------------------------------*/
  PeriphClkInit->Lptim345ClockSelection     = __HAL_RCC_GET_LPTIM345_SOURCE();
 800f118:	4b3c      	ldr	r3, [pc, #240]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f11a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f11c:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
 800f120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f122:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection         = __HAL_RCC_GET_SAI1_SOURCE();
 800f126:	4b39      	ldr	r3, [pc, #228]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f12a:	f003 0207 	and.w	r2, r3, #7
 800f12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f130:	659a      	str	r2, [r3, #88]	; 0x58
#if defined(SAI3)
  /* Get the SAI2/3 clock source ---------------------------------------------*/
  PeriphClkInit->Sai23ClockSelection        = __HAL_RCC_GET_SAI23_SOURCE();
 800f132:	4b36      	ldr	r3, [pc, #216]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f136:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 800f13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f13c:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Get the SAI2B clock source ---------------------------------------------*/
  PeriphClkInit->Sai2BClockSelection        = __HAL_RCC_GET_SAI2B_SOURCE();
#endif  /*SAI2B*/
#if defined(SAI4)
  /* Get the SAI4A clock source ----------------------------------------------*/
  PeriphClkInit->Sai4AClockSelection        = __HAL_RCC_GET_SAI4A_SOURCE();
 800f13e:	4b33      	ldr	r3, [pc, #204]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f142:	f403 0260 	and.w	r2, r3, #14680064	; 0xe00000
 800f146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f148:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  /* Get the SAI4B clock source ----------------------------------------------*/
  PeriphClkInit->Sai4BClockSelection        = __HAL_RCC_GET_SAI4B_SOURCE();
 800f14c:	4b2f      	ldr	r3, [pc, #188]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f14e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f150:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 800f154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f156:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif  /*SAI4*/
  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection          = __HAL_RCC_GET_RTC_SOURCE();
 800f15a:	4b2c      	ldr	r3, [pc, #176]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f15c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f15e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800f162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f164:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection          = __HAL_RCC_GET_USB_SOURCE();
 800f168:	4b28      	ldr	r3, [pc, #160]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f16a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f16c:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800f170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f172:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  /* Get the SDMMC clock source ----------------------------------------------*/
  PeriphClkInit->SdmmcClockSelection        = __HAL_RCC_GET_SDMMC_SOURCE();
 800f176:	4b25      	ldr	r3, [pc, #148]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f17a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800f17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f180:	651a      	str	r2, [r3, #80]	; 0x50
  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection          = __HAL_RCC_GET_RNG_SOURCE();
 800f182:	4b22      	ldr	r3, [pc, #136]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f186:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800f18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f18c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(HRTIM1)
  /* Get the HRTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Hrtim1ClockSelection       = __HAL_RCC_GET_HRTIM1_SOURCE();
 800f190:	4b1e      	ldr	r3, [pc, #120]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f192:	691b      	ldr	r3, [r3, #16]
 800f194:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800f198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f19a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
#endif /* HRTIM1 */
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection          = __HAL_RCC_GET_ADC_SOURCE();
 800f19e:	4b1b      	ldr	r3, [pc, #108]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f1a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800f1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection       = __HAL_RCC_GET_SWPMI1_SOURCE();
 800f1ac:	4b17      	ldr	r3, [pc, #92]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f1ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1b0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800f1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1b6:	675a      	str	r2, [r3, #116]	; 0x74
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection       = __HAL_RCC_GET_DFSDM1_SOURCE();
 800f1b8:	4b14      	ldr	r3, [pc, #80]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f1ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1bc:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 800f1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c2:	66da      	str	r2, [r3, #108]	; 0x6c
#if defined(DFSDM2_BASE)
  /* Get the DFSDM2 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm2ClockSelection       = __HAL_RCC_GET_DFSDM2_SOURCE();
#endif /* DFSDM2 */
  /* Get the SPDIFRX clock source --------------------------------------------*/
  PeriphClkInit->SpdifrxClockSelection      = __HAL_RCC_GET_SPDIFRX_SOURCE();
 800f1c4:	4b11      	ldr	r3, [pc, #68]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f1c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1c8:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800f1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ce:	669a      	str	r2, [r3, #104]	; 0x68
  /* Get the SPI1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->Spi123ClockSelection       = __HAL_RCC_GET_SPI123_SOURCE();
 800f1d0:	4b0e      	ldr	r3, [pc, #56]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f1d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1d4:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
 800f1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1da:	661a      	str	r2, [r3, #96]	; 0x60
  /* Get the SPI4/5 clock source ---------------------------------------------*/
  PeriphClkInit->Spi45ClockSelection        = __HAL_RCC_GET_SPI45_SOURCE();
 800f1dc:	4b0b      	ldr	r3, [pc, #44]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f1de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1e0:	f403 22e0 	and.w	r2, r3, #458752	; 0x70000
 800f1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e6:	665a      	str	r2, [r3, #100]	; 0x64
  /* Get the SPI6 clock source -----------------------------------------------*/
  PeriphClkInit->Spi6ClockSelection         = __HAL_RCC_GET_SPI6_SOURCE();
 800f1e8:	4b08      	ldr	r3, [pc, #32]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f1ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1ec:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800f1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* Get the FDCAN clock source ----------------------------------------------*/
  PeriphClkInit->FdcanClockSelection        = __HAL_RCC_GET_FDCAN_SOURCE();
 800f1f6:	4b05      	ldr	r3, [pc, #20]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f1f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1fa:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 800f1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f200:	671a      	str	r2, [r3, #112]	; 0x70
  /* Get the CEC clock source ------------------------------------------------*/
  PeriphClkInit->CecClockSelection          = __HAL_RCC_GET_CEC_SOURCE();
 800f202:	4b02      	ldr	r3, [pc, #8]	; (800f20c <HAL_RCCEx_GetPeriphCLKConfig+0x2c0>)
 800f204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f206:	e003      	b.n	800f210 <HAL_RCCEx_GetPeriphCLKConfig+0x2c4>
 800f208:	c9fff1f7 	.word	0xc9fff1f7
 800f20c:	58024400 	.word	0x58024400
 800f210:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800f214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f216:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  /* Get the FMC clock source ------------------------------------------------*/
  PeriphClkInit->FmcClockSelection          = __HAL_RCC_GET_FMC_SOURCE();
 800f21a:	4b14      	ldr	r3, [pc, #80]	; (800f26c <HAL_RCCEx_GetPeriphCLKConfig+0x320>)
 800f21c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f21e:	f003 0203 	and.w	r2, r3, #3
 800f222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f224:	649a      	str	r2, [r3, #72]	; 0x48
#if defined(QUADSPI)
  /* Get the QSPI clock source -----------------------------------------------*/
  PeriphClkInit->QspiClockSelection         = __HAL_RCC_GET_QSPI_SOURCE();
 800f226:	4b11      	ldr	r3, [pc, #68]	; (800f26c <HAL_RCCEx_GetPeriphCLKConfig+0x320>)
 800f228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f22a:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800f22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f230:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Get the DSI clock source ------------------------------------------------*/
  PeriphClkInit->DsiClockSelection          = __HAL_RCC_GET_DSI_SOURCE();
#endif /*DSI*/

  /* Get the CKPER clock source ----------------------------------------------*/
  PeriphClkInit->CkperClockSelection        = __HAL_RCC_GET_CLKP_SOURCE();
 800f232:	4b0e      	ldr	r3, [pc, #56]	; (800f26c <HAL_RCCEx_GetPeriphCLKConfig+0x320>)
 800f234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f236:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
 800f23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f23c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->CFGR & RCC_CFGR_TIMPRE) == 0U)
 800f23e:	4b0b      	ldr	r3, [pc, #44]	; (800f26c <HAL_RCCEx_GetPeriphCLKConfig+0x320>)
 800f240:	691b      	ldr	r3, [r3, #16]
 800f242:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f246:	2b00      	cmp	r3, #0
 800f248:	d104      	bne.n	800f254 <HAL_RCCEx_GetPeriphCLKConfig+0x308>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800f24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f24c:	2200      	movs	r2, #0
 800f24e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800f252:	e004      	b.n	800f25e <HAL_RCCEx_GetPeriphCLKConfig+0x312>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800f254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f256:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800f25a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 800f25e:	bf00      	nop
 800f260:	372c      	adds	r7, #44	; 0x2c
 800f262:	46bd      	mov	sp, r7
 800f264:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800f268:	4770      	bx	lr
 800f26a:	bf00      	nop
 800f26c:	58024400 	.word	0x58024400

0800f270 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800f270:	b580      	push	{r7, lr}
 800f272:	b090      	sub	sp, #64	; 0x40
 800f274:	af00      	add	r7, sp, #0
 800f276:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800f27a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f27e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800f282:	430b      	orrs	r3, r1
 800f284:	f040 8094 	bne.w	800f3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800f288:	4b9e      	ldr	r3, [pc, #632]	; (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f28a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f28c:	f003 0307 	and.w	r3, r3, #7
 800f290:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800f292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f294:	2b04      	cmp	r3, #4
 800f296:	f200 8087 	bhi.w	800f3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800f29a:	a201      	add	r2, pc, #4	; (adr r2, 800f2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800f29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2a0:	0800f2b5 	.word	0x0800f2b5
 800f2a4:	0800f2dd 	.word	0x0800f2dd
 800f2a8:	0800f305 	.word	0x0800f305
 800f2ac:	0800f3a1 	.word	0x0800f3a1
 800f2b0:	0800f32d 	.word	0x0800f32d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f2b4:	4b93      	ldr	r3, [pc, #588]	; (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f2bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f2c0:	d108      	bne.n	800f2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f2c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f001 f810 	bl	80102ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f2d0:	f000 bd45 	b.w	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2d8:	f000 bd41 	b.w	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f2dc:	4b89      	ldr	r3, [pc, #548]	; (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f2e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f2e8:	d108      	bne.n	800f2fc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f2ea:	f107 0318 	add.w	r3, r7, #24
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f000 fd54 	bl	800fd9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f2f4:	69bb      	ldr	r3, [r7, #24]
 800f2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f2f8:	f000 bd31 	b.w	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f300:	f000 bd2d 	b.w	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f304:	4b7f      	ldr	r3, [pc, #508]	; (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f30c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f310:	d108      	bne.n	800f324 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f312:	f107 030c 	add.w	r3, r7, #12
 800f316:	4618      	mov	r0, r3
 800f318:	f000 fe94 	bl	8010044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f320:	f000 bd1d 	b.w	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f324:	2300      	movs	r3, #0
 800f326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f328:	f000 bd19 	b.w	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f32c:	4b75      	ldr	r3, [pc, #468]	; (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f32e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f330:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f334:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f336:	4b73      	ldr	r3, [pc, #460]	; (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	f003 0304 	and.w	r3, r3, #4
 800f33e:	2b04      	cmp	r3, #4
 800f340:	d10c      	bne.n	800f35c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800f342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f344:	2b00      	cmp	r3, #0
 800f346:	d109      	bne.n	800f35c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f348:	4b6e      	ldr	r3, [pc, #440]	; (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	08db      	lsrs	r3, r3, #3
 800f34e:	f003 0303 	and.w	r3, r3, #3
 800f352:	4a6d      	ldr	r2, [pc, #436]	; (800f508 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800f354:	fa22 f303 	lsr.w	r3, r2, r3
 800f358:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f35a:	e01f      	b.n	800f39c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f35c:	4b69      	ldr	r3, [pc, #420]	; (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f368:	d106      	bne.n	800f378 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800f36a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f36c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f370:	d102      	bne.n	800f378 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f372:	4b66      	ldr	r3, [pc, #408]	; (800f50c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800f374:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f376:	e011      	b.n	800f39c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f378:	4b62      	ldr	r3, [pc, #392]	; (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f380:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f384:	d106      	bne.n	800f394 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800f386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f388:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f38c:	d102      	bne.n	800f394 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f38e:	4b60      	ldr	r3, [pc, #384]	; (800f510 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800f390:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f392:	e003      	b.n	800f39c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f394:	2300      	movs	r3, #0
 800f396:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f398:	f000 bce1 	b.w	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f39c:	f000 bcdf 	b.w	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f3a0:	4b5c      	ldr	r3, [pc, #368]	; (800f514 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800f3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3a4:	f000 bcdb 	b.w	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3ac:	f000 bcd7 	b.w	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800f3b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f3b4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800f3b8:	430b      	orrs	r3, r1
 800f3ba:	f040 80ad 	bne.w	800f518 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800f3be:	4b51      	ldr	r3, [pc, #324]	; (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f3c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3c2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800f3c6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800f3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f3ce:	d056      	beq.n	800f47e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800f3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f3d6:	f200 8090 	bhi.w	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3dc:	2bc0      	cmp	r3, #192	; 0xc0
 800f3de:	f000 8088 	beq.w	800f4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800f3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e4:	2bc0      	cmp	r3, #192	; 0xc0
 800f3e6:	f200 8088 	bhi.w	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ec:	2b80      	cmp	r3, #128	; 0x80
 800f3ee:	d032      	beq.n	800f456 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800f3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3f2:	2b80      	cmp	r3, #128	; 0x80
 800f3f4:	f200 8081 	bhi.w	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d003      	beq.n	800f406 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800f3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f400:	2b40      	cmp	r3, #64	; 0x40
 800f402:	d014      	beq.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800f404:	e079      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f406:	4b3f      	ldr	r3, [pc, #252]	; (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f40e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f412:	d108      	bne.n	800f426 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f418:	4618      	mov	r0, r3
 800f41a:	f000 ff67 	bl	80102ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f420:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f422:	f000 bc9c 	b.w	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f426:	2300      	movs	r3, #0
 800f428:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f42a:	f000 bc98 	b.w	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f42e:	4b35      	ldr	r3, [pc, #212]	; (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f436:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f43a:	d108      	bne.n	800f44e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f43c:	f107 0318 	add.w	r3, r7, #24
 800f440:	4618      	mov	r0, r3
 800f442:	f000 fcab 	bl	800fd9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f446:	69bb      	ldr	r3, [r7, #24]
 800f448:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f44a:	f000 bc88 	b.w	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f44e:	2300      	movs	r3, #0
 800f450:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f452:	f000 bc84 	b.w	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f456:	4b2b      	ldr	r3, [pc, #172]	; (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f45e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f462:	d108      	bne.n	800f476 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f464:	f107 030c 	add.w	r3, r7, #12
 800f468:	4618      	mov	r0, r3
 800f46a:	f000 fdeb 	bl	8010044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f472:	f000 bc74 	b.w	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f476:	2300      	movs	r3, #0
 800f478:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f47a:	f000 bc70 	b.w	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f47e:	4b21      	ldr	r3, [pc, #132]	; (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f482:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f486:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f488:	4b1e      	ldr	r3, [pc, #120]	; (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	f003 0304 	and.w	r3, r3, #4
 800f490:	2b04      	cmp	r3, #4
 800f492:	d10c      	bne.n	800f4ae <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800f494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f496:	2b00      	cmp	r3, #0
 800f498:	d109      	bne.n	800f4ae <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f49a:	4b1a      	ldr	r3, [pc, #104]	; (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	08db      	lsrs	r3, r3, #3
 800f4a0:	f003 0303 	and.w	r3, r3, #3
 800f4a4:	4a18      	ldr	r2, [pc, #96]	; (800f508 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800f4a6:	fa22 f303 	lsr.w	r3, r2, r3
 800f4aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f4ac:	e01f      	b.n	800f4ee <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f4ae:	4b15      	ldr	r3, [pc, #84]	; (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f4b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f4ba:	d106      	bne.n	800f4ca <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800f4bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f4c2:	d102      	bne.n	800f4ca <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f4c4:	4b11      	ldr	r3, [pc, #68]	; (800f50c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800f4c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f4c8:	e011      	b.n	800f4ee <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f4ca:	4b0e      	ldr	r3, [pc, #56]	; (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f4d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f4d6:	d106      	bne.n	800f4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800f4d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f4de:	d102      	bne.n	800f4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f4e0:	4b0b      	ldr	r3, [pc, #44]	; (800f510 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800f4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f4e4:	e003      	b.n	800f4ee <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f4ea:	f000 bc38 	b.w	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f4ee:	f000 bc36 	b.w	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f4f2:	4b08      	ldr	r3, [pc, #32]	; (800f514 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800f4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4f6:	f000 bc32 	b.w	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4fe:	f000 bc2e 	b.w	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f502:	bf00      	nop
 800f504:	58024400 	.word	0x58024400
 800f508:	03d09000 	.word	0x03d09000
 800f50c:	003d0900 	.word	0x003d0900
 800f510:	017d7840 	.word	0x017d7840
 800f514:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800f518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f51c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800f520:	430b      	orrs	r3, r1
 800f522:	f040 809c 	bne.w	800f65e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800f526:	4b9e      	ldr	r3, [pc, #632]	; (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f52a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800f52e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800f530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f532:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f536:	d054      	beq.n	800f5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800f538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f53a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f53e:	f200 808b 	bhi.w	800f658 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800f542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f544:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f548:	f000 8083 	beq.w	800f652 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800f54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f54e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f552:	f200 8081 	bhi.w	800f658 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800f556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f558:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f55c:	d02f      	beq.n	800f5be <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800f55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f560:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f564:	d878      	bhi.n	800f658 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800f566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d004      	beq.n	800f576 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800f56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f56e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f572:	d012      	beq.n	800f59a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800f574:	e070      	b.n	800f658 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f576:	4b8a      	ldr	r3, [pc, #552]	; (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f57e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f582:	d107      	bne.n	800f594 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f588:	4618      	mov	r0, r3
 800f58a:	f000 feaf 	bl	80102ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f590:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f592:	e3e4      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f594:	2300      	movs	r3, #0
 800f596:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f598:	e3e1      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f59a:	4b81      	ldr	r3, [pc, #516]	; (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f5a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f5a6:	d107      	bne.n	800f5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f5a8:	f107 0318 	add.w	r3, r7, #24
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f000 fbf5 	bl	800fd9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f5b2:	69bb      	ldr	r3, [r7, #24]
 800f5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f5b6:	e3d2      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5bc:	e3cf      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f5be:	4b78      	ldr	r3, [pc, #480]	; (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f5c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f5ca:	d107      	bne.n	800f5dc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f5cc:	f107 030c 	add.w	r3, r7, #12
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f000 fd37 	bl	8010044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f5da:	e3c0      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5e0:	e3bd      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f5e2:	4b6f      	ldr	r3, [pc, #444]	; (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f5e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f5e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f5ea:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f5ec:	4b6c      	ldr	r3, [pc, #432]	; (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	f003 0304 	and.w	r3, r3, #4
 800f5f4:	2b04      	cmp	r3, #4
 800f5f6:	d10c      	bne.n	800f612 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800f5f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d109      	bne.n	800f612 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f5fe:	4b68      	ldr	r3, [pc, #416]	; (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	08db      	lsrs	r3, r3, #3
 800f604:	f003 0303 	and.w	r3, r3, #3
 800f608:	4a66      	ldr	r2, [pc, #408]	; (800f7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f60a:	fa22 f303 	lsr.w	r3, r2, r3
 800f60e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f610:	e01e      	b.n	800f650 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f612:	4b63      	ldr	r3, [pc, #396]	; (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f61a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f61e:	d106      	bne.n	800f62e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800f620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f622:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f626:	d102      	bne.n	800f62e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f628:	4b5f      	ldr	r3, [pc, #380]	; (800f7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800f62a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f62c:	e010      	b.n	800f650 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f62e:	4b5c      	ldr	r3, [pc, #368]	; (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f636:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f63a:	d106      	bne.n	800f64a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800f63c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f63e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f642:	d102      	bne.n	800f64a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f644:	4b59      	ldr	r3, [pc, #356]	; (800f7ac <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800f646:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f648:	e002      	b.n	800f650 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f64a:	2300      	movs	r3, #0
 800f64c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f64e:	e386      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f650:	e385      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f652:	4b57      	ldr	r3, [pc, #348]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f654:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f656:	e382      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f658:	2300      	movs	r3, #0
 800f65a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f65c:	e37f      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800f65e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f662:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800f666:	430b      	orrs	r3, r1
 800f668:	f040 80a7 	bne.w	800f7ba <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800f66c:	4b4c      	ldr	r3, [pc, #304]	; (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f66e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f670:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800f674:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800f676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f678:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f67c:	d055      	beq.n	800f72a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800f67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f680:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f684:	f200 8096 	bhi.w	800f7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f68a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f68e:	f000 8084 	beq.w	800f79a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800f692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f694:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f698:	f200 808c 	bhi.w	800f7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f69e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f6a2:	d030      	beq.n	800f706 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800f6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f6aa:	f200 8083 	bhi.w	800f7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d004      	beq.n	800f6be <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800f6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f6ba:	d012      	beq.n	800f6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800f6bc:	e07a      	b.n	800f7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f6be:	4b38      	ldr	r3, [pc, #224]	; (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f6c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f6ca:	d107      	bne.n	800f6dc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f6cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f000 fe0b 	bl	80102ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f6da:	e340      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6e0:	e33d      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f6e2:	4b2f      	ldr	r3, [pc, #188]	; (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f6ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f6ee:	d107      	bne.n	800f700 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f6f0:	f107 0318 	add.w	r3, r7, #24
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f000 fb51 	bl	800fd9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f6fa:	69bb      	ldr	r3, [r7, #24]
 800f6fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f6fe:	e32e      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f700:	2300      	movs	r3, #0
 800f702:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f704:	e32b      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f706:	4b26      	ldr	r3, [pc, #152]	; (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f70e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f712:	d107      	bne.n	800f724 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f714:	f107 030c 	add.w	r3, r7, #12
 800f718:	4618      	mov	r0, r3
 800f71a:	f000 fc93 	bl	8010044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f722:	e31c      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f724:	2300      	movs	r3, #0
 800f726:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f728:	e319      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f72a:	4b1d      	ldr	r3, [pc, #116]	; (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f72c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f72e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f732:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f734:	4b1a      	ldr	r3, [pc, #104]	; (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	f003 0304 	and.w	r3, r3, #4
 800f73c:	2b04      	cmp	r3, #4
 800f73e:	d10c      	bne.n	800f75a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800f740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f742:	2b00      	cmp	r3, #0
 800f744:	d109      	bne.n	800f75a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f746:	4b16      	ldr	r3, [pc, #88]	; (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	08db      	lsrs	r3, r3, #3
 800f74c:	f003 0303 	and.w	r3, r3, #3
 800f750:	4a14      	ldr	r2, [pc, #80]	; (800f7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f752:	fa22 f303 	lsr.w	r3, r2, r3
 800f756:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f758:	e01e      	b.n	800f798 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f75a:	4b11      	ldr	r3, [pc, #68]	; (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f766:	d106      	bne.n	800f776 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800f768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f76a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f76e:	d102      	bne.n	800f776 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f770:	4b0d      	ldr	r3, [pc, #52]	; (800f7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800f772:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f774:	e010      	b.n	800f798 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f776:	4b0a      	ldr	r3, [pc, #40]	; (800f7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f77e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f782:	d106      	bne.n	800f792 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800f784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f78a:	d102      	bne.n	800f792 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f78c:	4b07      	ldr	r3, [pc, #28]	; (800f7ac <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800f78e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f790:	e002      	b.n	800f798 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f792:	2300      	movs	r3, #0
 800f794:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f796:	e2e2      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f798:	e2e1      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f79a:	4b05      	ldr	r3, [pc, #20]	; (800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f79c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f79e:	e2de      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f7a0:	58024400 	.word	0x58024400
 800f7a4:	03d09000 	.word	0x03d09000
 800f7a8:	003d0900 	.word	0x003d0900
 800f7ac:	017d7840 	.word	0x017d7840
 800f7b0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7b8:	e2d1      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800f7ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f7be:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800f7c2:	430b      	orrs	r3, r1
 800f7c4:	f040 809c 	bne.w	800f900 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800f7c8:	4b93      	ldr	r3, [pc, #588]	; (800fa18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f7ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f7cc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800f7d0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f7d8:	d054      	beq.n	800f884 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800f7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f7e0:	f200 808b 	bhi.w	800f8fa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f7ea:	f000 8083 	beq.w	800f8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800f7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f7f4:	f200 8081 	bhi.w	800f8fa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f7fe:	d02f      	beq.n	800f860 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800f800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f806:	d878      	bhi.n	800f8fa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d004      	beq.n	800f818 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800f80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f814:	d012      	beq.n	800f83c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800f816:	e070      	b.n	800f8fa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f818:	4b7f      	ldr	r3, [pc, #508]	; (800fa18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f820:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f824:	d107      	bne.n	800f836 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f82a:	4618      	mov	r0, r3
 800f82c:	f000 fd5e 	bl	80102ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f832:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f834:	e293      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f836:	2300      	movs	r3, #0
 800f838:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f83a:	e290      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f83c:	4b76      	ldr	r3, [pc, #472]	; (800fa18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f844:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f848:	d107      	bne.n	800f85a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f84a:	f107 0318 	add.w	r3, r7, #24
 800f84e:	4618      	mov	r0, r3
 800f850:	f000 faa4 	bl	800fd9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f854:	69bb      	ldr	r3, [r7, #24]
 800f856:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f858:	e281      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f85a:	2300      	movs	r3, #0
 800f85c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f85e:	e27e      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f860:	4b6d      	ldr	r3, [pc, #436]	; (800fa18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f868:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f86c:	d107      	bne.n	800f87e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f86e:	f107 030c 	add.w	r3, r7, #12
 800f872:	4618      	mov	r0, r3
 800f874:	f000 fbe6 	bl	8010044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f87c:	e26f      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f87e:	2300      	movs	r3, #0
 800f880:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f882:	e26c      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f884:	4b64      	ldr	r3, [pc, #400]	; (800fa18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f888:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f88c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f88e:	4b62      	ldr	r3, [pc, #392]	; (800fa18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	f003 0304 	and.w	r3, r3, #4
 800f896:	2b04      	cmp	r3, #4
 800f898:	d10c      	bne.n	800f8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800f89a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d109      	bne.n	800f8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f8a0:	4b5d      	ldr	r3, [pc, #372]	; (800fa18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	08db      	lsrs	r3, r3, #3
 800f8a6:	f003 0303 	and.w	r3, r3, #3
 800f8aa:	4a5c      	ldr	r2, [pc, #368]	; (800fa1c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800f8ac:	fa22 f303 	lsr.w	r3, r2, r3
 800f8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f8b2:	e01e      	b.n	800f8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f8b4:	4b58      	ldr	r3, [pc, #352]	; (800fa18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f8bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f8c0:	d106      	bne.n	800f8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800f8c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f8c8:	d102      	bne.n	800f8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f8ca:	4b55      	ldr	r3, [pc, #340]	; (800fa20 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f8cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f8ce:	e010      	b.n	800f8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f8d0:	4b51      	ldr	r3, [pc, #324]	; (800fa18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f8d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f8dc:	d106      	bne.n	800f8ec <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800f8de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f8e4:	d102      	bne.n	800f8ec <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f8e6:	4b4f      	ldr	r3, [pc, #316]	; (800fa24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800f8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f8ea:	e002      	b.n	800f8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f8f0:	e235      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f8f2:	e234      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f8f4:	4b4c      	ldr	r3, [pc, #304]	; (800fa28 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800f8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f8f8:	e231      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f8fe:	e22e      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800f900:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f904:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800f908:	430b      	orrs	r3, r1
 800f90a:	f040 808f 	bne.w	800fa2c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800f90e:	4b42      	ldr	r3, [pc, #264]	; (800fa18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f912:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800f916:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800f918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f91a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f91e:	d06b      	beq.n	800f9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800f920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f922:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f926:	d874      	bhi.n	800fa12 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f92a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f92e:	d056      	beq.n	800f9de <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800f930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f932:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f936:	d86c      	bhi.n	800fa12 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f93a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f93e:	d03b      	beq.n	800f9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800f940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f942:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f946:	d864      	bhi.n	800fa12 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f94a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f94e:	d021      	beq.n	800f994 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800f950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f952:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f956:	d85c      	bhi.n	800fa12 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d004      	beq.n	800f968 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800f95e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f964:	d004      	beq.n	800f970 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800f966:	e054      	b.n	800fa12 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800f968:	f7fe f8ba 	bl	800dae0 <HAL_RCC_GetPCLK1Freq>
 800f96c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f96e:	e1f6      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f970:	4b29      	ldr	r3, [pc, #164]	; (800fa18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f978:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f97c:	d107      	bne.n	800f98e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f97e:	f107 0318 	add.w	r3, r7, #24
 800f982:	4618      	mov	r0, r3
 800f984:	f000 fa0a 	bl	800fd9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f988:	69fb      	ldr	r3, [r7, #28]
 800f98a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f98c:	e1e7      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f98e:	2300      	movs	r3, #0
 800f990:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f992:	e1e4      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f994:	4b20      	ldr	r3, [pc, #128]	; (800fa18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f99c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f9a0:	d107      	bne.n	800f9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f9a2:	f107 030c 	add.w	r3, r7, #12
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f000 fb4c 	bl	8010044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f9ac:	693b      	ldr	r3, [r7, #16]
 800f9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f9b0:	e1d5      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9b6:	e1d2      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f9b8:	4b17      	ldr	r3, [pc, #92]	; (800fa18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	f003 0304 	and.w	r3, r3, #4
 800f9c0:	2b04      	cmp	r3, #4
 800f9c2:	d109      	bne.n	800f9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f9c4:	4b14      	ldr	r3, [pc, #80]	; (800fa18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	08db      	lsrs	r3, r3, #3
 800f9ca:	f003 0303 	and.w	r3, r3, #3
 800f9ce:	4a13      	ldr	r2, [pc, #76]	; (800fa1c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800f9d0:	fa22 f303 	lsr.w	r3, r2, r3
 800f9d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f9d6:	e1c2      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f9d8:	2300      	movs	r3, #0
 800f9da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9dc:	e1bf      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f9de:	4b0e      	ldr	r3, [pc, #56]	; (800fa18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f9e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f9ea:	d102      	bne.n	800f9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800f9ec:	4b0c      	ldr	r3, [pc, #48]	; (800fa20 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f9ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f9f0:	e1b5      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9f6:	e1b2      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f9f8:	4b07      	ldr	r3, [pc, #28]	; (800fa18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fa00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fa04:	d102      	bne.n	800fa0c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800fa06:	4b07      	ldr	r3, [pc, #28]	; (800fa24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800fa08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa0a:	e1a8      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa10:	e1a5      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800fa12:	2300      	movs	r3, #0
 800fa14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa16:	e1a2      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fa18:	58024400 	.word	0x58024400
 800fa1c:	03d09000 	.word	0x03d09000
 800fa20:	003d0900 	.word	0x003d0900
 800fa24:	017d7840 	.word	0x017d7840
 800fa28:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800fa2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa30:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800fa34:	430b      	orrs	r3, r1
 800fa36:	d173      	bne.n	800fb20 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800fa38:	4b9c      	ldr	r3, [pc, #624]	; (800fcac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fa3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800fa40:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800fa42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fa48:	d02f      	beq.n	800faaa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800fa4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fa50:	d863      	bhi.n	800fb1a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800fa52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d004      	beq.n	800fa62 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800fa58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa5e:	d012      	beq.n	800fa86 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800fa60:	e05b      	b.n	800fb1a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fa62:	4b92      	ldr	r3, [pc, #584]	; (800fcac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fa6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fa6e:	d107      	bne.n	800fa80 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fa70:	f107 0318 	add.w	r3, r7, #24
 800fa74:	4618      	mov	r0, r3
 800fa76:	f000 f991 	bl	800fd9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fa7a:	69bb      	ldr	r3, [r7, #24]
 800fa7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa7e:	e16e      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fa80:	2300      	movs	r3, #0
 800fa82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa84:	e16b      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fa86:	4b89      	ldr	r3, [pc, #548]	; (800fcac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fa8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fa92:	d107      	bne.n	800faa4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fa94:	f107 030c 	add.w	r3, r7, #12
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f000 fad3 	bl	8010044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800fa9e:	697b      	ldr	r3, [r7, #20]
 800faa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800faa2:	e15c      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800faa4:	2300      	movs	r3, #0
 800faa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800faa8:	e159      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800faaa:	4b80      	ldr	r3, [pc, #512]	; (800fcac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800faac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800faae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800fab2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fab4:	4b7d      	ldr	r3, [pc, #500]	; (800fcac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	f003 0304 	and.w	r3, r3, #4
 800fabc:	2b04      	cmp	r3, #4
 800fabe:	d10c      	bne.n	800fada <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800fac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d109      	bne.n	800fada <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fac6:	4b79      	ldr	r3, [pc, #484]	; (800fcac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	08db      	lsrs	r3, r3, #3
 800facc:	f003 0303 	and.w	r3, r3, #3
 800fad0:	4a77      	ldr	r2, [pc, #476]	; (800fcb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800fad2:	fa22 f303 	lsr.w	r3, r2, r3
 800fad6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fad8:	e01e      	b.n	800fb18 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fada:	4b74      	ldr	r3, [pc, #464]	; (800fcac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fae6:	d106      	bne.n	800faf6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800fae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800faee:	d102      	bne.n	800faf6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800faf0:	4b70      	ldr	r3, [pc, #448]	; (800fcb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800faf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800faf4:	e010      	b.n	800fb18 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800faf6:	4b6d      	ldr	r3, [pc, #436]	; (800fcac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fafe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fb02:	d106      	bne.n	800fb12 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800fb04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fb0a:	d102      	bne.n	800fb12 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fb0c:	4b6a      	ldr	r3, [pc, #424]	; (800fcb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800fb0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fb10:	e002      	b.n	800fb18 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fb12:	2300      	movs	r3, #0
 800fb14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800fb16:	e122      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fb18:	e121      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb1e:	e11e      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800fb20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb24:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800fb28:	430b      	orrs	r3, r1
 800fb2a:	d133      	bne.n	800fb94 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800fb2c:	4b5f      	ldr	r3, [pc, #380]	; (800fcac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fb2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fb34:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800fb36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d004      	beq.n	800fb46 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800fb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb42:	d012      	beq.n	800fb6a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800fb44:	e023      	b.n	800fb8e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fb46:	4b59      	ldr	r3, [pc, #356]	; (800fcac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fb4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fb52:	d107      	bne.n	800fb64 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fb54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb58:	4618      	mov	r0, r3
 800fb5a:	f000 fbc7 	bl	80102ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fb62:	e0fc      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fb64:	2300      	movs	r3, #0
 800fb66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb68:	e0f9      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fb6a:	4b50      	ldr	r3, [pc, #320]	; (800fcac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fb72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fb76:	d107      	bne.n	800fb88 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fb78:	f107 0318 	add.w	r3, r7, #24
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	f000 f90d 	bl	800fd9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800fb82:	6a3b      	ldr	r3, [r7, #32]
 800fb84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fb86:	e0ea      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fb88:	2300      	movs	r3, #0
 800fb8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb8c:	e0e7      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800fb8e:	2300      	movs	r3, #0
 800fb90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb92:	e0e4      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800fb94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb98:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800fb9c:	430b      	orrs	r3, r1
 800fb9e:	f040 808d 	bne.w	800fcbc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800fba2:	4b42      	ldr	r3, [pc, #264]	; (800fcac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fba6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800fbaa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800fbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fbb2:	d06b      	beq.n	800fc8c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800fbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fbba:	d874      	bhi.n	800fca6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800fbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fbc2:	d056      	beq.n	800fc72 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800fbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fbca:	d86c      	bhi.n	800fca6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800fbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800fbd2:	d03b      	beq.n	800fc4c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800fbd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbd6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800fbda:	d864      	bhi.n	800fca6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800fbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fbe2:	d021      	beq.n	800fc28 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800fbe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbe6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fbea:	d85c      	bhi.n	800fca6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800fbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d004      	beq.n	800fbfc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800fbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbf4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fbf8:	d004      	beq.n	800fc04 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800fbfa:	e054      	b.n	800fca6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800fbfc:	f000 f8b8 	bl	800fd70 <HAL_RCCEx_GetD3PCLK1Freq>
 800fc00:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fc02:	e0ac      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fc04:	4b29      	ldr	r3, [pc, #164]	; (800fcac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fc0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fc10:	d107      	bne.n	800fc22 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc12:	f107 0318 	add.w	r3, r7, #24
 800fc16:	4618      	mov	r0, r3
 800fc18:	f000 f8c0 	bl	800fd9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fc1c:	69fb      	ldr	r3, [r7, #28]
 800fc1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fc20:	e09d      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fc22:	2300      	movs	r3, #0
 800fc24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc26:	e09a      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fc28:	4b20      	ldr	r3, [pc, #128]	; (800fcac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fc30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fc34:	d107      	bne.n	800fc46 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fc36:	f107 030c 	add.w	r3, r7, #12
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f000 fa02 	bl	8010044 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800fc40:	693b      	ldr	r3, [r7, #16]
 800fc42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fc44:	e08b      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fc46:	2300      	movs	r3, #0
 800fc48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc4a:	e088      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800fc4c:	4b17      	ldr	r3, [pc, #92]	; (800fcac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	f003 0304 	and.w	r3, r3, #4
 800fc54:	2b04      	cmp	r3, #4
 800fc56:	d109      	bne.n	800fc6c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fc58:	4b14      	ldr	r3, [pc, #80]	; (800fcac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	08db      	lsrs	r3, r3, #3
 800fc5e:	f003 0303 	and.w	r3, r3, #3
 800fc62:	4a13      	ldr	r2, [pc, #76]	; (800fcb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800fc64:	fa22 f303 	lsr.w	r3, r2, r3
 800fc68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fc6a:	e078      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc70:	e075      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800fc72:	4b0e      	ldr	r3, [pc, #56]	; (800fcac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc7e:	d102      	bne.n	800fc86 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800fc80:	4b0c      	ldr	r3, [pc, #48]	; (800fcb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800fc82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fc84:	e06b      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fc86:	2300      	movs	r3, #0
 800fc88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc8a:	e068      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800fc8c:	4b07      	ldr	r3, [pc, #28]	; (800fcac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fc94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fc98:	d102      	bne.n	800fca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800fc9a:	4b07      	ldr	r3, [pc, #28]	; (800fcb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800fc9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fc9e:	e05e      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fca0:	2300      	movs	r3, #0
 800fca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fca4:	e05b      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800fca6:	2300      	movs	r3, #0
 800fca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fcaa:	e058      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fcac:	58024400 	.word	0x58024400
 800fcb0:	03d09000 	.word	0x03d09000
 800fcb4:	003d0900 	.word	0x003d0900
 800fcb8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800fcbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fcc0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800fcc4:	430b      	orrs	r3, r1
 800fcc6:	d148      	bne.n	800fd5a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800fcc8:	4b27      	ldr	r3, [pc, #156]	; (800fd68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800fcca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fccc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800fcd0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800fcd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fcd8:	d02a      	beq.n	800fd30 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800fcda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fce0:	d838      	bhi.n	800fd54 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800fce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d004      	beq.n	800fcf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800fce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fcee:	d00d      	beq.n	800fd0c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800fcf0:	e030      	b.n	800fd54 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800fcf2:	4b1d      	ldr	r3, [pc, #116]	; (800fd68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fcfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fcfe:	d102      	bne.n	800fd06 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800fd00:	4b1a      	ldr	r3, [pc, #104]	; (800fd6c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800fd02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd04:	e02b      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fd06:	2300      	movs	r3, #0
 800fd08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd0a:	e028      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fd0c:	4b16      	ldr	r3, [pc, #88]	; (800fd68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fd14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fd18:	d107      	bne.n	800fd2a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fd1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f000 fae4 	bl	80102ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd28:	e019      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd2e:	e016      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fd30:	4b0d      	ldr	r3, [pc, #52]	; (800fd68 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fd38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fd3c:	d107      	bne.n	800fd4e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fd3e:	f107 0318 	add.w	r3, r7, #24
 800fd42:	4618      	mov	r0, r3
 800fd44:	f000 f82a 	bl	800fd9c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fd48:	69fb      	ldr	r3, [r7, #28]
 800fd4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd4c:	e007      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fd4e:	2300      	movs	r3, #0
 800fd50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd52:	e004      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800fd54:	2300      	movs	r3, #0
 800fd56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd58:	e001      	b.n	800fd5e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800fd5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800fd60:	4618      	mov	r0, r3
 800fd62:	3740      	adds	r7, #64	; 0x40
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd80      	pop	{r7, pc}
 800fd68:	58024400 	.word	0x58024400
 800fd6c:	017d7840 	.word	0x017d7840

0800fd70 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800fd74:	f7fd fe84 	bl	800da80 <HAL_RCC_GetHCLKFreq>
 800fd78:	4602      	mov	r2, r0
 800fd7a:	4b06      	ldr	r3, [pc, #24]	; (800fd94 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800fd7c:	6a1b      	ldr	r3, [r3, #32]
 800fd7e:	091b      	lsrs	r3, r3, #4
 800fd80:	f003 0307 	and.w	r3, r3, #7
 800fd84:	4904      	ldr	r1, [pc, #16]	; (800fd98 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800fd86:	5ccb      	ldrb	r3, [r1, r3]
 800fd88:	f003 031f 	and.w	r3, r3, #31
 800fd8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800fd90:	4618      	mov	r0, r3
 800fd92:	bd80      	pop	{r7, pc}
 800fd94:	58024400 	.word	0x58024400
 800fd98:	0801b318 	.word	0x0801b318

0800fd9c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800fd9c:	b480      	push	{r7}
 800fd9e:	b089      	sub	sp, #36	; 0x24
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fda4:	4ba1      	ldr	r3, [pc, #644]	; (801002c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fda6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fda8:	f003 0303 	and.w	r3, r3, #3
 800fdac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800fdae:	4b9f      	ldr	r3, [pc, #636]	; (801002c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fdb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdb2:	0b1b      	lsrs	r3, r3, #12
 800fdb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fdb8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800fdba:	4b9c      	ldr	r3, [pc, #624]	; (801002c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fdbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdbe:	091b      	lsrs	r3, r3, #4
 800fdc0:	f003 0301 	and.w	r3, r3, #1
 800fdc4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800fdc6:	4b99      	ldr	r3, [pc, #612]	; (801002c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fdc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdca:	08db      	lsrs	r3, r3, #3
 800fdcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fdd0:	693a      	ldr	r2, [r7, #16]
 800fdd2:	fb02 f303 	mul.w	r3, r2, r3
 800fdd6:	ee07 3a90 	vmov	s15, r3
 800fdda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800fde2:	697b      	ldr	r3, [r7, #20]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	f000 8111 	beq.w	801000c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800fdea:	69bb      	ldr	r3, [r7, #24]
 800fdec:	2b02      	cmp	r3, #2
 800fdee:	f000 8083 	beq.w	800fef8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800fdf2:	69bb      	ldr	r3, [r7, #24]
 800fdf4:	2b02      	cmp	r3, #2
 800fdf6:	f200 80a1 	bhi.w	800ff3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800fdfa:	69bb      	ldr	r3, [r7, #24]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d003      	beq.n	800fe08 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800fe00:	69bb      	ldr	r3, [r7, #24]
 800fe02:	2b01      	cmp	r3, #1
 800fe04:	d056      	beq.n	800feb4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800fe06:	e099      	b.n	800ff3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fe08:	4b88      	ldr	r3, [pc, #544]	; (801002c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	f003 0320 	and.w	r3, r3, #32
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d02d      	beq.n	800fe70 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fe14:	4b85      	ldr	r3, [pc, #532]	; (801002c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	08db      	lsrs	r3, r3, #3
 800fe1a:	f003 0303 	and.w	r3, r3, #3
 800fe1e:	4a84      	ldr	r2, [pc, #528]	; (8010030 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800fe20:	fa22 f303 	lsr.w	r3, r2, r3
 800fe24:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fe26:	68bb      	ldr	r3, [r7, #8]
 800fe28:	ee07 3a90 	vmov	s15, r3
 800fe2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe30:	697b      	ldr	r3, [r7, #20]
 800fe32:	ee07 3a90 	vmov	s15, r3
 800fe36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe3e:	4b7b      	ldr	r3, [pc, #492]	; (801002c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe46:	ee07 3a90 	vmov	s15, r3
 800fe4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800fe52:	eddf 5a78 	vldr	s11, [pc, #480]	; 8010034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fe56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fe62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800fe6e:	e087      	b.n	800ff80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fe70:	697b      	ldr	r3, [r7, #20]
 800fe72:	ee07 3a90 	vmov	s15, r3
 800fe76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe7a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010038 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800fe7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe82:	4b6a      	ldr	r3, [pc, #424]	; (801002c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fe84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe8a:	ee07 3a90 	vmov	s15, r3
 800fe8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe92:	ed97 6a03 	vldr	s12, [r7, #12]
 800fe96:	eddf 5a67 	vldr	s11, [pc, #412]	; 8010034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fe9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800feaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800feae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800feb2:	e065      	b.n	800ff80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800feb4:	697b      	ldr	r3, [r7, #20]
 800feb6:	ee07 3a90 	vmov	s15, r3
 800feba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800febe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801003c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800fec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fec6:	4b59      	ldr	r3, [pc, #356]	; (801002c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800feca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fece:	ee07 3a90 	vmov	s15, r3
 800fed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fed6:	ed97 6a03 	vldr	s12, [r7, #12]
 800feda:	eddf 5a56 	vldr	s11, [pc, #344]	; 8010034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800feea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800feee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fef2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fef6:	e043      	b.n	800ff80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fef8:	697b      	ldr	r3, [r7, #20]
 800fefa:	ee07 3a90 	vmov	s15, r3
 800fefe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010040 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ff06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff0a:	4b48      	ldr	r3, [pc, #288]	; (801002c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ff0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff12:	ee07 3a90 	vmov	s15, r3
 800ff16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ff1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ff22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ff2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ff3a:	e021      	b.n	800ff80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ff3c:	697b      	ldr	r3, [r7, #20]
 800ff3e:	ee07 3a90 	vmov	s15, r3
 800ff42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801003c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ff4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff4e:	4b37      	ldr	r3, [pc, #220]	; (801002c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ff50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff56:	ee07 3a90 	vmov	s15, r3
 800ff5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ff62:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010034 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ff66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ff72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ff7e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ff80:	4b2a      	ldr	r3, [pc, #168]	; (801002c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ff82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff84:	0a5b      	lsrs	r3, r3, #9
 800ff86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff8a:	ee07 3a90 	vmov	s15, r3
 800ff8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ff96:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ff9a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ff9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ffa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ffa6:	ee17 2a90 	vmov	r2, s15
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ffae:	4b1f      	ldr	r3, [pc, #124]	; (801002c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ffb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffb2:	0c1b      	lsrs	r3, r3, #16
 800ffb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ffb8:	ee07 3a90 	vmov	s15, r3
 800ffbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ffc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ffc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ffc8:	edd7 6a07 	vldr	s13, [r7, #28]
 800ffcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ffd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ffd4:	ee17 2a90 	vmov	r2, s15
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ffdc:	4b13      	ldr	r3, [pc, #76]	; (801002c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ffde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffe0:	0e1b      	lsrs	r3, r3, #24
 800ffe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ffe6:	ee07 3a90 	vmov	s15, r3
 800ffea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ffee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fff2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fff6:	edd7 6a07 	vldr	s13, [r7, #28]
 800fffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010002:	ee17 2a90 	vmov	r2, s15
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801000a:	e008      	b.n	801001e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	2200      	movs	r2, #0
 8010010:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	2200      	movs	r2, #0
 8010016:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2200      	movs	r2, #0
 801001c:	609a      	str	r2, [r3, #8]
}
 801001e:	bf00      	nop
 8010020:	3724      	adds	r7, #36	; 0x24
 8010022:	46bd      	mov	sp, r7
 8010024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010028:	4770      	bx	lr
 801002a:	bf00      	nop
 801002c:	58024400 	.word	0x58024400
 8010030:	03d09000 	.word	0x03d09000
 8010034:	46000000 	.word	0x46000000
 8010038:	4c742400 	.word	0x4c742400
 801003c:	4a742400 	.word	0x4a742400
 8010040:	4bbebc20 	.word	0x4bbebc20

08010044 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8010044:	b480      	push	{r7}
 8010046:	b089      	sub	sp, #36	; 0x24
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801004c:	4ba1      	ldr	r3, [pc, #644]	; (80102d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801004e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010050:	f003 0303 	and.w	r3, r3, #3
 8010054:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8010056:	4b9f      	ldr	r3, [pc, #636]	; (80102d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801005a:	0d1b      	lsrs	r3, r3, #20
 801005c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010060:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8010062:	4b9c      	ldr	r3, [pc, #624]	; (80102d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010066:	0a1b      	lsrs	r3, r3, #8
 8010068:	f003 0301 	and.w	r3, r3, #1
 801006c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801006e:	4b99      	ldr	r3, [pc, #612]	; (80102d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010072:	08db      	lsrs	r3, r3, #3
 8010074:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010078:	693a      	ldr	r2, [r7, #16]
 801007a:	fb02 f303 	mul.w	r3, r2, r3
 801007e:	ee07 3a90 	vmov	s15, r3
 8010082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010086:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801008a:	697b      	ldr	r3, [r7, #20]
 801008c:	2b00      	cmp	r3, #0
 801008e:	f000 8111 	beq.w	80102b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8010092:	69bb      	ldr	r3, [r7, #24]
 8010094:	2b02      	cmp	r3, #2
 8010096:	f000 8083 	beq.w	80101a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801009a:	69bb      	ldr	r3, [r7, #24]
 801009c:	2b02      	cmp	r3, #2
 801009e:	f200 80a1 	bhi.w	80101e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80100a2:	69bb      	ldr	r3, [r7, #24]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d003      	beq.n	80100b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80100a8:	69bb      	ldr	r3, [r7, #24]
 80100aa:	2b01      	cmp	r3, #1
 80100ac:	d056      	beq.n	801015c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80100ae:	e099      	b.n	80101e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80100b0:	4b88      	ldr	r3, [pc, #544]	; (80102d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	f003 0320 	and.w	r3, r3, #32
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d02d      	beq.n	8010118 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80100bc:	4b85      	ldr	r3, [pc, #532]	; (80102d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	08db      	lsrs	r3, r3, #3
 80100c2:	f003 0303 	and.w	r3, r3, #3
 80100c6:	4a84      	ldr	r2, [pc, #528]	; (80102d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80100c8:	fa22 f303 	lsr.w	r3, r2, r3
 80100cc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80100ce:	68bb      	ldr	r3, [r7, #8]
 80100d0:	ee07 3a90 	vmov	s15, r3
 80100d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	ee07 3a90 	vmov	s15, r3
 80100de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80100e6:	4b7b      	ldr	r3, [pc, #492]	; (80102d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80100e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100ee:	ee07 3a90 	vmov	s15, r3
 80100f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80100f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80100fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80102dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80100fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801010a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801010e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010112:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010116:	e087      	b.n	8010228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010118:	697b      	ldr	r3, [r7, #20]
 801011a:	ee07 3a90 	vmov	s15, r3
 801011e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010122:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80102e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8010126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801012a:	4b6a      	ldr	r3, [pc, #424]	; (80102d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801012c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801012e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010132:	ee07 3a90 	vmov	s15, r3
 8010136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801013a:	ed97 6a03 	vldr	s12, [r7, #12]
 801013e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80102dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801014a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801014e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010156:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801015a:	e065      	b.n	8010228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801015c:	697b      	ldr	r3, [r7, #20]
 801015e:	ee07 3a90 	vmov	s15, r3
 8010162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010166:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80102e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801016a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801016e:	4b59      	ldr	r3, [pc, #356]	; (80102d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010176:	ee07 3a90 	vmov	s15, r3
 801017a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801017e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010182:	eddf 5a56 	vldr	s11, [pc, #344]	; 80102dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801018a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801018e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010196:	ee67 7a27 	vmul.f32	s15, s14, s15
 801019a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801019e:	e043      	b.n	8010228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80101a0:	697b      	ldr	r3, [r7, #20]
 80101a2:	ee07 3a90 	vmov	s15, r3
 80101a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80102e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80101ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80101b2:	4b48      	ldr	r3, [pc, #288]	; (80102d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80101b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101ba:	ee07 3a90 	vmov	s15, r3
 80101be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80101c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80101c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80102dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80101ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80101ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80101d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80101d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80101da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80101e2:	e021      	b.n	8010228 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80101e4:	697b      	ldr	r3, [r7, #20]
 80101e6:	ee07 3a90 	vmov	s15, r3
 80101ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80102e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80101f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80101f6:	4b37      	ldr	r3, [pc, #220]	; (80102d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80101f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101fe:	ee07 3a90 	vmov	s15, r3
 8010202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010206:	ed97 6a03 	vldr	s12, [r7, #12]
 801020a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80102dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801020e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801021a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801021e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010222:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010226:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8010228:	4b2a      	ldr	r3, [pc, #168]	; (80102d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801022a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801022c:	0a5b      	lsrs	r3, r3, #9
 801022e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010232:	ee07 3a90 	vmov	s15, r3
 8010236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801023a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801023e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010242:	edd7 6a07 	vldr	s13, [r7, #28]
 8010246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801024a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801024e:	ee17 2a90 	vmov	r2, s15
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8010256:	4b1f      	ldr	r3, [pc, #124]	; (80102d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801025a:	0c1b      	lsrs	r3, r3, #16
 801025c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010260:	ee07 3a90 	vmov	s15, r3
 8010264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010268:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801026c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010270:	edd7 6a07 	vldr	s13, [r7, #28]
 8010274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010278:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801027c:	ee17 2a90 	vmov	r2, s15
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8010284:	4b13      	ldr	r3, [pc, #76]	; (80102d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010288:	0e1b      	lsrs	r3, r3, #24
 801028a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801028e:	ee07 3a90 	vmov	s15, r3
 8010292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010296:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801029a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801029e:	edd7 6a07 	vldr	s13, [r7, #28]
 80102a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80102a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80102aa:	ee17 2a90 	vmov	r2, s15
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80102b2:	e008      	b.n	80102c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	2200      	movs	r2, #0
 80102b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	2200      	movs	r2, #0
 80102be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2200      	movs	r2, #0
 80102c4:	609a      	str	r2, [r3, #8]
}
 80102c6:	bf00      	nop
 80102c8:	3724      	adds	r7, #36	; 0x24
 80102ca:	46bd      	mov	sp, r7
 80102cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d0:	4770      	bx	lr
 80102d2:	bf00      	nop
 80102d4:	58024400 	.word	0x58024400
 80102d8:	03d09000 	.word	0x03d09000
 80102dc:	46000000 	.word	0x46000000
 80102e0:	4c742400 	.word	0x4c742400
 80102e4:	4a742400 	.word	0x4a742400
 80102e8:	4bbebc20 	.word	0x4bbebc20

080102ec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80102ec:	b480      	push	{r7}
 80102ee:	b089      	sub	sp, #36	; 0x24
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80102f4:	4ba0      	ldr	r3, [pc, #640]	; (8010578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80102f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102f8:	f003 0303 	and.w	r3, r3, #3
 80102fc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80102fe:	4b9e      	ldr	r3, [pc, #632]	; (8010578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010302:	091b      	lsrs	r3, r3, #4
 8010304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010308:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801030a:	4b9b      	ldr	r3, [pc, #620]	; (8010578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801030c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801030e:	f003 0301 	and.w	r3, r3, #1
 8010312:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8010314:	4b98      	ldr	r3, [pc, #608]	; (8010578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010318:	08db      	lsrs	r3, r3, #3
 801031a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801031e:	693a      	ldr	r2, [r7, #16]
 8010320:	fb02 f303 	mul.w	r3, r2, r3
 8010324:	ee07 3a90 	vmov	s15, r3
 8010328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801032c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8010330:	697b      	ldr	r3, [r7, #20]
 8010332:	2b00      	cmp	r3, #0
 8010334:	f000 8111 	beq.w	801055a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8010338:	69bb      	ldr	r3, [r7, #24]
 801033a:	2b02      	cmp	r3, #2
 801033c:	f000 8083 	beq.w	8010446 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8010340:	69bb      	ldr	r3, [r7, #24]
 8010342:	2b02      	cmp	r3, #2
 8010344:	f200 80a1 	bhi.w	801048a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8010348:	69bb      	ldr	r3, [r7, #24]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d003      	beq.n	8010356 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801034e:	69bb      	ldr	r3, [r7, #24]
 8010350:	2b01      	cmp	r3, #1
 8010352:	d056      	beq.n	8010402 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8010354:	e099      	b.n	801048a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010356:	4b88      	ldr	r3, [pc, #544]	; (8010578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	f003 0320 	and.w	r3, r3, #32
 801035e:	2b00      	cmp	r3, #0
 8010360:	d02d      	beq.n	80103be <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010362:	4b85      	ldr	r3, [pc, #532]	; (8010578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	08db      	lsrs	r3, r3, #3
 8010368:	f003 0303 	and.w	r3, r3, #3
 801036c:	4a83      	ldr	r2, [pc, #524]	; (801057c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801036e:	fa22 f303 	lsr.w	r3, r2, r3
 8010372:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010374:	68bb      	ldr	r3, [r7, #8]
 8010376:	ee07 3a90 	vmov	s15, r3
 801037a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801037e:	697b      	ldr	r3, [r7, #20]
 8010380:	ee07 3a90 	vmov	s15, r3
 8010384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010388:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801038c:	4b7a      	ldr	r3, [pc, #488]	; (8010578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801038e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010394:	ee07 3a90 	vmov	s15, r3
 8010398:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801039c:	ed97 6a03 	vldr	s12, [r7, #12]
 80103a0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8010580 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80103a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80103a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80103ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80103b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80103b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80103b8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80103bc:	e087      	b.n	80104ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	ee07 3a90 	vmov	s15, r3
 80103c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103c8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8010584 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80103cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80103d0:	4b69      	ldr	r3, [pc, #420]	; (8010578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80103d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103d8:	ee07 3a90 	vmov	s15, r3
 80103dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80103e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80103e4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8010580 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80103e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80103ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80103f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80103f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80103f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80103fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010400:	e065      	b.n	80104ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010402:	697b      	ldr	r3, [r7, #20]
 8010404:	ee07 3a90 	vmov	s15, r3
 8010408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801040c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8010588 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8010410:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010414:	4b58      	ldr	r3, [pc, #352]	; (8010578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801041c:	ee07 3a90 	vmov	s15, r3
 8010420:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010424:	ed97 6a03 	vldr	s12, [r7, #12]
 8010428:	eddf 5a55 	vldr	s11, [pc, #340]	; 8010580 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801042c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010430:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010434:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010438:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801043c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010440:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010444:	e043      	b.n	80104ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010446:	697b      	ldr	r3, [r7, #20]
 8010448:	ee07 3a90 	vmov	s15, r3
 801044c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010450:	eddf 6a4e 	vldr	s13, [pc, #312]	; 801058c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8010454:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010458:	4b47      	ldr	r3, [pc, #284]	; (8010578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801045a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801045c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010460:	ee07 3a90 	vmov	s15, r3
 8010464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010468:	ed97 6a03 	vldr	s12, [r7, #12]
 801046c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8010580 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010470:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010474:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010478:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801047c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010484:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010488:	e021      	b.n	80104ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801048a:	697b      	ldr	r3, [r7, #20]
 801048c:	ee07 3a90 	vmov	s15, r3
 8010490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010494:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8010584 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010498:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801049c:	4b36      	ldr	r3, [pc, #216]	; (8010578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801049e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104a4:	ee07 3a90 	vmov	s15, r3
 80104a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80104ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80104b0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8010580 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80104b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80104b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80104bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80104c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80104c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80104c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80104cc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80104ce:	4b2a      	ldr	r3, [pc, #168]	; (8010578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80104d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104d2:	0a5b      	lsrs	r3, r3, #9
 80104d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80104d8:	ee07 3a90 	vmov	s15, r3
 80104dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80104e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80104e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80104e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80104ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80104f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80104f4:	ee17 2a90 	vmov	r2, s15
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80104fc:	4b1e      	ldr	r3, [pc, #120]	; (8010578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80104fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010500:	0c1b      	lsrs	r3, r3, #16
 8010502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010506:	ee07 3a90 	vmov	s15, r3
 801050a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801050e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010512:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010516:	edd7 6a07 	vldr	s13, [r7, #28]
 801051a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801051e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010522:	ee17 2a90 	vmov	r2, s15
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 801052a:	4b13      	ldr	r3, [pc, #76]	; (8010578 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801052e:	0e1b      	lsrs	r3, r3, #24
 8010530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010534:	ee07 3a90 	vmov	s15, r3
 8010538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801053c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010540:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010544:	edd7 6a07 	vldr	s13, [r7, #28]
 8010548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801054c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010550:	ee17 2a90 	vmov	r2, s15
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8010558:	e008      	b.n	801056c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	2200      	movs	r2, #0
 801055e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2200      	movs	r2, #0
 8010564:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	2200      	movs	r2, #0
 801056a:	609a      	str	r2, [r3, #8]
}
 801056c:	bf00      	nop
 801056e:	3724      	adds	r7, #36	; 0x24
 8010570:	46bd      	mov	sp, r7
 8010572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010576:	4770      	bx	lr
 8010578:	58024400 	.word	0x58024400
 801057c:	03d09000 	.word	0x03d09000
 8010580:	46000000 	.word	0x46000000
 8010584:	4c742400 	.word	0x4c742400
 8010588:	4a742400 	.word	0x4a742400
 801058c:	4bbebc20 	.word	0x4bbebc20

08010590 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b084      	sub	sp, #16
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801059a:	2300      	movs	r3, #0
 801059c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801059e:	4b53      	ldr	r3, [pc, #332]	; (80106ec <RCCEx_PLL2_Config+0x15c>)
 80105a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105a2:	f003 0303 	and.w	r3, r3, #3
 80105a6:	2b03      	cmp	r3, #3
 80105a8:	d101      	bne.n	80105ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80105aa:	2301      	movs	r3, #1
 80105ac:	e099      	b.n	80106e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80105ae:	4b4f      	ldr	r3, [pc, #316]	; (80106ec <RCCEx_PLL2_Config+0x15c>)
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	4a4e      	ldr	r2, [pc, #312]	; (80106ec <RCCEx_PLL2_Config+0x15c>)
 80105b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80105b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80105ba:	f7f7 fa8b 	bl	8007ad4 <HAL_GetTick>
 80105be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80105c0:	e008      	b.n	80105d4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80105c2:	f7f7 fa87 	bl	8007ad4 <HAL_GetTick>
 80105c6:	4602      	mov	r2, r0
 80105c8:	68bb      	ldr	r3, [r7, #8]
 80105ca:	1ad3      	subs	r3, r2, r3
 80105cc:	2b02      	cmp	r3, #2
 80105ce:	d901      	bls.n	80105d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80105d0:	2303      	movs	r3, #3
 80105d2:	e086      	b.n	80106e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80105d4:	4b45      	ldr	r3, [pc, #276]	; (80106ec <RCCEx_PLL2_Config+0x15c>)
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d1f0      	bne.n	80105c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80105e0:	4b42      	ldr	r3, [pc, #264]	; (80106ec <RCCEx_PLL2_Config+0x15c>)
 80105e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	031b      	lsls	r3, r3, #12
 80105ee:	493f      	ldr	r1, [pc, #252]	; (80106ec <RCCEx_PLL2_Config+0x15c>)
 80105f0:	4313      	orrs	r3, r2
 80105f2:	628b      	str	r3, [r1, #40]	; 0x28
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	685b      	ldr	r3, [r3, #4]
 80105f8:	3b01      	subs	r3, #1
 80105fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	689b      	ldr	r3, [r3, #8]
 8010602:	3b01      	subs	r3, #1
 8010604:	025b      	lsls	r3, r3, #9
 8010606:	b29b      	uxth	r3, r3
 8010608:	431a      	orrs	r2, r3
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	68db      	ldr	r3, [r3, #12]
 801060e:	3b01      	subs	r3, #1
 8010610:	041b      	lsls	r3, r3, #16
 8010612:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8010616:	431a      	orrs	r2, r3
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	691b      	ldr	r3, [r3, #16]
 801061c:	3b01      	subs	r3, #1
 801061e:	061b      	lsls	r3, r3, #24
 8010620:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010624:	4931      	ldr	r1, [pc, #196]	; (80106ec <RCCEx_PLL2_Config+0x15c>)
 8010626:	4313      	orrs	r3, r2
 8010628:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801062a:	4b30      	ldr	r3, [pc, #192]	; (80106ec <RCCEx_PLL2_Config+0x15c>)
 801062c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801062e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	695b      	ldr	r3, [r3, #20]
 8010636:	492d      	ldr	r1, [pc, #180]	; (80106ec <RCCEx_PLL2_Config+0x15c>)
 8010638:	4313      	orrs	r3, r2
 801063a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801063c:	4b2b      	ldr	r3, [pc, #172]	; (80106ec <RCCEx_PLL2_Config+0x15c>)
 801063e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010640:	f023 0220 	bic.w	r2, r3, #32
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	699b      	ldr	r3, [r3, #24]
 8010648:	4928      	ldr	r1, [pc, #160]	; (80106ec <RCCEx_PLL2_Config+0x15c>)
 801064a:	4313      	orrs	r3, r2
 801064c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801064e:	4b27      	ldr	r3, [pc, #156]	; (80106ec <RCCEx_PLL2_Config+0x15c>)
 8010650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010652:	4a26      	ldr	r2, [pc, #152]	; (80106ec <RCCEx_PLL2_Config+0x15c>)
 8010654:	f023 0310 	bic.w	r3, r3, #16
 8010658:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801065a:	4b24      	ldr	r3, [pc, #144]	; (80106ec <RCCEx_PLL2_Config+0x15c>)
 801065c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801065e:	4b24      	ldr	r3, [pc, #144]	; (80106f0 <RCCEx_PLL2_Config+0x160>)
 8010660:	4013      	ands	r3, r2
 8010662:	687a      	ldr	r2, [r7, #4]
 8010664:	69d2      	ldr	r2, [r2, #28]
 8010666:	00d2      	lsls	r2, r2, #3
 8010668:	4920      	ldr	r1, [pc, #128]	; (80106ec <RCCEx_PLL2_Config+0x15c>)
 801066a:	4313      	orrs	r3, r2
 801066c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801066e:	4b1f      	ldr	r3, [pc, #124]	; (80106ec <RCCEx_PLL2_Config+0x15c>)
 8010670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010672:	4a1e      	ldr	r2, [pc, #120]	; (80106ec <RCCEx_PLL2_Config+0x15c>)
 8010674:	f043 0310 	orr.w	r3, r3, #16
 8010678:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801067a:	683b      	ldr	r3, [r7, #0]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d106      	bne.n	801068e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8010680:	4b1a      	ldr	r3, [pc, #104]	; (80106ec <RCCEx_PLL2_Config+0x15c>)
 8010682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010684:	4a19      	ldr	r2, [pc, #100]	; (80106ec <RCCEx_PLL2_Config+0x15c>)
 8010686:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801068a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801068c:	e00f      	b.n	80106ae <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801068e:	683b      	ldr	r3, [r7, #0]
 8010690:	2b01      	cmp	r3, #1
 8010692:	d106      	bne.n	80106a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8010694:	4b15      	ldr	r3, [pc, #84]	; (80106ec <RCCEx_PLL2_Config+0x15c>)
 8010696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010698:	4a14      	ldr	r2, [pc, #80]	; (80106ec <RCCEx_PLL2_Config+0x15c>)
 801069a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801069e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80106a0:	e005      	b.n	80106ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80106a2:	4b12      	ldr	r3, [pc, #72]	; (80106ec <RCCEx_PLL2_Config+0x15c>)
 80106a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106a6:	4a11      	ldr	r2, [pc, #68]	; (80106ec <RCCEx_PLL2_Config+0x15c>)
 80106a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80106ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80106ae:	4b0f      	ldr	r3, [pc, #60]	; (80106ec <RCCEx_PLL2_Config+0x15c>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	4a0e      	ldr	r2, [pc, #56]	; (80106ec <RCCEx_PLL2_Config+0x15c>)
 80106b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80106b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80106ba:	f7f7 fa0b 	bl	8007ad4 <HAL_GetTick>
 80106be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80106c0:	e008      	b.n	80106d4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80106c2:	f7f7 fa07 	bl	8007ad4 <HAL_GetTick>
 80106c6:	4602      	mov	r2, r0
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	1ad3      	subs	r3, r2, r3
 80106cc:	2b02      	cmp	r3, #2
 80106ce:	d901      	bls.n	80106d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80106d0:	2303      	movs	r3, #3
 80106d2:	e006      	b.n	80106e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80106d4:	4b05      	ldr	r3, [pc, #20]	; (80106ec <RCCEx_PLL2_Config+0x15c>)
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d0f0      	beq.n	80106c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80106e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80106e2:	4618      	mov	r0, r3
 80106e4:	3710      	adds	r7, #16
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bd80      	pop	{r7, pc}
 80106ea:	bf00      	nop
 80106ec:	58024400 	.word	0x58024400
 80106f0:	ffff0007 	.word	0xffff0007

080106f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b084      	sub	sp, #16
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
 80106fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80106fe:	2300      	movs	r3, #0
 8010700:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010702:	4b53      	ldr	r3, [pc, #332]	; (8010850 <RCCEx_PLL3_Config+0x15c>)
 8010704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010706:	f003 0303 	and.w	r3, r3, #3
 801070a:	2b03      	cmp	r3, #3
 801070c:	d101      	bne.n	8010712 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801070e:	2301      	movs	r3, #1
 8010710:	e099      	b.n	8010846 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8010712:	4b4f      	ldr	r3, [pc, #316]	; (8010850 <RCCEx_PLL3_Config+0x15c>)
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	4a4e      	ldr	r2, [pc, #312]	; (8010850 <RCCEx_PLL3_Config+0x15c>)
 8010718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801071c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801071e:	f7f7 f9d9 	bl	8007ad4 <HAL_GetTick>
 8010722:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010724:	e008      	b.n	8010738 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010726:	f7f7 f9d5 	bl	8007ad4 <HAL_GetTick>
 801072a:	4602      	mov	r2, r0
 801072c:	68bb      	ldr	r3, [r7, #8]
 801072e:	1ad3      	subs	r3, r2, r3
 8010730:	2b02      	cmp	r3, #2
 8010732:	d901      	bls.n	8010738 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010734:	2303      	movs	r3, #3
 8010736:	e086      	b.n	8010846 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010738:	4b45      	ldr	r3, [pc, #276]	; (8010850 <RCCEx_PLL3_Config+0x15c>)
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010740:	2b00      	cmp	r3, #0
 8010742:	d1f0      	bne.n	8010726 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8010744:	4b42      	ldr	r3, [pc, #264]	; (8010850 <RCCEx_PLL3_Config+0x15c>)
 8010746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010748:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	051b      	lsls	r3, r3, #20
 8010752:	493f      	ldr	r1, [pc, #252]	; (8010850 <RCCEx_PLL3_Config+0x15c>)
 8010754:	4313      	orrs	r3, r2
 8010756:	628b      	str	r3, [r1, #40]	; 0x28
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	685b      	ldr	r3, [r3, #4]
 801075c:	3b01      	subs	r3, #1
 801075e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	689b      	ldr	r3, [r3, #8]
 8010766:	3b01      	subs	r3, #1
 8010768:	025b      	lsls	r3, r3, #9
 801076a:	b29b      	uxth	r3, r3
 801076c:	431a      	orrs	r2, r3
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	68db      	ldr	r3, [r3, #12]
 8010772:	3b01      	subs	r3, #1
 8010774:	041b      	lsls	r3, r3, #16
 8010776:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801077a:	431a      	orrs	r2, r3
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	691b      	ldr	r3, [r3, #16]
 8010780:	3b01      	subs	r3, #1
 8010782:	061b      	lsls	r3, r3, #24
 8010784:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010788:	4931      	ldr	r1, [pc, #196]	; (8010850 <RCCEx_PLL3_Config+0x15c>)
 801078a:	4313      	orrs	r3, r2
 801078c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801078e:	4b30      	ldr	r3, [pc, #192]	; (8010850 <RCCEx_PLL3_Config+0x15c>)
 8010790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010792:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	695b      	ldr	r3, [r3, #20]
 801079a:	492d      	ldr	r1, [pc, #180]	; (8010850 <RCCEx_PLL3_Config+0x15c>)
 801079c:	4313      	orrs	r3, r2
 801079e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80107a0:	4b2b      	ldr	r3, [pc, #172]	; (8010850 <RCCEx_PLL3_Config+0x15c>)
 80107a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107a4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	699b      	ldr	r3, [r3, #24]
 80107ac:	4928      	ldr	r1, [pc, #160]	; (8010850 <RCCEx_PLL3_Config+0x15c>)
 80107ae:	4313      	orrs	r3, r2
 80107b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80107b2:	4b27      	ldr	r3, [pc, #156]	; (8010850 <RCCEx_PLL3_Config+0x15c>)
 80107b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107b6:	4a26      	ldr	r2, [pc, #152]	; (8010850 <RCCEx_PLL3_Config+0x15c>)
 80107b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80107bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80107be:	4b24      	ldr	r3, [pc, #144]	; (8010850 <RCCEx_PLL3_Config+0x15c>)
 80107c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80107c2:	4b24      	ldr	r3, [pc, #144]	; (8010854 <RCCEx_PLL3_Config+0x160>)
 80107c4:	4013      	ands	r3, r2
 80107c6:	687a      	ldr	r2, [r7, #4]
 80107c8:	69d2      	ldr	r2, [r2, #28]
 80107ca:	00d2      	lsls	r2, r2, #3
 80107cc:	4920      	ldr	r1, [pc, #128]	; (8010850 <RCCEx_PLL3_Config+0x15c>)
 80107ce:	4313      	orrs	r3, r2
 80107d0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80107d2:	4b1f      	ldr	r3, [pc, #124]	; (8010850 <RCCEx_PLL3_Config+0x15c>)
 80107d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107d6:	4a1e      	ldr	r2, [pc, #120]	; (8010850 <RCCEx_PLL3_Config+0x15c>)
 80107d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80107dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80107de:	683b      	ldr	r3, [r7, #0]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d106      	bne.n	80107f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80107e4:	4b1a      	ldr	r3, [pc, #104]	; (8010850 <RCCEx_PLL3_Config+0x15c>)
 80107e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107e8:	4a19      	ldr	r2, [pc, #100]	; (8010850 <RCCEx_PLL3_Config+0x15c>)
 80107ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80107ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80107f0:	e00f      	b.n	8010812 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80107f2:	683b      	ldr	r3, [r7, #0]
 80107f4:	2b01      	cmp	r3, #1
 80107f6:	d106      	bne.n	8010806 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80107f8:	4b15      	ldr	r3, [pc, #84]	; (8010850 <RCCEx_PLL3_Config+0x15c>)
 80107fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107fc:	4a14      	ldr	r2, [pc, #80]	; (8010850 <RCCEx_PLL3_Config+0x15c>)
 80107fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8010802:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010804:	e005      	b.n	8010812 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8010806:	4b12      	ldr	r3, [pc, #72]	; (8010850 <RCCEx_PLL3_Config+0x15c>)
 8010808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801080a:	4a11      	ldr	r2, [pc, #68]	; (8010850 <RCCEx_PLL3_Config+0x15c>)
 801080c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010810:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8010812:	4b0f      	ldr	r3, [pc, #60]	; (8010850 <RCCEx_PLL3_Config+0x15c>)
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	4a0e      	ldr	r2, [pc, #56]	; (8010850 <RCCEx_PLL3_Config+0x15c>)
 8010818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801081c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801081e:	f7f7 f959 	bl	8007ad4 <HAL_GetTick>
 8010822:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010824:	e008      	b.n	8010838 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010826:	f7f7 f955 	bl	8007ad4 <HAL_GetTick>
 801082a:	4602      	mov	r2, r0
 801082c:	68bb      	ldr	r3, [r7, #8]
 801082e:	1ad3      	subs	r3, r2, r3
 8010830:	2b02      	cmp	r3, #2
 8010832:	d901      	bls.n	8010838 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010834:	2303      	movs	r3, #3
 8010836:	e006      	b.n	8010846 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010838:	4b05      	ldr	r3, [pc, #20]	; (8010850 <RCCEx_PLL3_Config+0x15c>)
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010840:	2b00      	cmp	r3, #0
 8010842:	d0f0      	beq.n	8010826 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8010844:	7bfb      	ldrb	r3, [r7, #15]
}
 8010846:	4618      	mov	r0, r3
 8010848:	3710      	adds	r7, #16
 801084a:	46bd      	mov	sp, r7
 801084c:	bd80      	pop	{r7, pc}
 801084e:	bf00      	nop
 8010850:	58024400 	.word	0x58024400
 8010854:	ffff0007 	.word	0xffff0007

08010858 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b08a      	sub	sp, #40	; 0x28
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d101      	bne.n	801086a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8010866:	2301      	movs	r3, #1
 8010868:	e28e      	b.n	8010d88 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 801086a:	f7f7 f963 	bl	8007b34 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010874:	2b01      	cmp	r3, #1
 8010876:	d113      	bne.n	80108a0 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	4a96      	ldr	r2, [pc, #600]	; (8010ad8 <HAL_SAI_Init+0x280>)
 801087e:	4293      	cmp	r3, r2
 8010880:	d004      	beq.n	801088c <HAL_SAI_Init+0x34>
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	4a95      	ldr	r2, [pc, #596]	; (8010adc <HAL_SAI_Init+0x284>)
 8010888:	4293      	cmp	r3, r2
 801088a:	d107      	bne.n	801089c <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8010890:	2b01      	cmp	r3, #1
 8010892:	d103      	bne.n	801089c <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8010898:	2b00      	cmp	r3, #0
 801089a:	d001      	beq.n	80108a0 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 801089c:	2301      	movs	r3, #1
 801089e:	e273      	b.n	8010d88 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	4a8c      	ldr	r2, [pc, #560]	; (8010ad8 <HAL_SAI_Init+0x280>)
 80108a6:	4293      	cmp	r3, r2
 80108a8:	d004      	beq.n	80108b4 <HAL_SAI_Init+0x5c>
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	4a8c      	ldr	r2, [pc, #560]	; (8010ae0 <HAL_SAI_Init+0x288>)
 80108b0:	4293      	cmp	r3, r2
 80108b2:	d102      	bne.n	80108ba <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 80108b4:	4b8b      	ldr	r3, [pc, #556]	; (8010ae4 <HAL_SAI_Init+0x28c>)
 80108b6:	61bb      	str	r3, [r7, #24]
 80108b8:	e028      	b.n	801090c <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	4a8a      	ldr	r2, [pc, #552]	; (8010ae8 <HAL_SAI_Init+0x290>)
 80108c0:	4293      	cmp	r3, r2
 80108c2:	d004      	beq.n	80108ce <HAL_SAI_Init+0x76>
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	4a88      	ldr	r2, [pc, #544]	; (8010aec <HAL_SAI_Init+0x294>)
 80108ca:	4293      	cmp	r3, r2
 80108cc:	d102      	bne.n	80108d4 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 80108ce:	4b88      	ldr	r3, [pc, #544]	; (8010af0 <HAL_SAI_Init+0x298>)
 80108d0:	61bb      	str	r3, [r7, #24]
 80108d2:	e01b      	b.n	801090c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	4a86      	ldr	r2, [pc, #536]	; (8010af4 <HAL_SAI_Init+0x29c>)
 80108da:	4293      	cmp	r3, r2
 80108dc:	d004      	beq.n	80108e8 <HAL_SAI_Init+0x90>
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	4a85      	ldr	r2, [pc, #532]	; (8010af8 <HAL_SAI_Init+0x2a0>)
 80108e4:	4293      	cmp	r3, r2
 80108e6:	d102      	bne.n	80108ee <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 80108e8:	4b84      	ldr	r3, [pc, #528]	; (8010afc <HAL_SAI_Init+0x2a4>)
 80108ea:	61bb      	str	r3, [r7, #24]
 80108ec:	e00e      	b.n	801090c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	4a7a      	ldr	r2, [pc, #488]	; (8010adc <HAL_SAI_Init+0x284>)
 80108f4:	4293      	cmp	r3, r2
 80108f6:	d004      	beq.n	8010902 <HAL_SAI_Init+0xaa>
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	4a80      	ldr	r2, [pc, #512]	; (8010b00 <HAL_SAI_Init+0x2a8>)
 80108fe:	4293      	cmp	r3, r2
 8010900:	d102      	bne.n	8010908 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8010902:	4b80      	ldr	r3, [pc, #512]	; (8010b04 <HAL_SAI_Init+0x2ac>)
 8010904:	61bb      	str	r3, [r7, #24]
 8010906:	e001      	b.n	801090c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8010908:	2301      	movs	r3, #1
 801090a:	e23d      	b.n	8010d88 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8010912:	b2db      	uxtb	r3, r3
 8010914:	2b00      	cmp	r3, #0
 8010916:	d106      	bne.n	8010926 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	2200      	movs	r2, #0
 801091c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	f000 faa9 	bl	8010e78 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8010926:	6878      	ldr	r0, [r7, #4]
 8010928:	f000 fd0e 	bl	8011348 <SAI_Disable>
 801092c:	4603      	mov	r3, r0
 801092e:	2b00      	cmp	r3, #0
 8010930:	d001      	beq.n	8010936 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8010932:	2301      	movs	r3, #1
 8010934:	e228      	b.n	8010d88 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	2202      	movs	r2, #2
 801093a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	68db      	ldr	r3, [r3, #12]
 8010942:	2b02      	cmp	r3, #2
 8010944:	d00c      	beq.n	8010960 <HAL_SAI_Init+0x108>
 8010946:	2b02      	cmp	r3, #2
 8010948:	d80d      	bhi.n	8010966 <HAL_SAI_Init+0x10e>
 801094a:	2b00      	cmp	r3, #0
 801094c:	d002      	beq.n	8010954 <HAL_SAI_Init+0xfc>
 801094e:	2b01      	cmp	r3, #1
 8010950:	d003      	beq.n	801095a <HAL_SAI_Init+0x102>
 8010952:	e008      	b.n	8010966 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8010954:	2300      	movs	r3, #0
 8010956:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8010958:	e008      	b.n	801096c <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 801095a:	2310      	movs	r3, #16
 801095c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801095e:	e005      	b.n	801096c <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8010960:	2320      	movs	r3, #32
 8010962:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8010964:	e002      	b.n	801096c <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8010966:	2300      	movs	r3, #0
 8010968:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801096a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	689b      	ldr	r3, [r3, #8]
 8010970:	2b05      	cmp	r3, #5
 8010972:	d832      	bhi.n	80109da <HAL_SAI_Init+0x182>
 8010974:	a201      	add	r2, pc, #4	; (adr r2, 801097c <HAL_SAI_Init+0x124>)
 8010976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801097a:	bf00      	nop
 801097c:	08010995 	.word	0x08010995
 8010980:	0801099b 	.word	0x0801099b
 8010984:	080109a3 	.word	0x080109a3
 8010988:	080109ab 	.word	0x080109ab
 801098c:	080109bb 	.word	0x080109bb
 8010990:	080109cb 	.word	0x080109cb
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8010994:	2300      	movs	r3, #0
 8010996:	61fb      	str	r3, [r7, #28]
      break;
 8010998:	e022      	b.n	80109e0 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 801099a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801099e:	61fb      	str	r3, [r7, #28]
      break;
 80109a0:	e01e      	b.n	80109e0 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80109a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80109a6:	61fb      	str	r3, [r7, #28]
      break;
 80109a8:	e01a      	b.n	80109e0 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80109aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80109ae:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80109b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109b2:	f043 0301 	orr.w	r3, r3, #1
 80109b6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80109b8:	e012      	b.n	80109e0 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80109ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80109be:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 80109c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109c2:	f043 0302 	orr.w	r3, r3, #2
 80109c6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80109c8:	e00a      	b.n	80109e0 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80109ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80109ce:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 80109d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109d2:	f043 0303 	orr.w	r3, r3, #3
 80109d6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80109d8:	e002      	b.n	80109e0 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 80109da:	2300      	movs	r3, #0
 80109dc:	61fb      	str	r3, [r7, #28]
      break;
 80109de:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 80109e0:	69bb      	ldr	r3, [r7, #24]
 80109e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109e4:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	6a1b      	ldr	r3, [r3, #32]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	f000 80c5 	beq.w	8010b7a <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 80109f0:	2300      	movs	r3, #0
 80109f2:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	4a37      	ldr	r2, [pc, #220]	; (8010ad8 <HAL_SAI_Init+0x280>)
 80109fa:	4293      	cmp	r3, r2
 80109fc:	d004      	beq.n	8010a08 <HAL_SAI_Init+0x1b0>
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	4a37      	ldr	r2, [pc, #220]	; (8010ae0 <HAL_SAI_Init+0x288>)
 8010a04:	4293      	cmp	r3, r2
 8010a06:	d106      	bne.n	8010a16 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8010a08:	f44f 7080 	mov.w	r0, #256	; 0x100
 8010a0c:	f04f 0100 	mov.w	r1, #0
 8010a10:	f7fe fc2e 	bl	800f270 <HAL_RCCEx_GetPeriphCLKFreq>
 8010a14:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	4a33      	ldr	r2, [pc, #204]	; (8010ae8 <HAL_SAI_Init+0x290>)
 8010a1c:	4293      	cmp	r3, r2
 8010a1e:	d004      	beq.n	8010a2a <HAL_SAI_Init+0x1d2>
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	4a31      	ldr	r2, [pc, #196]	; (8010aec <HAL_SAI_Init+0x294>)
 8010a26:	4293      	cmp	r3, r2
 8010a28:	d106      	bne.n	8010a38 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8010a2a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010a2e:	f04f 0100 	mov.w	r1, #0
 8010a32:	f7fe fc1d 	bl	800f270 <HAL_RCCEx_GetPeriphCLKFreq>
 8010a36:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	4a2d      	ldr	r2, [pc, #180]	; (8010af4 <HAL_SAI_Init+0x29c>)
 8010a3e:	4293      	cmp	r3, r2
 8010a40:	d004      	beq.n	8010a4c <HAL_SAI_Init+0x1f4>
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	4a2c      	ldr	r2, [pc, #176]	; (8010af8 <HAL_SAI_Init+0x2a0>)
 8010a48:	4293      	cmp	r3, r2
 8010a4a:	d106      	bne.n	8010a5a <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8010a4c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8010a50:	f04f 0100 	mov.w	r1, #0
 8010a54:	f7fe fc0c 	bl	800f270 <HAL_RCCEx_GetPeriphCLKFreq>
 8010a58:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	4a1f      	ldr	r2, [pc, #124]	; (8010adc <HAL_SAI_Init+0x284>)
 8010a60:	4293      	cmp	r3, r2
 8010a62:	d106      	bne.n	8010a72 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8010a64:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8010a68:	f04f 0100 	mov.w	r1, #0
 8010a6c:	f7fe fc00 	bl	800f270 <HAL_RCCEx_GetPeriphCLKFreq>
 8010a70:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	4a22      	ldr	r2, [pc, #136]	; (8010b00 <HAL_SAI_Init+0x2a8>)
 8010a78:	4293      	cmp	r3, r2
 8010a7a:	d106      	bne.n	8010a8a <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8010a7c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010a80:	f04f 0100 	mov.w	r1, #0
 8010a84:	f7fe fbf4 	bl	800f270 <HAL_RCCEx_GetPeriphCLKFreq>
 8010a88:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	699b      	ldr	r3, [r3, #24]
 8010a8e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8010a92:	d139      	bne.n	8010b08 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a98:	2b04      	cmp	r3, #4
 8010a9a:	d102      	bne.n	8010aa2 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8010a9c:	2340      	movs	r3, #64	; 0x40
 8010a9e:	60fb      	str	r3, [r7, #12]
 8010aa0:	e00a      	b.n	8010ab8 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010aa6:	2b08      	cmp	r3, #8
 8010aa8:	d103      	bne.n	8010ab2 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8010aaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010aae:	60fb      	str	r3, [r7, #12]
 8010ab0:	e002      	b.n	8010ab8 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ab6:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8010ab8:	697a      	ldr	r2, [r7, #20]
 8010aba:	4613      	mov	r3, r2
 8010abc:	009b      	lsls	r3, r3, #2
 8010abe:	4413      	add	r3, r2
 8010ac0:	005b      	lsls	r3, r3, #1
 8010ac2:	4619      	mov	r1, r3
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6a1b      	ldr	r3, [r3, #32]
 8010ac8:	68fa      	ldr	r2, [r7, #12]
 8010aca:	fb02 f303 	mul.w	r3, r2, r3
 8010ace:	fbb1 f3f3 	udiv	r3, r1, r3
 8010ad2:	613b      	str	r3, [r7, #16]
 8010ad4:	e030      	b.n	8010b38 <HAL_SAI_Init+0x2e0>
 8010ad6:	bf00      	nop
 8010ad8:	40015804 	.word	0x40015804
 8010adc:	58005404 	.word	0x58005404
 8010ae0:	40015824 	.word	0x40015824
 8010ae4:	40015800 	.word	0x40015800
 8010ae8:	40015c04 	.word	0x40015c04
 8010aec:	40015c24 	.word	0x40015c24
 8010af0:	40015c00 	.word	0x40015c00
 8010af4:	40016004 	.word	0x40016004
 8010af8:	40016024 	.word	0x40016024
 8010afc:	40016000 	.word	0x40016000
 8010b00:	58005424 	.word	0x58005424
 8010b04:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010b10:	d101      	bne.n	8010b16 <HAL_SAI_Init+0x2be>
 8010b12:	2302      	movs	r3, #2
 8010b14:	e000      	b.n	8010b18 <HAL_SAI_Init+0x2c0>
 8010b16:	2301      	movs	r3, #1
 8010b18:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8010b1a:	697a      	ldr	r2, [r7, #20]
 8010b1c:	4613      	mov	r3, r2
 8010b1e:	009b      	lsls	r3, r3, #2
 8010b20:	4413      	add	r3, r2
 8010b22:	005b      	lsls	r3, r3, #1
 8010b24:	4619      	mov	r1, r3
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	6a1b      	ldr	r3, [r3, #32]
 8010b2a:	68ba      	ldr	r2, [r7, #8]
 8010b2c:	fb02 f303 	mul.w	r3, r2, r3
 8010b30:	021b      	lsls	r3, r3, #8
 8010b32:	fbb1 f3f3 	udiv	r3, r1, r3
 8010b36:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8010b38:	693b      	ldr	r3, [r7, #16]
 8010b3a:	4a95      	ldr	r2, [pc, #596]	; (8010d90 <HAL_SAI_Init+0x538>)
 8010b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8010b40:	08da      	lsrs	r2, r3, #3
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8010b46:	6939      	ldr	r1, [r7, #16]
 8010b48:	4b91      	ldr	r3, [pc, #580]	; (8010d90 <HAL_SAI_Init+0x538>)
 8010b4a:	fba3 2301 	umull	r2, r3, r3, r1
 8010b4e:	08da      	lsrs	r2, r3, #3
 8010b50:	4613      	mov	r3, r2
 8010b52:	009b      	lsls	r3, r3, #2
 8010b54:	4413      	add	r3, r2
 8010b56:	005b      	lsls	r3, r3, #1
 8010b58:	1aca      	subs	r2, r1, r3
 8010b5a:	2a08      	cmp	r2, #8
 8010b5c:	d904      	bls.n	8010b68 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b62:	1c5a      	adds	r2, r3, #1
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b6c:	2b04      	cmp	r3, #4
 8010b6e:	d104      	bne.n	8010b7a <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b74:	085a      	lsrs	r2, r3, #1
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	685b      	ldr	r3, [r3, #4]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d003      	beq.n	8010b8a <HAL_SAI_Init+0x332>
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	685b      	ldr	r3, [r3, #4]
 8010b86:	2b02      	cmp	r3, #2
 8010b88:	d109      	bne.n	8010b9e <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b8e:	2b01      	cmp	r3, #1
 8010b90:	d101      	bne.n	8010b96 <HAL_SAI_Init+0x33e>
 8010b92:	2300      	movs	r3, #0
 8010b94:	e001      	b.n	8010b9a <HAL_SAI_Init+0x342>
 8010b96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010b9a:	623b      	str	r3, [r7, #32]
 8010b9c:	e008      	b.n	8010bb0 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ba2:	2b01      	cmp	r3, #1
 8010ba4:	d102      	bne.n	8010bac <HAL_SAI_Init+0x354>
 8010ba6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010baa:	e000      	b.n	8010bae <HAL_SAI_Init+0x356>
 8010bac:	2300      	movs	r3, #0
 8010bae:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8010bb0:	f7f6 ffc0 	bl	8007b34 <HAL_GetREVID>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010bba:	d331      	bcc.n	8010c20 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	6819      	ldr	r1, [r3, #0]
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	681a      	ldr	r2, [r3, #0]
 8010bc6:	4b73      	ldr	r3, [pc, #460]	; (8010d94 <HAL_SAI_Init+0x53c>)
 8010bc8:	400b      	ands	r3, r1
 8010bca:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	6819      	ldr	r1, [r3, #0]
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	685a      	ldr	r2, [r3, #4]
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010bda:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8010be0:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010be6:	431a      	orrs	r2, r3
 8010be8:	6a3b      	ldr	r3, [r7, #32]
 8010bea:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8010bec:	69fb      	ldr	r3, [r7, #28]
 8010bee:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8010bf4:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	695b      	ldr	r3, [r3, #20]
 8010bfa:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8010c00:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c06:	051b      	lsls	r3, r3, #20
 8010c08:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8010c0e:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	691b      	ldr	r3, [r3, #16]
 8010c14:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	430a      	orrs	r2, r1
 8010c1c:	601a      	str	r2, [r3, #0]
 8010c1e:	e02d      	b.n	8010c7c <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	6819      	ldr	r1, [r3, #0]
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	681a      	ldr	r2, [r3, #0]
 8010c2a:	4b5b      	ldr	r3, [pc, #364]	; (8010d98 <HAL_SAI_Init+0x540>)
 8010c2c:	400b      	ands	r3, r1
 8010c2e:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	6819      	ldr	r1, [r3, #0]
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	685a      	ldr	r2, [r3, #4]
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c3e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8010c44:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010c4a:	431a      	orrs	r2, r3
 8010c4c:	6a3b      	ldr	r3, [r7, #32]
 8010c4e:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8010c50:	69fb      	ldr	r3, [r7, #28]
 8010c52:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8010c58:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	695b      	ldr	r3, [r3, #20]
 8010c5e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8010c64:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c6a:	051b      	lsls	r3, r3, #20
 8010c6c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8010c72:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	430a      	orrs	r2, r1
 8010c7a:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	6859      	ldr	r1, [r3, #4]
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	681a      	ldr	r2, [r3, #0]
 8010c86:	4b45      	ldr	r3, [pc, #276]	; (8010d9c <HAL_SAI_Init+0x544>)
 8010c88:	400b      	ands	r3, r1
 8010c8a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	6859      	ldr	r1, [r3, #4]
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	69da      	ldr	r2, [r3, #28]
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c9a:	431a      	orrs	r2, r3
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ca0:	431a      	orrs	r2, r3
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	430a      	orrs	r2, r1
 8010ca8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	6899      	ldr	r1, [r3, #8]
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	681a      	ldr	r2, [r3, #0]
 8010cb4:	4b3a      	ldr	r3, [pc, #232]	; (8010da0 <HAL_SAI_Init+0x548>)
 8010cb6:	400b      	ands	r3, r1
 8010cb8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	6899      	ldr	r1, [r3, #8]
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cc4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8010cca:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8010cd0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8010cd6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010cdc:	3b01      	subs	r3, #1
 8010cde:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8010ce0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	430a      	orrs	r2, r1
 8010ce8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	68d9      	ldr	r1, [r3, #12]
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	681a      	ldr	r2, [r3, #0]
 8010cf4:	f24f 0320 	movw	r3, #61472	; 0xf020
 8010cf8:	400b      	ands	r3, r1
 8010cfa:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	68d9      	ldr	r1, [r3, #12]
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d0a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d10:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8010d12:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d18:	3b01      	subs	r3, #1
 8010d1a:	021b      	lsls	r3, r3, #8
 8010d1c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	430a      	orrs	r2, r1
 8010d24:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	4a1e      	ldr	r2, [pc, #120]	; (8010da4 <HAL_SAI_Init+0x54c>)
 8010d2c:	4293      	cmp	r3, r2
 8010d2e:	d004      	beq.n	8010d3a <HAL_SAI_Init+0x4e2>
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	4a1c      	ldr	r2, [pc, #112]	; (8010da8 <HAL_SAI_Init+0x550>)
 8010d36:	4293      	cmp	r3, r2
 8010d38:	d119      	bne.n	8010d6e <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8010d3a:	69bb      	ldr	r3, [r7, #24]
 8010d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d3e:	f023 0201 	bic.w	r2, r3, #1
 8010d42:	69bb      	ldr	r3, [r7, #24]
 8010d44:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010d4c:	2b01      	cmp	r3, #1
 8010d4e:	d10e      	bne.n	8010d6e <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d58:	3b01      	subs	r3, #1
 8010d5a:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8010d5c:	431a      	orrs	r2, r3
 8010d5e:	69bb      	ldr	r3, [r7, #24]
 8010d60:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8010d62:	69bb      	ldr	r3, [r7, #24]
 8010d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d66:	f043 0201 	orr.w	r2, r3, #1
 8010d6a:	69bb      	ldr	r3, [r7, #24]
 8010d6c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	2200      	movs	r2, #0
 8010d72:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	2201      	movs	r2, #1
 8010d7a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	2200      	movs	r2, #0
 8010d82:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8010d86:	2300      	movs	r3, #0
}
 8010d88:	4618      	mov	r0, r3
 8010d8a:	3728      	adds	r7, #40	; 0x28
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	bd80      	pop	{r7, pc}
 8010d90:	cccccccd 	.word	0xcccccccd
 8010d94:	f005c010 	.word	0xf005c010
 8010d98:	f805c010 	.word	0xf805c010
 8010d9c:	ffff1ff0 	.word	0xffff1ff0
 8010da0:	fff88000 	.word	0xfff88000
 8010da4:	40015804 	.word	0x40015804
 8010da8:	58005404 	.word	0x58005404

08010dac <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b084      	sub	sp, #16
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d101      	bne.n	8010dbe <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 8010dba:	2301      	movs	r3, #1
 8010dbc:	e050      	b.n	8010e60 <HAL_SAI_DeInit+0xb4>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	2202      	movs	r2, #2
 8010dc2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	2200      	movs	r2, #0
 8010dcc:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010dd6:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  if (SAI_Disable(hsai) != HAL_OK)
 8010dd8:	6878      	ldr	r0, [r7, #4]
 8010dda:	f000 fab5 	bl	8011348 <SAI_Disable>
 8010dde:	4603      	mov	r3, r0
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d009      	beq.n	8010df8 <HAL_SAI_DeInit+0x4c>
  {
    /* Reset SAI state to ready */
    hsai->State = HAL_SAI_STATE_READY;
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2201      	movs	r2, #1
 8010de8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Release Lock */
    __HAL_UNLOCK(hsai);
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	2200      	movs	r2, #0
 8010df0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_ERROR;
 8010df4:	2301      	movs	r3, #1
 8010df6:	e033      	b.n	8010e60 <HAL_SAI_DeInit+0xb4>
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	685a      	ldr	r2, [r3, #4]
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	f042 0208 	orr.w	r2, r2, #8
 8010e06:	605a      	str	r2, [r3, #4]

  /* Disable SAI PDM interface */
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	4a16      	ldr	r2, [pc, #88]	; (8010e68 <HAL_SAI_DeInit+0xbc>)
 8010e0e:	4293      	cmp	r3, r2
 8010e10:	d004      	beq.n	8010e1c <HAL_SAI_DeInit+0x70>
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	4a15      	ldr	r2, [pc, #84]	; (8010e6c <HAL_SAI_DeInit+0xc0>)
 8010e18:	4293      	cmp	r3, r2
 8010e1a:	d111      	bne.n	8010e40 <HAL_SAI_DeInit+0x94>
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Get the SAI base address according to the SAI handle */
#if defined(SAI4)
    SaiBaseAddress = (hsai->Instance == SAI1_Block_A) ? SAI1 : SAI4;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	4a11      	ldr	r2, [pc, #68]	; (8010e68 <HAL_SAI_DeInit+0xbc>)
 8010e22:	4293      	cmp	r3, r2
 8010e24:	d101      	bne.n	8010e2a <HAL_SAI_DeInit+0x7e>
 8010e26:	4b12      	ldr	r3, [pc, #72]	; (8010e70 <HAL_SAI_DeInit+0xc4>)
 8010e28:	e000      	b.n	8010e2c <HAL_SAI_DeInit+0x80>
 8010e2a:	4b12      	ldr	r3, [pc, #72]	; (8010e74 <HAL_SAI_DeInit+0xc8>)
 8010e2c:	60fb      	str	r3, [r7, #12]
#else
    SaiBaseAddress = SAI1;
#endif /* SAI4 */

    /* Reset PDM delays */
    SaiBaseAddress->PDMDLY = 0U;
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	2200      	movs	r2, #0
 8010e32:	649a      	str	r2, [r3, #72]	; 0x48

    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e38:	f023 0201 	bic.w	r2, r3, #1
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	645a      	str	r2, [r3, #68]	; 0x44
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 8010e40:	6878      	ldr	r0, [r7, #4]
 8010e42:	f000 f823 	bl	8010e8c <HAL_SAI_MspDeInit>
#endif

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	2200      	movs	r2, #0
 8010e4a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	2200      	movs	r2, #0
 8010e52:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	2200      	movs	r2, #0
 8010e5a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8010e5e:	2300      	movs	r3, #0
}
 8010e60:	4618      	mov	r0, r3
 8010e62:	3710      	adds	r7, #16
 8010e64:	46bd      	mov	sp, r7
 8010e66:	bd80      	pop	{r7, pc}
 8010e68:	40015804 	.word	0x40015804
 8010e6c:	58005404 	.word	0x58005404
 8010e70:	40015800 	.word	0x40015800
 8010e74:	58005400 	.word	0x58005400

08010e78 <HAL_SAI_MspInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 8010e78:	b480      	push	{r7}
 8010e7a:	b083      	sub	sp, #12
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspInit could be implemented in the user file
   */
}
 8010e80:	bf00      	nop
 8010e82:	370c      	adds	r7, #12
 8010e84:	46bd      	mov	sp, r7
 8010e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8a:	4770      	bx	lr

08010e8c <HAL_SAI_MspDeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_MspDeInit(SAI_HandleTypeDef *hsai)
{
 8010e8c:	b480      	push	{r7}
 8010e8e:	b083      	sub	sp, #12
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspDeInit could be implemented in the user file
   */
}
 8010e94:	bf00      	nop
 8010e96:	370c      	adds	r7, #12
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9e:	4770      	bx	lr

08010ea0 <HAL_SAI_DMAPause>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAPause(SAI_HandleTypeDef *hsai)
{
 8010ea0:	b480      	push	{r7}
 8010ea2:	b083      	sub	sp, #12
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsai);
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8010eae:	2b01      	cmp	r3, #1
 8010eb0:	d101      	bne.n	8010eb6 <HAL_SAI_DMAPause+0x16>
 8010eb2:	2302      	movs	r3, #2
 8010eb4:	e010      	b.n	8010ed8 <HAL_SAI_DMAPause+0x38>
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	2201      	movs	r2, #1
 8010eba:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  /* Pause the audio file playing by disabling the SAI DMA requests */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	681a      	ldr	r2, [r3, #0]
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8010ecc:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8010ed6:	2300      	movs	r3, #0
}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	370c      	adds	r7, #12
 8010edc:	46bd      	mov	sp, r7
 8010ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee2:	4770      	bx	lr

08010ee4 <HAL_SAI_DMAResume>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAResume(SAI_HandleTypeDef *hsai)
{
 8010ee4:	b480      	push	{r7}
 8010ee6:	b083      	sub	sp, #12
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsai);
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8010ef2:	2b01      	cmp	r3, #1
 8010ef4:	d101      	bne.n	8010efa <HAL_SAI_DMAResume+0x16>
 8010ef6:	2302      	movs	r3, #2
 8010ef8:	e01f      	b.n	8010f3a <HAL_SAI_DMAResume+0x56>
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	2201      	movs	r2, #1
 8010efe:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  /* Enable the SAI DMA requests */
  hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	681a      	ldr	r2, [r3, #0]
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8010f10:	601a      	str	r2, [r3, #0]

  /* If the SAI peripheral is still not enabled, enable it */
  if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d107      	bne.n	8010f30 <HAL_SAI_DMAResume+0x4c>
  {
    /* Enable SAI peripheral */
    __HAL_SAI_ENABLE(hsai);
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	681a      	ldr	r2, [r3, #0]
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8010f2e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	2200      	movs	r2, #0
 8010f34:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8010f38:	2300      	movs	r3, #0
}
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	370c      	adds	r7, #12
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f44:	4770      	bx	lr

08010f46 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 8010f46:	b580      	push	{r7, lr}
 8010f48:	b084      	sub	sp, #16
 8010f4a:	af00      	add	r7, sp, #0
 8010f4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010f4e:	2300      	movs	r3, #0
 8010f50:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8010f58:	2b01      	cmp	r3, #1
 8010f5a:	d101      	bne.n	8010f60 <HAL_SAI_DMAStop+0x1a>
 8010f5c:	2302      	movs	r3, #2
 8010f5e:	e06c      	b.n	801103a <HAL_SAI_DMAStop+0xf4>
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	2201      	movs	r2, #1
 8010f64:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	681a      	ldr	r2, [r3, #0]
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8010f76:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8010f7e:	b2db      	uxtb	r3, r3
 8010f80:	2b12      	cmp	r3, #18
 8010f82:	d11d      	bne.n	8010fc0 <HAL_SAI_DMAStop+0x7a>
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d018      	beq.n	8010fc0 <HAL_SAI_DMAStop+0x7a>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f94:	4618      	mov	r0, r3
 8010f96:	f7f7 ff23 	bl	8008de0 <HAL_DMA_Abort>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d00f      	beq.n	8010fc0 <HAL_SAI_DMAStop+0x7a>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010fa8:	2b80      	cmp	r3, #128	; 0x80
 8010faa:	d009      	beq.n	8010fc0 <HAL_SAI_DMAStop+0x7a>
      {
        status = HAL_ERROR;
 8010fac:	2301      	movs	r3, #1
 8010fae:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010fb6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8010fc6:	b2db      	uxtb	r3, r3
 8010fc8:	2b22      	cmp	r3, #34	; 0x22
 8010fca:	d11d      	bne.n	8011008 <HAL_SAI_DMAStop+0xc2>
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d018      	beq.n	8011008 <HAL_SAI_DMAStop+0xc2>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010fdc:	4618      	mov	r0, r3
 8010fde:	f7f7 feff 	bl	8008de0 <HAL_DMA_Abort>
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d00f      	beq.n	8011008 <HAL_SAI_DMAStop+0xc2>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ff0:	2b80      	cmp	r3, #128	; 0x80
 8010ff2:	d009      	beq.n	8011008 <HAL_SAI_DMAStop+0xc2>
      {
        status = HAL_ERROR;
 8010ff4:	2301      	movs	r3, #1
 8010ff6:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010ffe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      }
    }
  }

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8011008:	6878      	ldr	r0, [r7, #4]
 801100a:	f000 f99d 	bl	8011348 <SAI_Disable>
 801100e:	4603      	mov	r3, r0
 8011010:	2b00      	cmp	r3, #0
 8011012:	d001      	beq.n	8011018 <HAL_SAI_DMAStop+0xd2>
  {
    status = HAL_ERROR;
 8011014:	2301      	movs	r3, #1
 8011016:	73fb      	strb	r3, [r7, #15]
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	685a      	ldr	r2, [r3, #4]
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	f042 0208 	orr.w	r2, r2, #8
 8011026:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	2201      	movs	r2, #1
 801102c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	2200      	movs	r2, #0
 8011034:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return status;
 8011038:	7bfb      	ldrb	r3, [r7, #15]
}
 801103a:	4618      	mov	r0, r3
 801103c:	3710      	adds	r7, #16
 801103e:	46bd      	mov	sp, r7
 8011040:	bd80      	pop	{r7, pc}
	...

08011044 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8011044:	b580      	push	{r7, lr}
 8011046:	b086      	sub	sp, #24
 8011048:	af00      	add	r7, sp, #0
 801104a:	60f8      	str	r0, [r7, #12]
 801104c:	60b9      	str	r1, [r7, #8]
 801104e:	4613      	mov	r3, r2
 8011050:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8011052:	f7f6 fd3f 	bl	8007ad4 <HAL_GetTick>
 8011056:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d002      	beq.n	8011064 <HAL_SAI_Transmit_DMA+0x20>
 801105e:	88fb      	ldrh	r3, [r7, #6]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d101      	bne.n	8011068 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8011064:	2301      	movs	r3, #1
 8011066:	e098      	b.n	801119a <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 801106e:	b2db      	uxtb	r3, r3
 8011070:	2b01      	cmp	r3, #1
 8011072:	f040 8091 	bne.w	8011198 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 801107c:	2b01      	cmp	r3, #1
 801107e:	d101      	bne.n	8011084 <HAL_SAI_Transmit_DMA+0x40>
 8011080:	2302      	movs	r3, #2
 8011082:	e08a      	b.n	801119a <HAL_SAI_Transmit_DMA+0x156>
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	2201      	movs	r2, #1
 8011088:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	68ba      	ldr	r2, [r7, #8]
 8011090:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	88fa      	ldrh	r2, [r7, #6]
 8011096:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	88fa      	ldrh	r2, [r7, #6]
 801109e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	2200      	movs	r2, #0
 80110a6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	2212      	movs	r2, #18
 80110ae:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80110b8:	4a3a      	ldr	r2, [pc, #232]	; (80111a4 <HAL_SAI_Transmit_DMA+0x160>)
 80110ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80110c2:	4a39      	ldr	r2, [pc, #228]	; (80111a8 <HAL_SAI_Transmit_DMA+0x164>)
 80110c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80110cc:	4a37      	ldr	r2, [pc, #220]	; (80111ac <HAL_SAI_Transmit_DMA+0x168>)
 80110ce:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80110d6:	2200      	movs	r2, #0
 80110d8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80110e4:	4619      	mov	r1, r3
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	331c      	adds	r3, #28
 80110ec:	461a      	mov	r2, r3
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80110f4:	f7f7 fc0a 	bl	800890c <HAL_DMA_Start_IT>
 80110f8:	4603      	mov	r3, r0
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d005      	beq.n	801110a <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	2200      	movs	r2, #0
 8011102:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 8011106:	2301      	movs	r3, #1
 8011108:	e047      	b.n	801119a <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 801110a:	2100      	movs	r1, #0
 801110c:	68f8      	ldr	r0, [r7, #12]
 801110e:	f000 f8e3 	bl	80112d8 <SAI_InterruptFlag>
 8011112:	4601      	mov	r1, r0
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	691a      	ldr	r2, [r3, #16]
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	430a      	orrs	r2, r1
 8011120:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	681a      	ldr	r2, [r3, #0]
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8011130:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8011132:	e015      	b.n	8011160 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8011134:	f7f6 fcce 	bl	8007ad4 <HAL_GetTick>
 8011138:	4602      	mov	r2, r0
 801113a:	697b      	ldr	r3, [r7, #20]
 801113c:	1ad3      	subs	r3, r2, r3
 801113e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011142:	d90d      	bls.n	8011160 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801114a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	2200      	movs	r2, #0
 8011158:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 801115c:	2303      	movs	r3, #3
 801115e:	e01c      	b.n	801119a <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	695b      	ldr	r3, [r3, #20]
 8011166:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 801116a:	2b00      	cmp	r3, #0
 801116c:	d0e2      	beq.n	8011134 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011178:	2b00      	cmp	r3, #0
 801117a:	d107      	bne.n	801118c <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	681a      	ldr	r2, [r3, #0]
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801118a:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	2200      	movs	r2, #0
 8011190:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 8011194:	2300      	movs	r3, #0
 8011196:	e000      	b.n	801119a <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 8011198:	2302      	movs	r3, #2
  }
}
 801119a:	4618      	mov	r0, r3
 801119c:	3718      	adds	r7, #24
 801119e:	46bd      	mov	sp, r7
 80111a0:	bd80      	pop	{r7, pc}
 80111a2:	bf00      	nop
 80111a4:	0801141d 	.word	0x0801141d
 80111a8:	080113bd 	.word	0x080113bd
 80111ac:	080114b5 	.word	0x080114b5

080111b0 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b084      	sub	sp, #16
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	60f8      	str	r0, [r7, #12]
 80111b8:	60b9      	str	r1, [r7, #8]
 80111ba:	4613      	mov	r3, r2
 80111bc:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 80111be:	68bb      	ldr	r3, [r7, #8]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d002      	beq.n	80111ca <HAL_SAI_Receive_DMA+0x1a>
 80111c4:	88fb      	ldrh	r3, [r7, #6]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d101      	bne.n	80111ce <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80111ca:	2301      	movs	r3, #1
 80111cc:	e079      	b.n	80112c2 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80111d4:	b2db      	uxtb	r3, r3
 80111d6:	2b01      	cmp	r3, #1
 80111d8:	d172      	bne.n	80112c0 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80111e0:	2b01      	cmp	r3, #1
 80111e2:	d101      	bne.n	80111e8 <HAL_SAI_Receive_DMA+0x38>
 80111e4:	2302      	movs	r3, #2
 80111e6:	e06c      	b.n	80112c2 <HAL_SAI_Receive_DMA+0x112>
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	2201      	movs	r2, #1
 80111ec:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	68ba      	ldr	r2, [r7, #8]
 80111f4:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	88fa      	ldrh	r2, [r7, #6]
 80111fa:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	88fa      	ldrh	r2, [r7, #6]
 8011202:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	2200      	movs	r2, #0
 801120a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	2222      	movs	r2, #34	; 0x22
 8011212:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801121c:	4a2b      	ldr	r2, [pc, #172]	; (80112cc <HAL_SAI_Receive_DMA+0x11c>)
 801121e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011226:	4a2a      	ldr	r2, [pc, #168]	; (80112d0 <HAL_SAI_Receive_DMA+0x120>)
 8011228:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011230:	4a28      	ldr	r2, [pc, #160]	; (80112d4 <HAL_SAI_Receive_DMA+0x124>)
 8011232:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801123a:	2200      	movs	r2, #0
 801123c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	331c      	adds	r3, #28
 801124a:	4619      	mov	r1, r3
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011250:	461a      	mov	r2, r3
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8011258:	f7f7 fb58 	bl	800890c <HAL_DMA_Start_IT>
 801125c:	4603      	mov	r3, r0
 801125e:	2b00      	cmp	r3, #0
 8011260:	d005      	beq.n	801126e <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	2200      	movs	r2, #0
 8011266:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 801126a:	2301      	movs	r3, #1
 801126c:	e029      	b.n	80112c2 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 801126e:	2100      	movs	r1, #0
 8011270:	68f8      	ldr	r0, [r7, #12]
 8011272:	f000 f831 	bl	80112d8 <SAI_InterruptFlag>
 8011276:	4601      	mov	r1, r0
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	691a      	ldr	r2, [r3, #16]
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	430a      	orrs	r2, r1
 8011284:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	681a      	ldr	r2, [r3, #0]
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8011294:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d107      	bne.n	80112b4 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	681a      	ldr	r2, [r3, #0]
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80112b2:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	2200      	movs	r2, #0
 80112b8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 80112bc:	2300      	movs	r3, #0
 80112be:	e000      	b.n	80112c2 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 80112c0:	2302      	movs	r3, #2
  }
}
 80112c2:	4618      	mov	r0, r3
 80112c4:	3710      	adds	r7, #16
 80112c6:	46bd      	mov	sp, r7
 80112c8:	bd80      	pop	{r7, pc}
 80112ca:	bf00      	nop
 80112cc:	08011499 	.word	0x08011499
 80112d0:	08011439 	.word	0x08011439
 80112d4:	080114b5 	.word	0x080114b5

080112d8 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 80112d8:	b480      	push	{r7}
 80112da:	b085      	sub	sp, #20
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
 80112e0:	460b      	mov	r3, r1
 80112e2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80112e4:	2301      	movs	r3, #1
 80112e6:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80112e8:	78fb      	ldrb	r3, [r7, #3]
 80112ea:	2b01      	cmp	r3, #1
 80112ec:	d103      	bne.n	80112f6 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	f043 0308 	orr.w	r3, r3, #8
 80112f4:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112fa:	2b08      	cmp	r3, #8
 80112fc:	d10b      	bne.n	8011316 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8011302:	2b03      	cmp	r3, #3
 8011304:	d003      	beq.n	801130e <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	685b      	ldr	r3, [r3, #4]
 801130a:	2b01      	cmp	r3, #1
 801130c:	d103      	bne.n	8011316 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	f043 0310 	orr.w	r3, r3, #16
 8011314:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	685b      	ldr	r3, [r3, #4]
 801131a:	2b03      	cmp	r3, #3
 801131c:	d003      	beq.n	8011326 <SAI_InterruptFlag+0x4e>
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	685b      	ldr	r3, [r3, #4]
 8011322:	2b02      	cmp	r3, #2
 8011324:	d104      	bne.n	8011330 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 801132c:	60fb      	str	r3, [r7, #12]
 801132e:	e003      	b.n	8011338 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	f043 0304 	orr.w	r3, r3, #4
 8011336:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8011338:	68fb      	ldr	r3, [r7, #12]
}
 801133a:	4618      	mov	r0, r3
 801133c:	3714      	adds	r7, #20
 801133e:	46bd      	mov	sp, r7
 8011340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011344:	4770      	bx	lr
	...

08011348 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8011348:	b480      	push	{r7}
 801134a:	b085      	sub	sp, #20
 801134c:	af00      	add	r7, sp, #0
 801134e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8011350:	4b18      	ldr	r3, [pc, #96]	; (80113b4 <SAI_Disable+0x6c>)
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	4a18      	ldr	r2, [pc, #96]	; (80113b8 <SAI_Disable+0x70>)
 8011356:	fba2 2303 	umull	r2, r3, r2, r3
 801135a:	0b1b      	lsrs	r3, r3, #12
 801135c:	009b      	lsls	r3, r3, #2
 801135e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8011360:	2300      	movs	r3, #0
 8011362:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	681a      	ldr	r2, [r3, #0]
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8011372:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d10a      	bne.n	8011390 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011380:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 801138a:	2303      	movs	r3, #3
 801138c:	72fb      	strb	r3, [r7, #11]
      break;
 801138e:	e009      	b.n	80113a4 <SAI_Disable+0x5c>
    }
    count--;
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	3b01      	subs	r3, #1
 8011394:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d1e7      	bne.n	8011374 <SAI_Disable+0x2c>

  return status;
 80113a4:	7afb      	ldrb	r3, [r7, #11]
}
 80113a6:	4618      	mov	r0, r3
 80113a8:	3714      	adds	r7, #20
 80113aa:	46bd      	mov	sp, r7
 80113ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b0:	4770      	bx	lr
 80113b2:	bf00      	nop
 80113b4:	240004dc 	.word	0x240004dc
 80113b8:	95cbec1b 	.word	0x95cbec1b

080113bc <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80113bc:	b580      	push	{r7, lr}
 80113be:	b084      	sub	sp, #16
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113c8:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	69db      	ldr	r3, [r3, #28]
 80113ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80113d2:	d01c      	beq.n	801140e <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	2200      	movs	r2, #0
 80113d8:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	681a      	ldr	r2, [r3, #0]
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80113ea:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80113ec:	2100      	movs	r1, #0
 80113ee:	68f8      	ldr	r0, [r7, #12]
 80113f0:	f7ff ff72 	bl	80112d8 <SAI_InterruptFlag>
 80113f4:	4603      	mov	r3, r0
 80113f6:	43d9      	mvns	r1, r3
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	691a      	ldr	r2, [r3, #16]
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	400a      	ands	r2, r1
 8011404:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	2201      	movs	r2, #1
 801140a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 801140e:	68f8      	ldr	r0, [r7, #12]
 8011410:	f7f3 fca8 	bl	8004d64 <HAL_SAI_TxCpltCallback>
#endif
}
 8011414:	bf00      	nop
 8011416:	3710      	adds	r7, #16
 8011418:	46bd      	mov	sp, r7
 801141a:	bd80      	pop	{r7, pc}

0801141c <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b084      	sub	sp, #16
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011428:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 801142a:	68f8      	ldr	r0, [r7, #12]
 801142c:	f7f3 fca5 	bl	8004d7a <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8011430:	bf00      	nop
 8011432:	3710      	adds	r7, #16
 8011434:	46bd      	mov	sp, r7
 8011436:	bd80      	pop	{r7, pc}

08011438 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b084      	sub	sp, #16
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011444:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	69db      	ldr	r3, [r3, #28]
 801144a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801144e:	d01c      	beq.n	801148a <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	681a      	ldr	r2, [r3, #0]
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 801145e:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	2200      	movs	r2, #0
 8011464:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8011468:	2100      	movs	r1, #0
 801146a:	68f8      	ldr	r0, [r7, #12]
 801146c:	f7ff ff34 	bl	80112d8 <SAI_InterruptFlag>
 8011470:	4603      	mov	r3, r0
 8011472:	43d9      	mvns	r1, r3
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	691a      	ldr	r2, [r3, #16]
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	400a      	ands	r2, r1
 8011480:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	2201      	movs	r2, #1
 8011486:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 801148a:	68f8      	ldr	r0, [r7, #12]
 801148c:	f7f4 f93e 	bl	800570c <HAL_SAI_RxCpltCallback>
#endif
}
 8011490:	bf00      	nop
 8011492:	3710      	adds	r7, #16
 8011494:	46bd      	mov	sp, r7
 8011496:	bd80      	pop	{r7, pc}

08011498 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b084      	sub	sp, #16
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114a4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80114a6:	68f8      	ldr	r0, [r7, #12]
 80114a8:	f7f4 f91a 	bl	80056e0 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 80114ac:	bf00      	nop
 80114ae:	3710      	adds	r7, #16
 80114b0:	46bd      	mov	sp, r7
 80114b2:	bd80      	pop	{r7, pc}

080114b4 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b084      	sub	sp, #16
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114c0:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80114c2:	6878      	ldr	r0, [r7, #4]
 80114c4:	f7f8 fed4 	bl	800a270 <HAL_DMA_GetError>
 80114c8:	4603      	mov	r3, r0
 80114ca:	2b02      	cmp	r3, #2
 80114cc:	d01d      	beq.n	801150a <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80114d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	681a      	ldr	r2, [r3, #0]
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80114ec:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80114ee:	68f8      	ldr	r0, [r7, #12]
 80114f0:	f7ff ff2a 	bl	8011348 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	2201      	movs	r2, #1
 80114f8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	2200      	movs	r2, #0
 8011500:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8011504:	68f8      	ldr	r0, [r7, #12]
 8011506:	f7f3 fc43 	bl	8004d90 <HAL_SAI_ErrorCallback>
#endif
  }
}
 801150a:	bf00      	nop
 801150c:	3710      	adds	r7, #16
 801150e:	46bd      	mov	sp, r7
 8011510:	bd80      	pop	{r7, pc}
	...

08011514 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b082      	sub	sp, #8
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
 801151c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d101      	bne.n	8011528 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8011524:	2301      	movs	r3, #1
 8011526:	e02b      	b.n	8011580 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801152e:	b2db      	uxtb	r3, r3
 8011530:	2b00      	cmp	r3, #0
 8011532:	d106      	bne.n	8011542 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	2200      	movs	r2, #0
 8011538:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 801153c:	6878      	ldr	r0, [r7, #4]
 801153e:	f000 f825 	bl	801158c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	2202      	movs	r2, #2
 8011546:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	681a      	ldr	r2, [r3, #0]
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	3304      	adds	r3, #4
 8011552:	4619      	mov	r1, r3
 8011554:	4610      	mov	r0, r2
 8011556:	f001 fa4b 	bl	80129f0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	6818      	ldr	r0, [r3, #0]
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	685b      	ldr	r3, [r3, #4]
 8011562:	461a      	mov	r2, r3
 8011564:	6839      	ldr	r1, [r7, #0]
 8011566:	f001 fa9f 	bl	8012aa8 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 801156a:	4b07      	ldr	r3, [pc, #28]	; (8011588 <HAL_SDRAM_Init+0x74>)
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	4a06      	ldr	r2, [pc, #24]	; (8011588 <HAL_SDRAM_Init+0x74>)
 8011570:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011574:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	2201      	movs	r2, #1
 801157a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801157e:	2300      	movs	r3, #0
}
 8011580:	4618      	mov	r0, r3
 8011582:	3708      	adds	r7, #8
 8011584:	46bd      	mov	sp, r7
 8011586:	bd80      	pop	{r7, pc}
 8011588:	52004000 	.word	0x52004000

0801158c <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 801158c:	b480      	push	{r7}
 801158e:	b083      	sub	sp, #12
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8011594:	bf00      	nop
 8011596:	370c      	adds	r7, #12
 8011598:	46bd      	mov	sp, r7
 801159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159e:	4770      	bx	lr

080115a0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b086      	sub	sp, #24
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	60f8      	str	r0, [r7, #12]
 80115a8:	60b9      	str	r1, [r7, #8]
 80115aa:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80115b2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80115b4:	7dfb      	ldrb	r3, [r7, #23]
 80115b6:	2b02      	cmp	r3, #2
 80115b8:	d101      	bne.n	80115be <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80115ba:	2302      	movs	r3, #2
 80115bc:	e021      	b.n	8011602 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80115be:	7dfb      	ldrb	r3, [r7, #23]
 80115c0:	2b01      	cmp	r3, #1
 80115c2:	d002      	beq.n	80115ca <HAL_SDRAM_SendCommand+0x2a>
 80115c4:	7dfb      	ldrb	r3, [r7, #23]
 80115c6:	2b05      	cmp	r3, #5
 80115c8:	d118      	bne.n	80115fc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	2202      	movs	r2, #2
 80115ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	687a      	ldr	r2, [r7, #4]
 80115d8:	68b9      	ldr	r1, [r7, #8]
 80115da:	4618      	mov	r0, r3
 80115dc:	f001 face 	bl	8012b7c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80115e0:	68bb      	ldr	r3, [r7, #8]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	2b02      	cmp	r3, #2
 80115e6:	d104      	bne.n	80115f2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	2205      	movs	r2, #5
 80115ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80115f0:	e006      	b.n	8011600 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	2201      	movs	r2, #1
 80115f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80115fa:	e001      	b.n	8011600 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80115fc:	2301      	movs	r3, #1
 80115fe:	e000      	b.n	8011602 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8011600:	2300      	movs	r3, #0
}
 8011602:	4618      	mov	r0, r3
 8011604:	3718      	adds	r7, #24
 8011606:	46bd      	mov	sp, r7
 8011608:	bd80      	pop	{r7, pc}

0801160a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 801160a:	b580      	push	{r7, lr}
 801160c:	b082      	sub	sp, #8
 801160e:	af00      	add	r7, sp, #0
 8011610:	6078      	str	r0, [r7, #4]
 8011612:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801161a:	b2db      	uxtb	r3, r3
 801161c:	2b02      	cmp	r3, #2
 801161e:	d101      	bne.n	8011624 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8011620:	2302      	movs	r3, #2
 8011622:	e016      	b.n	8011652 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801162a:	b2db      	uxtb	r3, r3
 801162c:	2b01      	cmp	r3, #1
 801162e:	d10f      	bne.n	8011650 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	2202      	movs	r2, #2
 8011634:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	6839      	ldr	r1, [r7, #0]
 801163e:	4618      	mov	r0, r3
 8011640:	f001 fac0 	bl	8012bc4 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	2201      	movs	r2, #1
 8011648:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 801164c:	2300      	movs	r3, #0
 801164e:	e000      	b.n	8011652 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8011650:	2301      	movs	r3, #1
}
 8011652:	4618      	mov	r0, r3
 8011654:	3708      	adds	r7, #8
 8011656:	46bd      	mov	sp, r7
 8011658:	bd80      	pop	{r7, pc}

0801165a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801165a:	b580      	push	{r7, lr}
 801165c:	b082      	sub	sp, #8
 801165e:	af00      	add	r7, sp, #0
 8011660:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d101      	bne.n	801166c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011668:	2301      	movs	r3, #1
 801166a:	e049      	b.n	8011700 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011672:	b2db      	uxtb	r3, r3
 8011674:	2b00      	cmp	r3, #0
 8011676:	d106      	bne.n	8011686 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	2200      	movs	r2, #0
 801167c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011680:	6878      	ldr	r0, [r7, #4]
 8011682:	f000 f89d 	bl	80117c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	2202      	movs	r2, #2
 801168a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	681a      	ldr	r2, [r3, #0]
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	3304      	adds	r3, #4
 8011696:	4619      	mov	r1, r3
 8011698:	4610      	mov	r0, r2
 801169a:	f000 f8a5 	bl	80117e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	2201      	movs	r2, #1
 80116a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	2201      	movs	r2, #1
 80116aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	2201      	movs	r2, #1
 80116b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	2201      	movs	r2, #1
 80116ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	2201      	movs	r2, #1
 80116c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	2201      	movs	r2, #1
 80116ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	2201      	movs	r2, #1
 80116d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	2201      	movs	r2, #1
 80116da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	2201      	movs	r2, #1
 80116e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	2201      	movs	r2, #1
 80116ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	2201      	movs	r2, #1
 80116f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	2201      	movs	r2, #1
 80116fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80116fe:	2300      	movs	r3, #0
}
 8011700:	4618      	mov	r0, r3
 8011702:	3708      	adds	r7, #8
 8011704:	46bd      	mov	sp, r7
 8011706:	bd80      	pop	{r7, pc}

08011708 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b082      	sub	sp, #8
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	2202      	movs	r2, #2
 8011714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	6a1a      	ldr	r2, [r3, #32]
 801171e:	f241 1311 	movw	r3, #4369	; 0x1111
 8011722:	4013      	ands	r3, r2
 8011724:	2b00      	cmp	r3, #0
 8011726:	d10f      	bne.n	8011748 <HAL_TIM_PWM_DeInit+0x40>
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	6a1a      	ldr	r2, [r3, #32]
 801172e:	f240 4344 	movw	r3, #1092	; 0x444
 8011732:	4013      	ands	r3, r2
 8011734:	2b00      	cmp	r3, #0
 8011736:	d107      	bne.n	8011748 <HAL_TIM_PWM_DeInit+0x40>
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	681a      	ldr	r2, [r3, #0]
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	f022 0201 	bic.w	r2, r2, #1
 8011746:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 8011748:	6878      	ldr	r0, [r7, #4]
 801174a:	f000 f843 	bl	80117d4 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	2200      	movs	r2, #0
 8011752:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	2200      	movs	r2, #0
 801175a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	2200      	movs	r2, #0
 8011762:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	2200      	movs	r2, #0
 801176a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	2200      	movs	r2, #0
 8011772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	2200      	movs	r2, #0
 801177a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	2200      	movs	r2, #0
 8011782:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	2200      	movs	r2, #0
 801178a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	2200      	movs	r2, #0
 8011792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	2200      	movs	r2, #0
 801179a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	2200      	movs	r2, #0
 80117a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	2200      	movs	r2, #0
 80117aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	2200      	movs	r2, #0
 80117b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80117b6:	2300      	movs	r3, #0
}
 80117b8:	4618      	mov	r0, r3
 80117ba:	3708      	adds	r7, #8
 80117bc:	46bd      	mov	sp, r7
 80117be:	bd80      	pop	{r7, pc}

080117c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80117c0:	b480      	push	{r7}
 80117c2:	b083      	sub	sp, #12
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80117c8:	bf00      	nop
 80117ca:	370c      	adds	r7, #12
 80117cc:	46bd      	mov	sp, r7
 80117ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d2:	4770      	bx	lr

080117d4 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 80117d4:	b480      	push	{r7}
 80117d6:	b083      	sub	sp, #12
 80117d8:	af00      	add	r7, sp, #0
 80117da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 80117dc:	bf00      	nop
 80117de:	370c      	adds	r7, #12
 80117e0:	46bd      	mov	sp, r7
 80117e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e6:	4770      	bx	lr

080117e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80117e8:	b480      	push	{r7}
 80117ea:	b085      	sub	sp, #20
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
 80117f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	4a40      	ldr	r2, [pc, #256]	; (80118fc <TIM_Base_SetConfig+0x114>)
 80117fc:	4293      	cmp	r3, r2
 80117fe:	d013      	beq.n	8011828 <TIM_Base_SetConfig+0x40>
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011806:	d00f      	beq.n	8011828 <TIM_Base_SetConfig+0x40>
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	4a3d      	ldr	r2, [pc, #244]	; (8011900 <TIM_Base_SetConfig+0x118>)
 801180c:	4293      	cmp	r3, r2
 801180e:	d00b      	beq.n	8011828 <TIM_Base_SetConfig+0x40>
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	4a3c      	ldr	r2, [pc, #240]	; (8011904 <TIM_Base_SetConfig+0x11c>)
 8011814:	4293      	cmp	r3, r2
 8011816:	d007      	beq.n	8011828 <TIM_Base_SetConfig+0x40>
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	4a3b      	ldr	r2, [pc, #236]	; (8011908 <TIM_Base_SetConfig+0x120>)
 801181c:	4293      	cmp	r3, r2
 801181e:	d003      	beq.n	8011828 <TIM_Base_SetConfig+0x40>
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	4a3a      	ldr	r2, [pc, #232]	; (801190c <TIM_Base_SetConfig+0x124>)
 8011824:	4293      	cmp	r3, r2
 8011826:	d108      	bne.n	801183a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801182e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011830:	683b      	ldr	r3, [r7, #0]
 8011832:	685b      	ldr	r3, [r3, #4]
 8011834:	68fa      	ldr	r2, [r7, #12]
 8011836:	4313      	orrs	r3, r2
 8011838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	4a2f      	ldr	r2, [pc, #188]	; (80118fc <TIM_Base_SetConfig+0x114>)
 801183e:	4293      	cmp	r3, r2
 8011840:	d01f      	beq.n	8011882 <TIM_Base_SetConfig+0x9a>
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011848:	d01b      	beq.n	8011882 <TIM_Base_SetConfig+0x9a>
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	4a2c      	ldr	r2, [pc, #176]	; (8011900 <TIM_Base_SetConfig+0x118>)
 801184e:	4293      	cmp	r3, r2
 8011850:	d017      	beq.n	8011882 <TIM_Base_SetConfig+0x9a>
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	4a2b      	ldr	r2, [pc, #172]	; (8011904 <TIM_Base_SetConfig+0x11c>)
 8011856:	4293      	cmp	r3, r2
 8011858:	d013      	beq.n	8011882 <TIM_Base_SetConfig+0x9a>
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	4a2a      	ldr	r2, [pc, #168]	; (8011908 <TIM_Base_SetConfig+0x120>)
 801185e:	4293      	cmp	r3, r2
 8011860:	d00f      	beq.n	8011882 <TIM_Base_SetConfig+0x9a>
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	4a29      	ldr	r2, [pc, #164]	; (801190c <TIM_Base_SetConfig+0x124>)
 8011866:	4293      	cmp	r3, r2
 8011868:	d00b      	beq.n	8011882 <TIM_Base_SetConfig+0x9a>
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	4a28      	ldr	r2, [pc, #160]	; (8011910 <TIM_Base_SetConfig+0x128>)
 801186e:	4293      	cmp	r3, r2
 8011870:	d007      	beq.n	8011882 <TIM_Base_SetConfig+0x9a>
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	4a27      	ldr	r2, [pc, #156]	; (8011914 <TIM_Base_SetConfig+0x12c>)
 8011876:	4293      	cmp	r3, r2
 8011878:	d003      	beq.n	8011882 <TIM_Base_SetConfig+0x9a>
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	4a26      	ldr	r2, [pc, #152]	; (8011918 <TIM_Base_SetConfig+0x130>)
 801187e:	4293      	cmp	r3, r2
 8011880:	d108      	bne.n	8011894 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801188a:	683b      	ldr	r3, [r7, #0]
 801188c:	68db      	ldr	r3, [r3, #12]
 801188e:	68fa      	ldr	r2, [r7, #12]
 8011890:	4313      	orrs	r3, r2
 8011892:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801189a:	683b      	ldr	r3, [r7, #0]
 801189c:	695b      	ldr	r3, [r3, #20]
 801189e:	4313      	orrs	r3, r2
 80118a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	68fa      	ldr	r2, [r7, #12]
 80118a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80118a8:	683b      	ldr	r3, [r7, #0]
 80118aa:	689a      	ldr	r2, [r3, #8]
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80118b0:	683b      	ldr	r3, [r7, #0]
 80118b2:	681a      	ldr	r2, [r3, #0]
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	4a10      	ldr	r2, [pc, #64]	; (80118fc <TIM_Base_SetConfig+0x114>)
 80118bc:	4293      	cmp	r3, r2
 80118be:	d00f      	beq.n	80118e0 <TIM_Base_SetConfig+0xf8>
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	4a12      	ldr	r2, [pc, #72]	; (801190c <TIM_Base_SetConfig+0x124>)
 80118c4:	4293      	cmp	r3, r2
 80118c6:	d00b      	beq.n	80118e0 <TIM_Base_SetConfig+0xf8>
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	4a11      	ldr	r2, [pc, #68]	; (8011910 <TIM_Base_SetConfig+0x128>)
 80118cc:	4293      	cmp	r3, r2
 80118ce:	d007      	beq.n	80118e0 <TIM_Base_SetConfig+0xf8>
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	4a10      	ldr	r2, [pc, #64]	; (8011914 <TIM_Base_SetConfig+0x12c>)
 80118d4:	4293      	cmp	r3, r2
 80118d6:	d003      	beq.n	80118e0 <TIM_Base_SetConfig+0xf8>
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	4a0f      	ldr	r2, [pc, #60]	; (8011918 <TIM_Base_SetConfig+0x130>)
 80118dc:	4293      	cmp	r3, r2
 80118de:	d103      	bne.n	80118e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80118e0:	683b      	ldr	r3, [r7, #0]
 80118e2:	691a      	ldr	r2, [r3, #16]
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2201      	movs	r2, #1
 80118ec:	615a      	str	r2, [r3, #20]
}
 80118ee:	bf00      	nop
 80118f0:	3714      	adds	r7, #20
 80118f2:	46bd      	mov	sp, r7
 80118f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f8:	4770      	bx	lr
 80118fa:	bf00      	nop
 80118fc:	40010000 	.word	0x40010000
 8011900:	40000400 	.word	0x40000400
 8011904:	40000800 	.word	0x40000800
 8011908:	40000c00 	.word	0x40000c00
 801190c:	40010400 	.word	0x40010400
 8011910:	40014000 	.word	0x40014000
 8011914:	40014400 	.word	0x40014400
 8011918:	40014800 	.word	0x40014800

0801191c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b082      	sub	sp, #8
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d101      	bne.n	801192e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801192a:	2301      	movs	r3, #1
 801192c:	e042      	b.n	80119b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011934:	2b00      	cmp	r3, #0
 8011936:	d106      	bne.n	8011946 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2200      	movs	r2, #0
 801193c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011940:	6878      	ldr	r0, [r7, #4]
 8011942:	f000 f83b 	bl	80119bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	2224      	movs	r2, #36	; 0x24
 801194a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	681a      	ldr	r2, [r3, #0]
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	f022 0201 	bic.w	r2, r2, #1
 801195c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801195e:	6878      	ldr	r0, [r7, #4]
 8011960:	f000 f8c4 	bl	8011aec <UART_SetConfig>
 8011964:	4603      	mov	r3, r0
 8011966:	2b01      	cmp	r3, #1
 8011968:	d101      	bne.n	801196e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801196a:	2301      	movs	r3, #1
 801196c:	e022      	b.n	80119b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011972:	2b00      	cmp	r3, #0
 8011974:	d002      	beq.n	801197c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8011976:	6878      	ldr	r0, [r7, #4]
 8011978:	f000 fe20 	bl	80125bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	685a      	ldr	r2, [r3, #4]
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801198a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	689a      	ldr	r2, [r3, #8]
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801199a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	681a      	ldr	r2, [r3, #0]
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	f042 0201 	orr.w	r2, r2, #1
 80119aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80119ac:	6878      	ldr	r0, [r7, #4]
 80119ae:	f000 fea7 	bl	8012700 <UART_CheckIdleState>
 80119b2:	4603      	mov	r3, r0
}
 80119b4:	4618      	mov	r0, r3
 80119b6:	3708      	adds	r7, #8
 80119b8:	46bd      	mov	sp, r7
 80119ba:	bd80      	pop	{r7, pc}

080119bc <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80119bc:	b480      	push	{r7}
 80119be:	b083      	sub	sp, #12
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80119c4:	bf00      	nop
 80119c6:	370c      	adds	r7, #12
 80119c8:	46bd      	mov	sp, r7
 80119ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ce:	4770      	bx	lr

080119d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b08a      	sub	sp, #40	; 0x28
 80119d4:	af02      	add	r7, sp, #8
 80119d6:	60f8      	str	r0, [r7, #12]
 80119d8:	60b9      	str	r1, [r7, #8]
 80119da:	603b      	str	r3, [r7, #0]
 80119dc:	4613      	mov	r3, r2
 80119de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80119e6:	2b20      	cmp	r3, #32
 80119e8:	d17b      	bne.n	8011ae2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80119ea:	68bb      	ldr	r3, [r7, #8]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d002      	beq.n	80119f6 <HAL_UART_Transmit+0x26>
 80119f0:	88fb      	ldrh	r3, [r7, #6]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d101      	bne.n	80119fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80119f6:	2301      	movs	r3, #1
 80119f8:	e074      	b.n	8011ae4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	2200      	movs	r2, #0
 80119fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	2221      	movs	r2, #33	; 0x21
 8011a06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011a0a:	f7f6 f863 	bl	8007ad4 <HAL_GetTick>
 8011a0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	88fa      	ldrh	r2, [r7, #6]
 8011a14:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	88fa      	ldrh	r2, [r7, #6]
 8011a1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	689b      	ldr	r3, [r3, #8]
 8011a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011a28:	d108      	bne.n	8011a3c <HAL_UART_Transmit+0x6c>
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	691b      	ldr	r3, [r3, #16]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d104      	bne.n	8011a3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8011a32:	2300      	movs	r3, #0
 8011a34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8011a36:	68bb      	ldr	r3, [r7, #8]
 8011a38:	61bb      	str	r3, [r7, #24]
 8011a3a:	e003      	b.n	8011a44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8011a3c:	68bb      	ldr	r3, [r7, #8]
 8011a3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011a40:	2300      	movs	r3, #0
 8011a42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8011a44:	e030      	b.n	8011aa8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011a46:	683b      	ldr	r3, [r7, #0]
 8011a48:	9300      	str	r3, [sp, #0]
 8011a4a:	697b      	ldr	r3, [r7, #20]
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	2180      	movs	r1, #128	; 0x80
 8011a50:	68f8      	ldr	r0, [r7, #12]
 8011a52:	f000 feff 	bl	8012854 <UART_WaitOnFlagUntilTimeout>
 8011a56:	4603      	mov	r3, r0
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d005      	beq.n	8011a68 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	2220      	movs	r2, #32
 8011a60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8011a64:	2303      	movs	r3, #3
 8011a66:	e03d      	b.n	8011ae4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8011a68:	69fb      	ldr	r3, [r7, #28]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d10b      	bne.n	8011a86 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011a6e:	69bb      	ldr	r3, [r7, #24]
 8011a70:	881b      	ldrh	r3, [r3, #0]
 8011a72:	461a      	mov	r2, r3
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011a7c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8011a7e:	69bb      	ldr	r3, [r7, #24]
 8011a80:	3302      	adds	r3, #2
 8011a82:	61bb      	str	r3, [r7, #24]
 8011a84:	e007      	b.n	8011a96 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8011a86:	69fb      	ldr	r3, [r7, #28]
 8011a88:	781a      	ldrb	r2, [r3, #0]
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8011a90:	69fb      	ldr	r3, [r7, #28]
 8011a92:	3301      	adds	r3, #1
 8011a94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011a9c:	b29b      	uxth	r3, r3
 8011a9e:	3b01      	subs	r3, #1
 8011aa0:	b29a      	uxth	r2, r3
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011aae:	b29b      	uxth	r3, r3
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d1c8      	bne.n	8011a46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011ab4:	683b      	ldr	r3, [r7, #0]
 8011ab6:	9300      	str	r3, [sp, #0]
 8011ab8:	697b      	ldr	r3, [r7, #20]
 8011aba:	2200      	movs	r2, #0
 8011abc:	2140      	movs	r1, #64	; 0x40
 8011abe:	68f8      	ldr	r0, [r7, #12]
 8011ac0:	f000 fec8 	bl	8012854 <UART_WaitOnFlagUntilTimeout>
 8011ac4:	4603      	mov	r3, r0
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d005      	beq.n	8011ad6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	2220      	movs	r2, #32
 8011ace:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8011ad2:	2303      	movs	r3, #3
 8011ad4:	e006      	b.n	8011ae4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	2220      	movs	r2, #32
 8011ada:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8011ade:	2300      	movs	r3, #0
 8011ae0:	e000      	b.n	8011ae4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8011ae2:	2302      	movs	r3, #2
  }
}
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	3720      	adds	r7, #32
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	bd80      	pop	{r7, pc}

08011aec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011af0:	b092      	sub	sp, #72	; 0x48
 8011af2:	af00      	add	r7, sp, #0
 8011af4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011af6:	2300      	movs	r3, #0
 8011af8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011afc:	697b      	ldr	r3, [r7, #20]
 8011afe:	689a      	ldr	r2, [r3, #8]
 8011b00:	697b      	ldr	r3, [r7, #20]
 8011b02:	691b      	ldr	r3, [r3, #16]
 8011b04:	431a      	orrs	r2, r3
 8011b06:	697b      	ldr	r3, [r7, #20]
 8011b08:	695b      	ldr	r3, [r3, #20]
 8011b0a:	431a      	orrs	r2, r3
 8011b0c:	697b      	ldr	r3, [r7, #20]
 8011b0e:	69db      	ldr	r3, [r3, #28]
 8011b10:	4313      	orrs	r3, r2
 8011b12:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011b14:	697b      	ldr	r3, [r7, #20]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	681a      	ldr	r2, [r3, #0]
 8011b1a:	4bbe      	ldr	r3, [pc, #760]	; (8011e14 <UART_SetConfig+0x328>)
 8011b1c:	4013      	ands	r3, r2
 8011b1e:	697a      	ldr	r2, [r7, #20]
 8011b20:	6812      	ldr	r2, [r2, #0]
 8011b22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011b24:	430b      	orrs	r3, r1
 8011b26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011b28:	697b      	ldr	r3, [r7, #20]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	685b      	ldr	r3, [r3, #4]
 8011b2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011b32:	697b      	ldr	r3, [r7, #20]
 8011b34:	68da      	ldr	r2, [r3, #12]
 8011b36:	697b      	ldr	r3, [r7, #20]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	430a      	orrs	r2, r1
 8011b3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011b3e:	697b      	ldr	r3, [r7, #20]
 8011b40:	699b      	ldr	r3, [r3, #24]
 8011b42:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011b44:	697b      	ldr	r3, [r7, #20]
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	4ab3      	ldr	r2, [pc, #716]	; (8011e18 <UART_SetConfig+0x32c>)
 8011b4a:	4293      	cmp	r3, r2
 8011b4c:	d004      	beq.n	8011b58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011b4e:	697b      	ldr	r3, [r7, #20]
 8011b50:	6a1b      	ldr	r3, [r3, #32]
 8011b52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011b54:	4313      	orrs	r3, r2
 8011b56:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011b58:	697b      	ldr	r3, [r7, #20]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	689a      	ldr	r2, [r3, #8]
 8011b5e:	4baf      	ldr	r3, [pc, #700]	; (8011e1c <UART_SetConfig+0x330>)
 8011b60:	4013      	ands	r3, r2
 8011b62:	697a      	ldr	r2, [r7, #20]
 8011b64:	6812      	ldr	r2, [r2, #0]
 8011b66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011b68:	430b      	orrs	r3, r1
 8011b6a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011b6c:	697b      	ldr	r3, [r7, #20]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b72:	f023 010f 	bic.w	r1, r3, #15
 8011b76:	697b      	ldr	r3, [r7, #20]
 8011b78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011b7a:	697b      	ldr	r3, [r7, #20]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	430a      	orrs	r2, r1
 8011b80:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011b82:	697b      	ldr	r3, [r7, #20]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	4aa6      	ldr	r2, [pc, #664]	; (8011e20 <UART_SetConfig+0x334>)
 8011b88:	4293      	cmp	r3, r2
 8011b8a:	d177      	bne.n	8011c7c <UART_SetConfig+0x190>
 8011b8c:	4ba5      	ldr	r3, [pc, #660]	; (8011e24 <UART_SetConfig+0x338>)
 8011b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011b94:	2b28      	cmp	r3, #40	; 0x28
 8011b96:	d86d      	bhi.n	8011c74 <UART_SetConfig+0x188>
 8011b98:	a201      	add	r2, pc, #4	; (adr r2, 8011ba0 <UART_SetConfig+0xb4>)
 8011b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b9e:	bf00      	nop
 8011ba0:	08011c45 	.word	0x08011c45
 8011ba4:	08011c75 	.word	0x08011c75
 8011ba8:	08011c75 	.word	0x08011c75
 8011bac:	08011c75 	.word	0x08011c75
 8011bb0:	08011c75 	.word	0x08011c75
 8011bb4:	08011c75 	.word	0x08011c75
 8011bb8:	08011c75 	.word	0x08011c75
 8011bbc:	08011c75 	.word	0x08011c75
 8011bc0:	08011c4d 	.word	0x08011c4d
 8011bc4:	08011c75 	.word	0x08011c75
 8011bc8:	08011c75 	.word	0x08011c75
 8011bcc:	08011c75 	.word	0x08011c75
 8011bd0:	08011c75 	.word	0x08011c75
 8011bd4:	08011c75 	.word	0x08011c75
 8011bd8:	08011c75 	.word	0x08011c75
 8011bdc:	08011c75 	.word	0x08011c75
 8011be0:	08011c55 	.word	0x08011c55
 8011be4:	08011c75 	.word	0x08011c75
 8011be8:	08011c75 	.word	0x08011c75
 8011bec:	08011c75 	.word	0x08011c75
 8011bf0:	08011c75 	.word	0x08011c75
 8011bf4:	08011c75 	.word	0x08011c75
 8011bf8:	08011c75 	.word	0x08011c75
 8011bfc:	08011c75 	.word	0x08011c75
 8011c00:	08011c5d 	.word	0x08011c5d
 8011c04:	08011c75 	.word	0x08011c75
 8011c08:	08011c75 	.word	0x08011c75
 8011c0c:	08011c75 	.word	0x08011c75
 8011c10:	08011c75 	.word	0x08011c75
 8011c14:	08011c75 	.word	0x08011c75
 8011c18:	08011c75 	.word	0x08011c75
 8011c1c:	08011c75 	.word	0x08011c75
 8011c20:	08011c65 	.word	0x08011c65
 8011c24:	08011c75 	.word	0x08011c75
 8011c28:	08011c75 	.word	0x08011c75
 8011c2c:	08011c75 	.word	0x08011c75
 8011c30:	08011c75 	.word	0x08011c75
 8011c34:	08011c75 	.word	0x08011c75
 8011c38:	08011c75 	.word	0x08011c75
 8011c3c:	08011c75 	.word	0x08011c75
 8011c40:	08011c6d 	.word	0x08011c6d
 8011c44:	2301      	movs	r3, #1
 8011c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c4a:	e222      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011c4c:	2304      	movs	r3, #4
 8011c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c52:	e21e      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011c54:	2308      	movs	r3, #8
 8011c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c5a:	e21a      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011c5c:	2310      	movs	r3, #16
 8011c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c62:	e216      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011c64:	2320      	movs	r3, #32
 8011c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c6a:	e212      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011c6c:	2340      	movs	r3, #64	; 0x40
 8011c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c72:	e20e      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011c74:	2380      	movs	r3, #128	; 0x80
 8011c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c7a:	e20a      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011c7c:	697b      	ldr	r3, [r7, #20]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	4a69      	ldr	r2, [pc, #420]	; (8011e28 <UART_SetConfig+0x33c>)
 8011c82:	4293      	cmp	r3, r2
 8011c84:	d130      	bne.n	8011ce8 <UART_SetConfig+0x1fc>
 8011c86:	4b67      	ldr	r3, [pc, #412]	; (8011e24 <UART_SetConfig+0x338>)
 8011c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c8a:	f003 0307 	and.w	r3, r3, #7
 8011c8e:	2b05      	cmp	r3, #5
 8011c90:	d826      	bhi.n	8011ce0 <UART_SetConfig+0x1f4>
 8011c92:	a201      	add	r2, pc, #4	; (adr r2, 8011c98 <UART_SetConfig+0x1ac>)
 8011c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c98:	08011cb1 	.word	0x08011cb1
 8011c9c:	08011cb9 	.word	0x08011cb9
 8011ca0:	08011cc1 	.word	0x08011cc1
 8011ca4:	08011cc9 	.word	0x08011cc9
 8011ca8:	08011cd1 	.word	0x08011cd1
 8011cac:	08011cd9 	.word	0x08011cd9
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cb6:	e1ec      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011cb8:	2304      	movs	r3, #4
 8011cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cbe:	e1e8      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011cc0:	2308      	movs	r3, #8
 8011cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cc6:	e1e4      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011cc8:	2310      	movs	r3, #16
 8011cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cce:	e1e0      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011cd0:	2320      	movs	r3, #32
 8011cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cd6:	e1dc      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011cd8:	2340      	movs	r3, #64	; 0x40
 8011cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cde:	e1d8      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011ce0:	2380      	movs	r3, #128	; 0x80
 8011ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ce6:	e1d4      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011ce8:	697b      	ldr	r3, [r7, #20]
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	4a4f      	ldr	r2, [pc, #316]	; (8011e2c <UART_SetConfig+0x340>)
 8011cee:	4293      	cmp	r3, r2
 8011cf0:	d130      	bne.n	8011d54 <UART_SetConfig+0x268>
 8011cf2:	4b4c      	ldr	r3, [pc, #304]	; (8011e24 <UART_SetConfig+0x338>)
 8011cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011cf6:	f003 0307 	and.w	r3, r3, #7
 8011cfa:	2b05      	cmp	r3, #5
 8011cfc:	d826      	bhi.n	8011d4c <UART_SetConfig+0x260>
 8011cfe:	a201      	add	r2, pc, #4	; (adr r2, 8011d04 <UART_SetConfig+0x218>)
 8011d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d04:	08011d1d 	.word	0x08011d1d
 8011d08:	08011d25 	.word	0x08011d25
 8011d0c:	08011d2d 	.word	0x08011d2d
 8011d10:	08011d35 	.word	0x08011d35
 8011d14:	08011d3d 	.word	0x08011d3d
 8011d18:	08011d45 	.word	0x08011d45
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d22:	e1b6      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011d24:	2304      	movs	r3, #4
 8011d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d2a:	e1b2      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011d2c:	2308      	movs	r3, #8
 8011d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d32:	e1ae      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011d34:	2310      	movs	r3, #16
 8011d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d3a:	e1aa      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011d3c:	2320      	movs	r3, #32
 8011d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d42:	e1a6      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011d44:	2340      	movs	r3, #64	; 0x40
 8011d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d4a:	e1a2      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011d4c:	2380      	movs	r3, #128	; 0x80
 8011d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d52:	e19e      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011d54:	697b      	ldr	r3, [r7, #20]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	4a35      	ldr	r2, [pc, #212]	; (8011e30 <UART_SetConfig+0x344>)
 8011d5a:	4293      	cmp	r3, r2
 8011d5c:	d130      	bne.n	8011dc0 <UART_SetConfig+0x2d4>
 8011d5e:	4b31      	ldr	r3, [pc, #196]	; (8011e24 <UART_SetConfig+0x338>)
 8011d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d62:	f003 0307 	and.w	r3, r3, #7
 8011d66:	2b05      	cmp	r3, #5
 8011d68:	d826      	bhi.n	8011db8 <UART_SetConfig+0x2cc>
 8011d6a:	a201      	add	r2, pc, #4	; (adr r2, 8011d70 <UART_SetConfig+0x284>)
 8011d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d70:	08011d89 	.word	0x08011d89
 8011d74:	08011d91 	.word	0x08011d91
 8011d78:	08011d99 	.word	0x08011d99
 8011d7c:	08011da1 	.word	0x08011da1
 8011d80:	08011da9 	.word	0x08011da9
 8011d84:	08011db1 	.word	0x08011db1
 8011d88:	2300      	movs	r3, #0
 8011d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d8e:	e180      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011d90:	2304      	movs	r3, #4
 8011d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d96:	e17c      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011d98:	2308      	movs	r3, #8
 8011d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d9e:	e178      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011da0:	2310      	movs	r3, #16
 8011da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011da6:	e174      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011da8:	2320      	movs	r3, #32
 8011daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dae:	e170      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011db0:	2340      	movs	r3, #64	; 0x40
 8011db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011db6:	e16c      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011db8:	2380      	movs	r3, #128	; 0x80
 8011dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dbe:	e168      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011dc0:	697b      	ldr	r3, [r7, #20]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	4a1b      	ldr	r2, [pc, #108]	; (8011e34 <UART_SetConfig+0x348>)
 8011dc6:	4293      	cmp	r3, r2
 8011dc8:	d142      	bne.n	8011e50 <UART_SetConfig+0x364>
 8011dca:	4b16      	ldr	r3, [pc, #88]	; (8011e24 <UART_SetConfig+0x338>)
 8011dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011dce:	f003 0307 	and.w	r3, r3, #7
 8011dd2:	2b05      	cmp	r3, #5
 8011dd4:	d838      	bhi.n	8011e48 <UART_SetConfig+0x35c>
 8011dd6:	a201      	add	r2, pc, #4	; (adr r2, 8011ddc <UART_SetConfig+0x2f0>)
 8011dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ddc:	08011df5 	.word	0x08011df5
 8011de0:	08011dfd 	.word	0x08011dfd
 8011de4:	08011e05 	.word	0x08011e05
 8011de8:	08011e0d 	.word	0x08011e0d
 8011dec:	08011e39 	.word	0x08011e39
 8011df0:	08011e41 	.word	0x08011e41
 8011df4:	2300      	movs	r3, #0
 8011df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011dfa:	e14a      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011dfc:	2304      	movs	r3, #4
 8011dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e02:	e146      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011e04:	2308      	movs	r3, #8
 8011e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e0a:	e142      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011e0c:	2310      	movs	r3, #16
 8011e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e12:	e13e      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011e14:	cfff69f3 	.word	0xcfff69f3
 8011e18:	58000c00 	.word	0x58000c00
 8011e1c:	11fff4ff 	.word	0x11fff4ff
 8011e20:	40011000 	.word	0x40011000
 8011e24:	58024400 	.word	0x58024400
 8011e28:	40004400 	.word	0x40004400
 8011e2c:	40004800 	.word	0x40004800
 8011e30:	40004c00 	.word	0x40004c00
 8011e34:	40005000 	.word	0x40005000
 8011e38:	2320      	movs	r3, #32
 8011e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e3e:	e128      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011e40:	2340      	movs	r3, #64	; 0x40
 8011e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e46:	e124      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011e48:	2380      	movs	r3, #128	; 0x80
 8011e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e4e:	e120      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011e50:	697b      	ldr	r3, [r7, #20]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	4acb      	ldr	r2, [pc, #812]	; (8012184 <UART_SetConfig+0x698>)
 8011e56:	4293      	cmp	r3, r2
 8011e58:	d176      	bne.n	8011f48 <UART_SetConfig+0x45c>
 8011e5a:	4bcb      	ldr	r3, [pc, #812]	; (8012188 <UART_SetConfig+0x69c>)
 8011e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011e5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011e62:	2b28      	cmp	r3, #40	; 0x28
 8011e64:	d86c      	bhi.n	8011f40 <UART_SetConfig+0x454>
 8011e66:	a201      	add	r2, pc, #4	; (adr r2, 8011e6c <UART_SetConfig+0x380>)
 8011e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e6c:	08011f11 	.word	0x08011f11
 8011e70:	08011f41 	.word	0x08011f41
 8011e74:	08011f41 	.word	0x08011f41
 8011e78:	08011f41 	.word	0x08011f41
 8011e7c:	08011f41 	.word	0x08011f41
 8011e80:	08011f41 	.word	0x08011f41
 8011e84:	08011f41 	.word	0x08011f41
 8011e88:	08011f41 	.word	0x08011f41
 8011e8c:	08011f19 	.word	0x08011f19
 8011e90:	08011f41 	.word	0x08011f41
 8011e94:	08011f41 	.word	0x08011f41
 8011e98:	08011f41 	.word	0x08011f41
 8011e9c:	08011f41 	.word	0x08011f41
 8011ea0:	08011f41 	.word	0x08011f41
 8011ea4:	08011f41 	.word	0x08011f41
 8011ea8:	08011f41 	.word	0x08011f41
 8011eac:	08011f21 	.word	0x08011f21
 8011eb0:	08011f41 	.word	0x08011f41
 8011eb4:	08011f41 	.word	0x08011f41
 8011eb8:	08011f41 	.word	0x08011f41
 8011ebc:	08011f41 	.word	0x08011f41
 8011ec0:	08011f41 	.word	0x08011f41
 8011ec4:	08011f41 	.word	0x08011f41
 8011ec8:	08011f41 	.word	0x08011f41
 8011ecc:	08011f29 	.word	0x08011f29
 8011ed0:	08011f41 	.word	0x08011f41
 8011ed4:	08011f41 	.word	0x08011f41
 8011ed8:	08011f41 	.word	0x08011f41
 8011edc:	08011f41 	.word	0x08011f41
 8011ee0:	08011f41 	.word	0x08011f41
 8011ee4:	08011f41 	.word	0x08011f41
 8011ee8:	08011f41 	.word	0x08011f41
 8011eec:	08011f31 	.word	0x08011f31
 8011ef0:	08011f41 	.word	0x08011f41
 8011ef4:	08011f41 	.word	0x08011f41
 8011ef8:	08011f41 	.word	0x08011f41
 8011efc:	08011f41 	.word	0x08011f41
 8011f00:	08011f41 	.word	0x08011f41
 8011f04:	08011f41 	.word	0x08011f41
 8011f08:	08011f41 	.word	0x08011f41
 8011f0c:	08011f39 	.word	0x08011f39
 8011f10:	2301      	movs	r3, #1
 8011f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f16:	e0bc      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011f18:	2304      	movs	r3, #4
 8011f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f1e:	e0b8      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011f20:	2308      	movs	r3, #8
 8011f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f26:	e0b4      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011f28:	2310      	movs	r3, #16
 8011f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f2e:	e0b0      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011f30:	2320      	movs	r3, #32
 8011f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f36:	e0ac      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011f38:	2340      	movs	r3, #64	; 0x40
 8011f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f3e:	e0a8      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011f40:	2380      	movs	r3, #128	; 0x80
 8011f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f46:	e0a4      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011f48:	697b      	ldr	r3, [r7, #20]
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	4a8f      	ldr	r2, [pc, #572]	; (801218c <UART_SetConfig+0x6a0>)
 8011f4e:	4293      	cmp	r3, r2
 8011f50:	d130      	bne.n	8011fb4 <UART_SetConfig+0x4c8>
 8011f52:	4b8d      	ldr	r3, [pc, #564]	; (8012188 <UART_SetConfig+0x69c>)
 8011f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011f56:	f003 0307 	and.w	r3, r3, #7
 8011f5a:	2b05      	cmp	r3, #5
 8011f5c:	d826      	bhi.n	8011fac <UART_SetConfig+0x4c0>
 8011f5e:	a201      	add	r2, pc, #4	; (adr r2, 8011f64 <UART_SetConfig+0x478>)
 8011f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f64:	08011f7d 	.word	0x08011f7d
 8011f68:	08011f85 	.word	0x08011f85
 8011f6c:	08011f8d 	.word	0x08011f8d
 8011f70:	08011f95 	.word	0x08011f95
 8011f74:	08011f9d 	.word	0x08011f9d
 8011f78:	08011fa5 	.word	0x08011fa5
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f82:	e086      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011f84:	2304      	movs	r3, #4
 8011f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f8a:	e082      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011f8c:	2308      	movs	r3, #8
 8011f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f92:	e07e      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011f94:	2310      	movs	r3, #16
 8011f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f9a:	e07a      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011f9c:	2320      	movs	r3, #32
 8011f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fa2:	e076      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011fa4:	2340      	movs	r3, #64	; 0x40
 8011fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011faa:	e072      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011fac:	2380      	movs	r3, #128	; 0x80
 8011fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fb2:	e06e      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011fb4:	697b      	ldr	r3, [r7, #20]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	4a75      	ldr	r2, [pc, #468]	; (8012190 <UART_SetConfig+0x6a4>)
 8011fba:	4293      	cmp	r3, r2
 8011fbc:	d130      	bne.n	8012020 <UART_SetConfig+0x534>
 8011fbe:	4b72      	ldr	r3, [pc, #456]	; (8012188 <UART_SetConfig+0x69c>)
 8011fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011fc2:	f003 0307 	and.w	r3, r3, #7
 8011fc6:	2b05      	cmp	r3, #5
 8011fc8:	d826      	bhi.n	8012018 <UART_SetConfig+0x52c>
 8011fca:	a201      	add	r2, pc, #4	; (adr r2, 8011fd0 <UART_SetConfig+0x4e4>)
 8011fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fd0:	08011fe9 	.word	0x08011fe9
 8011fd4:	08011ff1 	.word	0x08011ff1
 8011fd8:	08011ff9 	.word	0x08011ff9
 8011fdc:	08012001 	.word	0x08012001
 8011fe0:	08012009 	.word	0x08012009
 8011fe4:	08012011 	.word	0x08012011
 8011fe8:	2300      	movs	r3, #0
 8011fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011fee:	e050      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011ff0:	2304      	movs	r3, #4
 8011ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ff6:	e04c      	b.n	8012092 <UART_SetConfig+0x5a6>
 8011ff8:	2308      	movs	r3, #8
 8011ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ffe:	e048      	b.n	8012092 <UART_SetConfig+0x5a6>
 8012000:	2310      	movs	r3, #16
 8012002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012006:	e044      	b.n	8012092 <UART_SetConfig+0x5a6>
 8012008:	2320      	movs	r3, #32
 801200a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801200e:	e040      	b.n	8012092 <UART_SetConfig+0x5a6>
 8012010:	2340      	movs	r3, #64	; 0x40
 8012012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012016:	e03c      	b.n	8012092 <UART_SetConfig+0x5a6>
 8012018:	2380      	movs	r3, #128	; 0x80
 801201a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801201e:	e038      	b.n	8012092 <UART_SetConfig+0x5a6>
 8012020:	697b      	ldr	r3, [r7, #20]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	4a5b      	ldr	r2, [pc, #364]	; (8012194 <UART_SetConfig+0x6a8>)
 8012026:	4293      	cmp	r3, r2
 8012028:	d130      	bne.n	801208c <UART_SetConfig+0x5a0>
 801202a:	4b57      	ldr	r3, [pc, #348]	; (8012188 <UART_SetConfig+0x69c>)
 801202c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801202e:	f003 0307 	and.w	r3, r3, #7
 8012032:	2b05      	cmp	r3, #5
 8012034:	d826      	bhi.n	8012084 <UART_SetConfig+0x598>
 8012036:	a201      	add	r2, pc, #4	; (adr r2, 801203c <UART_SetConfig+0x550>)
 8012038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801203c:	08012055 	.word	0x08012055
 8012040:	0801205d 	.word	0x0801205d
 8012044:	08012065 	.word	0x08012065
 8012048:	0801206d 	.word	0x0801206d
 801204c:	08012075 	.word	0x08012075
 8012050:	0801207d 	.word	0x0801207d
 8012054:	2302      	movs	r3, #2
 8012056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801205a:	e01a      	b.n	8012092 <UART_SetConfig+0x5a6>
 801205c:	2304      	movs	r3, #4
 801205e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012062:	e016      	b.n	8012092 <UART_SetConfig+0x5a6>
 8012064:	2308      	movs	r3, #8
 8012066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801206a:	e012      	b.n	8012092 <UART_SetConfig+0x5a6>
 801206c:	2310      	movs	r3, #16
 801206e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012072:	e00e      	b.n	8012092 <UART_SetConfig+0x5a6>
 8012074:	2320      	movs	r3, #32
 8012076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801207a:	e00a      	b.n	8012092 <UART_SetConfig+0x5a6>
 801207c:	2340      	movs	r3, #64	; 0x40
 801207e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012082:	e006      	b.n	8012092 <UART_SetConfig+0x5a6>
 8012084:	2380      	movs	r3, #128	; 0x80
 8012086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801208a:	e002      	b.n	8012092 <UART_SetConfig+0x5a6>
 801208c:	2380      	movs	r3, #128	; 0x80
 801208e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012092:	697b      	ldr	r3, [r7, #20]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	4a3f      	ldr	r2, [pc, #252]	; (8012194 <UART_SetConfig+0x6a8>)
 8012098:	4293      	cmp	r3, r2
 801209a:	f040 80f8 	bne.w	801228e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801209e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80120a2:	2b20      	cmp	r3, #32
 80120a4:	dc46      	bgt.n	8012134 <UART_SetConfig+0x648>
 80120a6:	2b02      	cmp	r3, #2
 80120a8:	f2c0 8082 	blt.w	80121b0 <UART_SetConfig+0x6c4>
 80120ac:	3b02      	subs	r3, #2
 80120ae:	2b1e      	cmp	r3, #30
 80120b0:	d87e      	bhi.n	80121b0 <UART_SetConfig+0x6c4>
 80120b2:	a201      	add	r2, pc, #4	; (adr r2, 80120b8 <UART_SetConfig+0x5cc>)
 80120b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120b8:	0801213b 	.word	0x0801213b
 80120bc:	080121b1 	.word	0x080121b1
 80120c0:	08012143 	.word	0x08012143
 80120c4:	080121b1 	.word	0x080121b1
 80120c8:	080121b1 	.word	0x080121b1
 80120cc:	080121b1 	.word	0x080121b1
 80120d0:	08012153 	.word	0x08012153
 80120d4:	080121b1 	.word	0x080121b1
 80120d8:	080121b1 	.word	0x080121b1
 80120dc:	080121b1 	.word	0x080121b1
 80120e0:	080121b1 	.word	0x080121b1
 80120e4:	080121b1 	.word	0x080121b1
 80120e8:	080121b1 	.word	0x080121b1
 80120ec:	080121b1 	.word	0x080121b1
 80120f0:	08012163 	.word	0x08012163
 80120f4:	080121b1 	.word	0x080121b1
 80120f8:	080121b1 	.word	0x080121b1
 80120fc:	080121b1 	.word	0x080121b1
 8012100:	080121b1 	.word	0x080121b1
 8012104:	080121b1 	.word	0x080121b1
 8012108:	080121b1 	.word	0x080121b1
 801210c:	080121b1 	.word	0x080121b1
 8012110:	080121b1 	.word	0x080121b1
 8012114:	080121b1 	.word	0x080121b1
 8012118:	080121b1 	.word	0x080121b1
 801211c:	080121b1 	.word	0x080121b1
 8012120:	080121b1 	.word	0x080121b1
 8012124:	080121b1 	.word	0x080121b1
 8012128:	080121b1 	.word	0x080121b1
 801212c:	080121b1 	.word	0x080121b1
 8012130:	080121a3 	.word	0x080121a3
 8012134:	2b40      	cmp	r3, #64	; 0x40
 8012136:	d037      	beq.n	80121a8 <UART_SetConfig+0x6bc>
 8012138:	e03a      	b.n	80121b0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801213a:	f7fd fe19 	bl	800fd70 <HAL_RCCEx_GetD3PCLK1Freq>
 801213e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012140:	e03c      	b.n	80121bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012146:	4618      	mov	r0, r3
 8012148:	f7fd fe28 	bl	800fd9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801214c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801214e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012150:	e034      	b.n	80121bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012152:	f107 0318 	add.w	r3, r7, #24
 8012156:	4618      	mov	r0, r3
 8012158:	f7fd ff74 	bl	8010044 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801215c:	69fb      	ldr	r3, [r7, #28]
 801215e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012160:	e02c      	b.n	80121bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012162:	4b09      	ldr	r3, [pc, #36]	; (8012188 <UART_SetConfig+0x69c>)
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	f003 0320 	and.w	r3, r3, #32
 801216a:	2b00      	cmp	r3, #0
 801216c:	d016      	beq.n	801219c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801216e:	4b06      	ldr	r3, [pc, #24]	; (8012188 <UART_SetConfig+0x69c>)
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	08db      	lsrs	r3, r3, #3
 8012174:	f003 0303 	and.w	r3, r3, #3
 8012178:	4a07      	ldr	r2, [pc, #28]	; (8012198 <UART_SetConfig+0x6ac>)
 801217a:	fa22 f303 	lsr.w	r3, r2, r3
 801217e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012180:	e01c      	b.n	80121bc <UART_SetConfig+0x6d0>
 8012182:	bf00      	nop
 8012184:	40011400 	.word	0x40011400
 8012188:	58024400 	.word	0x58024400
 801218c:	40007800 	.word	0x40007800
 8012190:	40007c00 	.word	0x40007c00
 8012194:	58000c00 	.word	0x58000c00
 8012198:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 801219c:	4b9d      	ldr	r3, [pc, #628]	; (8012414 <UART_SetConfig+0x928>)
 801219e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80121a0:	e00c      	b.n	80121bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80121a2:	4b9d      	ldr	r3, [pc, #628]	; (8012418 <UART_SetConfig+0x92c>)
 80121a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80121a6:	e009      	b.n	80121bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80121a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80121ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80121ae:	e005      	b.n	80121bc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80121b0:	2300      	movs	r3, #0
 80121b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80121b4:	2301      	movs	r3, #1
 80121b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80121ba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80121bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121be:	2b00      	cmp	r3, #0
 80121c0:	f000 81de 	beq.w	8012580 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80121c4:	697b      	ldr	r3, [r7, #20]
 80121c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121c8:	4a94      	ldr	r2, [pc, #592]	; (801241c <UART_SetConfig+0x930>)
 80121ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80121ce:	461a      	mov	r2, r3
 80121d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80121d6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80121d8:	697b      	ldr	r3, [r7, #20]
 80121da:	685a      	ldr	r2, [r3, #4]
 80121dc:	4613      	mov	r3, r2
 80121de:	005b      	lsls	r3, r3, #1
 80121e0:	4413      	add	r3, r2
 80121e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121e4:	429a      	cmp	r2, r3
 80121e6:	d305      	bcc.n	80121f4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80121e8:	697b      	ldr	r3, [r7, #20]
 80121ea:	685b      	ldr	r3, [r3, #4]
 80121ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80121ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121f0:	429a      	cmp	r2, r3
 80121f2:	d903      	bls.n	80121fc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80121f4:	2301      	movs	r3, #1
 80121f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80121fa:	e1c1      	b.n	8012580 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80121fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121fe:	2200      	movs	r2, #0
 8012200:	60bb      	str	r3, [r7, #8]
 8012202:	60fa      	str	r2, [r7, #12]
 8012204:	697b      	ldr	r3, [r7, #20]
 8012206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012208:	4a84      	ldr	r2, [pc, #528]	; (801241c <UART_SetConfig+0x930>)
 801220a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801220e:	b29b      	uxth	r3, r3
 8012210:	2200      	movs	r2, #0
 8012212:	603b      	str	r3, [r7, #0]
 8012214:	607a      	str	r2, [r7, #4]
 8012216:	e9d7 2300 	ldrd	r2, r3, [r7]
 801221a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801221e:	f7ee f8af 	bl	8000380 <__aeabi_uldivmod>
 8012222:	4602      	mov	r2, r0
 8012224:	460b      	mov	r3, r1
 8012226:	4610      	mov	r0, r2
 8012228:	4619      	mov	r1, r3
 801222a:	f04f 0200 	mov.w	r2, #0
 801222e:	f04f 0300 	mov.w	r3, #0
 8012232:	020b      	lsls	r3, r1, #8
 8012234:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012238:	0202      	lsls	r2, r0, #8
 801223a:	6979      	ldr	r1, [r7, #20]
 801223c:	6849      	ldr	r1, [r1, #4]
 801223e:	0849      	lsrs	r1, r1, #1
 8012240:	2000      	movs	r0, #0
 8012242:	460c      	mov	r4, r1
 8012244:	4605      	mov	r5, r0
 8012246:	eb12 0804 	adds.w	r8, r2, r4
 801224a:	eb43 0905 	adc.w	r9, r3, r5
 801224e:	697b      	ldr	r3, [r7, #20]
 8012250:	685b      	ldr	r3, [r3, #4]
 8012252:	2200      	movs	r2, #0
 8012254:	469a      	mov	sl, r3
 8012256:	4693      	mov	fp, r2
 8012258:	4652      	mov	r2, sl
 801225a:	465b      	mov	r3, fp
 801225c:	4640      	mov	r0, r8
 801225e:	4649      	mov	r1, r9
 8012260:	f7ee f88e 	bl	8000380 <__aeabi_uldivmod>
 8012264:	4602      	mov	r2, r0
 8012266:	460b      	mov	r3, r1
 8012268:	4613      	mov	r3, r2
 801226a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801226c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801226e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012272:	d308      	bcc.n	8012286 <UART_SetConfig+0x79a>
 8012274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012276:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801227a:	d204      	bcs.n	8012286 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 801227c:	697b      	ldr	r3, [r7, #20]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012282:	60da      	str	r2, [r3, #12]
 8012284:	e17c      	b.n	8012580 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8012286:	2301      	movs	r3, #1
 8012288:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801228c:	e178      	b.n	8012580 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801228e:	697b      	ldr	r3, [r7, #20]
 8012290:	69db      	ldr	r3, [r3, #28]
 8012292:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012296:	f040 80c5 	bne.w	8012424 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801229a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801229e:	2b20      	cmp	r3, #32
 80122a0:	dc48      	bgt.n	8012334 <UART_SetConfig+0x848>
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	db7b      	blt.n	801239e <UART_SetConfig+0x8b2>
 80122a6:	2b20      	cmp	r3, #32
 80122a8:	d879      	bhi.n	801239e <UART_SetConfig+0x8b2>
 80122aa:	a201      	add	r2, pc, #4	; (adr r2, 80122b0 <UART_SetConfig+0x7c4>)
 80122ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122b0:	0801233b 	.word	0x0801233b
 80122b4:	08012343 	.word	0x08012343
 80122b8:	0801239f 	.word	0x0801239f
 80122bc:	0801239f 	.word	0x0801239f
 80122c0:	0801234b 	.word	0x0801234b
 80122c4:	0801239f 	.word	0x0801239f
 80122c8:	0801239f 	.word	0x0801239f
 80122cc:	0801239f 	.word	0x0801239f
 80122d0:	0801235b 	.word	0x0801235b
 80122d4:	0801239f 	.word	0x0801239f
 80122d8:	0801239f 	.word	0x0801239f
 80122dc:	0801239f 	.word	0x0801239f
 80122e0:	0801239f 	.word	0x0801239f
 80122e4:	0801239f 	.word	0x0801239f
 80122e8:	0801239f 	.word	0x0801239f
 80122ec:	0801239f 	.word	0x0801239f
 80122f0:	0801236b 	.word	0x0801236b
 80122f4:	0801239f 	.word	0x0801239f
 80122f8:	0801239f 	.word	0x0801239f
 80122fc:	0801239f 	.word	0x0801239f
 8012300:	0801239f 	.word	0x0801239f
 8012304:	0801239f 	.word	0x0801239f
 8012308:	0801239f 	.word	0x0801239f
 801230c:	0801239f 	.word	0x0801239f
 8012310:	0801239f 	.word	0x0801239f
 8012314:	0801239f 	.word	0x0801239f
 8012318:	0801239f 	.word	0x0801239f
 801231c:	0801239f 	.word	0x0801239f
 8012320:	0801239f 	.word	0x0801239f
 8012324:	0801239f 	.word	0x0801239f
 8012328:	0801239f 	.word	0x0801239f
 801232c:	0801239f 	.word	0x0801239f
 8012330:	08012391 	.word	0x08012391
 8012334:	2b40      	cmp	r3, #64	; 0x40
 8012336:	d02e      	beq.n	8012396 <UART_SetConfig+0x8aa>
 8012338:	e031      	b.n	801239e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801233a:	f7fb fbd1 	bl	800dae0 <HAL_RCC_GetPCLK1Freq>
 801233e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012340:	e033      	b.n	80123aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012342:	f7fb fbe3 	bl	800db0c <HAL_RCC_GetPCLK2Freq>
 8012346:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012348:	e02f      	b.n	80123aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801234a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801234e:	4618      	mov	r0, r3
 8012350:	f7fd fd24 	bl	800fd9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012356:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012358:	e027      	b.n	80123aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801235a:	f107 0318 	add.w	r3, r7, #24
 801235e:	4618      	mov	r0, r3
 8012360:	f7fd fe70 	bl	8010044 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012364:	69fb      	ldr	r3, [r7, #28]
 8012366:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012368:	e01f      	b.n	80123aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801236a:	4b2d      	ldr	r3, [pc, #180]	; (8012420 <UART_SetConfig+0x934>)
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	f003 0320 	and.w	r3, r3, #32
 8012372:	2b00      	cmp	r3, #0
 8012374:	d009      	beq.n	801238a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012376:	4b2a      	ldr	r3, [pc, #168]	; (8012420 <UART_SetConfig+0x934>)
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	08db      	lsrs	r3, r3, #3
 801237c:	f003 0303 	and.w	r3, r3, #3
 8012380:	4a24      	ldr	r2, [pc, #144]	; (8012414 <UART_SetConfig+0x928>)
 8012382:	fa22 f303 	lsr.w	r3, r2, r3
 8012386:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012388:	e00f      	b.n	80123aa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801238a:	4b22      	ldr	r3, [pc, #136]	; (8012414 <UART_SetConfig+0x928>)
 801238c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801238e:	e00c      	b.n	80123aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012390:	4b21      	ldr	r3, [pc, #132]	; (8012418 <UART_SetConfig+0x92c>)
 8012392:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012394:	e009      	b.n	80123aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012396:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801239a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801239c:	e005      	b.n	80123aa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801239e:	2300      	movs	r3, #0
 80123a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80123a2:	2301      	movs	r3, #1
 80123a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80123a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80123aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	f000 80e7 	beq.w	8012580 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80123b2:	697b      	ldr	r3, [r7, #20]
 80123b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123b6:	4a19      	ldr	r2, [pc, #100]	; (801241c <UART_SetConfig+0x930>)
 80123b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80123bc:	461a      	mov	r2, r3
 80123be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80123c4:	005a      	lsls	r2, r3, #1
 80123c6:	697b      	ldr	r3, [r7, #20]
 80123c8:	685b      	ldr	r3, [r3, #4]
 80123ca:	085b      	lsrs	r3, r3, #1
 80123cc:	441a      	add	r2, r3
 80123ce:	697b      	ldr	r3, [r7, #20]
 80123d0:	685b      	ldr	r3, [r3, #4]
 80123d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80123d6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80123d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123da:	2b0f      	cmp	r3, #15
 80123dc:	d916      	bls.n	801240c <UART_SetConfig+0x920>
 80123de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80123e4:	d212      	bcs.n	801240c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80123e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123e8:	b29b      	uxth	r3, r3
 80123ea:	f023 030f 	bic.w	r3, r3, #15
 80123ee:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80123f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123f2:	085b      	lsrs	r3, r3, #1
 80123f4:	b29b      	uxth	r3, r3
 80123f6:	f003 0307 	and.w	r3, r3, #7
 80123fa:	b29a      	uxth	r2, r3
 80123fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80123fe:	4313      	orrs	r3, r2
 8012400:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8012402:	697b      	ldr	r3, [r7, #20]
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012408:	60da      	str	r2, [r3, #12]
 801240a:	e0b9      	b.n	8012580 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801240c:	2301      	movs	r3, #1
 801240e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8012412:	e0b5      	b.n	8012580 <UART_SetConfig+0xa94>
 8012414:	03d09000 	.word	0x03d09000
 8012418:	003d0900 	.word	0x003d0900
 801241c:	0801b3ec 	.word	0x0801b3ec
 8012420:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8012424:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012428:	2b20      	cmp	r3, #32
 801242a:	dc49      	bgt.n	80124c0 <UART_SetConfig+0x9d4>
 801242c:	2b00      	cmp	r3, #0
 801242e:	db7c      	blt.n	801252a <UART_SetConfig+0xa3e>
 8012430:	2b20      	cmp	r3, #32
 8012432:	d87a      	bhi.n	801252a <UART_SetConfig+0xa3e>
 8012434:	a201      	add	r2, pc, #4	; (adr r2, 801243c <UART_SetConfig+0x950>)
 8012436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801243a:	bf00      	nop
 801243c:	080124c7 	.word	0x080124c7
 8012440:	080124cf 	.word	0x080124cf
 8012444:	0801252b 	.word	0x0801252b
 8012448:	0801252b 	.word	0x0801252b
 801244c:	080124d7 	.word	0x080124d7
 8012450:	0801252b 	.word	0x0801252b
 8012454:	0801252b 	.word	0x0801252b
 8012458:	0801252b 	.word	0x0801252b
 801245c:	080124e7 	.word	0x080124e7
 8012460:	0801252b 	.word	0x0801252b
 8012464:	0801252b 	.word	0x0801252b
 8012468:	0801252b 	.word	0x0801252b
 801246c:	0801252b 	.word	0x0801252b
 8012470:	0801252b 	.word	0x0801252b
 8012474:	0801252b 	.word	0x0801252b
 8012478:	0801252b 	.word	0x0801252b
 801247c:	080124f7 	.word	0x080124f7
 8012480:	0801252b 	.word	0x0801252b
 8012484:	0801252b 	.word	0x0801252b
 8012488:	0801252b 	.word	0x0801252b
 801248c:	0801252b 	.word	0x0801252b
 8012490:	0801252b 	.word	0x0801252b
 8012494:	0801252b 	.word	0x0801252b
 8012498:	0801252b 	.word	0x0801252b
 801249c:	0801252b 	.word	0x0801252b
 80124a0:	0801252b 	.word	0x0801252b
 80124a4:	0801252b 	.word	0x0801252b
 80124a8:	0801252b 	.word	0x0801252b
 80124ac:	0801252b 	.word	0x0801252b
 80124b0:	0801252b 	.word	0x0801252b
 80124b4:	0801252b 	.word	0x0801252b
 80124b8:	0801252b 	.word	0x0801252b
 80124bc:	0801251d 	.word	0x0801251d
 80124c0:	2b40      	cmp	r3, #64	; 0x40
 80124c2:	d02e      	beq.n	8012522 <UART_SetConfig+0xa36>
 80124c4:	e031      	b.n	801252a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80124c6:	f7fb fb0b 	bl	800dae0 <HAL_RCC_GetPCLK1Freq>
 80124ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80124cc:	e033      	b.n	8012536 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80124ce:	f7fb fb1d 	bl	800db0c <HAL_RCC_GetPCLK2Freq>
 80124d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80124d4:	e02f      	b.n	8012536 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80124d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80124da:	4618      	mov	r0, r3
 80124dc:	f7fd fc5e 	bl	800fd9c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80124e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80124e4:	e027      	b.n	8012536 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80124e6:	f107 0318 	add.w	r3, r7, #24
 80124ea:	4618      	mov	r0, r3
 80124ec:	f7fd fdaa 	bl	8010044 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80124f0:	69fb      	ldr	r3, [r7, #28]
 80124f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80124f4:	e01f      	b.n	8012536 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80124f6:	4b2d      	ldr	r3, [pc, #180]	; (80125ac <UART_SetConfig+0xac0>)
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	f003 0320 	and.w	r3, r3, #32
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d009      	beq.n	8012516 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012502:	4b2a      	ldr	r3, [pc, #168]	; (80125ac <UART_SetConfig+0xac0>)
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	08db      	lsrs	r3, r3, #3
 8012508:	f003 0303 	and.w	r3, r3, #3
 801250c:	4a28      	ldr	r2, [pc, #160]	; (80125b0 <UART_SetConfig+0xac4>)
 801250e:	fa22 f303 	lsr.w	r3, r2, r3
 8012512:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012514:	e00f      	b.n	8012536 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8012516:	4b26      	ldr	r3, [pc, #152]	; (80125b0 <UART_SetConfig+0xac4>)
 8012518:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801251a:	e00c      	b.n	8012536 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801251c:	4b25      	ldr	r3, [pc, #148]	; (80125b4 <UART_SetConfig+0xac8>)
 801251e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012520:	e009      	b.n	8012536 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012526:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012528:	e005      	b.n	8012536 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801252a:	2300      	movs	r3, #0
 801252c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801252e:	2301      	movs	r3, #1
 8012530:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8012534:	bf00      	nop
    }

    if (pclk != 0U)
 8012536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012538:	2b00      	cmp	r3, #0
 801253a:	d021      	beq.n	8012580 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801253c:	697b      	ldr	r3, [r7, #20]
 801253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012540:	4a1d      	ldr	r2, [pc, #116]	; (80125b8 <UART_SetConfig+0xacc>)
 8012542:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012546:	461a      	mov	r2, r3
 8012548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801254a:	fbb3 f2f2 	udiv	r2, r3, r2
 801254e:	697b      	ldr	r3, [r7, #20]
 8012550:	685b      	ldr	r3, [r3, #4]
 8012552:	085b      	lsrs	r3, r3, #1
 8012554:	441a      	add	r2, r3
 8012556:	697b      	ldr	r3, [r7, #20]
 8012558:	685b      	ldr	r3, [r3, #4]
 801255a:	fbb2 f3f3 	udiv	r3, r2, r3
 801255e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012562:	2b0f      	cmp	r3, #15
 8012564:	d909      	bls.n	801257a <UART_SetConfig+0xa8e>
 8012566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801256c:	d205      	bcs.n	801257a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801256e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012570:	b29a      	uxth	r2, r3
 8012572:	697b      	ldr	r3, [r7, #20]
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	60da      	str	r2, [r3, #12]
 8012578:	e002      	b.n	8012580 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801257a:	2301      	movs	r3, #1
 801257c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012580:	697b      	ldr	r3, [r7, #20]
 8012582:	2201      	movs	r2, #1
 8012584:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8012588:	697b      	ldr	r3, [r7, #20]
 801258a:	2201      	movs	r2, #1
 801258c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012590:	697b      	ldr	r3, [r7, #20]
 8012592:	2200      	movs	r2, #0
 8012594:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8012596:	697b      	ldr	r3, [r7, #20]
 8012598:	2200      	movs	r2, #0
 801259a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801259c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80125a0:	4618      	mov	r0, r3
 80125a2:	3748      	adds	r7, #72	; 0x48
 80125a4:	46bd      	mov	sp, r7
 80125a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80125aa:	bf00      	nop
 80125ac:	58024400 	.word	0x58024400
 80125b0:	03d09000 	.word	0x03d09000
 80125b4:	003d0900 	.word	0x003d0900
 80125b8:	0801b3ec 	.word	0x0801b3ec

080125bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80125bc:	b480      	push	{r7}
 80125be:	b083      	sub	sp, #12
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125c8:	f003 0301 	and.w	r3, r3, #1
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d00a      	beq.n	80125e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	685b      	ldr	r3, [r3, #4]
 80125d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	430a      	orrs	r2, r1
 80125e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125ea:	f003 0302 	and.w	r3, r3, #2
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d00a      	beq.n	8012608 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	685b      	ldr	r3, [r3, #4]
 80125f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	430a      	orrs	r2, r1
 8012606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801260c:	f003 0304 	and.w	r3, r3, #4
 8012610:	2b00      	cmp	r3, #0
 8012612:	d00a      	beq.n	801262a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	685b      	ldr	r3, [r3, #4]
 801261a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	430a      	orrs	r2, r1
 8012628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801262e:	f003 0308 	and.w	r3, r3, #8
 8012632:	2b00      	cmp	r3, #0
 8012634:	d00a      	beq.n	801264c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	685b      	ldr	r3, [r3, #4]
 801263c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	430a      	orrs	r2, r1
 801264a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012650:	f003 0310 	and.w	r3, r3, #16
 8012654:	2b00      	cmp	r3, #0
 8012656:	d00a      	beq.n	801266e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	689b      	ldr	r3, [r3, #8]
 801265e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	430a      	orrs	r2, r1
 801266c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012672:	f003 0320 	and.w	r3, r3, #32
 8012676:	2b00      	cmp	r3, #0
 8012678:	d00a      	beq.n	8012690 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	689b      	ldr	r3, [r3, #8]
 8012680:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	430a      	orrs	r2, r1
 801268e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012698:	2b00      	cmp	r3, #0
 801269a:	d01a      	beq.n	80126d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	685b      	ldr	r3, [r3, #4]
 80126a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	430a      	orrs	r2, r1
 80126b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80126b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80126ba:	d10a      	bne.n	80126d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	685b      	ldr	r3, [r3, #4]
 80126c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	430a      	orrs	r2, r1
 80126d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d00a      	beq.n	80126f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	685b      	ldr	r3, [r3, #4]
 80126e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	430a      	orrs	r2, r1
 80126f2:	605a      	str	r2, [r3, #4]
  }
}
 80126f4:	bf00      	nop
 80126f6:	370c      	adds	r7, #12
 80126f8:	46bd      	mov	sp, r7
 80126fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fe:	4770      	bx	lr

08012700 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	b098      	sub	sp, #96	; 0x60
 8012704:	af02      	add	r7, sp, #8
 8012706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	2200      	movs	r2, #0
 801270c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012710:	f7f5 f9e0 	bl	8007ad4 <HAL_GetTick>
 8012714:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	f003 0308 	and.w	r3, r3, #8
 8012720:	2b08      	cmp	r3, #8
 8012722:	d12f      	bne.n	8012784 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012724:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012728:	9300      	str	r3, [sp, #0]
 801272a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801272c:	2200      	movs	r2, #0
 801272e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012732:	6878      	ldr	r0, [r7, #4]
 8012734:	f000 f88e 	bl	8012854 <UART_WaitOnFlagUntilTimeout>
 8012738:	4603      	mov	r3, r0
 801273a:	2b00      	cmp	r3, #0
 801273c:	d022      	beq.n	8012784 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012746:	e853 3f00 	ldrex	r3, [r3]
 801274a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801274c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801274e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012752:	653b      	str	r3, [r7, #80]	; 0x50
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	461a      	mov	r2, r3
 801275a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801275c:	647b      	str	r3, [r7, #68]	; 0x44
 801275e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012760:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012762:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012764:	e841 2300 	strex	r3, r2, [r1]
 8012768:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801276a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801276c:	2b00      	cmp	r3, #0
 801276e:	d1e6      	bne.n	801273e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	2220      	movs	r2, #32
 8012774:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	2200      	movs	r2, #0
 801277c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012780:	2303      	movs	r3, #3
 8012782:	e063      	b.n	801284c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	f003 0304 	and.w	r3, r3, #4
 801278e:	2b04      	cmp	r3, #4
 8012790:	d149      	bne.n	8012826 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012792:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012796:	9300      	str	r3, [sp, #0]
 8012798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801279a:	2200      	movs	r2, #0
 801279c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80127a0:	6878      	ldr	r0, [r7, #4]
 80127a2:	f000 f857 	bl	8012854 <UART_WaitOnFlagUntilTimeout>
 80127a6:	4603      	mov	r3, r0
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d03c      	beq.n	8012826 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127b4:	e853 3f00 	ldrex	r3, [r3]
 80127b8:	623b      	str	r3, [r7, #32]
   return(result);
 80127ba:	6a3b      	ldr	r3, [r7, #32]
 80127bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80127c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	461a      	mov	r2, r3
 80127c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80127ca:	633b      	str	r3, [r7, #48]	; 0x30
 80127cc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80127d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127d2:	e841 2300 	strex	r3, r2, [r1]
 80127d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80127d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d1e6      	bne.n	80127ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	3308      	adds	r3, #8
 80127e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127e6:	693b      	ldr	r3, [r7, #16]
 80127e8:	e853 3f00 	ldrex	r3, [r3]
 80127ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	f023 0301 	bic.w	r3, r3, #1
 80127f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	3308      	adds	r3, #8
 80127fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80127fe:	61fa      	str	r2, [r7, #28]
 8012800:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012802:	69b9      	ldr	r1, [r7, #24]
 8012804:	69fa      	ldr	r2, [r7, #28]
 8012806:	e841 2300 	strex	r3, r2, [r1]
 801280a:	617b      	str	r3, [r7, #20]
   return(result);
 801280c:	697b      	ldr	r3, [r7, #20]
 801280e:	2b00      	cmp	r3, #0
 8012810:	d1e5      	bne.n	80127de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	2220      	movs	r2, #32
 8012816:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	2200      	movs	r2, #0
 801281e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012822:	2303      	movs	r3, #3
 8012824:	e012      	b.n	801284c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	2220      	movs	r2, #32
 801282a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	2220      	movs	r2, #32
 8012832:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	2200      	movs	r2, #0
 801283a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	2200      	movs	r2, #0
 8012840:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	2200      	movs	r2, #0
 8012846:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801284a:	2300      	movs	r3, #0
}
 801284c:	4618      	mov	r0, r3
 801284e:	3758      	adds	r7, #88	; 0x58
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}

08012854 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012854:	b580      	push	{r7, lr}
 8012856:	b084      	sub	sp, #16
 8012858:	af00      	add	r7, sp, #0
 801285a:	60f8      	str	r0, [r7, #12]
 801285c:	60b9      	str	r1, [r7, #8]
 801285e:	603b      	str	r3, [r7, #0]
 8012860:	4613      	mov	r3, r2
 8012862:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012864:	e049      	b.n	80128fa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012866:	69bb      	ldr	r3, [r7, #24]
 8012868:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801286c:	d045      	beq.n	80128fa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801286e:	f7f5 f931 	bl	8007ad4 <HAL_GetTick>
 8012872:	4602      	mov	r2, r0
 8012874:	683b      	ldr	r3, [r7, #0]
 8012876:	1ad3      	subs	r3, r2, r3
 8012878:	69ba      	ldr	r2, [r7, #24]
 801287a:	429a      	cmp	r2, r3
 801287c:	d302      	bcc.n	8012884 <UART_WaitOnFlagUntilTimeout+0x30>
 801287e:	69bb      	ldr	r3, [r7, #24]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d101      	bne.n	8012888 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012884:	2303      	movs	r3, #3
 8012886:	e048      	b.n	801291a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	f003 0304 	and.w	r3, r3, #4
 8012892:	2b00      	cmp	r3, #0
 8012894:	d031      	beq.n	80128fa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	69db      	ldr	r3, [r3, #28]
 801289c:	f003 0308 	and.w	r3, r3, #8
 80128a0:	2b08      	cmp	r3, #8
 80128a2:	d110      	bne.n	80128c6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	2208      	movs	r2, #8
 80128aa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80128ac:	68f8      	ldr	r0, [r7, #12]
 80128ae:	f000 f839 	bl	8012924 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	2208      	movs	r2, #8
 80128b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	2200      	movs	r2, #0
 80128be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80128c2:	2301      	movs	r3, #1
 80128c4:	e029      	b.n	801291a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	69db      	ldr	r3, [r3, #28]
 80128cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80128d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80128d4:	d111      	bne.n	80128fa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80128de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80128e0:	68f8      	ldr	r0, [r7, #12]
 80128e2:	f000 f81f 	bl	8012924 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	2220      	movs	r2, #32
 80128ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	2200      	movs	r2, #0
 80128f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80128f6:	2303      	movs	r3, #3
 80128f8:	e00f      	b.n	801291a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	69da      	ldr	r2, [r3, #28]
 8012900:	68bb      	ldr	r3, [r7, #8]
 8012902:	4013      	ands	r3, r2
 8012904:	68ba      	ldr	r2, [r7, #8]
 8012906:	429a      	cmp	r2, r3
 8012908:	bf0c      	ite	eq
 801290a:	2301      	moveq	r3, #1
 801290c:	2300      	movne	r3, #0
 801290e:	b2db      	uxtb	r3, r3
 8012910:	461a      	mov	r2, r3
 8012912:	79fb      	ldrb	r3, [r7, #7]
 8012914:	429a      	cmp	r2, r3
 8012916:	d0a6      	beq.n	8012866 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012918:	2300      	movs	r3, #0
}
 801291a:	4618      	mov	r0, r3
 801291c:	3710      	adds	r7, #16
 801291e:	46bd      	mov	sp, r7
 8012920:	bd80      	pop	{r7, pc}
	...

08012924 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012924:	b480      	push	{r7}
 8012926:	b095      	sub	sp, #84	; 0x54
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012934:	e853 3f00 	ldrex	r3, [r3]
 8012938:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801293c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012940:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	461a      	mov	r2, r3
 8012948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801294a:	643b      	str	r3, [r7, #64]	; 0x40
 801294c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801294e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012950:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012952:	e841 2300 	strex	r3, r2, [r1]
 8012956:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801295a:	2b00      	cmp	r3, #0
 801295c:	d1e6      	bne.n	801292c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	3308      	adds	r3, #8
 8012964:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012966:	6a3b      	ldr	r3, [r7, #32]
 8012968:	e853 3f00 	ldrex	r3, [r3]
 801296c:	61fb      	str	r3, [r7, #28]
   return(result);
 801296e:	69fa      	ldr	r2, [r7, #28]
 8012970:	4b1e      	ldr	r3, [pc, #120]	; (80129ec <UART_EndRxTransfer+0xc8>)
 8012972:	4013      	ands	r3, r2
 8012974:	64bb      	str	r3, [r7, #72]	; 0x48
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	3308      	adds	r3, #8
 801297c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801297e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012980:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012982:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012986:	e841 2300 	strex	r3, r2, [r1]
 801298a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801298e:	2b00      	cmp	r3, #0
 8012990:	d1e5      	bne.n	801295e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012996:	2b01      	cmp	r3, #1
 8012998:	d118      	bne.n	80129cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	e853 3f00 	ldrex	r3, [r3]
 80129a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80129a8:	68bb      	ldr	r3, [r7, #8]
 80129aa:	f023 0310 	bic.w	r3, r3, #16
 80129ae:	647b      	str	r3, [r7, #68]	; 0x44
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	461a      	mov	r2, r3
 80129b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129b8:	61bb      	str	r3, [r7, #24]
 80129ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129bc:	6979      	ldr	r1, [r7, #20]
 80129be:	69ba      	ldr	r2, [r7, #24]
 80129c0:	e841 2300 	strex	r3, r2, [r1]
 80129c4:	613b      	str	r3, [r7, #16]
   return(result);
 80129c6:	693b      	ldr	r3, [r7, #16]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d1e6      	bne.n	801299a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	2220      	movs	r2, #32
 80129d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	2200      	movs	r2, #0
 80129d8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	2200      	movs	r2, #0
 80129de:	675a      	str	r2, [r3, #116]	; 0x74
}
 80129e0:	bf00      	nop
 80129e2:	3754      	adds	r7, #84	; 0x54
 80129e4:	46bd      	mov	sp, r7
 80129e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ea:	4770      	bx	lr
 80129ec:	effffffe 	.word	0xeffffffe

080129f0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80129f0:	b480      	push	{r7}
 80129f2:	b083      	sub	sp, #12
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]
 80129f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80129fa:	683b      	ldr	r3, [r7, #0]
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d121      	bne.n	8012a46 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	681a      	ldr	r2, [r3, #0]
 8012a06:	4b27      	ldr	r3, [pc, #156]	; (8012aa4 <FMC_SDRAM_Init+0xb4>)
 8012a08:	4013      	ands	r3, r2
 8012a0a:	683a      	ldr	r2, [r7, #0]
 8012a0c:	6851      	ldr	r1, [r2, #4]
 8012a0e:	683a      	ldr	r2, [r7, #0]
 8012a10:	6892      	ldr	r2, [r2, #8]
 8012a12:	4311      	orrs	r1, r2
 8012a14:	683a      	ldr	r2, [r7, #0]
 8012a16:	68d2      	ldr	r2, [r2, #12]
 8012a18:	4311      	orrs	r1, r2
 8012a1a:	683a      	ldr	r2, [r7, #0]
 8012a1c:	6912      	ldr	r2, [r2, #16]
 8012a1e:	4311      	orrs	r1, r2
 8012a20:	683a      	ldr	r2, [r7, #0]
 8012a22:	6952      	ldr	r2, [r2, #20]
 8012a24:	4311      	orrs	r1, r2
 8012a26:	683a      	ldr	r2, [r7, #0]
 8012a28:	6992      	ldr	r2, [r2, #24]
 8012a2a:	4311      	orrs	r1, r2
 8012a2c:	683a      	ldr	r2, [r7, #0]
 8012a2e:	69d2      	ldr	r2, [r2, #28]
 8012a30:	4311      	orrs	r1, r2
 8012a32:	683a      	ldr	r2, [r7, #0]
 8012a34:	6a12      	ldr	r2, [r2, #32]
 8012a36:	4311      	orrs	r1, r2
 8012a38:	683a      	ldr	r2, [r7, #0]
 8012a3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012a3c:	430a      	orrs	r2, r1
 8012a3e:	431a      	orrs	r2, r3
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	601a      	str	r2, [r3, #0]
 8012a44:	e026      	b.n	8012a94 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8012a4e:	683b      	ldr	r3, [r7, #0]
 8012a50:	69d9      	ldr	r1, [r3, #28]
 8012a52:	683b      	ldr	r3, [r7, #0]
 8012a54:	6a1b      	ldr	r3, [r3, #32]
 8012a56:	4319      	orrs	r1, r3
 8012a58:	683b      	ldr	r3, [r7, #0]
 8012a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a5c:	430b      	orrs	r3, r1
 8012a5e:	431a      	orrs	r2, r3
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	685a      	ldr	r2, [r3, #4]
 8012a68:	4b0e      	ldr	r3, [pc, #56]	; (8012aa4 <FMC_SDRAM_Init+0xb4>)
 8012a6a:	4013      	ands	r3, r2
 8012a6c:	683a      	ldr	r2, [r7, #0]
 8012a6e:	6851      	ldr	r1, [r2, #4]
 8012a70:	683a      	ldr	r2, [r7, #0]
 8012a72:	6892      	ldr	r2, [r2, #8]
 8012a74:	4311      	orrs	r1, r2
 8012a76:	683a      	ldr	r2, [r7, #0]
 8012a78:	68d2      	ldr	r2, [r2, #12]
 8012a7a:	4311      	orrs	r1, r2
 8012a7c:	683a      	ldr	r2, [r7, #0]
 8012a7e:	6912      	ldr	r2, [r2, #16]
 8012a80:	4311      	orrs	r1, r2
 8012a82:	683a      	ldr	r2, [r7, #0]
 8012a84:	6952      	ldr	r2, [r2, #20]
 8012a86:	4311      	orrs	r1, r2
 8012a88:	683a      	ldr	r2, [r7, #0]
 8012a8a:	6992      	ldr	r2, [r2, #24]
 8012a8c:	430a      	orrs	r2, r1
 8012a8e:	431a      	orrs	r2, r3
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8012a94:	2300      	movs	r3, #0
}
 8012a96:	4618      	mov	r0, r3
 8012a98:	370c      	adds	r7, #12
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa0:	4770      	bx	lr
 8012aa2:	bf00      	nop
 8012aa4:	ffff8000 	.word	0xffff8000

08012aa8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8012aa8:	b480      	push	{r7}
 8012aaa:	b085      	sub	sp, #20
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	60f8      	str	r0, [r7, #12]
 8012ab0:	60b9      	str	r1, [r7, #8]
 8012ab2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d128      	bne.n	8012b0c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	689b      	ldr	r3, [r3, #8]
 8012abe:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8012ac2:	68bb      	ldr	r3, [r7, #8]
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	1e59      	subs	r1, r3, #1
 8012ac8:	68bb      	ldr	r3, [r7, #8]
 8012aca:	685b      	ldr	r3, [r3, #4]
 8012acc:	3b01      	subs	r3, #1
 8012ace:	011b      	lsls	r3, r3, #4
 8012ad0:	4319      	orrs	r1, r3
 8012ad2:	68bb      	ldr	r3, [r7, #8]
 8012ad4:	689b      	ldr	r3, [r3, #8]
 8012ad6:	3b01      	subs	r3, #1
 8012ad8:	021b      	lsls	r3, r3, #8
 8012ada:	4319      	orrs	r1, r3
 8012adc:	68bb      	ldr	r3, [r7, #8]
 8012ade:	68db      	ldr	r3, [r3, #12]
 8012ae0:	3b01      	subs	r3, #1
 8012ae2:	031b      	lsls	r3, r3, #12
 8012ae4:	4319      	orrs	r1, r3
 8012ae6:	68bb      	ldr	r3, [r7, #8]
 8012ae8:	691b      	ldr	r3, [r3, #16]
 8012aea:	3b01      	subs	r3, #1
 8012aec:	041b      	lsls	r3, r3, #16
 8012aee:	4319      	orrs	r1, r3
 8012af0:	68bb      	ldr	r3, [r7, #8]
 8012af2:	695b      	ldr	r3, [r3, #20]
 8012af4:	3b01      	subs	r3, #1
 8012af6:	051b      	lsls	r3, r3, #20
 8012af8:	4319      	orrs	r1, r3
 8012afa:	68bb      	ldr	r3, [r7, #8]
 8012afc:	699b      	ldr	r3, [r3, #24]
 8012afe:	3b01      	subs	r3, #1
 8012b00:	061b      	lsls	r3, r3, #24
 8012b02:	430b      	orrs	r3, r1
 8012b04:	431a      	orrs	r2, r3
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	609a      	str	r2, [r3, #8]
 8012b0a:	e02d      	b.n	8012b68 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	689a      	ldr	r2, [r3, #8]
 8012b10:	4b19      	ldr	r3, [pc, #100]	; (8012b78 <FMC_SDRAM_Timing_Init+0xd0>)
 8012b12:	4013      	ands	r3, r2
 8012b14:	68ba      	ldr	r2, [r7, #8]
 8012b16:	68d2      	ldr	r2, [r2, #12]
 8012b18:	3a01      	subs	r2, #1
 8012b1a:	0311      	lsls	r1, r2, #12
 8012b1c:	68ba      	ldr	r2, [r7, #8]
 8012b1e:	6952      	ldr	r2, [r2, #20]
 8012b20:	3a01      	subs	r2, #1
 8012b22:	0512      	lsls	r2, r2, #20
 8012b24:	430a      	orrs	r2, r1
 8012b26:	431a      	orrs	r2, r3
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	68db      	ldr	r3, [r3, #12]
 8012b30:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8012b34:	68bb      	ldr	r3, [r7, #8]
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	1e59      	subs	r1, r3, #1
 8012b3a:	68bb      	ldr	r3, [r7, #8]
 8012b3c:	685b      	ldr	r3, [r3, #4]
 8012b3e:	3b01      	subs	r3, #1
 8012b40:	011b      	lsls	r3, r3, #4
 8012b42:	4319      	orrs	r1, r3
 8012b44:	68bb      	ldr	r3, [r7, #8]
 8012b46:	689b      	ldr	r3, [r3, #8]
 8012b48:	3b01      	subs	r3, #1
 8012b4a:	021b      	lsls	r3, r3, #8
 8012b4c:	4319      	orrs	r1, r3
 8012b4e:	68bb      	ldr	r3, [r7, #8]
 8012b50:	691b      	ldr	r3, [r3, #16]
 8012b52:	3b01      	subs	r3, #1
 8012b54:	041b      	lsls	r3, r3, #16
 8012b56:	4319      	orrs	r1, r3
 8012b58:	68bb      	ldr	r3, [r7, #8]
 8012b5a:	699b      	ldr	r3, [r3, #24]
 8012b5c:	3b01      	subs	r3, #1
 8012b5e:	061b      	lsls	r3, r3, #24
 8012b60:	430b      	orrs	r3, r1
 8012b62:	431a      	orrs	r2, r3
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8012b68:	2300      	movs	r3, #0
}
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	3714      	adds	r7, #20
 8012b6e:	46bd      	mov	sp, r7
 8012b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b74:	4770      	bx	lr
 8012b76:	bf00      	nop
 8012b78:	ff0f0fff 	.word	0xff0f0fff

08012b7c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8012b7c:	b480      	push	{r7}
 8012b7e:	b085      	sub	sp, #20
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	60f8      	str	r0, [r7, #12]
 8012b84:	60b9      	str	r1, [r7, #8]
 8012b86:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	691a      	ldr	r2, [r3, #16]
 8012b8c:	4b0c      	ldr	r3, [pc, #48]	; (8012bc0 <FMC_SDRAM_SendCommand+0x44>)
 8012b8e:	4013      	ands	r3, r2
 8012b90:	68ba      	ldr	r2, [r7, #8]
 8012b92:	6811      	ldr	r1, [r2, #0]
 8012b94:	68ba      	ldr	r2, [r7, #8]
 8012b96:	6852      	ldr	r2, [r2, #4]
 8012b98:	4311      	orrs	r1, r2
 8012b9a:	68ba      	ldr	r2, [r7, #8]
 8012b9c:	6892      	ldr	r2, [r2, #8]
 8012b9e:	3a01      	subs	r2, #1
 8012ba0:	0152      	lsls	r2, r2, #5
 8012ba2:	4311      	orrs	r1, r2
 8012ba4:	68ba      	ldr	r2, [r7, #8]
 8012ba6:	68d2      	ldr	r2, [r2, #12]
 8012ba8:	0252      	lsls	r2, r2, #9
 8012baa:	430a      	orrs	r2, r1
 8012bac:	431a      	orrs	r2, r3
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8012bb2:	2300      	movs	r3, #0
}
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	3714      	adds	r7, #20
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bbe:	4770      	bx	lr
 8012bc0:	ffc00000 	.word	0xffc00000

08012bc4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8012bc4:	b480      	push	{r7}
 8012bc6:	b083      	sub	sp, #12
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
 8012bcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	695a      	ldr	r2, [r3, #20]
 8012bd2:	4b07      	ldr	r3, [pc, #28]	; (8012bf0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8012bd4:	4013      	ands	r3, r2
 8012bd6:	683a      	ldr	r2, [r7, #0]
 8012bd8:	0052      	lsls	r2, r2, #1
 8012bda:	431a      	orrs	r2, r3
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8012be0:	2300      	movs	r3, #0
}
 8012be2:	4618      	mov	r0, r3
 8012be4:	370c      	adds	r7, #12
 8012be6:	46bd      	mov	sp, r7
 8012be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bec:	4770      	bx	lr
 8012bee:	bf00      	nop
 8012bf0:	ffffc001 	.word	0xffffc001

08012bf4 <D16_GENERIC>:
 8012bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bf8:	b089      	sub	sp, #36	; 0x24
 8012bfa:	6993      	ldr	r3, [r2, #24]
 8012bfc:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8012bfe:	9103      	str	r1, [sp, #12]
 8012c00:	9307      	str	r3, [sp, #28]
 8012c02:	69d3      	ldr	r3, [r2, #28]
 8012c04:	e9d2 c102 	ldrd	ip, r1, [r2, #8]
 8012c08:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 8012c0c:	9106      	str	r1, [sp, #24]
 8012c0e:	e9d2 810c 	ldrd	r8, r1, [r2, #48]	; 0x30
 8012c12:	2d00      	cmp	r5, #0
 8012c14:	d063      	beq.n	8012cde <D16_GENERIC+0xea>
 8012c16:	f001 0520 	and.w	r5, r1, #32
 8012c1a:	f001 0110 	and.w	r1, r1, #16
 8012c1e:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 8012d00 <D16_GENERIC+0x10c>
 8012c22:	46c1      	mov	r9, r8
 8012c24:	9104      	str	r1, [sp, #16]
 8012c26:	2100      	movs	r1, #0
 8012c28:	9505      	str	r5, [sp, #20]
 8012c2a:	e04d      	b.n	8012cc8 <D16_GENERIC+0xd4>
 8012c2c:	5d87      	ldrb	r7, [r0, r6]
 8012c2e:	7805      	ldrb	r5, [r0, #0]
 8012c30:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8012c34:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 8012c38:	b2fe      	uxtb	r6, r7
 8012c3a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8012c3e:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 8012c42:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
 8012c46:	441d      	add	r5, r3
 8012c48:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 8012c4c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8012c50:	f3c3 0609 	ubfx	r6, r3, #0, #10
 8012c54:	0a9b      	lsrs	r3, r3, #10
 8012c56:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 8012c5a:	4d27      	ldr	r5, [pc, #156]	; (8012cf8 <D16_GENERIC+0x104>)
 8012c5c:	fb26 c505 	smlad	r5, r6, r5, ip
 8012c60:	4f26      	ldr	r7, [pc, #152]	; (8012cfc <D16_GENERIC+0x108>)
 8012c62:	fb26 fc07 	smuad	ip, r6, r7
 8012c66:	9e04      	ldr	r6, [sp, #16]
 8012c68:	f101 0801 	add.w	r8, r1, #1
 8012c6c:	f5a5 6500 	sub.w	r5, r5, #2048	; 0x800
 8012c70:	b1ae      	cbz	r6, 8012c9e <D16_GENERIC+0xaa>
 8012c72:	442c      	add	r4, r5
 8012c74:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8012c78:	eba4 040a 	sub.w	r4, r4, sl
 8012c7c:	46aa      	mov	sl, r5
 8012c7e:	17e7      	asrs	r7, r4, #31
 8012c80:	fba4 450b 	umull	r4, r5, r4, fp
 8012c84:	e9cd 4500 	strd	r4, r5, [sp]
 8012c88:	fb0b 5407 	mla	r4, fp, r7, r5
 8012c8c:	9401      	str	r4, [sp, #4]
 8012c8e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8012c92:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8012c96:	f145 0500 	adc.w	r5, r5, #0
 8012c9a:	006c      	lsls	r4, r5, #1
 8012c9c:	4625      	mov	r5, r4
 8012c9e:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8012ca2:	042d      	lsls	r5, r5, #16
 8012ca4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012ca8:	2700      	movs	r7, #0
 8012caa:	fb01 fb0b 	mul.w	fp, r1, fp
 8012cae:	fa1f f188 	uxth.w	r1, r8
 8012cb2:	fbc9 6705 	smlal	r6, r7, r9, r5
 8012cb6:	9e03      	ldr	r6, [sp, #12]
 8012cb8:	10bd      	asrs	r5, r7, #2
 8012cba:	f305 050f 	ssat	r5, #16, r5
 8012cbe:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8012cc2:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8012cc4:	428d      	cmp	r5, r1
 8012cc6:	d90a      	bls.n	8012cde <D16_GENERIC+0xea>
 8012cc8:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8012cca:	2d01      	cmp	r5, #1
 8012ccc:	b2ee      	uxtb	r6, r5
 8012cce:	d1ad      	bne.n	8012c2c <D16_GENERIC+0x38>
 8012cd0:	9d05      	ldr	r5, [sp, #20]
 8012cd2:	f850 7b02 	ldr.w	r7, [r0], #2
 8012cd6:	2d00      	cmp	r5, #0
 8012cd8:	d0ae      	beq.n	8012c38 <D16_GENERIC+0x44>
 8012cda:	ba7f      	rev16	r7, r7
 8012cdc:	e7ac      	b.n	8012c38 <D16_GENERIC+0x44>
 8012cde:	2000      	movs	r0, #0
 8012ce0:	9906      	ldr	r1, [sp, #24]
 8012ce2:	61d3      	str	r3, [r2, #28]
 8012ce4:	9b07      	ldr	r3, [sp, #28]
 8012ce6:	f8c2 c008 	str.w	ip, [r2, #8]
 8012cea:	60d1      	str	r1, [r2, #12]
 8012cec:	6193      	str	r3, [r2, #24]
 8012cee:	e9c2 4a04 	strd	r4, sl, [r2, #16]
 8012cf2:	b009      	add	sp, #36	; 0x24
 8012cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cf8:	00030001 	.word	0x00030001
 8012cfc:	00010003 	.word	0x00010003
 8012d00:	24000000 	.word	0x24000000

08012d04 <D24_GENERIC>:
 8012d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d08:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8012d0c:	b089      	sub	sp, #36	; 0x24
 8012d0e:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8012d10:	9303      	str	r3, [sp, #12]
 8012d12:	6993      	ldr	r3, [r2, #24]
 8012d14:	9104      	str	r1, [sp, #16]
 8012d16:	9307      	str	r3, [sp, #28]
 8012d18:	69d1      	ldr	r1, [r2, #28]
 8012d1a:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8012d1e:	e9d2 a50c 	ldrd	sl, r5, [r2, #48]	; 0x30
 8012d22:	2e00      	cmp	r6, #0
 8012d24:	f000 8088 	beq.w	8012e38 <D24_GENERIC+0x134>
 8012d28:	f005 0620 	and.w	r6, r5, #32
 8012d2c:	f005 0510 	and.w	r5, r5, #16
 8012d30:	f04f 0c00 	mov.w	ip, #0
 8012d34:	f8df e140 	ldr.w	lr, [pc, #320]	; 8012e78 <D24_GENERIC+0x174>
 8012d38:	9606      	str	r6, [sp, #24]
 8012d3a:	9505      	str	r5, [sp, #20]
 8012d3c:	e064      	b.n	8012e08 <D24_GENERIC+0x104>
 8012d3e:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8012d42:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8012d46:	f810 b007 	ldrb.w	fp, [r0, r7]
 8012d4a:	042d      	lsls	r5, r5, #16
 8012d4c:	19f0      	adds	r0, r6, r7
 8012d4e:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 8012d52:	44a9      	add	r9, r5
 8012d54:	fa5f f689 	uxtb.w	r6, r9
 8012d58:	f3c9 2707 	ubfx	r7, r9, #8, #8
 8012d5c:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8012d60:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 8012d64:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 8012d68:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 8012d6c:	f85e 1029 	ldr.w	r1, [lr, r9, lsl #2]
 8012d70:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8012d74:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8012d78:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8012d7c:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8012d80:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8012d84:	4d3a      	ldr	r5, [pc, #232]	; (8012e70 <D24_GENERIC+0x16c>)
 8012d86:	fb26 8705 	smlad	r7, r6, r5, r8
 8012d8a:	4d3a      	ldr	r5, [pc, #232]	; (8012e74 <D24_GENERIC+0x170>)
 8012d8c:	fb26 3805 	smlad	r8, r6, r5, r3
 8012d90:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8012d94:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8012d98:	2301      	movs	r3, #1
 8012d9a:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 8012d9e:	fb26 f603 	smuad	r6, r6, r3
 8012da2:	eb0c 0903 	add.w	r9, ip, r3
 8012da6:	eb0b 0306 	add.w	r3, fp, r6
 8012daa:	9e05      	ldr	r6, [sp, #20]
 8012dac:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8012db0:	b1ae      	cbz	r6, 8012dde <D24_GENERIC+0xda>
 8012db2:	442c      	add	r4, r5
 8012db4:	9e03      	ldr	r6, [sp, #12]
 8012db6:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8012dba:	1ba4      	subs	r4, r4, r6
 8012dbc:	9503      	str	r5, [sp, #12]
 8012dbe:	17e7      	asrs	r7, r4, #31
 8012dc0:	fba4 450b 	umull	r4, r5, r4, fp
 8012dc4:	e9cd 4500 	strd	r4, r5, [sp]
 8012dc8:	fb0b 5407 	mla	r4, fp, r7, r5
 8012dcc:	9401      	str	r4, [sp, #4]
 8012dce:	e9dd 4500 	ldrd	r4, r5, [sp]
 8012dd2:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8012dd6:	f145 0500 	adc.w	r5, r5, #0
 8012dda:	006c      	lsls	r4, r5, #1
 8012ddc:	4625      	mov	r5, r4
 8012dde:	f8b2 b028 	ldrh.w	fp, [r2, #40]	; 0x28
 8012de2:	03ad      	lsls	r5, r5, #14
 8012de4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012de8:	2700      	movs	r7, #0
 8012dea:	fb0c fb0b 	mul.w	fp, ip, fp
 8012dee:	fa1f fc89 	uxth.w	ip, r9
 8012df2:	fbca 6705 	smlal	r6, r7, sl, r5
 8012df6:	9e04      	ldr	r6, [sp, #16]
 8012df8:	10bd      	asrs	r5, r7, #2
 8012dfa:	f305 050f 	ssat	r5, #16, r5
 8012dfe:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8012e02:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8012e04:	4565      	cmp	r5, ip
 8012e06:	d917      	bls.n	8012e38 <D24_GENERIC+0x134>
 8012e08:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8012e0a:	f890 9000 	ldrb.w	r9, [r0]
 8012e0e:	b2ef      	uxtb	r7, r5
 8012e10:	2d01      	cmp	r5, #1
 8012e12:	b23e      	sxth	r6, r7
 8012e14:	d193      	bne.n	8012d3e <D24_GENERIC+0x3a>
 8012e16:	9d06      	ldr	r5, [sp, #24]
 8012e18:	b1dd      	cbz	r5, 8012e52 <D24_GENERIC+0x14e>
 8012e1a:	78c7      	ldrb	r7, [r0, #3]
 8012e1c:	ea4f 2609 	mov.w	r6, r9, lsl #8
 8012e20:	f01c 0f01 	tst.w	ip, #1
 8012e24:	ea4f 2507 	mov.w	r5, r7, lsl #8
 8012e28:	eb06 4607 	add.w	r6, r6, r7, lsl #16
 8012e2c:	d11a      	bne.n	8012e64 <D24_GENERIC+0x160>
 8012e2e:	f890 9001 	ldrb.w	r9, [r0, #1]
 8012e32:	3002      	adds	r0, #2
 8012e34:	44b1      	add	r9, r6
 8012e36:	e78d      	b.n	8012d54 <D24_GENERIC+0x50>
 8012e38:	6093      	str	r3, [r2, #8]
 8012e3a:	2000      	movs	r0, #0
 8012e3c:	9b03      	ldr	r3, [sp, #12]
 8012e3e:	f8c2 800c 	str.w	r8, [r2, #12]
 8012e42:	6153      	str	r3, [r2, #20]
 8012e44:	9b07      	ldr	r3, [sp, #28]
 8012e46:	61d1      	str	r1, [r2, #28]
 8012e48:	6114      	str	r4, [r2, #16]
 8012e4a:	6193      	str	r3, [r2, #24]
 8012e4c:	b009      	add	sp, #36	; 0x24
 8012e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e52:	7845      	ldrb	r5, [r0, #1]
 8012e54:	3003      	adds	r0, #3
 8012e56:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 8012e5a:	022d      	lsls	r5, r5, #8
 8012e5c:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8012e60:	44a9      	add	r9, r5
 8012e62:	e777      	b.n	8012d54 <D24_GENERIC+0x50>
 8012e64:	7886      	ldrb	r6, [r0, #2]
 8012e66:	3004      	adds	r0, #4
 8012e68:	eb05 4506 	add.w	r5, r5, r6, lsl #16
 8012e6c:	44a9      	add	r9, r5
 8012e6e:	e771      	b.n	8012d54 <D24_GENERIC+0x50>
 8012e70:	00030001 	.word	0x00030001
 8012e74:	00060007 	.word	0x00060007
 8012e78:	24000000 	.word	0x24000000

08012e7c <D32_GENERIC>:
 8012e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e80:	e9d2 4304 	ldrd	r4, r3, [r2, #16]
 8012e84:	b089      	sub	sp, #36	; 0x24
 8012e86:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8012e88:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8012e8a:	9302      	str	r3, [sp, #8]
 8012e8c:	6993      	ldr	r3, [r2, #24]
 8012e8e:	9104      	str	r1, [sp, #16]
 8012e90:	9307      	str	r3, [sp, #28]
 8012e92:	9503      	str	r5, [sp, #12]
 8012e94:	69d1      	ldr	r1, [r2, #28]
 8012e96:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8012e98:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8012e9c:	2e00      	cmp	r6, #0
 8012e9e:	f000 8097 	beq.w	8012fd0 <D32_GENERIC+0x154>
 8012ea2:	f005 0620 	and.w	r6, r5, #32
 8012ea6:	f005 0510 	and.w	r5, r5, #16
 8012eaa:	f04f 0e00 	mov.w	lr, #0
 8012eae:	f8df c150 	ldr.w	ip, [pc, #336]	; 8013000 <D32_GENERIC+0x184>
 8012eb2:	9606      	str	r6, [sp, #24]
 8012eb4:	9505      	str	r5, [sp, #20]
 8012eb6:	e079      	b.n	8012fac <D32_GENERIC+0x130>
 8012eb8:	783d      	ldrb	r5, [r7, #0]
 8012eba:	f810 b009 	ldrb.w	fp, [r0, r9]
 8012ebe:	042d      	lsls	r5, r5, #16
 8012ec0:	f810 a006 	ldrb.w	sl, [r0, r6]
 8012ec4:	f890 9000 	ldrb.w	r9, [r0]
 8012ec8:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 8012ecc:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 8012ed0:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 8012ed4:	44a9      	add	r9, r5
 8012ed6:	fa5f f789 	uxtb.w	r7, r9
 8012eda:	f3c9 2507 	ubfx	r5, r9, #8, #8
 8012ede:	f3c9 4607 	ubfx	r6, r9, #16, #8
 8012ee2:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8012ee6:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 8012eea:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8012eee:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 8012ef2:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 8012ef6:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
 8012efa:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8012efe:	f3c1 0909 	ubfx	r9, r1, #0, #10
 8012f02:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8012f06:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8012f0a:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 8012f0e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8012f12:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 8012f16:	f3c1 0509 	ubfx	r5, r1, #0, #10
 8012f1a:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8012f1e:	4d34      	ldr	r5, [pc, #208]	; (8012ff0 <D32_GENERIC+0x174>)
 8012f20:	fb29 8805 	smlad	r8, r9, r5, r8
 8012f24:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8012f28:	fb26 8705 	smlad	r7, r6, r5, r8
 8012f2c:	4d31      	ldr	r5, [pc, #196]	; (8012ff4 <D32_GENERIC+0x178>)
 8012f2e:	fb29 3305 	smlad	r3, r9, r5, r3
 8012f32:	4d31      	ldr	r5, [pc, #196]	; (8012ff8 <D32_GENERIC+0x17c>)
 8012f34:	fb26 3805 	smlad	r8, r6, r5, r3
 8012f38:	2301      	movs	r3, #1
 8012f3a:	fb29 f903 	smuad	r9, r9, r3
 8012f3e:	4b2f      	ldr	r3, [pc, #188]	; (8012ffc <D32_GENERIC+0x180>)
 8012f40:	fb26 9303 	smlad	r3, r6, r3, r9
 8012f44:	9e05      	ldr	r6, [sp, #20]
 8012f46:	f10e 0901 	add.w	r9, lr, #1
 8012f4a:	f5a7 4580 	sub.w	r5, r7, #16384	; 0x4000
 8012f4e:	b1ae      	cbz	r6, 8012f7c <D32_GENERIC+0x100>
 8012f50:	442c      	add	r4, r5
 8012f52:	9e02      	ldr	r6, [sp, #8]
 8012f54:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8012f58:	1ba4      	subs	r4, r4, r6
 8012f5a:	9502      	str	r5, [sp, #8]
 8012f5c:	17e7      	asrs	r7, r4, #31
 8012f5e:	fba4 450a 	umull	r4, r5, r4, sl
 8012f62:	e9cd 4500 	strd	r4, r5, [sp]
 8012f66:	fb0a 5407 	mla	r4, sl, r7, r5
 8012f6a:	9401      	str	r4, [sp, #4]
 8012f6c:	e9dd 4500 	ldrd	r4, r5, [sp]
 8012f70:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8012f74:	f145 0500 	adc.w	r5, r5, #0
 8012f78:	006c      	lsls	r4, r5, #1
 8012f7a:	4625      	mov	r5, r4
 8012f7c:	f8b2 a028 	ldrh.w	sl, [r2, #40]	; 0x28
 8012f80:	036d      	lsls	r5, r5, #13
 8012f82:	9f03      	ldr	r7, [sp, #12]
 8012f84:	fb0e fb0a 	mul.w	fp, lr, sl
 8012f88:	fa1f fe89 	uxth.w	lr, r9
 8012f8c:	f04f 0a00 	mov.w	sl, #0
 8012f90:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8012f94:	9e04      	ldr	r6, [sp, #16]
 8012f96:	fbc7 9a05 	smlal	r9, sl, r7, r5
 8012f9a:	4657      	mov	r7, sl
 8012f9c:	10bd      	asrs	r5, r7, #2
 8012f9e:	f305 050f 	ssat	r5, #16, r5
 8012fa2:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8012fa6:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8012fa8:	4575      	cmp	r5, lr
 8012faa:	d911      	bls.n	8012fd0 <D32_GENERIC+0x154>
 8012fac:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8012fae:	b2ee      	uxtb	r6, r5
 8012fb0:	2d01      	cmp	r5, #1
 8012fb2:	eb00 0746 	add.w	r7, r0, r6, lsl #1
 8012fb6:	eb06 0946 	add.w	r9, r6, r6, lsl #1
 8012fba:	f47f af7d 	bne.w	8012eb8 <D32_GENERIC+0x3c>
 8012fbe:	1d05      	adds	r5, r0, #4
 8012fc0:	f8d0 9000 	ldr.w	r9, [r0]
 8012fc4:	9806      	ldr	r0, [sp, #24]
 8012fc6:	b180      	cbz	r0, 8012fea <D32_GENERIC+0x16e>
 8012fc8:	fa99 f999 	rev16.w	r9, r9
 8012fcc:	4628      	mov	r0, r5
 8012fce:	e782      	b.n	8012ed6 <D32_GENERIC+0x5a>
 8012fd0:	6093      	str	r3, [r2, #8]
 8012fd2:	2000      	movs	r0, #0
 8012fd4:	9b02      	ldr	r3, [sp, #8]
 8012fd6:	f8c2 800c 	str.w	r8, [r2, #12]
 8012fda:	6153      	str	r3, [r2, #20]
 8012fdc:	9b07      	ldr	r3, [sp, #28]
 8012fde:	61d1      	str	r1, [r2, #28]
 8012fe0:	6114      	str	r4, [r2, #16]
 8012fe2:	6193      	str	r3, [r2, #24]
 8012fe4:	b009      	add	sp, #36	; 0x24
 8012fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fea:	4628      	mov	r0, r5
 8012fec:	e773      	b.n	8012ed6 <D32_GENERIC+0x5a>
 8012fee:	bf00      	nop
 8012ff0:	00060003 	.word	0x00060003
 8012ff4:	000a000c 	.word	0x000a000c
 8012ff8:	000c000a 	.word	0x000c000a
 8012ffc:	00030006 	.word	0x00030006
 8013000:	24000000 	.word	0x24000000

08013004 <D48_GENERIC>:
 8013004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013008:	6913      	ldr	r3, [r2, #16]
 801300a:	b089      	sub	sp, #36	; 0x24
 801300c:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 801300e:	9301      	str	r3, [sp, #4]
 8013010:	6953      	ldr	r3, [r2, #20]
 8013012:	9104      	str	r1, [sp, #16]
 8013014:	9302      	str	r3, [sp, #8]
 8013016:	6993      	ldr	r3, [r2, #24]
 8013018:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 801301c:	9307      	str	r3, [sp, #28]
 801301e:	e9d2 3102 	ldrd	r3, r1, [r2, #8]
 8013022:	9100      	str	r1, [sp, #0]
 8013024:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8013026:	9103      	str	r1, [sp, #12]
 8013028:	6b51      	ldr	r1, [r2, #52]	; 0x34
 801302a:	2c00      	cmp	r4, #0
 801302c:	f000 80be 	beq.w	80131ac <D48_GENERIC+0x1a8>
 8013030:	f001 0420 	and.w	r4, r1, #32
 8013034:	f001 0110 	and.w	r1, r1, #16
 8013038:	f04f 0e00 	mov.w	lr, #0
 801303c:	9105      	str	r1, [sp, #20]
 801303e:	9406      	str	r4, [sp, #24]
 8013040:	4962      	ldr	r1, [pc, #392]	; (80131cc <D48_GENERIC+0x1c8>)
 8013042:	e0a0      	b.n	8013186 <D48_GENERIC+0x182>
 8013044:	eb00 0608 	add.w	r6, r0, r8
 8013048:	f810 a008 	ldrb.w	sl, [r0, r8]
 801304c:	f810 9005 	ldrb.w	r9, [r0, r5]
 8013050:	5df4      	ldrb	r4, [r6, r7]
 8013052:	443e      	add	r6, r7
 8013054:	f890 b000 	ldrb.w	fp, [r0]
 8013058:	0420      	lsls	r0, r4, #16
 801305a:	eb06 0408 	add.w	r4, r6, r8
 801305e:	f816 6008 	ldrb.w	r6, [r6, r8]
 8013062:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 8013066:	f814 8007 	ldrb.w	r8, [r4, r7]
 801306a:	4427      	add	r7, r4
 801306c:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 8013070:	eb08 2606 	add.w	r6, r8, r6, lsl #8
 8013074:	eb0a 040b 	add.w	r4, sl, fp
 8013078:	eb07 0045 	add.w	r0, r7, r5, lsl #1
 801307c:	f3c6 2807 	ubfx	r8, r6, #8, #8
 8013080:	b2f7      	uxtb	r7, r6
 8013082:	b2e6      	uxtb	r6, r4
 8013084:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8013088:	f3c4 4907 	ubfx	r9, r4, #16, #8
 801308c:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 8013090:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8013094:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8013098:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 801309c:	f851 9029 	ldr.w	r9, [r1, r9, lsl #2]
 80130a0:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 80130a4:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 80130a8:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 80130ac:	f851 c028 	ldr.w	ip, [r1, r8, lsl #2]
 80130b0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80130b4:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 80130b8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80130bc:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 80130c0:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80130c4:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80130c8:	9d00      	ldr	r5, [sp, #0]
 80130ca:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 80130ce:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80130d2:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 80130d6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80130da:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 80130de:	f3cc 0409 	ubfx	r4, ip, #0, #10
 80130e2:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80130e6:	4c3a      	ldr	r4, [pc, #232]	; (80131d0 <D48_GENERIC+0x1cc>)
 80130e8:	fb26 5a04 	smlad	sl, r6, r4, r5
 80130ec:	4c39      	ldr	r4, [pc, #228]	; (80131d4 <D48_GENERIC+0x1d0>)
 80130ee:	fb29 aa04 	smlad	sl, r9, r4, sl
 80130f2:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80130f6:	fb27 aa04 	smlad	sl, r7, r4, sl
 80130fa:	4c37      	ldr	r4, [pc, #220]	; (80131d8 <D48_GENERIC+0x1d4>)
 80130fc:	fb26 3304 	smlad	r3, r6, r4, r3
 8013100:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 8013104:	fb29 3304 	smlad	r3, r9, r4, r3
 8013108:	4c34      	ldr	r4, [pc, #208]	; (80131dc <D48_GENERIC+0x1d8>)
 801310a:	fb27 3304 	smlad	r3, r7, r4, r3
 801310e:	2501      	movs	r5, #1
 8013110:	9300      	str	r3, [sp, #0]
 8013112:	fb26 f605 	smuad	r6, r6, r5
 8013116:	4b32      	ldr	r3, [pc, #200]	; (80131e0 <D48_GENERIC+0x1dc>)
 8013118:	fb29 6903 	smlad	r9, r9, r3, r6
 801311c:	4b31      	ldr	r3, [pc, #196]	; (80131e4 <D48_GENERIC+0x1e0>)
 801311e:	fb27 9303 	smlad	r3, r7, r3, r9
 8013122:	9c05      	ldr	r4, [sp, #20]
 8013124:	eb0e 0805 	add.w	r8, lr, r5
 8013128:	f5aa 4a58 	sub.w	sl, sl, #55296	; 0xd800
 801312c:	b19c      	cbz	r4, 8013156 <D48_GENERIC+0x152>
 801312e:	9c01      	ldr	r4, [sp, #4]
 8013130:	9d02      	ldr	r5, [sp, #8]
 8013132:	4454      	add	r4, sl
 8013134:	f8d2 9020 	ldr.w	r9, [r2, #32]
 8013138:	f8cd a008 	str.w	sl, [sp, #8]
 801313c:	1b64      	subs	r4, r4, r5
 801313e:	fba4 ab09 	umull	sl, fp, r4, r9
 8013142:	17e7      	asrs	r7, r4, #31
 8013144:	f11a 4400 	adds.w	r4, sl, #2147483648	; 0x80000000
 8013148:	fb09 bb07 	mla	fp, r9, r7, fp
 801314c:	f14b 0500 	adc.w	r5, fp, #0
 8013150:	006c      	lsls	r4, r5, #1
 8013152:	46a2      	mov	sl, r4
 8013154:	9401      	str	r4, [sp, #4]
 8013156:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8013158:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 801315c:	9d03      	ldr	r5, [sp, #12]
 801315e:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8013162:	fb0e f606 	mul.w	r6, lr, r6
 8013166:	fa1f fe88 	uxth.w	lr, r8
 801316a:	f04f 0800 	mov.w	r8, #0
 801316e:	fbc5 780a 	smlal	r7, r8, r5, sl
 8013172:	4645      	mov	r5, r8
 8013174:	10ac      	asrs	r4, r5, #2
 8013176:	9d04      	ldr	r5, [sp, #16]
 8013178:	f304 040f 	ssat	r4, #16, r4
 801317c:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 8013180:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8013182:	4574      	cmp	r4, lr
 8013184:	d912      	bls.n	80131ac <D48_GENERIC+0x1a8>
 8013186:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8013188:	b2e5      	uxtb	r5, r4
 801318a:	2c01      	cmp	r4, #1
 801318c:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8013190:	f1c5 0700 	rsb	r7, r5, #0
 8013194:	f47f af56 	bne.w	8013044 <D48_GENERIC+0x40>
 8013198:	9d06      	ldr	r5, [sp, #24]
 801319a:	e9d0 4600 	ldrd	r4, r6, [r0]
 801319e:	3006      	adds	r0, #6
 80131a0:	2d00      	cmp	r5, #0
 80131a2:	f43f af6b 	beq.w	801307c <D48_GENERIC+0x78>
 80131a6:	ba64      	rev16	r4, r4
 80131a8:	ba76      	rev16	r6, r6
 80131aa:	e767      	b.n	801307c <D48_GENERIC+0x78>
 80131ac:	6093      	str	r3, [r2, #8]
 80131ae:	2000      	movs	r0, #0
 80131b0:	9b00      	ldr	r3, [sp, #0]
 80131b2:	f8c2 c01c 	str.w	ip, [r2, #28]
 80131b6:	60d3      	str	r3, [r2, #12]
 80131b8:	9b01      	ldr	r3, [sp, #4]
 80131ba:	6113      	str	r3, [r2, #16]
 80131bc:	9b02      	ldr	r3, [sp, #8]
 80131be:	6153      	str	r3, [r2, #20]
 80131c0:	9b07      	ldr	r3, [sp, #28]
 80131c2:	6193      	str	r3, [r2, #24]
 80131c4:	b009      	add	sp, #36	; 0x24
 80131c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131ca:	bf00      	nop
 80131cc:	24000000 	.word	0x24000000
 80131d0:	000f000a 	.word	0x000f000a
 80131d4:	00060003 	.word	0x00060003
 80131d8:	00150019 	.word	0x00150019
 80131dc:	00190015 	.word	0x00190015
 80131e0:	00030006 	.word	0x00030006
 80131e4:	000a000f 	.word	0x000a000f

080131e8 <D64_GENERIC>:
 80131e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131ec:	6913      	ldr	r3, [r2, #16]
 80131ee:	b089      	sub	sp, #36	; 0x24
 80131f0:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80131f2:	9300      	str	r3, [sp, #0]
 80131f4:	6953      	ldr	r3, [r2, #20]
 80131f6:	9105      	str	r1, [sp, #20]
 80131f8:	9303      	str	r3, [sp, #12]
 80131fa:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 80131fc:	6993      	ldr	r3, [r2, #24]
 80131fe:	69d4      	ldr	r4, [r2, #28]
 8013200:	9307      	str	r3, [sp, #28]
 8013202:	9504      	str	r5, [sp, #16]
 8013204:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
 8013208:	2900      	cmp	r1, #0
 801320a:	f000 80e8 	beq.w	80133de <D64_GENERIC+0x1f6>
 801320e:	6a11      	ldr	r1, [r2, #32]
 8013210:	2500      	movs	r5, #0
 8013212:	46b3      	mov	fp, r6
 8013214:	9302      	str	r3, [sp, #8]
 8013216:	9106      	str	r1, [sp, #24]
 8013218:	4978      	ldr	r1, [pc, #480]	; (80133fc <D64_GENERIC+0x214>)
 801321a:	e0cc      	b.n	80133b6 <D64_GENERIC+0x1ce>
 801321c:	eb0e 084e 	add.w	r8, lr, lr, lsl #1
 8013220:	f1ce 0c00 	rsb	ip, lr, #0
 8013224:	f890 9000 	ldrb.w	r9, [r0]
 8013228:	eb00 0708 	add.w	r7, r0, r8
 801322c:	f810 6008 	ldrb.w	r6, [r0, r8]
 8013230:	eb07 0a4c 	add.w	sl, r7, ip, lsl #1
 8013234:	f817 000c 	ldrb.w	r0, [r7, ip]
 8013238:	f817 301c 	ldrb.w	r3, [r7, ip, lsl #1]
 801323c:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 8013240:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 8013244:	ea4f 4800 	mov.w	r8, r0, lsl #16
 8013248:	f817 000c 	ldrb.w	r0, [r7, ip]
 801324c:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 8013250:	f817 801c 	ldrb.w	r8, [r7, ip, lsl #1]
 8013254:	0400      	lsls	r0, r0, #16
 8013256:	4467      	add	r7, ip
 8013258:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 801325c:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8013260:	f817 a01c 	ldrb.w	sl, [r7, ip, lsl #1]
 8013264:	eb07 074c 	add.w	r7, r7, ip, lsl #1
 8013268:	444e      	add	r6, r9
 801326a:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 801326e:	eb07 008e 	add.w	r0, r7, lr, lsl #2
 8013272:	44c2      	add	sl, r8
 8013274:	b2f7      	uxtb	r7, r6
 8013276:	f3c6 2807 	ubfx	r8, r6, #8, #8
 801327a:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801327e:	0e36      	lsrs	r6, r6, #24
 8013280:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8013284:	fa5f fc8a 	uxtb.w	ip, sl
 8013288:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 801328c:	f3ca 2907 	ubfx	r9, sl, #8, #8
 8013290:	443c      	add	r4, r7
 8013292:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
 8013296:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801329a:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 801329e:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 80132a2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80132a6:	4b56      	ldr	r3, [pc, #344]	; (8013400 <D64_GENERIC+0x218>)
 80132a8:	eb07 2e98 	add.w	lr, r7, r8, lsr #10
 80132ac:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80132b0:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 80132b4:	eb06 269e 	add.w	r6, r6, lr, lsr #10
 80132b8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80132bc:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 80132c0:	f3ca 4407 	ubfx	r4, sl, #16, #8
 80132c4:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 80132c8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80132cc:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80132d0:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 80132d4:	eb07 279c 	add.w	r7, r7, ip, lsr #10
 80132d8:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80132dc:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 80132e0:	ea46 460e 	orr.w	r6, r6, lr, lsl #16
 80132e4:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 80132e8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80132ec:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 80132f0:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80132f4:	ea47 4c0c 	orr.w	ip, r7, ip, lsl #16
 80132f8:	f3c9 0709 	ubfx	r7, r9, #0, #10
 80132fc:	ea4f 2499 	mov.w	r4, r9, lsr #10
 8013300:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 8013304:	fb28 b903 	smlad	r9, r8, r3, fp
 8013308:	4b3e      	ldr	r3, [pc, #248]	; (8013404 <D64_GENERIC+0x21c>)
 801330a:	fb26 9903 	smlad	r9, r6, r3, r9
 801330e:	4b3e      	ldr	r3, [pc, #248]	; (8013408 <D64_GENERIC+0x220>)
 8013310:	fb2c 9703 	smlad	r7, ip, r3, r9
 8013314:	f44f 3980 	mov.w	r9, #65536	; 0x10000
 8013318:	fb2a 7909 	smlad	r9, sl, r9, r7
 801331c:	4f3b      	ldr	r7, [pc, #236]	; (801340c <D64_GENERIC+0x224>)
 801331e:	9b02      	ldr	r3, [sp, #8]
 8013320:	fb28 3307 	smlad	r3, r8, r7, r3
 8013324:	fb2a 3317 	smladx	r3, sl, r7, r3
 8013328:	4f39      	ldr	r7, [pc, #228]	; (8013410 <D64_GENERIC+0x228>)
 801332a:	fb26 3307 	smlad	r3, r6, r7, r3
 801332e:	fb2c 3b17 	smladx	fp, ip, r7, r3
 8013332:	f04f 0e01 	mov.w	lr, #1
 8013336:	fb28 f80e 	smuad	r8, r8, lr
 801333a:	4b36      	ldr	r3, [pc, #216]	; (8013414 <D64_GENERIC+0x22c>)
 801333c:	fb26 8603 	smlad	r6, r6, r3, r8
 8013340:	4b35      	ldr	r3, [pc, #212]	; (8013418 <D64_GENERIC+0x230>)
 8013342:	fb2c 6c03 	smlad	ip, ip, r3, r6
 8013346:	4b35      	ldr	r3, [pc, #212]	; (801341c <D64_GENERIC+0x234>)
 8013348:	fb2a c303 	smlad	r3, sl, r3, ip
 801334c:	9f06      	ldr	r7, [sp, #24]
 801334e:	f5a9 3900 	sub.w	r9, r9, #131072	; 0x20000
 8013352:	9302      	str	r3, [sp, #8]
 8013354:	b1cf      	cbz	r7, 801338a <D64_GENERIC+0x1a2>
 8013356:	9b00      	ldr	r3, [sp, #0]
 8013358:	444b      	add	r3, r9
 801335a:	461e      	mov	r6, r3
 801335c:	9b03      	ldr	r3, [sp, #12]
 801335e:	f8cd 900c 	str.w	r9, [sp, #12]
 8013362:	1af6      	subs	r6, r6, r3
 8013364:	46b0      	mov	r8, r6
 8013366:	ea4f 79e6 	mov.w	r9, r6, asr #31
 801336a:	e9cd 8900 	strd	r8, r9, [sp]
 801336e:	fba6 8907 	umull	r8, r9, r6, r7
 8013372:	9e01      	ldr	r6, [sp, #4]
 8013374:	fb07 9306 	mla	r3, r7, r6, r9
 8013378:	4646      	mov	r6, r8
 801337a:	f116 4600 	adds.w	r6, r6, #2147483648	; 0x80000000
 801337e:	f143 0700 	adc.w	r7, r3, #0
 8013382:	fa07 f30e 	lsl.w	r3, r7, lr
 8013386:	4699      	mov	r9, r3
 8013388:	9300      	str	r3, [sp, #0]
 801338a:	f8b2 c028 	ldrh.w	ip, [r2, #40]	; 0x28
 801338e:	ea4f 2989 	mov.w	r9, r9, lsl #10
 8013392:	9b04      	ldr	r3, [sp, #16]
 8013394:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8013398:	2700      	movs	r7, #0
 801339a:	fb05 fc0c 	mul.w	ip, r5, ip
 801339e:	3501      	adds	r5, #1
 80133a0:	fbc3 6709 	smlal	r6, r7, r3, r9
 80133a4:	9b05      	ldr	r3, [sp, #20]
 80133a6:	10be      	asrs	r6, r7, #2
 80133a8:	f306 060f 	ssat	r6, #16, r6
 80133ac:	f823 601c 	strh.w	r6, [r3, ip, lsl #1]
 80133b0:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 80133b2:	42ae      	cmp	r6, r5
 80133b4:	dd11      	ble.n	80133da <D64_GENERIC+0x1f2>
 80133b6:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	; 0x2a
 80133ba:	f1be 0f01 	cmp.w	lr, #1
 80133be:	f47f af2d 	bne.w	801321c <D64_GENERIC+0x34>
 80133c2:	6b57      	ldr	r7, [r2, #52]	; 0x34
 80133c4:	f100 0c08 	add.w	ip, r0, #8
 80133c8:	06bb      	lsls	r3, r7, #26
 80133ca:	e9d0 6a00 	ldrd	r6, sl, [r0]
 80133ce:	d513      	bpl.n	80133f8 <D64_GENERIC+0x210>
 80133d0:	ba76      	rev16	r6, r6
 80133d2:	fa9a fa9a 	rev16.w	sl, sl
 80133d6:	4660      	mov	r0, ip
 80133d8:	e74c      	b.n	8013274 <D64_GENERIC+0x8c>
 80133da:	465e      	mov	r6, fp
 80133dc:	9b02      	ldr	r3, [sp, #8]
 80133de:	6093      	str	r3, [r2, #8]
 80133e0:	2000      	movs	r0, #0
 80133e2:	9b00      	ldr	r3, [sp, #0]
 80133e4:	60d6      	str	r6, [r2, #12]
 80133e6:	6113      	str	r3, [r2, #16]
 80133e8:	9b03      	ldr	r3, [sp, #12]
 80133ea:	61d4      	str	r4, [r2, #28]
 80133ec:	6153      	str	r3, [r2, #20]
 80133ee:	9b07      	ldr	r3, [sp, #28]
 80133f0:	6193      	str	r3, [r2, #24]
 80133f2:	b009      	add	sp, #36	; 0x24
 80133f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133f8:	4660      	mov	r0, ip
 80133fa:	e73b      	b.n	8013274 <D64_GENERIC+0x8c>
 80133fc:	24000000 	.word	0x24000000
 8013400:	001c0015 	.word	0x001c0015
 8013404:	000f000a 	.word	0x000f000a
 8013408:	00060003 	.word	0x00060003
 801340c:	0024002a 	.word	0x0024002a
 8013410:	002e0030 	.word	0x002e0030
 8013414:	00030006 	.word	0x00030006
 8013418:	000a000f 	.word	0x000a000f
 801341c:	0015001c 	.word	0x0015001c

08013420 <D80_GENERIC>:
 8013420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013424:	b08b      	sub	sp, #44	; 0x2c
 8013426:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8013428:	9107      	str	r1, [sp, #28]
 801342a:	6911      	ldr	r1, [r2, #16]
 801342c:	9104      	str	r1, [sp, #16]
 801342e:	6951      	ldr	r1, [r2, #20]
 8013430:	9105      	str	r1, [sp, #20]
 8013432:	6991      	ldr	r1, [r2, #24]
 8013434:	9109      	str	r1, [sp, #36]	; 0x24
 8013436:	69d1      	ldr	r1, [r2, #28]
 8013438:	9102      	str	r1, [sp, #8]
 801343a:	6891      	ldr	r1, [r2, #8]
 801343c:	9103      	str	r1, [sp, #12]
 801343e:	68d1      	ldr	r1, [r2, #12]
 8013440:	9101      	str	r1, [sp, #4]
 8013442:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8013444:	9106      	str	r1, [sp, #24]
 8013446:	2b00      	cmp	r3, #0
 8013448:	f000 810b 	beq.w	8013662 <D80_GENERIC+0x242>
 801344c:	6a13      	ldr	r3, [r2, #32]
 801344e:	f04f 0800 	mov.w	r8, #0
 8013452:	f8df c260 	ldr.w	ip, [pc, #608]	; 80136b4 <D80_GENERIC+0x294>
 8013456:	9308      	str	r3, [sp, #32]
 8013458:	9200      	str	r2, [sp, #0]
 801345a:	e0ee      	b.n	801363a <D80_GENERIC+0x21a>
 801345c:	b2db      	uxtb	r3, r3
 801345e:	f890 e000 	ldrb.w	lr, [r0]
 8013462:	b219      	sxth	r1, r3
 8013464:	425c      	negs	r4, r3
 8013466:	f810 9003 	ldrb.w	r9, [r0, r3]
 801346a:	004e      	lsls	r6, r1, #1
 801346c:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8013470:	4431      	add	r1, r6
 8013472:	1843      	adds	r3, r0, r1
 8013474:	f810 b001 	ldrb.w	fp, [r0, r1]
 8013478:	1919      	adds	r1, r3, r4
 801347a:	5d1b      	ldrb	r3, [r3, r4]
 801347c:	1948      	adds	r0, r1, r5
 801347e:	f811 a005 	ldrb.w	sl, [r1, r5]
 8013482:	041b      	lsls	r3, r3, #16
 8013484:	1907      	adds	r7, r0, r4
 8013486:	5d01      	ldrb	r1, [r0, r4]
 8013488:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 801348c:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 8013490:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 8013494:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 8013498:	0409      	lsls	r1, r1, #16
 801349a:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 801349e:	eb0b 0905 	add.w	r9, fp, r5
 80134a2:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 80134a6:	f81b 5005 	ldrb.w	r5, [fp, r5]
 80134aa:	eb09 0b04 	add.w	fp, r9, r4
 80134ae:	f819 4004 	ldrb.w	r4, [r9, r4]
 80134b2:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80134b6:	4473      	add	r3, lr
 80134b8:	eb0b 0006 	add.w	r0, fp, r6
 80134bc:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 80134c0:	4439      	add	r1, r7
 80134c2:	f3c3 2407 	ubfx	r4, r3, #8, #8
 80134c6:	b2df      	uxtb	r7, r3
 80134c8:	f3c3 4607 	ubfx	r6, r3, #16, #8
 80134cc:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80134d0:	f85c 3027 	ldr.w	r3, [ip, r7, lsl #2]
 80134d4:	fa5f fa81 	uxtb.w	sl, r1
 80134d8:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 80134dc:	9c02      	ldr	r4, [sp, #8]
 80134de:	f85c 9026 	ldr.w	r9, [ip, r6, lsl #2]
 80134e2:	441c      	add	r4, r3
 80134e4:	f85c 602e 	ldr.w	r6, [ip, lr, lsl #2]
 80134e8:	f85c e02a 	ldr.w	lr, [ip, sl, lsl #2]
 80134ec:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80134f0:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 80134f4:	f3c4 0309 	ubfx	r3, r4, #0, #10
 80134f8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80134fc:	b2ed      	uxtb	r5, r5
 80134fe:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8013502:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8013506:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 801350a:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 801350e:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8013512:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8013516:	f3c1 4707 	ubfx	r7, r1, #16, #8
 801351a:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 801351e:	f85c a02a 	ldr.w	sl, [ip, sl, lsl #2]
 8013522:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 8013526:	0e09      	lsrs	r1, r1, #24
 8013528:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 801352c:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8013530:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8013534:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8013538:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 801353c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8013540:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8013544:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8013548:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801354c:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 8013550:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8013554:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8013558:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 801355c:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8013560:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8013564:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8013568:	ea4f 229a 	mov.w	r2, sl, lsr #10
 801356c:	f3ca 0709 	ubfx	r7, sl, #0, #10
 8013570:	9202      	str	r2, [sp, #8]
 8013572:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8013576:	4a43      	ldr	r2, [pc, #268]	; (8013684 <D80_GENERIC+0x264>)
 8013578:	9f01      	ldr	r7, [sp, #4]
 801357a:	fb23 7a02 	smlad	sl, r3, r2, r7
 801357e:	4a42      	ldr	r2, [pc, #264]	; (8013688 <D80_GENERIC+0x268>)
 8013580:	fb26 aa02 	smlad	sl, r6, r2, sl
 8013584:	4a41      	ldr	r2, [pc, #260]	; (801368c <D80_GENERIC+0x26c>)
 8013586:	fb24 aa02 	smlad	sl, r4, r2, sl
 801358a:	4a41      	ldr	r2, [pc, #260]	; (8013690 <D80_GENERIC+0x270>)
 801358c:	fb21 a702 	smlad	r7, r1, r2, sl
 8013590:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8013594:	fb25 7a0a 	smlad	sl, r5, sl, r7
 8013598:	4a3e      	ldr	r2, [pc, #248]	; (8013694 <D80_GENERIC+0x274>)
 801359a:	9f03      	ldr	r7, [sp, #12]
 801359c:	fb23 7e02 	smlad	lr, r3, r2, r7
 80135a0:	4a3d      	ldr	r2, [pc, #244]	; (8013698 <D80_GENERIC+0x278>)
 80135a2:	fb26 ee02 	smlad	lr, r6, r2, lr
 80135a6:	f04f 174b 	mov.w	r7, #4915275	; 0x4b004b
 80135aa:	fb24 e707 	smlad	r7, r4, r7, lr
 80135ae:	4a3b      	ldr	r2, [pc, #236]	; (801369c <D80_GENERIC+0x27c>)
 80135b0:	fb21 7702 	smlad	r7, r1, r2, r7
 80135b4:	4a3a      	ldr	r2, [pc, #232]	; (80136a0 <D80_GENERIC+0x280>)
 80135b6:	fb25 7202 	smlad	r2, r5, r2, r7
 80135ba:	f04f 0901 	mov.w	r9, #1
 80135be:	9201      	str	r2, [sp, #4]
 80135c0:	fb23 f909 	smuad	r9, r3, r9
 80135c4:	4b37      	ldr	r3, [pc, #220]	; (80136a4 <D80_GENERIC+0x284>)
 80135c6:	fb26 9603 	smlad	r6, r6, r3, r9
 80135ca:	4f37      	ldr	r7, [pc, #220]	; (80136a8 <D80_GENERIC+0x288>)
 80135cc:	fb24 6407 	smlad	r4, r4, r7, r6
 80135d0:	4f36      	ldr	r7, [pc, #216]	; (80136ac <D80_GENERIC+0x28c>)
 80135d2:	fb21 4707 	smlad	r7, r1, r7, r4
 80135d6:	4936      	ldr	r1, [pc, #216]	; (80136b0 <D80_GENERIC+0x290>)
 80135d8:	fb25 7301 	smlad	r3, r5, r1, r7
 80135dc:	9303      	str	r3, [sp, #12]
 80135de:	f5aa 3a7a 	sub.w	sl, sl, #256000	; 0x3e800
 80135e2:	9b08      	ldr	r3, [sp, #32]
 80135e4:	b193      	cbz	r3, 801360c <D80_GENERIC+0x1ec>
 80135e6:	9a04      	ldr	r2, [sp, #16]
 80135e8:	4452      	add	r2, sl
 80135ea:	4614      	mov	r4, r2
 80135ec:	9a05      	ldr	r2, [sp, #20]
 80135ee:	f8cd a014 	str.w	sl, [sp, #20]
 80135f2:	1aa4      	subs	r4, r4, r2
 80135f4:	fba4 1203 	umull	r1, r2, r4, r3
 80135f8:	17e7      	asrs	r7, r4, #31
 80135fa:	f111 4400 	adds.w	r4, r1, #2147483648	; 0x80000000
 80135fe:	fb03 2207 	mla	r2, r3, r7, r2
 8013602:	f142 0500 	adc.w	r5, r2, #0
 8013606:	006b      	lsls	r3, r5, #1
 8013608:	469a      	mov	sl, r3
 801360a:	9304      	str	r3, [sp, #16]
 801360c:	9e00      	ldr	r6, [sp, #0]
 801360e:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 8013612:	9a06      	ldr	r2, [sp, #24]
 8013614:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8013618:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 801361a:	2500      	movs	r5, #0
 801361c:	fb08 f303 	mul.w	r3, r8, r3
 8013620:	fbc2 450a 	smlal	r4, r5, r2, sl
 8013624:	9a07      	ldr	r2, [sp, #28]
 8013626:	f108 0801 	add.w	r8, r8, #1
 801362a:	10a9      	asrs	r1, r5, #2
 801362c:	f301 010f 	ssat	r1, #16, r1
 8013630:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8013634:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8013636:	4543      	cmp	r3, r8
 8013638:	dd12      	ble.n	8013660 <D80_GENERIC+0x240>
 801363a:	9b00      	ldr	r3, [sp, #0]
 801363c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801363e:	2b01      	cmp	r3, #1
 8013640:	f47f af0c 	bne.w	801345c <D80_GENERIC+0x3c>
 8013644:	9b00      	ldr	r3, [sp, #0]
 8013646:	6885      	ldr	r5, [r0, #8]
 8013648:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 801364a:	06b2      	lsls	r2, r6, #26
 801364c:	e9d0 3100 	ldrd	r3, r1, [r0]
 8013650:	f100 000a 	add.w	r0, r0, #10
 8013654:	f57f af35 	bpl.w	80134c2 <D80_GENERIC+0xa2>
 8013658:	ba5b      	rev16	r3, r3
 801365a:	ba49      	rev16	r1, r1
 801365c:	ba6d      	rev16	r5, r5
 801365e:	e730      	b.n	80134c2 <D80_GENERIC+0xa2>
 8013660:	4632      	mov	r2, r6
 8013662:	9b03      	ldr	r3, [sp, #12]
 8013664:	2000      	movs	r0, #0
 8013666:	6093      	str	r3, [r2, #8]
 8013668:	9b01      	ldr	r3, [sp, #4]
 801366a:	60d3      	str	r3, [r2, #12]
 801366c:	9b02      	ldr	r3, [sp, #8]
 801366e:	61d3      	str	r3, [r2, #28]
 8013670:	9b04      	ldr	r3, [sp, #16]
 8013672:	6113      	str	r3, [r2, #16]
 8013674:	9b05      	ldr	r3, [sp, #20]
 8013676:	6153      	str	r3, [r2, #20]
 8013678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801367a:	6193      	str	r3, [r2, #24]
 801367c:	b00b      	add	sp, #44	; 0x2c
 801367e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013682:	bf00      	nop
 8013684:	002d0024 	.word	0x002d0024
 8013688:	001c0015 	.word	0x001c0015
 801368c:	000f000a 	.word	0x000f000a
 8013690:	00060003 	.word	0x00060003
 8013694:	0037003f 	.word	0x0037003f
 8013698:	00450049 	.word	0x00450049
 801369c:	00490045 	.word	0x00490045
 80136a0:	003f0037 	.word	0x003f0037
 80136a4:	00030006 	.word	0x00030006
 80136a8:	000a000f 	.word	0x000a000f
 80136ac:	0015001c 	.word	0x0015001c
 80136b0:	0024002d 	.word	0x0024002d
 80136b4:	24000000 	.word	0x24000000

080136b8 <D128_GENERIC>:
 80136b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136bc:	b08d      	sub	sp, #52	; 0x34
 80136be:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80136c0:	f8d2 a01c 	ldr.w	sl, [r2, #28]
 80136c4:	9109      	str	r1, [sp, #36]	; 0x24
 80136c6:	6911      	ldr	r1, [r2, #16]
 80136c8:	9201      	str	r2, [sp, #4]
 80136ca:	9106      	str	r1, [sp, #24]
 80136cc:	6951      	ldr	r1, [r2, #20]
 80136ce:	9107      	str	r1, [sp, #28]
 80136d0:	6991      	ldr	r1, [r2, #24]
 80136d2:	910b      	str	r1, [sp, #44]	; 0x2c
 80136d4:	6891      	ldr	r1, [r2, #8]
 80136d6:	9103      	str	r1, [sp, #12]
 80136d8:	68d1      	ldr	r1, [r2, #12]
 80136da:	9102      	str	r1, [sp, #8]
 80136dc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80136de:	9108      	str	r1, [sp, #32]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	f000 8183 	beq.w	80139ec <D128_GENERIC+0x334>
 80136e6:	2300      	movs	r3, #0
 80136e8:	6a12      	ldr	r2, [r2, #32]
 80136ea:	4681      	mov	r9, r0
 80136ec:	920a      	str	r2, [sp, #40]	; 0x28
 80136ee:	e9cd a304 	strd	sl, r3, [sp, #16]
 80136f2:	e165      	b.n	80139c0 <D128_GENERIC+0x308>
 80136f4:	b2d2      	uxtb	r2, r2
 80136f6:	f899 b000 	ldrb.w	fp, [r9]
 80136fa:	b213      	sxth	r3, r2
 80136fc:	4255      	negs	r5, r2
 80136fe:	f819 0002 	ldrb.w	r0, [r9, r2]
 8013702:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8013706:	009f      	lsls	r7, r3, #2
 8013708:	eb09 0402 	add.w	r4, r9, r2
 801370c:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 8013710:	f819 8002 	ldrb.w	r8, [r9, r2]
 8013714:	443b      	add	r3, r7
 8013716:	1962      	adds	r2, r4, r5
 8013718:	5d64      	ldrb	r4, [r4, r5]
 801371a:	eb02 0c03 	add.w	ip, r2, r3
 801371e:	0424      	lsls	r4, r4, #16
 8013720:	5cd3      	ldrb	r3, [r2, r3]
 8013722:	eb0c 0e05 	add.w	lr, ip, r5
 8013726:	f81c 9015 	ldrb.w	r9, [ip, r5, lsl #1]
 801372a:	f81c 2005 	ldrb.w	r2, [ip, r5]
 801372e:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 8013732:	eb0e 0c45 	add.w	ip, lr, r5, lsl #1
 8013736:	f81e 8015 	ldrb.w	r8, [lr, r5, lsl #1]
 801373a:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 801373e:	eb0c 0e06 	add.w	lr, ip, r6
 8013742:	f81c a006 	ldrb.w	sl, [ip, r6]
 8013746:	0412      	lsls	r2, r2, #16
 8013748:	445c      	add	r4, fp
 801374a:	eb0e 0c05 	add.w	ip, lr, r5
 801374e:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 8013752:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8013756:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 801375a:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 801375e:	041b      	lsls	r3, r3, #16
 8013760:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 8013764:	eb00 0b06 	add.w	fp, r0, r6
 8013768:	5d80      	ldrb	r0, [r0, r6]
 801376a:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 801376e:	f81b 6005 	ldrb.w	r6, [fp, r5]
 8013772:	eb0b 0a05 	add.w	sl, fp, r5
 8013776:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 801377a:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 801377e:	0436      	lsls	r6, r6, #16
 8013780:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 8013784:	4442      	add	r2, r8
 8013786:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 801378a:	f81a 8015 	ldrb.w	r8, [sl, r5, lsl #1]
 801378e:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8013792:	44b9      	add	r9, r7
 8013794:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 8013798:	4463      	add	r3, ip
 801379a:	eb06 0508 	add.w	r5, r6, r8
 801379e:	b2e7      	uxtb	r7, r4
 80137a0:	f3c4 2607 	ubfx	r6, r4, #8, #8
 80137a4:	499b      	ldr	r1, [pc, #620]	; (8013a14 <D128_GENERIC+0x35c>)
 80137a6:	f3c4 4007 	ubfx	r0, r4, #16, #8
 80137aa:	0e24      	lsrs	r4, r4, #24
 80137ac:	f851 c027 	ldr.w	ip, [r1, r7, lsl #2]
 80137b0:	b2d7      	uxtb	r7, r2
 80137b2:	f851 b026 	ldr.w	fp, [r1, r6, lsl #2]
 80137b6:	f3c2 2607 	ubfx	r6, r2, #8, #8
 80137ba:	9904      	ldr	r1, [sp, #16]
 80137bc:	4461      	add	r1, ip
 80137be:	468c      	mov	ip, r1
 80137c0:	4994      	ldr	r1, [pc, #592]	; (8013a14 <D128_GENERIC+0x35c>)
 80137c2:	eb0b 2b9c 	add.w	fp, fp, ip, lsr #10
 80137c6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80137ca:	f851 8024 	ldr.w	r8, [r1, r4, lsl #2]
 80137ce:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80137d2:	eb00 209b 	add.w	r0, r0, fp, lsr #10
 80137d6:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 80137da:	f851 7026 	ldr.w	r7, [r1, r6, lsl #2]
 80137de:	0e12      	lsrs	r2, r2, #24
 80137e0:	eb08 2890 	add.w	r8, r8, r0, lsr #10
 80137e4:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80137e8:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 80137ec:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80137f0:	eb0e 2e98 	add.w	lr, lr, r8, lsr #10
 80137f4:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80137f8:	b2da      	uxtb	r2, r3
 80137fa:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80137fe:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 8013802:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8013806:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801380a:	ea48 4800 	orr.w	r8, r8, r0, lsl #16
 801380e:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8013812:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8013816:	ea4b 4b0c 	orr.w	fp, fp, ip, lsl #16
 801381a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 801381e:	eb06 269a 	add.w	r6, r6, sl, lsr #10
 8013822:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 8013826:	f3c3 4007 	ubfx	r0, r3, #16, #8
 801382a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801382e:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8013832:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8013836:	f851 4020 	ldr.w	r4, [r1, r0, lsl #2]
 801383a:	0e1b      	lsrs	r3, r3, #24
 801383c:	eb0c 2c92 	add.w	ip, ip, r2, lsr #10
 8013840:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8013844:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8013848:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 801384c:	b2eb      	uxtb	r3, r5
 801384e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8013852:	eb04 2e9c 	add.w	lr, r4, ip, lsr #10
 8013856:	f3cc 0409 	ubfx	r4, ip, #0, #10
 801385a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801385e:	ea46 460a 	orr.w	r6, r6, sl, lsl #16
 8013862:	eb00 209e 	add.w	r0, r0, lr, lsr #10
 8013866:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801386a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801386e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8013872:	eb03 2c90 	add.w	ip, r3, r0, lsr #10
 8013876:	f851 202a 	ldr.w	r2, [r1, sl, lsl #2]
 801387a:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801387e:	ea4f 6a15 	mov.w	sl, r5, lsr #24
 8013882:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8013886:	f3c0 0009 	ubfx	r0, r0, #0, #10
 801388a:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
 801388e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8013892:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 8013896:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 801389a:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 801389e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80138a2:	eb03 2e95 	add.w	lr, r3, r5, lsr #10
 80138a6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80138aa:	ea42 430c 	orr.w	r3, r2, ip, lsl #16
 80138ae:	ea4f 219e 	mov.w	r1, lr, lsr #10
 80138b2:	f3ce 0209 	ubfx	r2, lr, #0, #10
 80138b6:	9104      	str	r1, [sp, #16]
 80138b8:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80138bc:	9902      	ldr	r1, [sp, #8]
 80138be:	4a56      	ldr	r2, [pc, #344]	; (8013a18 <D128_GENERIC+0x360>)
 80138c0:	fb2b 1202 	smlad	r2, fp, r2, r1
 80138c4:	4955      	ldr	r1, [pc, #340]	; (8013a1c <D128_GENERIC+0x364>)
 80138c6:	fb28 2201 	smlad	r2, r8, r1, r2
 80138ca:	4955      	ldr	r1, [pc, #340]	; (8013a20 <D128_GENERIC+0x368>)
 80138cc:	fb27 2201 	smlad	r2, r7, r1, r2
 80138d0:	4954      	ldr	r1, [pc, #336]	; (8013a24 <D128_GENERIC+0x36c>)
 80138d2:	fb26 2201 	smlad	r2, r6, r1, r2
 80138d6:	4954      	ldr	r1, [pc, #336]	; (8013a28 <D128_GENERIC+0x370>)
 80138d8:	fb24 2201 	smlad	r2, r4, r1, r2
 80138dc:	4953      	ldr	r1, [pc, #332]	; (8013a2c <D128_GENERIC+0x374>)
 80138de:	fb20 2201 	smlad	r2, r0, r1, r2
 80138e2:	4953      	ldr	r1, [pc, #332]	; (8013a30 <D128_GENERIC+0x378>)
 80138e4:	fb23 2201 	smlad	r2, r3, r1, r2
 80138e8:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
 80138ec:	fb25 2a0c 	smlad	sl, r5, ip, r2
 80138f0:	4950      	ldr	r1, [pc, #320]	; (8013a34 <D128_GENERIC+0x37c>)
 80138f2:	9a03      	ldr	r2, [sp, #12]
 80138f4:	fb2b 2c01 	smlad	ip, fp, r1, r2
 80138f8:	4a4f      	ldr	r2, [pc, #316]	; (8013a38 <D128_GENERIC+0x380>)
 80138fa:	fb28 ce02 	smlad	lr, r8, r2, ip
 80138fe:	f8df c150 	ldr.w	ip, [pc, #336]	; 8013a50 <D128_GENERIC+0x398>
 8013902:	fb27 ec0c 	smlad	ip, r7, ip, lr
 8013906:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8013a54 <D128_GENERIC+0x39c>
 801390a:	fb26 cc0e 	smlad	ip, r6, lr, ip
 801390e:	f8df e148 	ldr.w	lr, [pc, #328]	; 8013a58 <D128_GENERIC+0x3a0>
 8013912:	fb24 ce0e 	smlad	lr, r4, lr, ip
 8013916:	f8df c144 	ldr.w	ip, [pc, #324]	; 8013a5c <D128_GENERIC+0x3a4>
 801391a:	fb20 ee0c 	smlad	lr, r0, ip, lr
 801391e:	f8df c140 	ldr.w	ip, [pc, #320]	; 8013a60 <D128_GENERIC+0x3a8>
 8013922:	fb23 ec0c 	smlad	ip, r3, ip, lr
 8013926:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8013a64 <D128_GENERIC+0x3ac>
 801392a:	fb25 c20e 	smlad	r2, r5, lr, ip
 801392e:	f04f 0c01 	mov.w	ip, #1
 8013932:	9202      	str	r2, [sp, #8]
 8013934:	fb2b fb0c 	smuad	fp, fp, ip
 8013938:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8013a68 <D128_GENERIC+0x3b0>
 801393c:	fb28 bb0c 	smlad	fp, r8, ip, fp
 8013940:	f8df c128 	ldr.w	ip, [pc, #296]	; 8013a6c <D128_GENERIC+0x3b4>
 8013944:	fb27 bb0c 	smlad	fp, r7, ip, fp
 8013948:	4f3c      	ldr	r7, [pc, #240]	; (8013a3c <D128_GENERIC+0x384>)
 801394a:	fb26 bb07 	smlad	fp, r6, r7, fp
 801394e:	4f3c      	ldr	r7, [pc, #240]	; (8013a40 <D128_GENERIC+0x388>)
 8013950:	fb24 bb07 	smlad	fp, r4, r7, fp
 8013954:	4f3b      	ldr	r7, [pc, #236]	; (8013a44 <D128_GENERIC+0x38c>)
 8013956:	fb20 bb07 	smlad	fp, r0, r7, fp
 801395a:	4f3b      	ldr	r7, [pc, #236]	; (8013a48 <D128_GENERIC+0x390>)
 801395c:	fb23 bb07 	smlad	fp, r3, r7, fp
 8013960:	4b3a      	ldr	r3, [pc, #232]	; (8013a4c <D128_GENERIC+0x394>)
 8013962:	fb25 b303 	smlad	r3, r5, r3, fp
 8013966:	9303      	str	r3, [sp, #12]
 8013968:	f5aa 1480 	sub.w	r4, sl, #1048576	; 0x100000
 801396c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801396e:	b183      	cbz	r3, 8013992 <D128_GENERIC+0x2da>
 8013970:	9a06      	ldr	r2, [sp, #24]
 8013972:	9907      	ldr	r1, [sp, #28]
 8013974:	4422      	add	r2, r4
 8013976:	9407      	str	r4, [sp, #28]
 8013978:	1a52      	subs	r2, r2, r1
 801397a:	fba2 0103 	umull	r0, r1, r2, r3
 801397e:	17d5      	asrs	r5, r2, #31
 8013980:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
 8013984:	fb03 1105 	mla	r1, r3, r5, r1
 8013988:	f141 0300 	adc.w	r3, r1, #0
 801398c:	005b      	lsls	r3, r3, #1
 801398e:	461c      	mov	r4, r3
 8013990:	9306      	str	r3, [sp, #24]
 8013992:	9d01      	ldr	r5, [sp, #4]
 8013994:	01e4      	lsls	r4, r4, #7
 8013996:	9e05      	ldr	r6, [sp, #20]
 8013998:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801399c:	8d28      	ldrh	r0, [r5, #40]	; 0x28
 801399e:	2300      	movs	r3, #0
 80139a0:	9908      	ldr	r1, [sp, #32]
 80139a2:	fb06 f000 	mul.w	r0, r6, r0
 80139a6:	3601      	adds	r6, #1
 80139a8:	fbc1 2304 	smlal	r2, r3, r1, r4
 80139ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80139ae:	109b      	asrs	r3, r3, #2
 80139b0:	9605      	str	r6, [sp, #20]
 80139b2:	f303 030f 	ssat	r3, #16, r3
 80139b6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 80139ba:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 80139bc:	42b3      	cmp	r3, r6
 80139be:	dd13      	ble.n	80139e8 <D128_GENERIC+0x330>
 80139c0:	9b01      	ldr	r3, [sp, #4]
 80139c2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80139c4:	2a01      	cmp	r2, #1
 80139c6:	f47f ae95 	bne.w	80136f4 <D128_GENERIC+0x3c>
 80139ca:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80139cc:	f109 0610 	add.w	r6, r9, #16
 80139d0:	0681      	lsls	r1, r0, #26
 80139d2:	e9d9 4200 	ldrd	r4, r2, [r9]
 80139d6:	e9d9 3502 	ldrd	r3, r5, [r9, #8]
 80139da:	d518      	bpl.n	8013a0e <D128_GENERIC+0x356>
 80139dc:	ba64      	rev16	r4, r4
 80139de:	ba52      	rev16	r2, r2
 80139e0:	ba5b      	rev16	r3, r3
 80139e2:	ba6d      	rev16	r5, r5
 80139e4:	46b1      	mov	r9, r6
 80139e6:	e6da      	b.n	801379e <D128_GENERIC+0xe6>
 80139e8:	f8dd a010 	ldr.w	sl, [sp, #16]
 80139ec:	9b01      	ldr	r3, [sp, #4]
 80139ee:	2000      	movs	r0, #0
 80139f0:	9903      	ldr	r1, [sp, #12]
 80139f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80139f4:	6099      	str	r1, [r3, #8]
 80139f6:	9902      	ldr	r1, [sp, #8]
 80139f8:	f8c3 a01c 	str.w	sl, [r3, #28]
 80139fc:	60d9      	str	r1, [r3, #12]
 80139fe:	9906      	ldr	r1, [sp, #24]
 8013a00:	619a      	str	r2, [r3, #24]
 8013a02:	6119      	str	r1, [r3, #16]
 8013a04:	9907      	ldr	r1, [sp, #28]
 8013a06:	6159      	str	r1, [r3, #20]
 8013a08:	b00d      	add	sp, #52	; 0x34
 8013a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a0e:	46b1      	mov	r9, r6
 8013a10:	e6c5      	b.n	801379e <D128_GENERIC+0xe6>
 8013a12:	bf00      	nop
 8013a14:	24000000 	.word	0x24000000
 8013a18:	00780069 	.word	0x00780069
 8013a1c:	005b004e 	.word	0x005b004e
 8013a20:	00420037 	.word	0x00420037
 8013a24:	002d0024 	.word	0x002d0024
 8013a28:	001c0015 	.word	0x001c0015
 8013a2c:	000f000a 	.word	0x000f000a
 8013a30:	00060003 	.word	0x00060003
 8013a34:	00880096 	.word	0x00880096
 8013a38:	00a200ac 	.word	0x00a200ac
 8013a3c:	0015001c 	.word	0x0015001c
 8013a40:	0024002d 	.word	0x0024002d
 8013a44:	00370042 	.word	0x00370042
 8013a48:	004e005b 	.word	0x004e005b
 8013a4c:	00690078 	.word	0x00690078
 8013a50:	00b400ba 	.word	0x00b400ba
 8013a54:	00be00c0 	.word	0x00be00c0
 8013a58:	00c000be 	.word	0x00c000be
 8013a5c:	00ba00b4 	.word	0x00ba00b4
 8013a60:	00ac00a2 	.word	0x00ac00a2
 8013a64:	00960088 	.word	0x00960088
 8013a68:	00030006 	.word	0x00030006
 8013a6c:	000a000f 	.word	0x000a000f

08013a70 <D16_1CH_HTONS_VOL_HP>:
 8013a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a74:	6993      	ldr	r3, [r2, #24]
 8013a76:	b087      	sub	sp, #28
 8013a78:	4682      	mov	sl, r0
 8013a7a:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8013a7c:	9304      	str	r3, [sp, #16]
 8013a7e:	f8d2 b030 	ldr.w	fp, [r2, #48]	; 0x30
 8013a82:	69d3      	ldr	r3, [r2, #28]
 8013a84:	f8d2 e020 	ldr.w	lr, [r2, #32]
 8013a88:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 8013a8c:	e9d2 6c04 	ldrd	r6, ip, [r2, #16]
 8013a90:	9403      	str	r4, [sp, #12]
 8013a92:	2800      	cmp	r0, #0
 8013a94:	d054      	beq.n	8013b40 <D16_1CH_HTONS_VOL_HP+0xd0>
 8013a96:	f1a1 0902 	sub.w	r9, r1, #2
 8013a9a:	eb0a 0140 	add.w	r1, sl, r0, lsl #1
 8013a9e:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8013b4c <D16_1CH_HTONS_VOL_HP+0xdc>
 8013aa2:	4650      	mov	r0, sl
 8013aa4:	9101      	str	r1, [sp, #4]
 8013aa6:	4619      	mov	r1, r3
 8013aa8:	f8cd b008 	str.w	fp, [sp, #8]
 8013aac:	9205      	str	r2, [sp, #20]
 8013aae:	f850 3b02 	ldr.w	r3, [r0], #2
 8013ab2:	ba5b      	rev16	r3, r3
 8013ab4:	b2dc      	uxtb	r4, r3
 8013ab6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8013aba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013abe:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8013ac2:	4419      	add	r1, r3
 8013ac4:	eb04 2491 	add.w	r4, r4, r1, lsr #10
 8013ac8:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8013acc:	f3c4 0209 	ubfx	r2, r4, #0, #10
 8013ad0:	0aa1      	lsrs	r1, r4, #10
 8013ad2:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8013ad6:	4a1b      	ldr	r2, [pc, #108]	; (8013b44 <D16_1CH_HTONS_VOL_HP+0xd4>)
 8013ad8:	fb23 5402 	smlad	r4, r3, r2, r5
 8013adc:	4a1a      	ldr	r2, [pc, #104]	; (8013b48 <D16_1CH_HTONS_VOL_HP+0xd8>)
 8013ade:	fb23 f502 	smuad	r5, r3, r2
 8013ae2:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8013ae6:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8013aea:	f04f 0b00 	mov.w	fp, #0
 8013aee:	19a2      	adds	r2, r4, r6
 8013af0:	eba2 020c 	sub.w	r2, r2, ip
 8013af4:	46a4      	mov	ip, r4
 8013af6:	17d7      	asrs	r7, r2, #31
 8013af8:	fba2 230e 	umull	r2, r3, r2, lr
 8013afc:	f112 4600 	adds.w	r6, r2, #2147483648	; 0x80000000
 8013b00:	fb0e 3307 	mla	r3, lr, r7, r3
 8013b04:	f143 0700 	adc.w	r7, r3, #0
 8013b08:	9b02      	ldr	r3, [sp, #8]
 8013b0a:	047a      	lsls	r2, r7, #17
 8013b0c:	007e      	lsls	r6, r7, #1
 8013b0e:	fbc3 ab02 	smlal	sl, fp, r3, r2
 8013b12:	ea4f 03ab 	mov.w	r3, fp, asr #2
 8013b16:	f303 030f 	ssat	r3, #16, r3
 8013b1a:	f829 3f02 	strh.w	r3, [r9, #2]!
 8013b1e:	9b01      	ldr	r3, [sp, #4]
 8013b20:	4298      	cmp	r0, r3
 8013b22:	d1c4      	bne.n	8013aae <D16_1CH_HTONS_VOL_HP+0x3e>
 8013b24:	460b      	mov	r3, r1
 8013b26:	9a05      	ldr	r2, [sp, #20]
 8013b28:	2000      	movs	r0, #0
 8013b2a:	9903      	ldr	r1, [sp, #12]
 8013b2c:	61d3      	str	r3, [r2, #28]
 8013b2e:	9b04      	ldr	r3, [sp, #16]
 8013b30:	6095      	str	r5, [r2, #8]
 8013b32:	60d1      	str	r1, [r2, #12]
 8013b34:	6193      	str	r3, [r2, #24]
 8013b36:	e9c2 6404 	strd	r6, r4, [r2, #16]
 8013b3a:	b007      	add	sp, #28
 8013b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b40:	4664      	mov	r4, ip
 8013b42:	e7f1      	b.n	8013b28 <D16_1CH_HTONS_VOL_HP+0xb8>
 8013b44:	00030001 	.word	0x00030001
 8013b48:	00010003 	.word	0x00010003
 8013b4c:	24000000 	.word	0x24000000

08013b50 <D24_1CH_HTONS_VOL_HP>:
 8013b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b54:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8013b56:	b089      	sub	sp, #36	; 0x24
 8013b58:	6993      	ldr	r3, [r2, #24]
 8013b5a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8013b5c:	9604      	str	r6, [sp, #16]
 8013b5e:	6a16      	ldr	r6, [r2, #32]
 8013b60:	9306      	str	r3, [sp, #24]
 8013b62:	9505      	str	r5, [sp, #20]
 8013b64:	69d3      	ldr	r3, [r2, #28]
 8013b66:	9600      	str	r6, [sp, #0]
 8013b68:	e9d2 4a04 	ldrd	r4, sl, [r2, #16]
 8013b6c:	e9d2 ce02 	ldrd	ip, lr, [r2, #8]
 8013b70:	2d00      	cmp	r5, #0
 8013b72:	f000 8083 	beq.w	8013c7c <D24_1CH_HTONS_VOL_HP+0x12c>
 8013b76:	9207      	str	r2, [sp, #28]
 8013b78:	2600      	movs	r6, #0
 8013b7a:	4622      	mov	r2, r4
 8013b7c:	f1a1 0b02 	sub.w	fp, r1, #2
 8013b80:	4f3f      	ldr	r7, [pc, #252]	; (8013c80 <D24_1CH_HTONS_VOL_HP+0x130>)
 8013b82:	461d      	mov	r5, r3
 8013b84:	f8cd a00c 	str.w	sl, [sp, #12]
 8013b88:	9c00      	ldr	r4, [sp, #0]
 8013b8a:	e056      	b.n	8013c3a <D24_1CH_HTONS_VOL_HP+0xea>
 8013b8c:	7841      	ldrb	r1, [r0, #1]
 8013b8e:	eb08 4809 	add.w	r8, r8, r9, lsl #16
 8013b92:	3002      	adds	r0, #2
 8013b94:	4488      	add	r8, r1
 8013b96:	fa5f f388 	uxtb.w	r3, r8
 8013b9a:	f3c8 2907 	ubfx	r9, r8, #8, #8
 8013b9e:	ea4f 4818 	mov.w	r8, r8, lsr #16
 8013ba2:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 8013ba6:	f857 3029 	ldr.w	r3, [r7, r9, lsl #2]
 8013baa:	eb01 2195 	add.w	r1, r1, r5, lsr #10
 8013bae:	f857 5028 	ldr.w	r5, [r7, r8, lsl #2]
 8013bb2:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 8013bb6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8013bba:	f3c8 0309 	ubfx	r3, r8, #0, #10
 8013bbe:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8013bc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8013bc6:	492f      	ldr	r1, [pc, #188]	; (8013c84 <D24_1CH_HTONS_VOL_HP+0x134>)
 8013bc8:	fb23 e901 	smlad	r9, r3, r1, lr
 8013bcc:	492e      	ldr	r1, [pc, #184]	; (8013c88 <D24_1CH_HTONS_VOL_HP+0x138>)
 8013bce:	fb23 ce01 	smlad	lr, r3, r1, ip
 8013bd2:	f3c5 0c09 	ubfx	ip, r5, #0, #10
 8013bd6:	2101      	movs	r1, #1
 8013bd8:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 8013bdc:	eb0e 0e48 	add.w	lr, lr, r8, lsl #1
 8013be0:	fb23 f301 	smuad	r3, r3, r1
 8013be4:	f5a9 51d8 	sub.w	r1, r9, #6912	; 0x1b00
 8013be8:	eb08 0c03 	add.w	ip, r8, r3
 8013bec:	9b03      	ldr	r3, [sp, #12]
 8013bee:	f04f 0a00 	mov.w	sl, #0
 8013bf2:	440a      	add	r2, r1
 8013bf4:	3601      	adds	r6, #1
 8013bf6:	9103      	str	r1, [sp, #12]
 8013bf8:	1ad2      	subs	r2, r2, r3
 8013bfa:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8013bfe:	fba2 2304 	umull	r2, r3, r2, r4
 8013c02:	e9cd 2300 	strd	r2, r3, [sp]
 8013c06:	fb04 3309 	mla	r3, r4, r9, r3
 8013c0a:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8013c0e:	9301      	str	r3, [sp, #4]
 8013c10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013c14:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8013c18:	f143 0300 	adc.w	r3, r3, #0
 8013c1c:	ea4f 38c3 	mov.w	r8, r3, lsl #15
 8013c20:	005a      	lsls	r2, r3, #1
 8013c22:	9b04      	ldr	r3, [sp, #16]
 8013c24:	fbc3 9a08 	smlal	r9, sl, r3, r8
 8013c28:	ea4f 03aa 	mov.w	r3, sl, asr #2
 8013c2c:	f303 030f 	ssat	r3, #16, r3
 8013c30:	f82b 3f02 	strh.w	r3, [fp, #2]!
 8013c34:	9b05      	ldr	r3, [sp, #20]
 8013c36:	429e      	cmp	r6, r3
 8013c38:	d010      	beq.n	8013c5c <D24_1CH_HTONS_VOL_HP+0x10c>
 8013c3a:	f890 9003 	ldrb.w	r9, [r0, #3]
 8013c3e:	f016 0f01 	tst.w	r6, #1
 8013c42:	7801      	ldrb	r1, [r0, #0]
 8013c44:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8013c48:	ea4f 2801 	mov.w	r8, r1, lsl #8
 8013c4c:	d09e      	beq.n	8013b8c <D24_1CH_HTONS_VOL_HP+0x3c>
 8013c4e:	f890 8002 	ldrb.w	r8, [r0, #2]
 8013c52:	3004      	adds	r0, #4
 8013c54:	eb03 4808 	add.w	r8, r3, r8, lsl #16
 8013c58:	4488      	add	r8, r1
 8013c5a:	e79c      	b.n	8013b96 <D24_1CH_HTONS_VOL_HP+0x46>
 8013c5c:	4614      	mov	r4, r2
 8013c5e:	462b      	mov	r3, r5
 8013c60:	9a07      	ldr	r2, [sp, #28]
 8013c62:	2000      	movs	r0, #0
 8013c64:	61d3      	str	r3, [r2, #28]
 8013c66:	9b06      	ldr	r3, [sp, #24]
 8013c68:	f8c2 c008 	str.w	ip, [r2, #8]
 8013c6c:	f8c2 e00c 	str.w	lr, [r2, #12]
 8013c70:	6193      	str	r3, [r2, #24]
 8013c72:	e9c2 4104 	strd	r4, r1, [r2, #16]
 8013c76:	b009      	add	sp, #36	; 0x24
 8013c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c7c:	4651      	mov	r1, sl
 8013c7e:	e7f0      	b.n	8013c62 <D24_1CH_HTONS_VOL_HP+0x112>
 8013c80:	24000000 	.word	0x24000000
 8013c84:	00030001 	.word	0x00030001
 8013c88:	00060007 	.word	0x00060007

08013c8c <D32_1CH_HTONS_VOL_HP>:
 8013c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c90:	6993      	ldr	r3, [r2, #24]
 8013c92:	b087      	sub	sp, #28
 8013c94:	4683      	mov	fp, r0
 8013c96:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8013c98:	9304      	str	r3, [sp, #16]
 8013c9a:	69d5      	ldr	r5, [r2, #28]
 8013c9c:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8013c9e:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8013ca2:	e9d2 8e04 	ldrd	r8, lr, [r2, #16]
 8013ca6:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8013caa:	2800      	cmp	r0, #0
 8013cac:	d077      	beq.n	8013d9e <D32_1CH_HTONS_VOL_HP+0x112>
 8013cae:	460f      	mov	r7, r1
 8013cb0:	46f1      	mov	r9, lr
 8013cb2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8013cb6:	f8cd 8000 	str.w	r8, [sp]
 8013cba:	4e3a      	ldr	r6, [pc, #232]	; (8013da4 <D32_1CH_HTONS_VOL_HP+0x118>)
 8013cbc:	469e      	mov	lr, r3
 8013cbe:	46a0      	mov	r8, r4
 8013cc0:	9103      	str	r1, [sp, #12]
 8013cc2:	9205      	str	r2, [sp, #20]
 8013cc4:	f85b 4b04 	ldr.w	r4, [fp], #4
 8013cc8:	ba64      	rev16	r4, r4
 8013cca:	b2e0      	uxtb	r0, r4
 8013ccc:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8013cd0:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8013cd4:	0e24      	lsrs	r4, r4, #24
 8013cd6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8013cda:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8013cde:	eb00 2095 	add.w	r0, r0, r5, lsr #10
 8013ce2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8013ce6:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 8013cea:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 8013cee:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8013cf2:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 8013cf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013cfa:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8013cfe:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8013d02:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013d06:	f3c5 0009 	ubfx	r0, r5, #0, #10
 8013d0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8013d0e:	4826      	ldr	r0, [pc, #152]	; (8013da8 <D32_1CH_HTONS_VOL_HP+0x11c>)
 8013d10:	fb23 c400 	smlad	r4, r3, r0, ip
 8013d14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8013d18:	fb21 4402 	smlad	r4, r1, r2, r4
 8013d1c:	4823      	ldr	r0, [pc, #140]	; (8013dac <D32_1CH_HTONS_VOL_HP+0x120>)
 8013d1e:	fb23 ec00 	smlad	ip, r3, r0, lr
 8013d22:	4823      	ldr	r0, [pc, #140]	; (8013db0 <D32_1CH_HTONS_VOL_HP+0x124>)
 8013d24:	fb21 cc00 	smlad	ip, r1, r0, ip
 8013d28:	2201      	movs	r2, #1
 8013d2a:	fb23 f302 	smuad	r3, r3, r2
 8013d2e:	4821      	ldr	r0, [pc, #132]	; (8013db4 <D32_1CH_HTONS_VOL_HP+0x128>)
 8013d30:	fb21 3e00 	smlad	lr, r1, r0, r3
 8013d34:	9b00      	ldr	r3, [sp, #0]
 8013d36:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
 8013d3a:	4423      	add	r3, r4
 8013d3c:	eba3 0209 	sub.w	r2, r3, r9
 8013d40:	46a1      	mov	r9, r4
 8013d42:	17d1      	asrs	r1, r2, #31
 8013d44:	fba2 230a 	umull	r2, r3, r2, sl
 8013d48:	e9cd 2300 	strd	r2, r3, [sp]
 8013d4c:	fb0a 3301 	mla	r3, sl, r1, r3
 8013d50:	9301      	str	r3, [sp, #4]
 8013d52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013d56:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8013d5a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013d5e:	f143 0300 	adc.w	r3, r3, #0
 8013d62:	0399      	lsls	r1, r3, #14
 8013d64:	005b      	lsls	r3, r3, #1
 8013d66:	9300      	str	r3, [sp, #0]
 8013d68:	2300      	movs	r3, #0
 8013d6a:	fbc8 2301 	smlal	r2, r3, r8, r1
 8013d6e:	109b      	asrs	r3, r3, #2
 8013d70:	f303 030f 	ssat	r3, #16, r3
 8013d74:	f827 3b02 	strh.w	r3, [r7], #2
 8013d78:	9b03      	ldr	r3, [sp, #12]
 8013d7a:	429f      	cmp	r7, r3
 8013d7c:	d1a2      	bne.n	8013cc4 <D32_1CH_HTONS_VOL_HP+0x38>
 8013d7e:	4673      	mov	r3, lr
 8013d80:	f8dd 8000 	ldr.w	r8, [sp]
 8013d84:	9a05      	ldr	r2, [sp, #20]
 8013d86:	6093      	str	r3, [r2, #8]
 8013d88:	2000      	movs	r0, #0
 8013d8a:	9b04      	ldr	r3, [sp, #16]
 8013d8c:	f8c2 c00c 	str.w	ip, [r2, #12]
 8013d90:	61d5      	str	r5, [r2, #28]
 8013d92:	6193      	str	r3, [r2, #24]
 8013d94:	e9c2 8404 	strd	r8, r4, [r2, #16]
 8013d98:	b007      	add	sp, #28
 8013d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d9e:	4674      	mov	r4, lr
 8013da0:	e7f1      	b.n	8013d86 <D32_1CH_HTONS_VOL_HP+0xfa>
 8013da2:	bf00      	nop
 8013da4:	24000000 	.word	0x24000000
 8013da8:	00060003 	.word	0x00060003
 8013dac:	000a000c 	.word	0x000a000c
 8013db0:	000c000a 	.word	0x000c000a
 8013db4:	00030006 	.word	0x00030006

08013db8 <D48_1CH_HTONS_VOL_HP>:
 8013db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dbc:	6b17      	ldr	r7, [r2, #48]	; 0x30
 8013dbe:	b087      	sub	sp, #28
 8013dc0:	6993      	ldr	r3, [r2, #24]
 8013dc2:	9701      	str	r7, [sp, #4]
 8013dc4:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8013dc6:	6a17      	ldr	r7, [r2, #32]
 8013dc8:	9304      	str	r3, [sp, #16]
 8013dca:	69d6      	ldr	r6, [r2, #28]
 8013dcc:	9702      	str	r7, [sp, #8]
 8013dce:	e9d2 4e04 	ldrd	r4, lr, [r2, #16]
 8013dd2:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8013dd6:	2d00      	cmp	r5, #0
 8013dd8:	f000 8093 	beq.w	8013f02 <D48_1CH_HTONS_VOL_HP+0x14a>
 8013ddc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013de0:	f1a1 0b02 	sub.w	fp, r1, #2
 8013de4:	46f2      	mov	sl, lr
 8013de6:	4f48      	ldr	r7, [pc, #288]	; (8013f08 <D48_1CH_HTONS_VOL_HP+0x150>)
 8013de8:	eb00 0145 	add.w	r1, r0, r5, lsl #1
 8013dec:	469e      	mov	lr, r3
 8013dee:	9205      	str	r2, [sp, #20]
 8013df0:	9103      	str	r1, [sp, #12]
 8013df2:	e9d0 3200 	ldrd	r3, r2, [r0]
 8013df6:	3006      	adds	r0, #6
 8013df8:	ba5b      	rev16	r3, r3
 8013dfa:	fa92 f992 	rev16.w	r9, r2
 8013dfe:	b2dd      	uxtb	r5, r3
 8013e00:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013e04:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013e08:	0e1b      	lsrs	r3, r3, #24
 8013e0a:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8013e0e:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8013e12:	eb05 2696 	add.w	r6, r5, r6, lsr #10
 8013e16:	f857 5022 	ldr.w	r5, [r7, r2, lsl #2]
 8013e1a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8013e1e:	fa5f f289 	uxtb.w	r2, r9
 8013e22:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 8013e26:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8013e2a:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8013e2e:	f3c6 0809 	ubfx	r8, r6, #0, #10
 8013e32:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8013e36:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 8013e3a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8013e3e:	eb03 2395 	add.w	r3, r3, r5, lsr #10
 8013e42:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8013e46:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 8013e4a:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 8013e4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013e52:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8013e56:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8013e5a:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8013e5e:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8013e62:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8013e66:	4b29      	ldr	r3, [pc, #164]	; (8013f0c <D48_1CH_HTONS_VOL_HP+0x154>)
 8013e68:	fb28 c103 	smlad	r1, r8, r3, ip
 8013e6c:	4b28      	ldr	r3, [pc, #160]	; (8013f10 <D48_1CH_HTONS_VOL_HP+0x158>)
 8013e6e:	fb25 1103 	smlad	r1, r5, r3, r1
 8013e72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013e76:	fb22 1903 	smlad	r9, r2, r3, r1
 8013e7a:	4b26      	ldr	r3, [pc, #152]	; (8013f14 <D48_1CH_HTONS_VOL_HP+0x15c>)
 8013e7c:	fb28 ec03 	smlad	ip, r8, r3, lr
 8013e80:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 8013e84:	fb25 cc03 	smlad	ip, r5, r3, ip
 8013e88:	4b23      	ldr	r3, [pc, #140]	; (8013f18 <D48_1CH_HTONS_VOL_HP+0x160>)
 8013e8a:	fb22 cc03 	smlad	ip, r2, r3, ip
 8013e8e:	2101      	movs	r1, #1
 8013e90:	fb28 f801 	smuad	r8, r8, r1
 8013e94:	4b21      	ldr	r3, [pc, #132]	; (8013f1c <D48_1CH_HTONS_VOL_HP+0x164>)
 8013e96:	fb25 8503 	smlad	r5, r5, r3, r8
 8013e9a:	4b21      	ldr	r3, [pc, #132]	; (8013f20 <D48_1CH_HTONS_VOL_HP+0x168>)
 8013e9c:	fb22 5e03 	smlad	lr, r2, r3, r5
 8013ea0:	f5a9 4158 	sub.w	r1, r9, #55296	; 0xd800
 8013ea4:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8013ea8:	190a      	adds	r2, r1, r4
 8013eaa:	9c02      	ldr	r4, [sp, #8]
 8013eac:	eba2 020a 	sub.w	r2, r2, sl
 8013eb0:	468a      	mov	sl, r1
 8013eb2:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8013eb6:	fba2 2304 	umull	r2, r3, r2, r4
 8013eba:	fb04 3309 	mla	r3, r4, r9, r3
 8013ebe:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 8013ec2:	f04f 0900 	mov.w	r9, #0
 8013ec6:	f143 0500 	adc.w	r5, r3, #0
 8013eca:	9b01      	ldr	r3, [sp, #4]
 8013ecc:	032a      	lsls	r2, r5, #12
 8013ece:	006c      	lsls	r4, r5, #1
 8013ed0:	fbc3 8902 	smlal	r8, r9, r3, r2
 8013ed4:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8013ed8:	f303 030f 	ssat	r3, #16, r3
 8013edc:	f82b 3f02 	strh.w	r3, [fp, #2]!
 8013ee0:	9b03      	ldr	r3, [sp, #12]
 8013ee2:	4283      	cmp	r3, r0
 8013ee4:	d185      	bne.n	8013df2 <D48_1CH_HTONS_VOL_HP+0x3a>
 8013ee6:	4673      	mov	r3, lr
 8013ee8:	9a05      	ldr	r2, [sp, #20]
 8013eea:	6093      	str	r3, [r2, #8]
 8013eec:	2000      	movs	r0, #0
 8013eee:	9b04      	ldr	r3, [sp, #16]
 8013ef0:	f8c2 c00c 	str.w	ip, [r2, #12]
 8013ef4:	61d6      	str	r6, [r2, #28]
 8013ef6:	6193      	str	r3, [r2, #24]
 8013ef8:	e9c2 4104 	strd	r4, r1, [r2, #16]
 8013efc:	b007      	add	sp, #28
 8013efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f02:	4671      	mov	r1, lr
 8013f04:	e7f1      	b.n	8013eea <D48_1CH_HTONS_VOL_HP+0x132>
 8013f06:	bf00      	nop
 8013f08:	24000000 	.word	0x24000000
 8013f0c:	000f000a 	.word	0x000f000a
 8013f10:	00060003 	.word	0x00060003
 8013f14:	00150019 	.word	0x00150019
 8013f18:	00190015 	.word	0x00190015
 8013f1c:	00030006 	.word	0x00030006
 8013f20:	000a000f 	.word	0x000a000f

08013f24 <D64_1CH_HTONS_VOL_HP>:
 8013f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f28:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8013f2a:	b089      	sub	sp, #36	; 0x24
 8013f2c:	6993      	ldr	r3, [r2, #24]
 8013f2e:	4686      	mov	lr, r0
 8013f30:	9503      	str	r5, [sp, #12]
 8013f32:	8cd0      	ldrh	r0, [r2, #38]	; 0x26
 8013f34:	6a15      	ldr	r5, [r2, #32]
 8013f36:	9306      	str	r3, [sp, #24]
 8013f38:	69d6      	ldr	r6, [r2, #28]
 8013f3a:	9504      	str	r5, [sp, #16]
 8013f3c:	e9d2 8404 	ldrd	r8, r4, [r2, #16]
 8013f40:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8013f44:	2800      	cmp	r0, #0
 8013f46:	f000 80a4 	beq.w	8014092 <D64_1CH_HTONS_VOL_HP+0x16e>
 8013f4a:	460f      	mov	r7, r1
 8013f4c:	46f1      	mov	r9, lr
 8013f4e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8013f52:	4d56      	ldr	r5, [pc, #344]	; (80140ac <D64_1CH_HTONS_VOL_HP+0x188>)
 8013f54:	46a2      	mov	sl, r4
 8013f56:	469e      	mov	lr, r3
 8013f58:	9105      	str	r1, [sp, #20]
 8013f5a:	9207      	str	r2, [sp, #28]
 8013f5c:	f859 1b08 	ldr.w	r1, [r9], #8
 8013f60:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8013f64:	ba49      	rev16	r1, r1
 8013f66:	fa93 fb93 	rev16.w	fp, r3
 8013f6a:	b2cb      	uxtb	r3, r1
 8013f6c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8013f70:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8013f74:	0e09      	lsrs	r1, r1, #24
 8013f76:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 8013f7a:	fa5f f38b 	uxtb.w	r3, fp
 8013f7e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8013f82:	4426      	add	r6, r4
 8013f84:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8013f88:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8013f8c:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8013f90:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8013f94:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8013f98:	f3cb 2307 	ubfx	r3, fp, #8, #8
 8013f9c:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8013fa0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8013fa4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8013fa8:	eb01 2194 	add.w	r1, r1, r4, lsr #10
 8013fac:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8013fb0:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8013fb4:	f3cb 4607 	ubfx	r6, fp, #16, #8
 8013fb8:	eb00 2091 	add.w	r0, r0, r1, lsr #10
 8013fbc:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8013fc0:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 8013fc4:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 8013fc8:	eb03 2390 	add.w	r3, r3, r0, lsr #10
 8013fcc:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8013fd0:	f855 b02b 	ldr.w	fp, [r5, fp, lsl #2]
 8013fd4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013fd8:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8013fdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013fe0:	eb0b 2b96 	add.w	fp, fp, r6, lsr #10
 8013fe4:	f3c6 0409 	ubfx	r4, r6, #0, #10
 8013fe8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013fec:	f3cb 0009 	ubfx	r0, fp, #0, #10
 8013ff0:	ea4f 269b 	mov.w	r6, fp, lsr #10
 8013ff4:	ea40 4b04 	orr.w	fp, r0, r4, lsl #16
 8013ff8:	482d      	ldr	r0, [pc, #180]	; (80140b0 <D64_1CH_HTONS_VOL_HP+0x18c>)
 8013ffa:	fb22 cc00 	smlad	ip, r2, r0, ip
 8013ffe:	482d      	ldr	r0, [pc, #180]	; (80140b4 <D64_1CH_HTONS_VOL_HP+0x190>)
 8014000:	fb21 cc00 	smlad	ip, r1, r0, ip
 8014004:	482c      	ldr	r0, [pc, #176]	; (80140b8 <D64_1CH_HTONS_VOL_HP+0x194>)
 8014006:	fb23 cc00 	smlad	ip, r3, r0, ip
 801400a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 801400e:	fb2b c404 	smlad	r4, fp, r4, ip
 8014012:	482a      	ldr	r0, [pc, #168]	; (80140bc <D64_1CH_HTONS_VOL_HP+0x198>)
 8014014:	fb22 ec00 	smlad	ip, r2, r0, lr
 8014018:	fb2b cc10 	smladx	ip, fp, r0, ip
 801401c:	4828      	ldr	r0, [pc, #160]	; (80140c0 <D64_1CH_HTONS_VOL_HP+0x19c>)
 801401e:	fb21 cc00 	smlad	ip, r1, r0, ip
 8014022:	fb23 cc10 	smladx	ip, r3, r0, ip
 8014026:	f04f 0e01 	mov.w	lr, #1
 801402a:	fb22 f20e 	smuad	r2, r2, lr
 801402e:	4825      	ldr	r0, [pc, #148]	; (80140c4 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 8014030:	fb21 2100 	smlad	r1, r1, r0, r2
 8014034:	4a24      	ldr	r2, [pc, #144]	; (80140c8 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 8014036:	fb23 1302 	smlad	r3, r3, r2, r1
 801403a:	4a24      	ldr	r2, [pc, #144]	; (80140cc <D64_1CH_HTONS_VOL_HP+0x1a8>)
 801403c:	fb2b 3e02 	smlad	lr, fp, r2, r3
 8014040:	f5a4 3400 	sub.w	r4, r4, #131072	; 0x20000
 8014044:	eb04 0208 	add.w	r2, r4, r8
 8014048:	eba2 020a 	sub.w	r2, r2, sl
 801404c:	46a2      	mov	sl, r4
 801404e:	4610      	mov	r0, r2
 8014050:	17d1      	asrs	r1, r2, #31
 8014052:	e9cd 0100 	strd	r0, r1, [sp]
 8014056:	9904      	ldr	r1, [sp, #16]
 8014058:	9801      	ldr	r0, [sp, #4]
 801405a:	fba2 2301 	umull	r2, r3, r2, r1
 801405e:	fb01 3300 	mla	r3, r1, r0, r3
 8014062:	f112 4000 	adds.w	r0, r2, #2147483648	; 0x80000000
 8014066:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801406a:	f143 0100 	adc.w	r1, r3, #0
 801406e:	9b03      	ldr	r3, [sp, #12]
 8014070:	02ca      	lsls	r2, r1, #11
 8014072:	ea4f 0841 	mov.w	r8, r1, lsl #1
 8014076:	2100      	movs	r1, #0
 8014078:	fbc3 0102 	smlal	r0, r1, r3, r2
 801407c:	108b      	asrs	r3, r1, #2
 801407e:	f303 030f 	ssat	r3, #16, r3
 8014082:	f827 3b02 	strh.w	r3, [r7], #2
 8014086:	9b05      	ldr	r3, [sp, #20]
 8014088:	429f      	cmp	r7, r3
 801408a:	f47f af67 	bne.w	8013f5c <D64_1CH_HTONS_VOL_HP+0x38>
 801408e:	4673      	mov	r3, lr
 8014090:	9a07      	ldr	r2, [sp, #28]
 8014092:	6093      	str	r3, [r2, #8]
 8014094:	2000      	movs	r0, #0
 8014096:	9b06      	ldr	r3, [sp, #24]
 8014098:	f8c2 c00c 	str.w	ip, [r2, #12]
 801409c:	61d6      	str	r6, [r2, #28]
 801409e:	6193      	str	r3, [r2, #24]
 80140a0:	e9c2 8404 	strd	r8, r4, [r2, #16]
 80140a4:	b009      	add	sp, #36	; 0x24
 80140a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140aa:	bf00      	nop
 80140ac:	24000000 	.word	0x24000000
 80140b0:	001c0015 	.word	0x001c0015
 80140b4:	000f000a 	.word	0x000f000a
 80140b8:	00060003 	.word	0x00060003
 80140bc:	0024002a 	.word	0x0024002a
 80140c0:	002e0030 	.word	0x002e0030
 80140c4:	00030006 	.word	0x00030006
 80140c8:	000a000f 	.word	0x000a000f
 80140cc:	0015001c 	.word	0x0015001c

080140d0 <D80_1CH_HTONS_VOL_HP>:
 80140d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140d4:	6913      	ldr	r3, [r2, #16]
 80140d6:	b089      	sub	sp, #36	; 0x24
 80140d8:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80140da:	9301      	str	r3, [sp, #4]
 80140dc:	9603      	str	r6, [sp, #12]
 80140de:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80140e0:	6a16      	ldr	r6, [r2, #32]
 80140e2:	e9d2 5305 	ldrd	r5, r3, [r2, #20]
 80140e6:	e9d2 7c02 	ldrd	r7, ip, [r2, #8]
 80140ea:	9306      	str	r3, [sp, #24]
 80140ec:	9604      	str	r6, [sp, #16]
 80140ee:	69d3      	ldr	r3, [r2, #28]
 80140f0:	2c00      	cmp	r4, #0
 80140f2:	f000 80ce 	beq.w	8014292 <D80_1CH_HTONS_VOL_HP+0x1c2>
 80140f6:	3902      	subs	r1, #2
 80140f8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80140fc:	4e66      	ldr	r6, [pc, #408]	; (8014298 <D80_1CH_HTONS_VOL_HP+0x1c8>)
 80140fe:	469e      	mov	lr, r3
 8014100:	9102      	str	r1, [sp, #8]
 8014102:	46aa      	mov	sl, r5
 8014104:	eb00 0144 	add.w	r1, r0, r4, lsl #1
 8014108:	9207      	str	r2, [sp, #28]
 801410a:	9105      	str	r1, [sp, #20]
 801410c:	6883      	ldr	r3, [r0, #8]
 801410e:	e9d0 4200 	ldrd	r4, r2, [r0]
 8014112:	300a      	adds	r0, #10
 8014114:	ba64      	rev16	r4, r4
 8014116:	ba52      	rev16	r2, r2
 8014118:	fa93 fb93 	rev16.w	fp, r3
 801411c:	b2e5      	uxtb	r5, r4
 801411e:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8014122:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8014126:	0e24      	lsrs	r4, r4, #24
 8014128:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 801412c:	b2d5      	uxtb	r5, r2
 801412e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8014132:	44c6      	add	lr, r8
 8014134:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8014138:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 801413c:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 8014140:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8014144:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8014148:	eb01 2993 	add.w	r9, r1, r3, lsr #10
 801414c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8014150:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8014154:	eb04 2499 	add.w	r4, r4, r9, lsr #10
 8014158:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801415c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8014160:	f3cb 2e07 	ubfx	lr, fp, #8, #8
 8014164:	eb05 2894 	add.w	r8, r5, r4, lsr #10
 8014168:	f3c2 4507 	ubfx	r5, r2, #16, #8
 801416c:	0e12      	lsrs	r2, r2, #24
 801416e:	f856 e02e 	ldr.w	lr, [r6, lr, lsl #2]
 8014172:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8014176:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 801417a:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 801417e:	fa5f fb8b 	uxtb.w	fp, fp
 8014182:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8014186:	f3c8 0809 	ubfx	r8, r8, #0, #10
 801418a:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 801418e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8014192:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 8014196:	f3c9 0909 	ubfx	r9, r9, #0, #10
 801419a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801419e:	ea41 4808 	orr.w	r8, r1, r8, lsl #16
 80141a2:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 80141a6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80141aa:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80141ae:	eb0e 2e9b 	add.w	lr, lr, fp, lsr #10
 80141b2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80141b6:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 80141ba:	f3ce 0109 	ubfx	r1, lr, #0, #10
 80141be:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 80141c2:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 80141c6:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 80141ca:	4934      	ldr	r1, [pc, #208]	; (801429c <D80_1CH_HTONS_VOL_HP+0x1cc>)
 80141cc:	fb23 cc01 	smlad	ip, r3, r1, ip
 80141d0:	4933      	ldr	r1, [pc, #204]	; (80142a0 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 80141d2:	fb24 cc01 	smlad	ip, r4, r1, ip
 80141d6:	4933      	ldr	r1, [pc, #204]	; (80142a4 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 80141d8:	fb28 cc01 	smlad	ip, r8, r1, ip
 80141dc:	4932      	ldr	r1, [pc, #200]	; (80142a8 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 80141de:	fb22 cc01 	smlad	ip, r2, r1, ip
 80141e2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80141e6:	fb2b c901 	smlad	r9, fp, r1, ip
 80141ea:	4930      	ldr	r1, [pc, #192]	; (80142ac <D80_1CH_HTONS_VOL_HP+0x1dc>)
 80141ec:	fb23 7701 	smlad	r7, r3, r1, r7
 80141f0:	492f      	ldr	r1, [pc, #188]	; (80142b0 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 80141f2:	fb24 7701 	smlad	r7, r4, r1, r7
 80141f6:	f04f 1c4b 	mov.w	ip, #4915275	; 0x4b004b
 80141fa:	fb28 7c0c 	smlad	ip, r8, ip, r7
 80141fe:	492d      	ldr	r1, [pc, #180]	; (80142b4 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8014200:	fb22 cc01 	smlad	ip, r2, r1, ip
 8014204:	492c      	ldr	r1, [pc, #176]	; (80142b8 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8014206:	fb2b cc01 	smlad	ip, fp, r1, ip
 801420a:	2101      	movs	r1, #1
 801420c:	fb23 f301 	smuad	r3, r3, r1
 8014210:	492a      	ldr	r1, [pc, #168]	; (80142bc <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8014212:	fb24 3401 	smlad	r4, r4, r1, r3
 8014216:	492a      	ldr	r1, [pc, #168]	; (80142c0 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8014218:	fb28 4101 	smlad	r1, r8, r1, r4
 801421c:	4f29      	ldr	r7, [pc, #164]	; (80142c4 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 801421e:	fb22 1207 	smlad	r2, r2, r7, r1
 8014222:	4f29      	ldr	r7, [pc, #164]	; (80142c8 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8014224:	fb2b 2707 	smlad	r7, fp, r7, r2
 8014228:	f5a9 317a 	sub.w	r1, r9, #256000	; 0x3e800
 801422c:	9b01      	ldr	r3, [sp, #4]
 801422e:	9c04      	ldr	r4, [sp, #16]
 8014230:	440b      	add	r3, r1
 8014232:	eba3 020a 	sub.w	r2, r3, sl
 8014236:	468a      	mov	sl, r1
 8014238:	ea4f 79e2 	mov.w	r9, r2, asr #31
 801423c:	fba2 2304 	umull	r2, r3, r2, r4
 8014240:	fb04 3309 	mla	r3, r4, r9, r3
 8014244:	f112 4400 	adds.w	r4, r2, #2147483648	; 0x80000000
 8014248:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801424c:	f143 0500 	adc.w	r5, r3, #0
 8014250:	006b      	lsls	r3, r5, #1
 8014252:	02aa      	lsls	r2, r5, #10
 8014254:	2500      	movs	r5, #0
 8014256:	9301      	str	r3, [sp, #4]
 8014258:	9b03      	ldr	r3, [sp, #12]
 801425a:	fbc3 4502 	smlal	r4, r5, r3, r2
 801425e:	9a02      	ldr	r2, [sp, #8]
 8014260:	10ab      	asrs	r3, r5, #2
 8014262:	f303 030f 	ssat	r3, #16, r3
 8014266:	f822 3f02 	strh.w	r3, [r2, #2]!
 801426a:	9b05      	ldr	r3, [sp, #20]
 801426c:	9202      	str	r2, [sp, #8]
 801426e:	4298      	cmp	r0, r3
 8014270:	f47f af4c 	bne.w	801410c <D80_1CH_HTONS_VOL_HP+0x3c>
 8014274:	4673      	mov	r3, lr
 8014276:	9a07      	ldr	r2, [sp, #28]
 8014278:	61d3      	str	r3, [r2, #28]
 801427a:	2000      	movs	r0, #0
 801427c:	9b01      	ldr	r3, [sp, #4]
 801427e:	6097      	str	r7, [r2, #8]
 8014280:	f8c2 c00c 	str.w	ip, [r2, #12]
 8014284:	e9c2 3104 	strd	r3, r1, [r2, #16]
 8014288:	9b06      	ldr	r3, [sp, #24]
 801428a:	6193      	str	r3, [r2, #24]
 801428c:	b009      	add	sp, #36	; 0x24
 801428e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014292:	4629      	mov	r1, r5
 8014294:	e7f0      	b.n	8014278 <D80_1CH_HTONS_VOL_HP+0x1a8>
 8014296:	bf00      	nop
 8014298:	24000000 	.word	0x24000000
 801429c:	002d0024 	.word	0x002d0024
 80142a0:	001c0015 	.word	0x001c0015
 80142a4:	000f000a 	.word	0x000f000a
 80142a8:	00060003 	.word	0x00060003
 80142ac:	0037003f 	.word	0x0037003f
 80142b0:	00450049 	.word	0x00450049
 80142b4:	00490045 	.word	0x00490045
 80142b8:	003f0037 	.word	0x003f0037
 80142bc:	00030006 	.word	0x00030006
 80142c0:	000a000f 	.word	0x000a000f
 80142c4:	0015001c 	.word	0x0015001c
 80142c8:	0024002d 	.word	0x0024002d

080142cc <D128_1CH_HTONS_VOL_HP>:
 80142cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142d0:	6914      	ldr	r4, [r2, #16]
 80142d2:	b08d      	sub	sp, #52	; 0x34
 80142d4:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80142d6:	9404      	str	r4, [sp, #16]
 80142d8:	6954      	ldr	r4, [r2, #20]
 80142da:	920b      	str	r2, [sp, #44]	; 0x2c
 80142dc:	9405      	str	r4, [sp, #20]
 80142de:	6994      	ldr	r4, [r2, #24]
 80142e0:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 80142e4:	940a      	str	r4, [sp, #40]	; 0x28
 80142e6:	6894      	ldr	r4, [r2, #8]
 80142e8:	9403      	str	r4, [sp, #12]
 80142ea:	68d4      	ldr	r4, [r2, #12]
 80142ec:	9402      	str	r4, [sp, #8]
 80142ee:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80142f0:	6a12      	ldr	r2, [r2, #32]
 80142f2:	9407      	str	r4, [sp, #28]
 80142f4:	9208      	str	r2, [sp, #32]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	f000 812e 	beq.w	8014558 <D128_1CH_HTONS_VOL_HP+0x28c>
 80142fc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8014300:	f100 0b10 	add.w	fp, r0, #16
 8014304:	f8df 9290 	ldr.w	r9, [pc, #656]	; 8014598 <D128_1CH_HTONS_VOL_HP+0x2cc>
 8014308:	9106      	str	r1, [sp, #24]
 801430a:	9309      	str	r3, [sp, #36]	; 0x24
 801430c:	e95b 0204 	ldrd	r0, r2, [fp, #-16]
 8014310:	e95b 3602 	ldrd	r3, r6, [fp, #-8]
 8014314:	ba40      	rev16	r0, r0
 8014316:	ba52      	rev16	r2, r2
 8014318:	ba5b      	rev16	r3, r3
 801431a:	ba76      	rev16	r6, r6
 801431c:	b2c5      	uxtb	r5, r0
 801431e:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8014322:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8014326:	0e00      	lsrs	r0, r0, #24
 8014328:	f859 7025 	ldr.w	r7, [r9, r5, lsl #2]
 801432c:	b2d5      	uxtb	r5, r2
 801432e:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 8014332:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8014336:	44bc      	add	ip, r7
 8014338:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801433c:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 8014340:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8014344:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 8014348:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 801434c:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8014350:	0e12      	lsrs	r2, r2, #24
 8014352:	eb01 219e 	add.w	r1, r1, lr, lsr #10
 8014356:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 801435a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 801435e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8014362:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8014366:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 801436a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801436e:	b2da      	uxtb	r2, r3
 8014370:	eb0a 2a97 	add.w	sl, sl, r7, lsr #10
 8014374:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8014378:	ea4e 4e0c 	orr.w	lr, lr, ip, lsl #16
 801437c:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8014380:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 8014384:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8014388:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 801438c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8014390:	eb00 2c95 	add.w	ip, r0, r5, lsr #10
 8014394:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8014398:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 801439c:	f3c3 4107 	ubfx	r1, r3, #16, #8
 80143a0:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 80143a4:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80143a8:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 80143ac:	0e1b      	lsrs	r3, r3, #24
 80143ae:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 80143b2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80143b6:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 80143ba:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 80143be:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 80143c2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80143c6:	b2f3      	uxtb	r3, r6
 80143c8:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 80143cc:	f3c8 0009 	ubfx	r0, r8, #0, #10
 80143d0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80143d4:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 80143d8:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 80143dc:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 80143e0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80143e4:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80143e8:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 80143ec:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 80143f0:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 80143f4:	0e36      	lsrs	r6, r6, #24
 80143f6:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 80143fa:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80143fe:	f859 302c 	ldr.w	r3, [r9, ip, lsl #2]
 8014402:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8014406:	f859 c026 	ldr.w	ip, [r9, r6, lsl #2]
 801440a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801440e:	eb03 2692 	add.w	r6, r3, r2, lsr #10
 8014412:	f3c2 0309 	ubfx	r3, r2, #0, #10
 8014416:	9101      	str	r1, [sp, #4]
 8014418:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 801441c:	9b02      	ldr	r3, [sp, #8]
 801441e:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8014422:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8014426:	4611      	mov	r1, r2
 8014428:	f3cc 0209 	ubfx	r2, ip, #0, #10
 801442c:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
 8014430:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8014434:	4a49      	ldr	r2, [pc, #292]	; (801455c <D128_1CH_HTONS_VOL_HP+0x290>)
 8014436:	fb2e 3202 	smlad	r2, lr, r2, r3
 801443a:	4b49      	ldr	r3, [pc, #292]	; (8014560 <D128_1CH_HTONS_VOL_HP+0x294>)
 801443c:	fb27 2203 	smlad	r2, r7, r3, r2
 8014440:	4b48      	ldr	r3, [pc, #288]	; (8014564 <D128_1CH_HTONS_VOL_HP+0x298>)
 8014442:	fb25 2203 	smlad	r2, r5, r3, r2
 8014446:	4b48      	ldr	r3, [pc, #288]	; (8014568 <D128_1CH_HTONS_VOL_HP+0x29c>)
 8014448:	fb24 2203 	smlad	r2, r4, r3, r2
 801444c:	4b47      	ldr	r3, [pc, #284]	; (801456c <D128_1CH_HTONS_VOL_HP+0x2a0>)
 801444e:	fb20 2803 	smlad	r8, r0, r3, r2
 8014452:	4b47      	ldr	r3, [pc, #284]	; (8014570 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 8014454:	9a01      	ldr	r2, [sp, #4]
 8014456:	fb22 8203 	smlad	r2, r2, r3, r8
 801445a:	4b46      	ldr	r3, [pc, #280]	; (8014574 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 801445c:	9102      	str	r1, [sp, #8]
 801445e:	fb21 2203 	smlad	r2, r1, r3, r2
 8014462:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 8014466:	fb26 2308 	smlad	r3, r6, r8, r2
 801446a:	4619      	mov	r1, r3
 801446c:	9a03      	ldr	r2, [sp, #12]
 801446e:	4b42      	ldr	r3, [pc, #264]	; (8014578 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 8014470:	fb2e 2803 	smlad	r8, lr, r3, r2
 8014474:	4b41      	ldr	r3, [pc, #260]	; (801457c <D128_1CH_HTONS_VOL_HP+0x2b0>)
 8014476:	fb27 8a03 	smlad	sl, r7, r3, r8
 801447a:	f8df 8120 	ldr.w	r8, [pc, #288]	; 801459c <D128_1CH_HTONS_VOL_HP+0x2d0>
 801447e:	fb25 a808 	smlad	r8, r5, r8, sl
 8014482:	f8df a11c 	ldr.w	sl, [pc, #284]	; 80145a0 <D128_1CH_HTONS_VOL_HP+0x2d4>
 8014486:	fb24 880a 	smlad	r8, r4, sl, r8
 801448a:	f8df a118 	ldr.w	sl, [pc, #280]	; 80145a4 <D128_1CH_HTONS_VOL_HP+0x2d8>
 801448e:	fb20 8a0a 	smlad	sl, r0, sl, r8
 8014492:	f8df 8114 	ldr.w	r8, [pc, #276]	; 80145a8 <D128_1CH_HTONS_VOL_HP+0x2dc>
 8014496:	9b01      	ldr	r3, [sp, #4]
 8014498:	fb23 aa08 	smlad	sl, r3, r8, sl
 801449c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 80145ac <D128_1CH_HTONS_VOL_HP+0x2e0>
 80144a0:	9a02      	ldr	r2, [sp, #8]
 80144a2:	fb22 a808 	smlad	r8, r2, r8, sl
 80144a6:	f8df a108 	ldr.w	sl, [pc, #264]	; 80145b0 <D128_1CH_HTONS_VOL_HP+0x2e4>
 80144aa:	fb26 830a 	smlad	r3, r6, sl, r8
 80144ae:	f04f 0801 	mov.w	r8, #1
 80144b2:	9302      	str	r3, [sp, #8]
 80144b4:	fb2e fe08 	smuad	lr, lr, r8
 80144b8:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 80145b4 <D128_1CH_HTONS_VOL_HP+0x2e8>
 80144bc:	fb27 ee08 	smlad	lr, r7, r8, lr
 80144c0:	4f2f      	ldr	r7, [pc, #188]	; (8014580 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 80144c2:	fb25 ee07 	smlad	lr, r5, r7, lr
 80144c6:	4f2f      	ldr	r7, [pc, #188]	; (8014584 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 80144c8:	fb24 ee07 	smlad	lr, r4, r7, lr
 80144cc:	4f2e      	ldr	r7, [pc, #184]	; (8014588 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 80144ce:	fb20 ee07 	smlad	lr, r0, r7, lr
 80144d2:	4f2e      	ldr	r7, [pc, #184]	; (801458c <D128_1CH_HTONS_VOL_HP+0x2c0>)
 80144d4:	9b01      	ldr	r3, [sp, #4]
 80144d6:	fb23 ee07 	smlad	lr, r3, r7, lr
 80144da:	4f2d      	ldr	r7, [pc, #180]	; (8014590 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 80144dc:	fb22 e707 	smlad	r7, r2, r7, lr
 80144e0:	4b2c      	ldr	r3, [pc, #176]	; (8014594 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 80144e2:	fb26 7303 	smlad	r3, r6, r3, r7
 80144e6:	f5a1 1680 	sub.w	r6, r1, #1048576	; 0x100000
 80144ea:	9303      	str	r3, [sp, #12]
 80144ec:	9b04      	ldr	r3, [sp, #16]
 80144ee:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80144f2:	9f08      	ldr	r7, [sp, #32]
 80144f4:	2100      	movs	r1, #0
 80144f6:	4433      	add	r3, r6
 80144f8:	f10b 0b10 	add.w	fp, fp, #16
 80144fc:	461a      	mov	r2, r3
 80144fe:	9b05      	ldr	r3, [sp, #20]
 8014500:	9605      	str	r6, [sp, #20]
 8014502:	1ad2      	subs	r2, r2, r3
 8014504:	17d5      	asrs	r5, r2, #31
 8014506:	fba2 2307 	umull	r2, r3, r2, r7
 801450a:	1814      	adds	r4, r2, r0
 801450c:	fb07 3305 	mla	r3, r7, r5, r3
 8014510:	eb43 0501 	adc.w	r5, r3, r1
 8014514:	006b      	lsls	r3, r5, #1
 8014516:	022a      	lsls	r2, r5, #8
 8014518:	9304      	str	r3, [sp, #16]
 801451a:	9b07      	ldr	r3, [sp, #28]
 801451c:	fbc3 0102 	smlal	r0, r1, r3, r2
 8014520:	9a06      	ldr	r2, [sp, #24]
 8014522:	108b      	asrs	r3, r1, #2
 8014524:	f303 030f 	ssat	r3, #16, r3
 8014528:	f822 3b02 	strh.w	r3, [r2], #2
 801452c:	4613      	mov	r3, r2
 801452e:	9206      	str	r2, [sp, #24]
 8014530:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014532:	4293      	cmp	r3, r2
 8014534:	f47f aeea 	bne.w	801430c <D128_1CH_HTONS_VOL_HP+0x40>
 8014538:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801453a:	2000      	movs	r0, #0
 801453c:	9903      	ldr	r1, [sp, #12]
 801453e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014540:	6099      	str	r1, [r3, #8]
 8014542:	9902      	ldr	r1, [sp, #8]
 8014544:	f8c3 c01c 	str.w	ip, [r3, #28]
 8014548:	60d9      	str	r1, [r3, #12]
 801454a:	9904      	ldr	r1, [sp, #16]
 801454c:	619a      	str	r2, [r3, #24]
 801454e:	e9c3 1604 	strd	r1, r6, [r3, #16]
 8014552:	b00d      	add	sp, #52	; 0x34
 8014554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014558:	9e05      	ldr	r6, [sp, #20]
 801455a:	e7ed      	b.n	8014538 <D128_1CH_HTONS_VOL_HP+0x26c>
 801455c:	00780069 	.word	0x00780069
 8014560:	005b004e 	.word	0x005b004e
 8014564:	00420037 	.word	0x00420037
 8014568:	002d0024 	.word	0x002d0024
 801456c:	001c0015 	.word	0x001c0015
 8014570:	000f000a 	.word	0x000f000a
 8014574:	00060003 	.word	0x00060003
 8014578:	00880096 	.word	0x00880096
 801457c:	00a200ac 	.word	0x00a200ac
 8014580:	000a000f 	.word	0x000a000f
 8014584:	0015001c 	.word	0x0015001c
 8014588:	0024002d 	.word	0x0024002d
 801458c:	00370042 	.word	0x00370042
 8014590:	004e005b 	.word	0x004e005b
 8014594:	00690078 	.word	0x00690078
 8014598:	24000000 	.word	0x24000000
 801459c:	00b400ba 	.word	0x00b400ba
 80145a0:	00be00c0 	.word	0x00be00c0
 80145a4:	00c000be 	.word	0x00c000be
 80145a8:	00ba00b4 	.word	0x00ba00b4
 80145ac:	00ac00a2 	.word	0x00ac00a2
 80145b0:	00960088 	.word	0x00960088
 80145b4:	00030006 	.word	0x00030006

080145b8 <PDM_Filter_Init>:
 80145b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145ba:	2240      	movs	r2, #64	; 0x40
 80145bc:	2100      	movs	r1, #0
 80145be:	4604      	mov	r4, r0
 80145c0:	300c      	adds	r0, #12
 80145c2:	f000 fcbb 	bl	8014f3c <memset>
 80145c6:	4a56      	ldr	r2, [pc, #344]	; (8014720 <PDM_Filter_Init+0x168>)
 80145c8:	4856      	ldr	r0, [pc, #344]	; (8014724 <PDM_Filter_Init+0x16c>)
 80145ca:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 80145ce:	6813      	ldr	r3, [r2, #0]
 80145d0:	f24c 2540 	movw	r5, #49728	; 0xc240
 80145d4:	f023 0301 	bic.w	r3, r3, #1
 80145d8:	6013      	str	r3, [r2, #0]
 80145da:	6803      	ldr	r3, [r0, #0]
 80145dc:	400b      	ands	r3, r1
 80145de:	42ab      	cmp	r3, r5
 80145e0:	d040      	beq.n	8014664 <PDM_Filter_Init+0xac>
 80145e2:	6803      	ldr	r3, [r0, #0]
 80145e4:	f24c 2270 	movw	r2, #49776	; 0xc270
 80145e8:	4019      	ands	r1, r3
 80145ea:	4291      	cmp	r1, r2
 80145ec:	d03a      	beq.n	8014664 <PDM_Filter_Init+0xac>
 80145ee:	4b4e      	ldr	r3, [pc, #312]	; (8014728 <PDM_Filter_Init+0x170>)
 80145f0:	2101      	movs	r1, #1
 80145f2:	461a      	mov	r2, r3
 80145f4:	6019      	str	r1, [r3, #0]
 80145f6:	6813      	ldr	r3, [r2, #0]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d1fc      	bne.n	80145f6 <PDM_Filter_Init+0x3e>
 80145fc:	4b4b      	ldr	r3, [pc, #300]	; (801472c <PDM_Filter_Init+0x174>)
 80145fe:	494c      	ldr	r1, [pc, #304]	; (8014730 <PDM_Filter_Init+0x178>)
 8014600:	4a4c      	ldr	r2, [pc, #304]	; (8014734 <PDM_Filter_Init+0x17c>)
 8014602:	6019      	str	r1, [r3, #0]
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	8820      	ldrh	r0, [r4, #0]
 8014608:	4293      	cmp	r3, r2
 801460a:	8961      	ldrh	r1, [r4, #10]
 801460c:	f04f 0300 	mov.w	r3, #0
 8014610:	8922      	ldrh	r2, [r4, #8]
 8014612:	bf14      	ite	ne
 8014614:	2500      	movne	r5, #0
 8014616:	4d47      	ldreq	r5, [pc, #284]	; (8014734 <PDM_Filter_Init+0x17c>)
 8014618:	2801      	cmp	r0, #1
 801461a:	61a3      	str	r3, [r4, #24]
 801461c:	6465      	str	r5, [r4, #68]	; 0x44
 801461e:	60e3      	str	r3, [r4, #12]
 8014620:	6263      	str	r3, [r4, #36]	; 0x24
 8014622:	6423      	str	r3, [r4, #64]	; 0x40
 8014624:	86a1      	strh	r1, [r4, #52]	; 0x34
 8014626:	86e2      	strh	r2, [r4, #54]	; 0x36
 8014628:	e9c4 3304 	strd	r3, r3, [r4, #16]
 801462c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8014630:	d936      	bls.n	80146a0 <PDM_Filter_Init+0xe8>
 8014632:	2003      	movs	r0, #3
 8014634:	2302      	movs	r3, #2
 8014636:	8862      	ldrh	r2, [r4, #2]
 8014638:	2a01      	cmp	r2, #1
 801463a:	d92e      	bls.n	801469a <PDM_Filter_Init+0xe2>
 801463c:	2140      	movs	r1, #64	; 0x40
 801463e:	2300      	movs	r3, #0
 8014640:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8014642:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8014646:	d101      	bne.n	801464c <PDM_Filter_Init+0x94>
 8014648:	460b      	mov	r3, r1
 801464a:	6421      	str	r1, [r4, #64]	; 0x40
 801464c:	6862      	ldr	r2, [r4, #4]
 801464e:	b11a      	cbz	r2, 8014658 <PDM_Filter_Init+0xa0>
 8014650:	f043 0310 	orr.w	r3, r3, #16
 8014654:	62e2      	str	r2, [r4, #44]	; 0x2c
 8014656:	6423      	str	r3, [r4, #64]	; 0x40
 8014658:	2200      	movs	r2, #0
 801465a:	8722      	strh	r2, [r4, #56]	; 0x38
 801465c:	b908      	cbnz	r0, 8014662 <PDM_Filter_Init+0xaa>
 801465e:	3380      	adds	r3, #128	; 0x80
 8014660:	6423      	str	r3, [r4, #64]	; 0x40
 8014662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014664:	4b34      	ldr	r3, [pc, #208]	; (8014738 <PDM_Filter_Init+0x180>)
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d1c0      	bne.n	80145ee <PDM_Filter_Init+0x36>
 801466c:	4a33      	ldr	r2, [pc, #204]	; (801473c <PDM_Filter_Init+0x184>)
 801466e:	6813      	ldr	r3, [r2, #0]
 8014670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014674:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8014678:	d006      	beq.n	8014688 <PDM_Filter_Init+0xd0>
 801467a:	6813      	ldr	r3, [r2, #0]
 801467c:	f240 4283 	movw	r2, #1155	; 0x483
 8014680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014684:	4293      	cmp	r3, r2
 8014686:	d1b2      	bne.n	80145ee <PDM_Filter_Init+0x36>
 8014688:	4b2d      	ldr	r3, [pc, #180]	; (8014740 <PDM_Filter_Init+0x188>)
 801468a:	2101      	movs	r1, #1
 801468c:	461a      	mov	r2, r3
 801468e:	6019      	str	r1, [r3, #0]
 8014690:	6813      	ldr	r3, [r2, #0]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d1fc      	bne.n	8014690 <PDM_Filter_Init+0xd8>
 8014696:	4b2b      	ldr	r3, [pc, #172]	; (8014744 <PDM_Filter_Init+0x18c>)
 8014698:	e7b1      	b.n	80145fe <PDM_Filter_Init+0x46>
 801469a:	d03a      	beq.n	8014712 <PDM_Filter_Init+0x15a>
 801469c:	4618      	mov	r0, r3
 801469e:	e7cd      	b.n	801463c <PDM_Filter_Init+0x84>
 80146a0:	4d29      	ldr	r5, [pc, #164]	; (8014748 <PDM_Filter_Init+0x190>)
 80146a2:	782a      	ldrb	r2, [r5, #0]
 80146a4:	d01b      	beq.n	80146de <PDM_Filter_Init+0x126>
 80146a6:	2a01      	cmp	r2, #1
 80146a8:	d001      	beq.n	80146ae <PDM_Filter_Init+0xf6>
 80146aa:	2001      	movs	r0, #1
 80146ac:	e7c3      	b.n	8014636 <PDM_Filter_Init+0x7e>
 80146ae:	4927      	ldr	r1, [pc, #156]	; (801474c <PDM_Filter_Init+0x194>)
 80146b0:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8014754 <PDM_Filter_Init+0x19c>
 80146b4:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 80146b8:	4e25      	ldr	r6, [pc, #148]	; (8014750 <PDM_Filter_Init+0x198>)
 80146ba:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80146be:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 80146c2:	ea02 0006 	and.w	r0, r2, r6
 80146c6:	f3c2 5209 	ubfx	r2, r2, #20, #10
 80146ca:	428f      	cmp	r7, r1
 80146cc:	ea43 0300 	orr.w	r3, r3, r0
 80146d0:	4413      	add	r3, r2
 80146d2:	600b      	str	r3, [r1, #0]
 80146d4:	d1f1      	bne.n	80146ba <PDM_Filter_Init+0x102>
 80146d6:	2300      	movs	r3, #0
 80146d8:	2001      	movs	r0, #1
 80146da:	702b      	strb	r3, [r5, #0]
 80146dc:	e7ab      	b.n	8014636 <PDM_Filter_Init+0x7e>
 80146de:	2a00      	cmp	r2, #0
 80146e0:	d1a9      	bne.n	8014636 <PDM_Filter_Init+0x7e>
 80146e2:	491a      	ldr	r1, [pc, #104]	; (801474c <PDM_Filter_Init+0x194>)
 80146e4:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8014754 <PDM_Filter_Init+0x19c>
 80146e8:	f501 6780 	add.w	r7, r1, #1024	; 0x400
 80146ec:	4e18      	ldr	r6, [pc, #96]	; (8014750 <PDM_Filter_Init+0x198>)
 80146ee:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80146f2:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 80146f6:	ea02 0006 	and.w	r0, r2, r6
 80146fa:	f3c2 5209 	ubfx	r2, r2, #20, #10
 80146fe:	428f      	cmp	r7, r1
 8014700:	ea43 0300 	orr.w	r3, r3, r0
 8014704:	4413      	add	r3, r2
 8014706:	600b      	str	r3, [r1, #0]
 8014708:	d1f1      	bne.n	80146ee <PDM_Filter_Init+0x136>
 801470a:	2001      	movs	r0, #1
 801470c:	2300      	movs	r3, #0
 801470e:	7028      	strb	r0, [r5, #0]
 8014710:	e791      	b.n	8014636 <PDM_Filter_Init+0x7e>
 8014712:	2220      	movs	r2, #32
 8014714:	4618      	mov	r0, r3
 8014716:	2160      	movs	r1, #96	; 0x60
 8014718:	6422      	str	r2, [r4, #64]	; 0x40
 801471a:	4613      	mov	r3, r2
 801471c:	e790      	b.n	8014640 <PDM_Filter_Init+0x88>
 801471e:	bf00      	nop
 8014720:	e0002000 	.word	0xe0002000
 8014724:	e000ed00 	.word	0xe000ed00
 8014728:	40023008 	.word	0x40023008
 801472c:	40023000 	.word	0x40023000
 8014730:	f407a5c2 	.word	0xf407a5c2
 8014734:	b5e8b5cd 	.word	0xb5e8b5cd
 8014738:	e0042000 	.word	0xe0042000
 801473c:	5c001000 	.word	0x5c001000
 8014740:	58024c08 	.word	0x58024c08
 8014744:	58024c00 	.word	0x58024c00
 8014748:	240007dc 	.word	0x240007dc
 801474c:	23fffffc 	.word	0x23fffffc
 8014750:	000ffc00 	.word	0x000ffc00
 8014754:	3ff00000 	.word	0x3ff00000

08014758 <PDM_Filter_setConfig>:
 8014758:	4b67      	ldr	r3, [pc, #412]	; (80148f8 <PDM_Filter_setConfig+0x1a0>)
 801475a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801475c:	429a      	cmp	r2, r3
 801475e:	d128      	bne.n	80147b2 <PDM_Filter_setConfig+0x5a>
 8014760:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8014762:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014764:	880e      	ldrh	r6, [r1, #0]
 8014766:	460d      	mov	r5, r1
 8014768:	4604      	mov	r4, r0
 801476a:	f422 7180 	bic.w	r1, r2, #256	; 0x100
 801476e:	1e73      	subs	r3, r6, #1
 8014770:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
 8014774:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
 8014778:	2b06      	cmp	r3, #6
 801477a:	ed2d 8b02 	vpush	{d8}
 801477e:	6421      	str	r1, [r4, #64]	; 0x40
 8014780:	b083      	sub	sp, #12
 8014782:	d820      	bhi.n	80147c6 <PDM_Filter_setConfig+0x6e>
 8014784:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8014786:	42b3      	cmp	r3, r6
 8014788:	d03d      	beq.n	8014806 <PDM_Filter_setConfig+0xae>
 801478a:	4b5c      	ldr	r3, [pc, #368]	; (80148fc <PDM_Filter_setConfig+0x1a4>)
 801478c:	4013      	ands	r3, r2
 801478e:	4333      	orrs	r3, r6
 8014790:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8014794:	6423      	str	r3, [r4, #64]	; 0x40
 8014796:	f003 030f 	and.w	r3, r3, #15
 801479a:	2a70      	cmp	r2, #112	; 0x70
 801479c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80147a0:	d009      	beq.n	80147b6 <PDM_Filter_setConfig+0x5e>
 80147a2:	2b06      	cmp	r3, #6
 80147a4:	d824      	bhi.n	80147f0 <PDM_Filter_setConfig+0x98>
 80147a6:	e8df f003 	tbb	[pc, r3]
 80147aa:	878a      	.short	0x878a
 80147ac:	7b7e8184 	.word	0x7b7e8184
 80147b0:	78          	.byte	0x78
 80147b1:	00          	.byte	0x00
 80147b2:	2004      	movs	r0, #4
 80147b4:	4770      	bx	lr
 80147b6:	2b06      	cmp	r3, #6
 80147b8:	d81a      	bhi.n	80147f0 <PDM_Filter_setConfig+0x98>
 80147ba:	e8df f003 	tbb	[pc, r3]
 80147be:	8f92      	.short	0x8f92
 80147c0:	8617898c 	.word	0x8617898c
 80147c4:	83          	.byte	0x83
 80147c5:	00          	.byte	0x00
 80147c6:	4287      	cmp	r7, r0
 80147c8:	f000 808e 	beq.w	80148e8 <PDM_Filter_setConfig+0x190>
 80147cc:	f117 0f0c 	cmn.w	r7, #12
 80147d0:	f04f 0008 	mov.w	r0, #8
 80147d4:	da11      	bge.n	80147fa <PDM_Filter_setConfig+0xa2>
 80147d6:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 80147da:	3040      	adds	r0, #64	; 0x40
 80147dc:	80ab      	strh	r3, [r5, #4]
 80147de:	886b      	ldrh	r3, [r5, #2]
 80147e0:	8626      	strh	r6, [r4, #48]	; 0x30
 80147e2:	8663      	strh	r3, [r4, #50]	; 0x32
 80147e4:	b003      	add	sp, #12
 80147e6:	ecbd 8b02 	vpop	{d8}
 80147ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147ec:	4b44      	ldr	r3, [pc, #272]	; (8014900 <PDM_Filter_setConfig+0x1a8>)
 80147ee:	64a3      	str	r3, [r4, #72]	; 0x48
 80147f0:	f117 0f0c 	cmn.w	r7, #12
 80147f4:	f04f 0000 	mov.w	r0, #0
 80147f8:	dbed      	blt.n	80147d6 <PDM_Filter_setConfig+0x7e>
 80147fa:	2f33      	cmp	r7, #51	; 0x33
 80147fc:	dd10      	ble.n	8014820 <PDM_Filter_setConfig+0xc8>
 80147fe:	2333      	movs	r3, #51	; 0x33
 8014800:	3040      	adds	r0, #64	; 0x40
 8014802:	80ab      	strh	r3, [r5, #4]
 8014804:	e7eb      	b.n	80147de <PDM_Filter_setConfig+0x86>
 8014806:	4287      	cmp	r7, r0
 8014808:	d1f2      	bne.n	80147f0 <PDM_Filter_setConfig+0x98>
 801480a:	886b      	ldrh	r3, [r5, #2]
 801480c:	8663      	strh	r3, [r4, #50]	; 0x32
 801480e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014810:	2000      	movs	r0, #0
 8014812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014816:	6423      	str	r3, [r4, #64]	; 0x40
 8014818:	b003      	add	sp, #12
 801481a:	ecbd 8b02 	vpop	{d8}
 801481e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014820:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014822:	f003 030f 	and.w	r3, r3, #15
 8014826:	3b01      	subs	r3, #1
 8014828:	2b06      	cmp	r3, #6
 801482a:	d831      	bhi.n	8014890 <PDM_Filter_setConfig+0x138>
 801482c:	4a35      	ldr	r2, [pc, #212]	; (8014904 <PDM_Filter_setConfig+0x1ac>)
 801482e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8014832:	eddf 0a35 	vldr	s1, [pc, #212]	; 8014908 <PDM_Filter_setConfig+0x1b0>
 8014836:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801483a:	9001      	str	r0, [sp, #4]
 801483c:	edd3 7a07 	vldr	s15, [r3, #28]
 8014840:	ed93 8a00 	vldr	s16, [r3]
 8014844:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8014848:	f001 fada 	bl	8015e00 <powf>
 801484c:	eef0 8a40 	vmov.f32	s17, s0
 8014850:	9801      	ldr	r0, [sp, #4]
 8014852:	ee07 7a90 	vmov	s15, r7
 8014856:	ee28 8a28 	vmul.f32	s16, s16, s17
 801485a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 801485e:	9001      	str	r0, [sp, #4]
 8014860:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8014864:	eddf 7a29 	vldr	s15, [pc, #164]	; 801490c <PDM_Filter_setConfig+0x1b4>
 8014868:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801486c:	f001 fac8 	bl	8015e00 <powf>
 8014870:	ee28 8a00 	vmul.f32	s16, s16, s0
 8014874:	886b      	ldrh	r3, [r5, #2]
 8014876:	9801      	ldr	r0, [sp, #4]
 8014878:	feb8 8a48 	vrinta.f32	s16, s16
 801487c:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 8014880:	8727      	strh	r7, [r4, #56]	; 0x38
 8014882:	8663      	strh	r3, [r4, #50]	; 0x32
 8014884:	8626      	strh	r6, [r4, #48]	; 0x30
 8014886:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
 801488a:	2800      	cmp	r0, #0
 801488c:	d0bf      	beq.n	801480e <PDM_Filter_setConfig+0xb6>
 801488e:	e7a9      	b.n	80147e4 <PDM_Filter_setConfig+0x8c>
 8014890:	eddf 8a1f 	vldr	s17, [pc, #124]	; 8014910 <PDM_Filter_setConfig+0x1b8>
 8014894:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 8014914 <PDM_Filter_setConfig+0x1bc>
 8014898:	e7db      	b.n	8014852 <PDM_Filter_setConfig+0xfa>
 801489a:	4b1f      	ldr	r3, [pc, #124]	; (8014918 <PDM_Filter_setConfig+0x1c0>)
 801489c:	64a3      	str	r3, [r4, #72]	; 0x48
 801489e:	e7a7      	b.n	80147f0 <PDM_Filter_setConfig+0x98>
 80148a0:	4b1e      	ldr	r3, [pc, #120]	; (801491c <PDM_Filter_setConfig+0x1c4>)
 80148a2:	64a3      	str	r3, [r4, #72]	; 0x48
 80148a4:	e7a4      	b.n	80147f0 <PDM_Filter_setConfig+0x98>
 80148a6:	4b1e      	ldr	r3, [pc, #120]	; (8014920 <PDM_Filter_setConfig+0x1c8>)
 80148a8:	64a3      	str	r3, [r4, #72]	; 0x48
 80148aa:	e7a1      	b.n	80147f0 <PDM_Filter_setConfig+0x98>
 80148ac:	4b1d      	ldr	r3, [pc, #116]	; (8014924 <PDM_Filter_setConfig+0x1cc>)
 80148ae:	64a3      	str	r3, [r4, #72]	; 0x48
 80148b0:	e79e      	b.n	80147f0 <PDM_Filter_setConfig+0x98>
 80148b2:	4b1d      	ldr	r3, [pc, #116]	; (8014928 <PDM_Filter_setConfig+0x1d0>)
 80148b4:	64a3      	str	r3, [r4, #72]	; 0x48
 80148b6:	e79b      	b.n	80147f0 <PDM_Filter_setConfig+0x98>
 80148b8:	4b1c      	ldr	r3, [pc, #112]	; (801492c <PDM_Filter_setConfig+0x1d4>)
 80148ba:	64a3      	str	r3, [r4, #72]	; 0x48
 80148bc:	e798      	b.n	80147f0 <PDM_Filter_setConfig+0x98>
 80148be:	4b1c      	ldr	r3, [pc, #112]	; (8014930 <PDM_Filter_setConfig+0x1d8>)
 80148c0:	64a3      	str	r3, [r4, #72]	; 0x48
 80148c2:	e795      	b.n	80147f0 <PDM_Filter_setConfig+0x98>
 80148c4:	4b1b      	ldr	r3, [pc, #108]	; (8014934 <PDM_Filter_setConfig+0x1dc>)
 80148c6:	64a3      	str	r3, [r4, #72]	; 0x48
 80148c8:	e792      	b.n	80147f0 <PDM_Filter_setConfig+0x98>
 80148ca:	4b1b      	ldr	r3, [pc, #108]	; (8014938 <PDM_Filter_setConfig+0x1e0>)
 80148cc:	64a3      	str	r3, [r4, #72]	; 0x48
 80148ce:	e78f      	b.n	80147f0 <PDM_Filter_setConfig+0x98>
 80148d0:	4b1a      	ldr	r3, [pc, #104]	; (801493c <PDM_Filter_setConfig+0x1e4>)
 80148d2:	64a3      	str	r3, [r4, #72]	; 0x48
 80148d4:	e78c      	b.n	80147f0 <PDM_Filter_setConfig+0x98>
 80148d6:	4b1a      	ldr	r3, [pc, #104]	; (8014940 <PDM_Filter_setConfig+0x1e8>)
 80148d8:	64a3      	str	r3, [r4, #72]	; 0x48
 80148da:	e789      	b.n	80147f0 <PDM_Filter_setConfig+0x98>
 80148dc:	4b19      	ldr	r3, [pc, #100]	; (8014944 <PDM_Filter_setConfig+0x1ec>)
 80148de:	64a3      	str	r3, [r4, #72]	; 0x48
 80148e0:	e786      	b.n	80147f0 <PDM_Filter_setConfig+0x98>
 80148e2:	4b19      	ldr	r3, [pc, #100]	; (8014948 <PDM_Filter_setConfig+0x1f0>)
 80148e4:	64a3      	str	r3, [r4, #72]	; 0x48
 80148e6:	e783      	b.n	80147f0 <PDM_Filter_setConfig+0x98>
 80148e8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80148ea:	42b3      	cmp	r3, r6
 80148ec:	f47f af6e 	bne.w	80147cc <PDM_Filter_setConfig+0x74>
 80148f0:	886b      	ldrh	r3, [r5, #2]
 80148f2:	2008      	movs	r0, #8
 80148f4:	8663      	strh	r3, [r4, #50]	; 0x32
 80148f6:	e775      	b.n	80147e4 <PDM_Filter_setConfig+0x8c>
 80148f8:	b5e8b5cd 	.word	0xb5e8b5cd
 80148fc:	fffffef0 	.word	0xfffffef0
 8014900:	08013a71 	.word	0x08013a71
 8014904:	080163fc 	.word	0x080163fc
 8014908:	42000000 	.word	0x42000000
 801490c:	3d4ccccd 	.word	0x3d4ccccd
 8014910:	4f800000 	.word	0x4f800000
 8014914:	00000000 	.word	0x00000000
 8014918:	08012e7d 	.word	0x08012e7d
 801491c:	08012d05 	.word	0x08012d05
 8014920:	08012bf5 	.word	0x08012bf5
 8014924:	080136b9 	.word	0x080136b9
 8014928:	08013421 	.word	0x08013421
 801492c:	080131e9 	.word	0x080131e9
 8014930:	08013005 	.word	0x08013005
 8014934:	08013c8d 	.word	0x08013c8d
 8014938:	08013b51 	.word	0x08013b51
 801493c:	080142cd 	.word	0x080142cd
 8014940:	080140d1 	.word	0x080140d1
 8014944:	08013f25 	.word	0x08013f25
 8014948:	08013db9 	.word	0x08013db9

0801494c <PDM_Filter>:
 801494c:	b410      	push	{r4}
 801494e:	4b0b      	ldr	r3, [pc, #44]	; (801497c <PDM_Filter+0x30>)
 8014950:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8014952:	429c      	cmp	r4, r3
 8014954:	d107      	bne.n	8014966 <PDM_Filter+0x1a>
 8014956:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8014958:	05dc      	lsls	r4, r3, #23
 801495a:	d508      	bpl.n	801496e <PDM_Filter+0x22>
 801495c:	6c93      	ldr	r3, [r2, #72]	; 0x48
 801495e:	320c      	adds	r2, #12
 8014960:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014964:	4718      	bx	r3
 8014966:	2004      	movs	r0, #4
 8014968:	f85d 4b04 	ldr.w	r4, [sp], #4
 801496c:	4770      	bx	lr
 801496e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014972:	bf14      	ite	ne
 8014974:	2020      	movne	r0, #32
 8014976:	2030      	moveq	r0, #48	; 0x30
 8014978:	e7f6      	b.n	8014968 <PDM_Filter+0x1c>
 801497a:	bf00      	nop
 801497c:	b5e8b5cd 	.word	0xb5e8b5cd

08014980 <std>:
 8014980:	2300      	movs	r3, #0
 8014982:	b510      	push	{r4, lr}
 8014984:	4604      	mov	r4, r0
 8014986:	e9c0 3300 	strd	r3, r3, [r0]
 801498a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801498e:	6083      	str	r3, [r0, #8]
 8014990:	8181      	strh	r1, [r0, #12]
 8014992:	6643      	str	r3, [r0, #100]	; 0x64
 8014994:	81c2      	strh	r2, [r0, #14]
 8014996:	6183      	str	r3, [r0, #24]
 8014998:	4619      	mov	r1, r3
 801499a:	2208      	movs	r2, #8
 801499c:	305c      	adds	r0, #92	; 0x5c
 801499e:	f000 facd 	bl	8014f3c <memset>
 80149a2:	4b0d      	ldr	r3, [pc, #52]	; (80149d8 <std+0x58>)
 80149a4:	6263      	str	r3, [r4, #36]	; 0x24
 80149a6:	4b0d      	ldr	r3, [pc, #52]	; (80149dc <std+0x5c>)
 80149a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80149aa:	4b0d      	ldr	r3, [pc, #52]	; (80149e0 <std+0x60>)
 80149ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80149ae:	4b0d      	ldr	r3, [pc, #52]	; (80149e4 <std+0x64>)
 80149b0:	6323      	str	r3, [r4, #48]	; 0x30
 80149b2:	4b0d      	ldr	r3, [pc, #52]	; (80149e8 <std+0x68>)
 80149b4:	6224      	str	r4, [r4, #32]
 80149b6:	429c      	cmp	r4, r3
 80149b8:	d006      	beq.n	80149c8 <std+0x48>
 80149ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80149be:	4294      	cmp	r4, r2
 80149c0:	d002      	beq.n	80149c8 <std+0x48>
 80149c2:	33d0      	adds	r3, #208	; 0xd0
 80149c4:	429c      	cmp	r4, r3
 80149c6:	d105      	bne.n	80149d4 <std+0x54>
 80149c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80149cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80149d0:	f000 bb2c 	b.w	801502c <__retarget_lock_init_recursive>
 80149d4:	bd10      	pop	{r4, pc}
 80149d6:	bf00      	nop
 80149d8:	08014d8d 	.word	0x08014d8d
 80149dc:	08014daf 	.word	0x08014daf
 80149e0:	08014de7 	.word	0x08014de7
 80149e4:	08014e0b 	.word	0x08014e0b
 80149e8:	240081c4 	.word	0x240081c4

080149ec <stdio_exit_handler>:
 80149ec:	4a02      	ldr	r2, [pc, #8]	; (80149f8 <stdio_exit_handler+0xc>)
 80149ee:	4903      	ldr	r1, [pc, #12]	; (80149fc <stdio_exit_handler+0x10>)
 80149f0:	4803      	ldr	r0, [pc, #12]	; (8014a00 <stdio_exit_handler+0x14>)
 80149f2:	f000 b869 	b.w	8014ac8 <_fwalk_sglue>
 80149f6:	bf00      	nop
 80149f8:	2400054c 	.word	0x2400054c
 80149fc:	08015bb5 	.word	0x08015bb5
 8014a00:	24000558 	.word	0x24000558

08014a04 <cleanup_stdio>:
 8014a04:	6841      	ldr	r1, [r0, #4]
 8014a06:	4b0c      	ldr	r3, [pc, #48]	; (8014a38 <cleanup_stdio+0x34>)
 8014a08:	4299      	cmp	r1, r3
 8014a0a:	b510      	push	{r4, lr}
 8014a0c:	4604      	mov	r4, r0
 8014a0e:	d001      	beq.n	8014a14 <cleanup_stdio+0x10>
 8014a10:	f001 f8d0 	bl	8015bb4 <_fflush_r>
 8014a14:	68a1      	ldr	r1, [r4, #8]
 8014a16:	4b09      	ldr	r3, [pc, #36]	; (8014a3c <cleanup_stdio+0x38>)
 8014a18:	4299      	cmp	r1, r3
 8014a1a:	d002      	beq.n	8014a22 <cleanup_stdio+0x1e>
 8014a1c:	4620      	mov	r0, r4
 8014a1e:	f001 f8c9 	bl	8015bb4 <_fflush_r>
 8014a22:	68e1      	ldr	r1, [r4, #12]
 8014a24:	4b06      	ldr	r3, [pc, #24]	; (8014a40 <cleanup_stdio+0x3c>)
 8014a26:	4299      	cmp	r1, r3
 8014a28:	d004      	beq.n	8014a34 <cleanup_stdio+0x30>
 8014a2a:	4620      	mov	r0, r4
 8014a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a30:	f001 b8c0 	b.w	8015bb4 <_fflush_r>
 8014a34:	bd10      	pop	{r4, pc}
 8014a36:	bf00      	nop
 8014a38:	240081c4 	.word	0x240081c4
 8014a3c:	2400822c 	.word	0x2400822c
 8014a40:	24008294 	.word	0x24008294

08014a44 <global_stdio_init.part.0>:
 8014a44:	b510      	push	{r4, lr}
 8014a46:	4b0b      	ldr	r3, [pc, #44]	; (8014a74 <global_stdio_init.part.0+0x30>)
 8014a48:	4c0b      	ldr	r4, [pc, #44]	; (8014a78 <global_stdio_init.part.0+0x34>)
 8014a4a:	4a0c      	ldr	r2, [pc, #48]	; (8014a7c <global_stdio_init.part.0+0x38>)
 8014a4c:	601a      	str	r2, [r3, #0]
 8014a4e:	4620      	mov	r0, r4
 8014a50:	2200      	movs	r2, #0
 8014a52:	2104      	movs	r1, #4
 8014a54:	f7ff ff94 	bl	8014980 <std>
 8014a58:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014a5c:	2201      	movs	r2, #1
 8014a5e:	2109      	movs	r1, #9
 8014a60:	f7ff ff8e 	bl	8014980 <std>
 8014a64:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8014a68:	2202      	movs	r2, #2
 8014a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a6e:	2112      	movs	r1, #18
 8014a70:	f7ff bf86 	b.w	8014980 <std>
 8014a74:	240082fc 	.word	0x240082fc
 8014a78:	240081c4 	.word	0x240081c4
 8014a7c:	080149ed 	.word	0x080149ed

08014a80 <__sfp_lock_acquire>:
 8014a80:	4801      	ldr	r0, [pc, #4]	; (8014a88 <__sfp_lock_acquire+0x8>)
 8014a82:	f000 bad4 	b.w	801502e <__retarget_lock_acquire_recursive>
 8014a86:	bf00      	nop
 8014a88:	24008305 	.word	0x24008305

08014a8c <__sfp_lock_release>:
 8014a8c:	4801      	ldr	r0, [pc, #4]	; (8014a94 <__sfp_lock_release+0x8>)
 8014a8e:	f000 bacf 	b.w	8015030 <__retarget_lock_release_recursive>
 8014a92:	bf00      	nop
 8014a94:	24008305 	.word	0x24008305

08014a98 <__sinit>:
 8014a98:	b510      	push	{r4, lr}
 8014a9a:	4604      	mov	r4, r0
 8014a9c:	f7ff fff0 	bl	8014a80 <__sfp_lock_acquire>
 8014aa0:	6a23      	ldr	r3, [r4, #32]
 8014aa2:	b11b      	cbz	r3, 8014aac <__sinit+0x14>
 8014aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014aa8:	f7ff bff0 	b.w	8014a8c <__sfp_lock_release>
 8014aac:	4b04      	ldr	r3, [pc, #16]	; (8014ac0 <__sinit+0x28>)
 8014aae:	6223      	str	r3, [r4, #32]
 8014ab0:	4b04      	ldr	r3, [pc, #16]	; (8014ac4 <__sinit+0x2c>)
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d1f5      	bne.n	8014aa4 <__sinit+0xc>
 8014ab8:	f7ff ffc4 	bl	8014a44 <global_stdio_init.part.0>
 8014abc:	e7f2      	b.n	8014aa4 <__sinit+0xc>
 8014abe:	bf00      	nop
 8014ac0:	08014a05 	.word	0x08014a05
 8014ac4:	240082fc 	.word	0x240082fc

08014ac8 <_fwalk_sglue>:
 8014ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014acc:	4607      	mov	r7, r0
 8014ace:	4688      	mov	r8, r1
 8014ad0:	4614      	mov	r4, r2
 8014ad2:	2600      	movs	r6, #0
 8014ad4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014ad8:	f1b9 0901 	subs.w	r9, r9, #1
 8014adc:	d505      	bpl.n	8014aea <_fwalk_sglue+0x22>
 8014ade:	6824      	ldr	r4, [r4, #0]
 8014ae0:	2c00      	cmp	r4, #0
 8014ae2:	d1f7      	bne.n	8014ad4 <_fwalk_sglue+0xc>
 8014ae4:	4630      	mov	r0, r6
 8014ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014aea:	89ab      	ldrh	r3, [r5, #12]
 8014aec:	2b01      	cmp	r3, #1
 8014aee:	d907      	bls.n	8014b00 <_fwalk_sglue+0x38>
 8014af0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014af4:	3301      	adds	r3, #1
 8014af6:	d003      	beq.n	8014b00 <_fwalk_sglue+0x38>
 8014af8:	4629      	mov	r1, r5
 8014afa:	4638      	mov	r0, r7
 8014afc:	47c0      	blx	r8
 8014afe:	4306      	orrs	r6, r0
 8014b00:	3568      	adds	r5, #104	; 0x68
 8014b02:	e7e9      	b.n	8014ad8 <_fwalk_sglue+0x10>

08014b04 <iprintf>:
 8014b04:	b40f      	push	{r0, r1, r2, r3}
 8014b06:	b507      	push	{r0, r1, r2, lr}
 8014b08:	4906      	ldr	r1, [pc, #24]	; (8014b24 <iprintf+0x20>)
 8014b0a:	ab04      	add	r3, sp, #16
 8014b0c:	6808      	ldr	r0, [r1, #0]
 8014b0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b12:	6881      	ldr	r1, [r0, #8]
 8014b14:	9301      	str	r3, [sp, #4]
 8014b16:	f000 fd1d 	bl	8015554 <_vfiprintf_r>
 8014b1a:	b003      	add	sp, #12
 8014b1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014b20:	b004      	add	sp, #16
 8014b22:	4770      	bx	lr
 8014b24:	240005a4 	.word	0x240005a4

08014b28 <_puts_r>:
 8014b28:	6a03      	ldr	r3, [r0, #32]
 8014b2a:	b570      	push	{r4, r5, r6, lr}
 8014b2c:	6884      	ldr	r4, [r0, #8]
 8014b2e:	4605      	mov	r5, r0
 8014b30:	460e      	mov	r6, r1
 8014b32:	b90b      	cbnz	r3, 8014b38 <_puts_r+0x10>
 8014b34:	f7ff ffb0 	bl	8014a98 <__sinit>
 8014b38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014b3a:	07db      	lsls	r3, r3, #31
 8014b3c:	d405      	bmi.n	8014b4a <_puts_r+0x22>
 8014b3e:	89a3      	ldrh	r3, [r4, #12]
 8014b40:	0598      	lsls	r0, r3, #22
 8014b42:	d402      	bmi.n	8014b4a <_puts_r+0x22>
 8014b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014b46:	f000 fa72 	bl	801502e <__retarget_lock_acquire_recursive>
 8014b4a:	89a3      	ldrh	r3, [r4, #12]
 8014b4c:	0719      	lsls	r1, r3, #28
 8014b4e:	d513      	bpl.n	8014b78 <_puts_r+0x50>
 8014b50:	6923      	ldr	r3, [r4, #16]
 8014b52:	b18b      	cbz	r3, 8014b78 <_puts_r+0x50>
 8014b54:	3e01      	subs	r6, #1
 8014b56:	68a3      	ldr	r3, [r4, #8]
 8014b58:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014b5c:	3b01      	subs	r3, #1
 8014b5e:	60a3      	str	r3, [r4, #8]
 8014b60:	b9e9      	cbnz	r1, 8014b9e <_puts_r+0x76>
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	da2e      	bge.n	8014bc4 <_puts_r+0x9c>
 8014b66:	4622      	mov	r2, r4
 8014b68:	210a      	movs	r1, #10
 8014b6a:	4628      	mov	r0, r5
 8014b6c:	f000 f951 	bl	8014e12 <__swbuf_r>
 8014b70:	3001      	adds	r0, #1
 8014b72:	d007      	beq.n	8014b84 <_puts_r+0x5c>
 8014b74:	250a      	movs	r5, #10
 8014b76:	e007      	b.n	8014b88 <_puts_r+0x60>
 8014b78:	4621      	mov	r1, r4
 8014b7a:	4628      	mov	r0, r5
 8014b7c:	f000 f986 	bl	8014e8c <__swsetup_r>
 8014b80:	2800      	cmp	r0, #0
 8014b82:	d0e7      	beq.n	8014b54 <_puts_r+0x2c>
 8014b84:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8014b88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014b8a:	07da      	lsls	r2, r3, #31
 8014b8c:	d405      	bmi.n	8014b9a <_puts_r+0x72>
 8014b8e:	89a3      	ldrh	r3, [r4, #12]
 8014b90:	059b      	lsls	r3, r3, #22
 8014b92:	d402      	bmi.n	8014b9a <_puts_r+0x72>
 8014b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014b96:	f000 fa4b 	bl	8015030 <__retarget_lock_release_recursive>
 8014b9a:	4628      	mov	r0, r5
 8014b9c:	bd70      	pop	{r4, r5, r6, pc}
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	da04      	bge.n	8014bac <_puts_r+0x84>
 8014ba2:	69a2      	ldr	r2, [r4, #24]
 8014ba4:	429a      	cmp	r2, r3
 8014ba6:	dc06      	bgt.n	8014bb6 <_puts_r+0x8e>
 8014ba8:	290a      	cmp	r1, #10
 8014baa:	d004      	beq.n	8014bb6 <_puts_r+0x8e>
 8014bac:	6823      	ldr	r3, [r4, #0]
 8014bae:	1c5a      	adds	r2, r3, #1
 8014bb0:	6022      	str	r2, [r4, #0]
 8014bb2:	7019      	strb	r1, [r3, #0]
 8014bb4:	e7cf      	b.n	8014b56 <_puts_r+0x2e>
 8014bb6:	4622      	mov	r2, r4
 8014bb8:	4628      	mov	r0, r5
 8014bba:	f000 f92a 	bl	8014e12 <__swbuf_r>
 8014bbe:	3001      	adds	r0, #1
 8014bc0:	d1c9      	bne.n	8014b56 <_puts_r+0x2e>
 8014bc2:	e7df      	b.n	8014b84 <_puts_r+0x5c>
 8014bc4:	6823      	ldr	r3, [r4, #0]
 8014bc6:	250a      	movs	r5, #10
 8014bc8:	1c5a      	adds	r2, r3, #1
 8014bca:	6022      	str	r2, [r4, #0]
 8014bcc:	701d      	strb	r5, [r3, #0]
 8014bce:	e7db      	b.n	8014b88 <_puts_r+0x60>

08014bd0 <puts>:
 8014bd0:	4b02      	ldr	r3, [pc, #8]	; (8014bdc <puts+0xc>)
 8014bd2:	4601      	mov	r1, r0
 8014bd4:	6818      	ldr	r0, [r3, #0]
 8014bd6:	f7ff bfa7 	b.w	8014b28 <_puts_r>
 8014bda:	bf00      	nop
 8014bdc:	240005a4 	.word	0x240005a4

08014be0 <setbuf>:
 8014be0:	fab1 f281 	clz	r2, r1
 8014be4:	0952      	lsrs	r2, r2, #5
 8014be6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014bea:	0052      	lsls	r2, r2, #1
 8014bec:	f000 b800 	b.w	8014bf0 <setvbuf>

08014bf0 <setvbuf>:
 8014bf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014bf4:	461d      	mov	r5, r3
 8014bf6:	4b54      	ldr	r3, [pc, #336]	; (8014d48 <setvbuf+0x158>)
 8014bf8:	681f      	ldr	r7, [r3, #0]
 8014bfa:	4604      	mov	r4, r0
 8014bfc:	460e      	mov	r6, r1
 8014bfe:	4690      	mov	r8, r2
 8014c00:	b127      	cbz	r7, 8014c0c <setvbuf+0x1c>
 8014c02:	6a3b      	ldr	r3, [r7, #32]
 8014c04:	b913      	cbnz	r3, 8014c0c <setvbuf+0x1c>
 8014c06:	4638      	mov	r0, r7
 8014c08:	f7ff ff46 	bl	8014a98 <__sinit>
 8014c0c:	f1b8 0f02 	cmp.w	r8, #2
 8014c10:	d006      	beq.n	8014c20 <setvbuf+0x30>
 8014c12:	f1b8 0f01 	cmp.w	r8, #1
 8014c16:	f200 8094 	bhi.w	8014d42 <setvbuf+0x152>
 8014c1a:	2d00      	cmp	r5, #0
 8014c1c:	f2c0 8091 	blt.w	8014d42 <setvbuf+0x152>
 8014c20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014c22:	07da      	lsls	r2, r3, #31
 8014c24:	d405      	bmi.n	8014c32 <setvbuf+0x42>
 8014c26:	89a3      	ldrh	r3, [r4, #12]
 8014c28:	059b      	lsls	r3, r3, #22
 8014c2a:	d402      	bmi.n	8014c32 <setvbuf+0x42>
 8014c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014c2e:	f000 f9fe 	bl	801502e <__retarget_lock_acquire_recursive>
 8014c32:	4621      	mov	r1, r4
 8014c34:	4638      	mov	r0, r7
 8014c36:	f000 ffbd 	bl	8015bb4 <_fflush_r>
 8014c3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014c3c:	b141      	cbz	r1, 8014c50 <setvbuf+0x60>
 8014c3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014c42:	4299      	cmp	r1, r3
 8014c44:	d002      	beq.n	8014c4c <setvbuf+0x5c>
 8014c46:	4638      	mov	r0, r7
 8014c48:	f000 fa02 	bl	8015050 <_free_r>
 8014c4c:	2300      	movs	r3, #0
 8014c4e:	6363      	str	r3, [r4, #52]	; 0x34
 8014c50:	2300      	movs	r3, #0
 8014c52:	61a3      	str	r3, [r4, #24]
 8014c54:	6063      	str	r3, [r4, #4]
 8014c56:	89a3      	ldrh	r3, [r4, #12]
 8014c58:	0618      	lsls	r0, r3, #24
 8014c5a:	d503      	bpl.n	8014c64 <setvbuf+0x74>
 8014c5c:	6921      	ldr	r1, [r4, #16]
 8014c5e:	4638      	mov	r0, r7
 8014c60:	f000 f9f6 	bl	8015050 <_free_r>
 8014c64:	89a3      	ldrh	r3, [r4, #12]
 8014c66:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8014c6a:	f023 0303 	bic.w	r3, r3, #3
 8014c6e:	f1b8 0f02 	cmp.w	r8, #2
 8014c72:	81a3      	strh	r3, [r4, #12]
 8014c74:	d05f      	beq.n	8014d36 <setvbuf+0x146>
 8014c76:	ab01      	add	r3, sp, #4
 8014c78:	466a      	mov	r2, sp
 8014c7a:	4621      	mov	r1, r4
 8014c7c:	4638      	mov	r0, r7
 8014c7e:	f000 ffc1 	bl	8015c04 <__swhatbuf_r>
 8014c82:	89a3      	ldrh	r3, [r4, #12]
 8014c84:	4318      	orrs	r0, r3
 8014c86:	81a0      	strh	r0, [r4, #12]
 8014c88:	bb2d      	cbnz	r5, 8014cd6 <setvbuf+0xe6>
 8014c8a:	9d00      	ldr	r5, [sp, #0]
 8014c8c:	4628      	mov	r0, r5
 8014c8e:	f000 fa2b 	bl	80150e8 <malloc>
 8014c92:	4606      	mov	r6, r0
 8014c94:	2800      	cmp	r0, #0
 8014c96:	d150      	bne.n	8014d3a <setvbuf+0x14a>
 8014c98:	f8dd 9000 	ldr.w	r9, [sp]
 8014c9c:	45a9      	cmp	r9, r5
 8014c9e:	d13e      	bne.n	8014d1e <setvbuf+0x12e>
 8014ca0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8014ca4:	2200      	movs	r2, #0
 8014ca6:	60a2      	str	r2, [r4, #8]
 8014ca8:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8014cac:	6022      	str	r2, [r4, #0]
 8014cae:	6122      	str	r2, [r4, #16]
 8014cb0:	2201      	movs	r2, #1
 8014cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014cb6:	6162      	str	r2, [r4, #20]
 8014cb8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014cba:	f043 0302 	orr.w	r3, r3, #2
 8014cbe:	07d1      	lsls	r1, r2, #31
 8014cc0:	81a3      	strh	r3, [r4, #12]
 8014cc2:	d404      	bmi.n	8014cce <setvbuf+0xde>
 8014cc4:	059b      	lsls	r3, r3, #22
 8014cc6:	d402      	bmi.n	8014cce <setvbuf+0xde>
 8014cc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014cca:	f000 f9b1 	bl	8015030 <__retarget_lock_release_recursive>
 8014cce:	4628      	mov	r0, r5
 8014cd0:	b003      	add	sp, #12
 8014cd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014cd6:	2e00      	cmp	r6, #0
 8014cd8:	d0d8      	beq.n	8014c8c <setvbuf+0x9c>
 8014cda:	6a3b      	ldr	r3, [r7, #32]
 8014cdc:	b913      	cbnz	r3, 8014ce4 <setvbuf+0xf4>
 8014cde:	4638      	mov	r0, r7
 8014ce0:	f7ff feda 	bl	8014a98 <__sinit>
 8014ce4:	f1b8 0f01 	cmp.w	r8, #1
 8014ce8:	bf08      	it	eq
 8014cea:	89a3      	ldrheq	r3, [r4, #12]
 8014cec:	6026      	str	r6, [r4, #0]
 8014cee:	bf04      	itt	eq
 8014cf0:	f043 0301 	orreq.w	r3, r3, #1
 8014cf4:	81a3      	strheq	r3, [r4, #12]
 8014cf6:	89a3      	ldrh	r3, [r4, #12]
 8014cf8:	f013 0208 	ands.w	r2, r3, #8
 8014cfc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8014d00:	d01d      	beq.n	8014d3e <setvbuf+0x14e>
 8014d02:	07da      	lsls	r2, r3, #31
 8014d04:	bf41      	itttt	mi
 8014d06:	2200      	movmi	r2, #0
 8014d08:	426d      	negmi	r5, r5
 8014d0a:	60a2      	strmi	r2, [r4, #8]
 8014d0c:	61a5      	strmi	r5, [r4, #24]
 8014d0e:	bf58      	it	pl
 8014d10:	60a5      	strpl	r5, [r4, #8]
 8014d12:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8014d14:	f015 0501 	ands.w	r5, r5, #1
 8014d18:	d0d4      	beq.n	8014cc4 <setvbuf+0xd4>
 8014d1a:	2500      	movs	r5, #0
 8014d1c:	e7d7      	b.n	8014cce <setvbuf+0xde>
 8014d1e:	4648      	mov	r0, r9
 8014d20:	f000 f9e2 	bl	80150e8 <malloc>
 8014d24:	4606      	mov	r6, r0
 8014d26:	2800      	cmp	r0, #0
 8014d28:	d0ba      	beq.n	8014ca0 <setvbuf+0xb0>
 8014d2a:	89a3      	ldrh	r3, [r4, #12]
 8014d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014d30:	81a3      	strh	r3, [r4, #12]
 8014d32:	464d      	mov	r5, r9
 8014d34:	e7d1      	b.n	8014cda <setvbuf+0xea>
 8014d36:	2500      	movs	r5, #0
 8014d38:	e7b4      	b.n	8014ca4 <setvbuf+0xb4>
 8014d3a:	46a9      	mov	r9, r5
 8014d3c:	e7f5      	b.n	8014d2a <setvbuf+0x13a>
 8014d3e:	60a2      	str	r2, [r4, #8]
 8014d40:	e7e7      	b.n	8014d12 <setvbuf+0x122>
 8014d42:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8014d46:	e7c2      	b.n	8014cce <setvbuf+0xde>
 8014d48:	240005a4 	.word	0x240005a4

08014d4c <siprintf>:
 8014d4c:	b40e      	push	{r1, r2, r3}
 8014d4e:	b500      	push	{lr}
 8014d50:	b09c      	sub	sp, #112	; 0x70
 8014d52:	ab1d      	add	r3, sp, #116	; 0x74
 8014d54:	9002      	str	r0, [sp, #8]
 8014d56:	9006      	str	r0, [sp, #24]
 8014d58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014d5c:	4809      	ldr	r0, [pc, #36]	; (8014d84 <siprintf+0x38>)
 8014d5e:	9107      	str	r1, [sp, #28]
 8014d60:	9104      	str	r1, [sp, #16]
 8014d62:	4909      	ldr	r1, [pc, #36]	; (8014d88 <siprintf+0x3c>)
 8014d64:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d68:	9105      	str	r1, [sp, #20]
 8014d6a:	6800      	ldr	r0, [r0, #0]
 8014d6c:	9301      	str	r3, [sp, #4]
 8014d6e:	a902      	add	r1, sp, #8
 8014d70:	f000 fac8 	bl	8015304 <_svfiprintf_r>
 8014d74:	9b02      	ldr	r3, [sp, #8]
 8014d76:	2200      	movs	r2, #0
 8014d78:	701a      	strb	r2, [r3, #0]
 8014d7a:	b01c      	add	sp, #112	; 0x70
 8014d7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014d80:	b003      	add	sp, #12
 8014d82:	4770      	bx	lr
 8014d84:	240005a4 	.word	0x240005a4
 8014d88:	ffff0208 	.word	0xffff0208

08014d8c <__sread>:
 8014d8c:	b510      	push	{r4, lr}
 8014d8e:	460c      	mov	r4, r1
 8014d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d94:	f000 f8fc 	bl	8014f90 <_read_r>
 8014d98:	2800      	cmp	r0, #0
 8014d9a:	bfab      	itete	ge
 8014d9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014d9e:	89a3      	ldrhlt	r3, [r4, #12]
 8014da0:	181b      	addge	r3, r3, r0
 8014da2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014da6:	bfac      	ite	ge
 8014da8:	6563      	strge	r3, [r4, #84]	; 0x54
 8014daa:	81a3      	strhlt	r3, [r4, #12]
 8014dac:	bd10      	pop	{r4, pc}

08014dae <__swrite>:
 8014dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014db2:	461f      	mov	r7, r3
 8014db4:	898b      	ldrh	r3, [r1, #12]
 8014db6:	05db      	lsls	r3, r3, #23
 8014db8:	4605      	mov	r5, r0
 8014dba:	460c      	mov	r4, r1
 8014dbc:	4616      	mov	r6, r2
 8014dbe:	d505      	bpl.n	8014dcc <__swrite+0x1e>
 8014dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014dc4:	2302      	movs	r3, #2
 8014dc6:	2200      	movs	r2, #0
 8014dc8:	f000 f8d0 	bl	8014f6c <_lseek_r>
 8014dcc:	89a3      	ldrh	r3, [r4, #12]
 8014dce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014dd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014dd6:	81a3      	strh	r3, [r4, #12]
 8014dd8:	4632      	mov	r2, r6
 8014dda:	463b      	mov	r3, r7
 8014ddc:	4628      	mov	r0, r5
 8014dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014de2:	f000 b8e7 	b.w	8014fb4 <_write_r>

08014de6 <__sseek>:
 8014de6:	b510      	push	{r4, lr}
 8014de8:	460c      	mov	r4, r1
 8014dea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014dee:	f000 f8bd 	bl	8014f6c <_lseek_r>
 8014df2:	1c43      	adds	r3, r0, #1
 8014df4:	89a3      	ldrh	r3, [r4, #12]
 8014df6:	bf15      	itete	ne
 8014df8:	6560      	strne	r0, [r4, #84]	; 0x54
 8014dfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014dfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014e02:	81a3      	strheq	r3, [r4, #12]
 8014e04:	bf18      	it	ne
 8014e06:	81a3      	strhne	r3, [r4, #12]
 8014e08:	bd10      	pop	{r4, pc}

08014e0a <__sclose>:
 8014e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e0e:	f000 b89d 	b.w	8014f4c <_close_r>

08014e12 <__swbuf_r>:
 8014e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e14:	460e      	mov	r6, r1
 8014e16:	4614      	mov	r4, r2
 8014e18:	4605      	mov	r5, r0
 8014e1a:	b118      	cbz	r0, 8014e24 <__swbuf_r+0x12>
 8014e1c:	6a03      	ldr	r3, [r0, #32]
 8014e1e:	b90b      	cbnz	r3, 8014e24 <__swbuf_r+0x12>
 8014e20:	f7ff fe3a 	bl	8014a98 <__sinit>
 8014e24:	69a3      	ldr	r3, [r4, #24]
 8014e26:	60a3      	str	r3, [r4, #8]
 8014e28:	89a3      	ldrh	r3, [r4, #12]
 8014e2a:	071a      	lsls	r2, r3, #28
 8014e2c:	d525      	bpl.n	8014e7a <__swbuf_r+0x68>
 8014e2e:	6923      	ldr	r3, [r4, #16]
 8014e30:	b31b      	cbz	r3, 8014e7a <__swbuf_r+0x68>
 8014e32:	6823      	ldr	r3, [r4, #0]
 8014e34:	6922      	ldr	r2, [r4, #16]
 8014e36:	1a98      	subs	r0, r3, r2
 8014e38:	6963      	ldr	r3, [r4, #20]
 8014e3a:	b2f6      	uxtb	r6, r6
 8014e3c:	4283      	cmp	r3, r0
 8014e3e:	4637      	mov	r7, r6
 8014e40:	dc04      	bgt.n	8014e4c <__swbuf_r+0x3a>
 8014e42:	4621      	mov	r1, r4
 8014e44:	4628      	mov	r0, r5
 8014e46:	f000 feb5 	bl	8015bb4 <_fflush_r>
 8014e4a:	b9e0      	cbnz	r0, 8014e86 <__swbuf_r+0x74>
 8014e4c:	68a3      	ldr	r3, [r4, #8]
 8014e4e:	3b01      	subs	r3, #1
 8014e50:	60a3      	str	r3, [r4, #8]
 8014e52:	6823      	ldr	r3, [r4, #0]
 8014e54:	1c5a      	adds	r2, r3, #1
 8014e56:	6022      	str	r2, [r4, #0]
 8014e58:	701e      	strb	r6, [r3, #0]
 8014e5a:	6962      	ldr	r2, [r4, #20]
 8014e5c:	1c43      	adds	r3, r0, #1
 8014e5e:	429a      	cmp	r2, r3
 8014e60:	d004      	beq.n	8014e6c <__swbuf_r+0x5a>
 8014e62:	89a3      	ldrh	r3, [r4, #12]
 8014e64:	07db      	lsls	r3, r3, #31
 8014e66:	d506      	bpl.n	8014e76 <__swbuf_r+0x64>
 8014e68:	2e0a      	cmp	r6, #10
 8014e6a:	d104      	bne.n	8014e76 <__swbuf_r+0x64>
 8014e6c:	4621      	mov	r1, r4
 8014e6e:	4628      	mov	r0, r5
 8014e70:	f000 fea0 	bl	8015bb4 <_fflush_r>
 8014e74:	b938      	cbnz	r0, 8014e86 <__swbuf_r+0x74>
 8014e76:	4638      	mov	r0, r7
 8014e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e7a:	4621      	mov	r1, r4
 8014e7c:	4628      	mov	r0, r5
 8014e7e:	f000 f805 	bl	8014e8c <__swsetup_r>
 8014e82:	2800      	cmp	r0, #0
 8014e84:	d0d5      	beq.n	8014e32 <__swbuf_r+0x20>
 8014e86:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014e8a:	e7f4      	b.n	8014e76 <__swbuf_r+0x64>

08014e8c <__swsetup_r>:
 8014e8c:	b538      	push	{r3, r4, r5, lr}
 8014e8e:	4b2a      	ldr	r3, [pc, #168]	; (8014f38 <__swsetup_r+0xac>)
 8014e90:	4605      	mov	r5, r0
 8014e92:	6818      	ldr	r0, [r3, #0]
 8014e94:	460c      	mov	r4, r1
 8014e96:	b118      	cbz	r0, 8014ea0 <__swsetup_r+0x14>
 8014e98:	6a03      	ldr	r3, [r0, #32]
 8014e9a:	b90b      	cbnz	r3, 8014ea0 <__swsetup_r+0x14>
 8014e9c:	f7ff fdfc 	bl	8014a98 <__sinit>
 8014ea0:	89a3      	ldrh	r3, [r4, #12]
 8014ea2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014ea6:	0718      	lsls	r0, r3, #28
 8014ea8:	d422      	bmi.n	8014ef0 <__swsetup_r+0x64>
 8014eaa:	06d9      	lsls	r1, r3, #27
 8014eac:	d407      	bmi.n	8014ebe <__swsetup_r+0x32>
 8014eae:	2309      	movs	r3, #9
 8014eb0:	602b      	str	r3, [r5, #0]
 8014eb2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014eb6:	81a3      	strh	r3, [r4, #12]
 8014eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014ebc:	e034      	b.n	8014f28 <__swsetup_r+0x9c>
 8014ebe:	0758      	lsls	r0, r3, #29
 8014ec0:	d512      	bpl.n	8014ee8 <__swsetup_r+0x5c>
 8014ec2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014ec4:	b141      	cbz	r1, 8014ed8 <__swsetup_r+0x4c>
 8014ec6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014eca:	4299      	cmp	r1, r3
 8014ecc:	d002      	beq.n	8014ed4 <__swsetup_r+0x48>
 8014ece:	4628      	mov	r0, r5
 8014ed0:	f000 f8be 	bl	8015050 <_free_r>
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	6363      	str	r3, [r4, #52]	; 0x34
 8014ed8:	89a3      	ldrh	r3, [r4, #12]
 8014eda:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014ede:	81a3      	strh	r3, [r4, #12]
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	6063      	str	r3, [r4, #4]
 8014ee4:	6923      	ldr	r3, [r4, #16]
 8014ee6:	6023      	str	r3, [r4, #0]
 8014ee8:	89a3      	ldrh	r3, [r4, #12]
 8014eea:	f043 0308 	orr.w	r3, r3, #8
 8014eee:	81a3      	strh	r3, [r4, #12]
 8014ef0:	6923      	ldr	r3, [r4, #16]
 8014ef2:	b94b      	cbnz	r3, 8014f08 <__swsetup_r+0x7c>
 8014ef4:	89a3      	ldrh	r3, [r4, #12]
 8014ef6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014efa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014efe:	d003      	beq.n	8014f08 <__swsetup_r+0x7c>
 8014f00:	4621      	mov	r1, r4
 8014f02:	4628      	mov	r0, r5
 8014f04:	f000 fea4 	bl	8015c50 <__smakebuf_r>
 8014f08:	89a0      	ldrh	r0, [r4, #12]
 8014f0a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014f0e:	f010 0301 	ands.w	r3, r0, #1
 8014f12:	d00a      	beq.n	8014f2a <__swsetup_r+0x9e>
 8014f14:	2300      	movs	r3, #0
 8014f16:	60a3      	str	r3, [r4, #8]
 8014f18:	6963      	ldr	r3, [r4, #20]
 8014f1a:	425b      	negs	r3, r3
 8014f1c:	61a3      	str	r3, [r4, #24]
 8014f1e:	6923      	ldr	r3, [r4, #16]
 8014f20:	b943      	cbnz	r3, 8014f34 <__swsetup_r+0xa8>
 8014f22:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014f26:	d1c4      	bne.n	8014eb2 <__swsetup_r+0x26>
 8014f28:	bd38      	pop	{r3, r4, r5, pc}
 8014f2a:	0781      	lsls	r1, r0, #30
 8014f2c:	bf58      	it	pl
 8014f2e:	6963      	ldrpl	r3, [r4, #20]
 8014f30:	60a3      	str	r3, [r4, #8]
 8014f32:	e7f4      	b.n	8014f1e <__swsetup_r+0x92>
 8014f34:	2000      	movs	r0, #0
 8014f36:	e7f7      	b.n	8014f28 <__swsetup_r+0x9c>
 8014f38:	240005a4 	.word	0x240005a4

08014f3c <memset>:
 8014f3c:	4402      	add	r2, r0
 8014f3e:	4603      	mov	r3, r0
 8014f40:	4293      	cmp	r3, r2
 8014f42:	d100      	bne.n	8014f46 <memset+0xa>
 8014f44:	4770      	bx	lr
 8014f46:	f803 1b01 	strb.w	r1, [r3], #1
 8014f4a:	e7f9      	b.n	8014f40 <memset+0x4>

08014f4c <_close_r>:
 8014f4c:	b538      	push	{r3, r4, r5, lr}
 8014f4e:	4d06      	ldr	r5, [pc, #24]	; (8014f68 <_close_r+0x1c>)
 8014f50:	2300      	movs	r3, #0
 8014f52:	4604      	mov	r4, r0
 8014f54:	4608      	mov	r0, r1
 8014f56:	602b      	str	r3, [r5, #0]
 8014f58:	f7ec fed7 	bl	8001d0a <_close>
 8014f5c:	1c43      	adds	r3, r0, #1
 8014f5e:	d102      	bne.n	8014f66 <_close_r+0x1a>
 8014f60:	682b      	ldr	r3, [r5, #0]
 8014f62:	b103      	cbz	r3, 8014f66 <_close_r+0x1a>
 8014f64:	6023      	str	r3, [r4, #0]
 8014f66:	bd38      	pop	{r3, r4, r5, pc}
 8014f68:	24008300 	.word	0x24008300

08014f6c <_lseek_r>:
 8014f6c:	b538      	push	{r3, r4, r5, lr}
 8014f6e:	4d07      	ldr	r5, [pc, #28]	; (8014f8c <_lseek_r+0x20>)
 8014f70:	4604      	mov	r4, r0
 8014f72:	4608      	mov	r0, r1
 8014f74:	4611      	mov	r1, r2
 8014f76:	2200      	movs	r2, #0
 8014f78:	602a      	str	r2, [r5, #0]
 8014f7a:	461a      	mov	r2, r3
 8014f7c:	f7ec feec 	bl	8001d58 <_lseek>
 8014f80:	1c43      	adds	r3, r0, #1
 8014f82:	d102      	bne.n	8014f8a <_lseek_r+0x1e>
 8014f84:	682b      	ldr	r3, [r5, #0]
 8014f86:	b103      	cbz	r3, 8014f8a <_lseek_r+0x1e>
 8014f88:	6023      	str	r3, [r4, #0]
 8014f8a:	bd38      	pop	{r3, r4, r5, pc}
 8014f8c:	24008300 	.word	0x24008300

08014f90 <_read_r>:
 8014f90:	b538      	push	{r3, r4, r5, lr}
 8014f92:	4d07      	ldr	r5, [pc, #28]	; (8014fb0 <_read_r+0x20>)
 8014f94:	4604      	mov	r4, r0
 8014f96:	4608      	mov	r0, r1
 8014f98:	4611      	mov	r1, r2
 8014f9a:	2200      	movs	r2, #0
 8014f9c:	602a      	str	r2, [r5, #0]
 8014f9e:	461a      	mov	r2, r3
 8014fa0:	f7ec fe96 	bl	8001cd0 <_read>
 8014fa4:	1c43      	adds	r3, r0, #1
 8014fa6:	d102      	bne.n	8014fae <_read_r+0x1e>
 8014fa8:	682b      	ldr	r3, [r5, #0]
 8014faa:	b103      	cbz	r3, 8014fae <_read_r+0x1e>
 8014fac:	6023      	str	r3, [r4, #0]
 8014fae:	bd38      	pop	{r3, r4, r5, pc}
 8014fb0:	24008300 	.word	0x24008300

08014fb4 <_write_r>:
 8014fb4:	b538      	push	{r3, r4, r5, lr}
 8014fb6:	4d07      	ldr	r5, [pc, #28]	; (8014fd4 <_write_r+0x20>)
 8014fb8:	4604      	mov	r4, r0
 8014fba:	4608      	mov	r0, r1
 8014fbc:	4611      	mov	r1, r2
 8014fbe:	2200      	movs	r2, #0
 8014fc0:	602a      	str	r2, [r5, #0]
 8014fc2:	461a      	mov	r2, r3
 8014fc4:	f7ed f812 	bl	8001fec <_write>
 8014fc8:	1c43      	adds	r3, r0, #1
 8014fca:	d102      	bne.n	8014fd2 <_write_r+0x1e>
 8014fcc:	682b      	ldr	r3, [r5, #0]
 8014fce:	b103      	cbz	r3, 8014fd2 <_write_r+0x1e>
 8014fd0:	6023      	str	r3, [r4, #0]
 8014fd2:	bd38      	pop	{r3, r4, r5, pc}
 8014fd4:	24008300 	.word	0x24008300

08014fd8 <__errno>:
 8014fd8:	4b01      	ldr	r3, [pc, #4]	; (8014fe0 <__errno+0x8>)
 8014fda:	6818      	ldr	r0, [r3, #0]
 8014fdc:	4770      	bx	lr
 8014fde:	bf00      	nop
 8014fe0:	240005a4 	.word	0x240005a4

08014fe4 <__libc_init_array>:
 8014fe4:	b570      	push	{r4, r5, r6, lr}
 8014fe6:	4d0d      	ldr	r5, [pc, #52]	; (801501c <__libc_init_array+0x38>)
 8014fe8:	4c0d      	ldr	r4, [pc, #52]	; (8015020 <__libc_init_array+0x3c>)
 8014fea:	1b64      	subs	r4, r4, r5
 8014fec:	10a4      	asrs	r4, r4, #2
 8014fee:	2600      	movs	r6, #0
 8014ff0:	42a6      	cmp	r6, r4
 8014ff2:	d109      	bne.n	8015008 <__libc_init_array+0x24>
 8014ff4:	4d0b      	ldr	r5, [pc, #44]	; (8015024 <__libc_init_array+0x40>)
 8014ff6:	4c0c      	ldr	r4, [pc, #48]	; (8015028 <__libc_init_array+0x44>)
 8014ff8:	f001 f8a8 	bl	801614c <_init>
 8014ffc:	1b64      	subs	r4, r4, r5
 8014ffe:	10a4      	asrs	r4, r4, #2
 8015000:	2600      	movs	r6, #0
 8015002:	42a6      	cmp	r6, r4
 8015004:	d105      	bne.n	8015012 <__libc_init_array+0x2e>
 8015006:	bd70      	pop	{r4, r5, r6, pc}
 8015008:	f855 3b04 	ldr.w	r3, [r5], #4
 801500c:	4798      	blx	r3
 801500e:	3601      	adds	r6, #1
 8015010:	e7ee      	b.n	8014ff0 <__libc_init_array+0xc>
 8015012:	f855 3b04 	ldr.w	r3, [r5], #4
 8015016:	4798      	blx	r3
 8015018:	3601      	adds	r6, #1
 801501a:	e7f2      	b.n	8015002 <__libc_init_array+0x1e>
 801501c:	0801b6b0 	.word	0x0801b6b0
 8015020:	0801b6b0 	.word	0x0801b6b0
 8015024:	0801b6b0 	.word	0x0801b6b0
 8015028:	0801b6b4 	.word	0x0801b6b4

0801502c <__retarget_lock_init_recursive>:
 801502c:	4770      	bx	lr

0801502e <__retarget_lock_acquire_recursive>:
 801502e:	4770      	bx	lr

08015030 <__retarget_lock_release_recursive>:
 8015030:	4770      	bx	lr

08015032 <memcpy>:
 8015032:	440a      	add	r2, r1
 8015034:	4291      	cmp	r1, r2
 8015036:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801503a:	d100      	bne.n	801503e <memcpy+0xc>
 801503c:	4770      	bx	lr
 801503e:	b510      	push	{r4, lr}
 8015040:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015044:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015048:	4291      	cmp	r1, r2
 801504a:	d1f9      	bne.n	8015040 <memcpy+0xe>
 801504c:	bd10      	pop	{r4, pc}
	...

08015050 <_free_r>:
 8015050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015052:	2900      	cmp	r1, #0
 8015054:	d044      	beq.n	80150e0 <_free_r+0x90>
 8015056:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801505a:	9001      	str	r0, [sp, #4]
 801505c:	2b00      	cmp	r3, #0
 801505e:	f1a1 0404 	sub.w	r4, r1, #4
 8015062:	bfb8      	it	lt
 8015064:	18e4      	addlt	r4, r4, r3
 8015066:	f000 f8e7 	bl	8015238 <__malloc_lock>
 801506a:	4a1e      	ldr	r2, [pc, #120]	; (80150e4 <_free_r+0x94>)
 801506c:	9801      	ldr	r0, [sp, #4]
 801506e:	6813      	ldr	r3, [r2, #0]
 8015070:	b933      	cbnz	r3, 8015080 <_free_r+0x30>
 8015072:	6063      	str	r3, [r4, #4]
 8015074:	6014      	str	r4, [r2, #0]
 8015076:	b003      	add	sp, #12
 8015078:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801507c:	f000 b8e2 	b.w	8015244 <__malloc_unlock>
 8015080:	42a3      	cmp	r3, r4
 8015082:	d908      	bls.n	8015096 <_free_r+0x46>
 8015084:	6825      	ldr	r5, [r4, #0]
 8015086:	1961      	adds	r1, r4, r5
 8015088:	428b      	cmp	r3, r1
 801508a:	bf01      	itttt	eq
 801508c:	6819      	ldreq	r1, [r3, #0]
 801508e:	685b      	ldreq	r3, [r3, #4]
 8015090:	1949      	addeq	r1, r1, r5
 8015092:	6021      	streq	r1, [r4, #0]
 8015094:	e7ed      	b.n	8015072 <_free_r+0x22>
 8015096:	461a      	mov	r2, r3
 8015098:	685b      	ldr	r3, [r3, #4]
 801509a:	b10b      	cbz	r3, 80150a0 <_free_r+0x50>
 801509c:	42a3      	cmp	r3, r4
 801509e:	d9fa      	bls.n	8015096 <_free_r+0x46>
 80150a0:	6811      	ldr	r1, [r2, #0]
 80150a2:	1855      	adds	r5, r2, r1
 80150a4:	42a5      	cmp	r5, r4
 80150a6:	d10b      	bne.n	80150c0 <_free_r+0x70>
 80150a8:	6824      	ldr	r4, [r4, #0]
 80150aa:	4421      	add	r1, r4
 80150ac:	1854      	adds	r4, r2, r1
 80150ae:	42a3      	cmp	r3, r4
 80150b0:	6011      	str	r1, [r2, #0]
 80150b2:	d1e0      	bne.n	8015076 <_free_r+0x26>
 80150b4:	681c      	ldr	r4, [r3, #0]
 80150b6:	685b      	ldr	r3, [r3, #4]
 80150b8:	6053      	str	r3, [r2, #4]
 80150ba:	440c      	add	r4, r1
 80150bc:	6014      	str	r4, [r2, #0]
 80150be:	e7da      	b.n	8015076 <_free_r+0x26>
 80150c0:	d902      	bls.n	80150c8 <_free_r+0x78>
 80150c2:	230c      	movs	r3, #12
 80150c4:	6003      	str	r3, [r0, #0]
 80150c6:	e7d6      	b.n	8015076 <_free_r+0x26>
 80150c8:	6825      	ldr	r5, [r4, #0]
 80150ca:	1961      	adds	r1, r4, r5
 80150cc:	428b      	cmp	r3, r1
 80150ce:	bf04      	itt	eq
 80150d0:	6819      	ldreq	r1, [r3, #0]
 80150d2:	685b      	ldreq	r3, [r3, #4]
 80150d4:	6063      	str	r3, [r4, #4]
 80150d6:	bf04      	itt	eq
 80150d8:	1949      	addeq	r1, r1, r5
 80150da:	6021      	streq	r1, [r4, #0]
 80150dc:	6054      	str	r4, [r2, #4]
 80150de:	e7ca      	b.n	8015076 <_free_r+0x26>
 80150e0:	b003      	add	sp, #12
 80150e2:	bd30      	pop	{r4, r5, pc}
 80150e4:	24008308 	.word	0x24008308

080150e8 <malloc>:
 80150e8:	4b02      	ldr	r3, [pc, #8]	; (80150f4 <malloc+0xc>)
 80150ea:	4601      	mov	r1, r0
 80150ec:	6818      	ldr	r0, [r3, #0]
 80150ee:	f000 b823 	b.w	8015138 <_malloc_r>
 80150f2:	bf00      	nop
 80150f4:	240005a4 	.word	0x240005a4

080150f8 <sbrk_aligned>:
 80150f8:	b570      	push	{r4, r5, r6, lr}
 80150fa:	4e0e      	ldr	r6, [pc, #56]	; (8015134 <sbrk_aligned+0x3c>)
 80150fc:	460c      	mov	r4, r1
 80150fe:	6831      	ldr	r1, [r6, #0]
 8015100:	4605      	mov	r5, r0
 8015102:	b911      	cbnz	r1, 801510a <sbrk_aligned+0x12>
 8015104:	f000 fe1c 	bl	8015d40 <_sbrk_r>
 8015108:	6030      	str	r0, [r6, #0]
 801510a:	4621      	mov	r1, r4
 801510c:	4628      	mov	r0, r5
 801510e:	f000 fe17 	bl	8015d40 <_sbrk_r>
 8015112:	1c43      	adds	r3, r0, #1
 8015114:	d00a      	beq.n	801512c <sbrk_aligned+0x34>
 8015116:	1cc4      	adds	r4, r0, #3
 8015118:	f024 0403 	bic.w	r4, r4, #3
 801511c:	42a0      	cmp	r0, r4
 801511e:	d007      	beq.n	8015130 <sbrk_aligned+0x38>
 8015120:	1a21      	subs	r1, r4, r0
 8015122:	4628      	mov	r0, r5
 8015124:	f000 fe0c 	bl	8015d40 <_sbrk_r>
 8015128:	3001      	adds	r0, #1
 801512a:	d101      	bne.n	8015130 <sbrk_aligned+0x38>
 801512c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8015130:	4620      	mov	r0, r4
 8015132:	bd70      	pop	{r4, r5, r6, pc}
 8015134:	2400830c 	.word	0x2400830c

08015138 <_malloc_r>:
 8015138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801513c:	1ccd      	adds	r5, r1, #3
 801513e:	f025 0503 	bic.w	r5, r5, #3
 8015142:	3508      	adds	r5, #8
 8015144:	2d0c      	cmp	r5, #12
 8015146:	bf38      	it	cc
 8015148:	250c      	movcc	r5, #12
 801514a:	2d00      	cmp	r5, #0
 801514c:	4607      	mov	r7, r0
 801514e:	db01      	blt.n	8015154 <_malloc_r+0x1c>
 8015150:	42a9      	cmp	r1, r5
 8015152:	d905      	bls.n	8015160 <_malloc_r+0x28>
 8015154:	230c      	movs	r3, #12
 8015156:	603b      	str	r3, [r7, #0]
 8015158:	2600      	movs	r6, #0
 801515a:	4630      	mov	r0, r6
 801515c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015160:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8015234 <_malloc_r+0xfc>
 8015164:	f000 f868 	bl	8015238 <__malloc_lock>
 8015168:	f8d8 3000 	ldr.w	r3, [r8]
 801516c:	461c      	mov	r4, r3
 801516e:	bb5c      	cbnz	r4, 80151c8 <_malloc_r+0x90>
 8015170:	4629      	mov	r1, r5
 8015172:	4638      	mov	r0, r7
 8015174:	f7ff ffc0 	bl	80150f8 <sbrk_aligned>
 8015178:	1c43      	adds	r3, r0, #1
 801517a:	4604      	mov	r4, r0
 801517c:	d155      	bne.n	801522a <_malloc_r+0xf2>
 801517e:	f8d8 4000 	ldr.w	r4, [r8]
 8015182:	4626      	mov	r6, r4
 8015184:	2e00      	cmp	r6, #0
 8015186:	d145      	bne.n	8015214 <_malloc_r+0xdc>
 8015188:	2c00      	cmp	r4, #0
 801518a:	d048      	beq.n	801521e <_malloc_r+0xe6>
 801518c:	6823      	ldr	r3, [r4, #0]
 801518e:	4631      	mov	r1, r6
 8015190:	4638      	mov	r0, r7
 8015192:	eb04 0903 	add.w	r9, r4, r3
 8015196:	f000 fdd3 	bl	8015d40 <_sbrk_r>
 801519a:	4581      	cmp	r9, r0
 801519c:	d13f      	bne.n	801521e <_malloc_r+0xe6>
 801519e:	6821      	ldr	r1, [r4, #0]
 80151a0:	1a6d      	subs	r5, r5, r1
 80151a2:	4629      	mov	r1, r5
 80151a4:	4638      	mov	r0, r7
 80151a6:	f7ff ffa7 	bl	80150f8 <sbrk_aligned>
 80151aa:	3001      	adds	r0, #1
 80151ac:	d037      	beq.n	801521e <_malloc_r+0xe6>
 80151ae:	6823      	ldr	r3, [r4, #0]
 80151b0:	442b      	add	r3, r5
 80151b2:	6023      	str	r3, [r4, #0]
 80151b4:	f8d8 3000 	ldr.w	r3, [r8]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d038      	beq.n	801522e <_malloc_r+0xf6>
 80151bc:	685a      	ldr	r2, [r3, #4]
 80151be:	42a2      	cmp	r2, r4
 80151c0:	d12b      	bne.n	801521a <_malloc_r+0xe2>
 80151c2:	2200      	movs	r2, #0
 80151c4:	605a      	str	r2, [r3, #4]
 80151c6:	e00f      	b.n	80151e8 <_malloc_r+0xb0>
 80151c8:	6822      	ldr	r2, [r4, #0]
 80151ca:	1b52      	subs	r2, r2, r5
 80151cc:	d41f      	bmi.n	801520e <_malloc_r+0xd6>
 80151ce:	2a0b      	cmp	r2, #11
 80151d0:	d917      	bls.n	8015202 <_malloc_r+0xca>
 80151d2:	1961      	adds	r1, r4, r5
 80151d4:	42a3      	cmp	r3, r4
 80151d6:	6025      	str	r5, [r4, #0]
 80151d8:	bf18      	it	ne
 80151da:	6059      	strne	r1, [r3, #4]
 80151dc:	6863      	ldr	r3, [r4, #4]
 80151de:	bf08      	it	eq
 80151e0:	f8c8 1000 	streq.w	r1, [r8]
 80151e4:	5162      	str	r2, [r4, r5]
 80151e6:	604b      	str	r3, [r1, #4]
 80151e8:	4638      	mov	r0, r7
 80151ea:	f104 060b 	add.w	r6, r4, #11
 80151ee:	f000 f829 	bl	8015244 <__malloc_unlock>
 80151f2:	f026 0607 	bic.w	r6, r6, #7
 80151f6:	1d23      	adds	r3, r4, #4
 80151f8:	1af2      	subs	r2, r6, r3
 80151fa:	d0ae      	beq.n	801515a <_malloc_r+0x22>
 80151fc:	1b9b      	subs	r3, r3, r6
 80151fe:	50a3      	str	r3, [r4, r2]
 8015200:	e7ab      	b.n	801515a <_malloc_r+0x22>
 8015202:	42a3      	cmp	r3, r4
 8015204:	6862      	ldr	r2, [r4, #4]
 8015206:	d1dd      	bne.n	80151c4 <_malloc_r+0x8c>
 8015208:	f8c8 2000 	str.w	r2, [r8]
 801520c:	e7ec      	b.n	80151e8 <_malloc_r+0xb0>
 801520e:	4623      	mov	r3, r4
 8015210:	6864      	ldr	r4, [r4, #4]
 8015212:	e7ac      	b.n	801516e <_malloc_r+0x36>
 8015214:	4634      	mov	r4, r6
 8015216:	6876      	ldr	r6, [r6, #4]
 8015218:	e7b4      	b.n	8015184 <_malloc_r+0x4c>
 801521a:	4613      	mov	r3, r2
 801521c:	e7cc      	b.n	80151b8 <_malloc_r+0x80>
 801521e:	230c      	movs	r3, #12
 8015220:	603b      	str	r3, [r7, #0]
 8015222:	4638      	mov	r0, r7
 8015224:	f000 f80e 	bl	8015244 <__malloc_unlock>
 8015228:	e797      	b.n	801515a <_malloc_r+0x22>
 801522a:	6025      	str	r5, [r4, #0]
 801522c:	e7dc      	b.n	80151e8 <_malloc_r+0xb0>
 801522e:	605b      	str	r3, [r3, #4]
 8015230:	deff      	udf	#255	; 0xff
 8015232:	bf00      	nop
 8015234:	24008308 	.word	0x24008308

08015238 <__malloc_lock>:
 8015238:	4801      	ldr	r0, [pc, #4]	; (8015240 <__malloc_lock+0x8>)
 801523a:	f7ff bef8 	b.w	801502e <__retarget_lock_acquire_recursive>
 801523e:	bf00      	nop
 8015240:	24008304 	.word	0x24008304

08015244 <__malloc_unlock>:
 8015244:	4801      	ldr	r0, [pc, #4]	; (801524c <__malloc_unlock+0x8>)
 8015246:	f7ff bef3 	b.w	8015030 <__retarget_lock_release_recursive>
 801524a:	bf00      	nop
 801524c:	24008304 	.word	0x24008304

08015250 <__ssputs_r>:
 8015250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015254:	688e      	ldr	r6, [r1, #8]
 8015256:	461f      	mov	r7, r3
 8015258:	42be      	cmp	r6, r7
 801525a:	680b      	ldr	r3, [r1, #0]
 801525c:	4682      	mov	sl, r0
 801525e:	460c      	mov	r4, r1
 8015260:	4690      	mov	r8, r2
 8015262:	d82c      	bhi.n	80152be <__ssputs_r+0x6e>
 8015264:	898a      	ldrh	r2, [r1, #12]
 8015266:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801526a:	d026      	beq.n	80152ba <__ssputs_r+0x6a>
 801526c:	6965      	ldr	r5, [r4, #20]
 801526e:	6909      	ldr	r1, [r1, #16]
 8015270:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015274:	eba3 0901 	sub.w	r9, r3, r1
 8015278:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801527c:	1c7b      	adds	r3, r7, #1
 801527e:	444b      	add	r3, r9
 8015280:	106d      	asrs	r5, r5, #1
 8015282:	429d      	cmp	r5, r3
 8015284:	bf38      	it	cc
 8015286:	461d      	movcc	r5, r3
 8015288:	0553      	lsls	r3, r2, #21
 801528a:	d527      	bpl.n	80152dc <__ssputs_r+0x8c>
 801528c:	4629      	mov	r1, r5
 801528e:	f7ff ff53 	bl	8015138 <_malloc_r>
 8015292:	4606      	mov	r6, r0
 8015294:	b360      	cbz	r0, 80152f0 <__ssputs_r+0xa0>
 8015296:	6921      	ldr	r1, [r4, #16]
 8015298:	464a      	mov	r2, r9
 801529a:	f7ff feca 	bl	8015032 <memcpy>
 801529e:	89a3      	ldrh	r3, [r4, #12]
 80152a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80152a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80152a8:	81a3      	strh	r3, [r4, #12]
 80152aa:	6126      	str	r6, [r4, #16]
 80152ac:	6165      	str	r5, [r4, #20]
 80152ae:	444e      	add	r6, r9
 80152b0:	eba5 0509 	sub.w	r5, r5, r9
 80152b4:	6026      	str	r6, [r4, #0]
 80152b6:	60a5      	str	r5, [r4, #8]
 80152b8:	463e      	mov	r6, r7
 80152ba:	42be      	cmp	r6, r7
 80152bc:	d900      	bls.n	80152c0 <__ssputs_r+0x70>
 80152be:	463e      	mov	r6, r7
 80152c0:	6820      	ldr	r0, [r4, #0]
 80152c2:	4632      	mov	r2, r6
 80152c4:	4641      	mov	r1, r8
 80152c6:	f000 fcff 	bl	8015cc8 <memmove>
 80152ca:	68a3      	ldr	r3, [r4, #8]
 80152cc:	1b9b      	subs	r3, r3, r6
 80152ce:	60a3      	str	r3, [r4, #8]
 80152d0:	6823      	ldr	r3, [r4, #0]
 80152d2:	4433      	add	r3, r6
 80152d4:	6023      	str	r3, [r4, #0]
 80152d6:	2000      	movs	r0, #0
 80152d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152dc:	462a      	mov	r2, r5
 80152de:	f000 fd3f 	bl	8015d60 <_realloc_r>
 80152e2:	4606      	mov	r6, r0
 80152e4:	2800      	cmp	r0, #0
 80152e6:	d1e0      	bne.n	80152aa <__ssputs_r+0x5a>
 80152e8:	6921      	ldr	r1, [r4, #16]
 80152ea:	4650      	mov	r0, sl
 80152ec:	f7ff feb0 	bl	8015050 <_free_r>
 80152f0:	230c      	movs	r3, #12
 80152f2:	f8ca 3000 	str.w	r3, [sl]
 80152f6:	89a3      	ldrh	r3, [r4, #12]
 80152f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80152fc:	81a3      	strh	r3, [r4, #12]
 80152fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015302:	e7e9      	b.n	80152d8 <__ssputs_r+0x88>

08015304 <_svfiprintf_r>:
 8015304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015308:	4698      	mov	r8, r3
 801530a:	898b      	ldrh	r3, [r1, #12]
 801530c:	061b      	lsls	r3, r3, #24
 801530e:	b09d      	sub	sp, #116	; 0x74
 8015310:	4607      	mov	r7, r0
 8015312:	460d      	mov	r5, r1
 8015314:	4614      	mov	r4, r2
 8015316:	d50e      	bpl.n	8015336 <_svfiprintf_r+0x32>
 8015318:	690b      	ldr	r3, [r1, #16]
 801531a:	b963      	cbnz	r3, 8015336 <_svfiprintf_r+0x32>
 801531c:	2140      	movs	r1, #64	; 0x40
 801531e:	f7ff ff0b 	bl	8015138 <_malloc_r>
 8015322:	6028      	str	r0, [r5, #0]
 8015324:	6128      	str	r0, [r5, #16]
 8015326:	b920      	cbnz	r0, 8015332 <_svfiprintf_r+0x2e>
 8015328:	230c      	movs	r3, #12
 801532a:	603b      	str	r3, [r7, #0]
 801532c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015330:	e0d0      	b.n	80154d4 <_svfiprintf_r+0x1d0>
 8015332:	2340      	movs	r3, #64	; 0x40
 8015334:	616b      	str	r3, [r5, #20]
 8015336:	2300      	movs	r3, #0
 8015338:	9309      	str	r3, [sp, #36]	; 0x24
 801533a:	2320      	movs	r3, #32
 801533c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015340:	f8cd 800c 	str.w	r8, [sp, #12]
 8015344:	2330      	movs	r3, #48	; 0x30
 8015346:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80154ec <_svfiprintf_r+0x1e8>
 801534a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801534e:	f04f 0901 	mov.w	r9, #1
 8015352:	4623      	mov	r3, r4
 8015354:	469a      	mov	sl, r3
 8015356:	f813 2b01 	ldrb.w	r2, [r3], #1
 801535a:	b10a      	cbz	r2, 8015360 <_svfiprintf_r+0x5c>
 801535c:	2a25      	cmp	r2, #37	; 0x25
 801535e:	d1f9      	bne.n	8015354 <_svfiprintf_r+0x50>
 8015360:	ebba 0b04 	subs.w	fp, sl, r4
 8015364:	d00b      	beq.n	801537e <_svfiprintf_r+0x7a>
 8015366:	465b      	mov	r3, fp
 8015368:	4622      	mov	r2, r4
 801536a:	4629      	mov	r1, r5
 801536c:	4638      	mov	r0, r7
 801536e:	f7ff ff6f 	bl	8015250 <__ssputs_r>
 8015372:	3001      	adds	r0, #1
 8015374:	f000 80a9 	beq.w	80154ca <_svfiprintf_r+0x1c6>
 8015378:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801537a:	445a      	add	r2, fp
 801537c:	9209      	str	r2, [sp, #36]	; 0x24
 801537e:	f89a 3000 	ldrb.w	r3, [sl]
 8015382:	2b00      	cmp	r3, #0
 8015384:	f000 80a1 	beq.w	80154ca <_svfiprintf_r+0x1c6>
 8015388:	2300      	movs	r3, #0
 801538a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801538e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015392:	f10a 0a01 	add.w	sl, sl, #1
 8015396:	9304      	str	r3, [sp, #16]
 8015398:	9307      	str	r3, [sp, #28]
 801539a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801539e:	931a      	str	r3, [sp, #104]	; 0x68
 80153a0:	4654      	mov	r4, sl
 80153a2:	2205      	movs	r2, #5
 80153a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80153a8:	4850      	ldr	r0, [pc, #320]	; (80154ec <_svfiprintf_r+0x1e8>)
 80153aa:	f7ea ff99 	bl	80002e0 <memchr>
 80153ae:	9a04      	ldr	r2, [sp, #16]
 80153b0:	b9d8      	cbnz	r0, 80153ea <_svfiprintf_r+0xe6>
 80153b2:	06d0      	lsls	r0, r2, #27
 80153b4:	bf44      	itt	mi
 80153b6:	2320      	movmi	r3, #32
 80153b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80153bc:	0711      	lsls	r1, r2, #28
 80153be:	bf44      	itt	mi
 80153c0:	232b      	movmi	r3, #43	; 0x2b
 80153c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80153c6:	f89a 3000 	ldrb.w	r3, [sl]
 80153ca:	2b2a      	cmp	r3, #42	; 0x2a
 80153cc:	d015      	beq.n	80153fa <_svfiprintf_r+0xf6>
 80153ce:	9a07      	ldr	r2, [sp, #28]
 80153d0:	4654      	mov	r4, sl
 80153d2:	2000      	movs	r0, #0
 80153d4:	f04f 0c0a 	mov.w	ip, #10
 80153d8:	4621      	mov	r1, r4
 80153da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80153de:	3b30      	subs	r3, #48	; 0x30
 80153e0:	2b09      	cmp	r3, #9
 80153e2:	d94d      	bls.n	8015480 <_svfiprintf_r+0x17c>
 80153e4:	b1b0      	cbz	r0, 8015414 <_svfiprintf_r+0x110>
 80153e6:	9207      	str	r2, [sp, #28]
 80153e8:	e014      	b.n	8015414 <_svfiprintf_r+0x110>
 80153ea:	eba0 0308 	sub.w	r3, r0, r8
 80153ee:	fa09 f303 	lsl.w	r3, r9, r3
 80153f2:	4313      	orrs	r3, r2
 80153f4:	9304      	str	r3, [sp, #16]
 80153f6:	46a2      	mov	sl, r4
 80153f8:	e7d2      	b.n	80153a0 <_svfiprintf_r+0x9c>
 80153fa:	9b03      	ldr	r3, [sp, #12]
 80153fc:	1d19      	adds	r1, r3, #4
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	9103      	str	r1, [sp, #12]
 8015402:	2b00      	cmp	r3, #0
 8015404:	bfbb      	ittet	lt
 8015406:	425b      	neglt	r3, r3
 8015408:	f042 0202 	orrlt.w	r2, r2, #2
 801540c:	9307      	strge	r3, [sp, #28]
 801540e:	9307      	strlt	r3, [sp, #28]
 8015410:	bfb8      	it	lt
 8015412:	9204      	strlt	r2, [sp, #16]
 8015414:	7823      	ldrb	r3, [r4, #0]
 8015416:	2b2e      	cmp	r3, #46	; 0x2e
 8015418:	d10c      	bne.n	8015434 <_svfiprintf_r+0x130>
 801541a:	7863      	ldrb	r3, [r4, #1]
 801541c:	2b2a      	cmp	r3, #42	; 0x2a
 801541e:	d134      	bne.n	801548a <_svfiprintf_r+0x186>
 8015420:	9b03      	ldr	r3, [sp, #12]
 8015422:	1d1a      	adds	r2, r3, #4
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	9203      	str	r2, [sp, #12]
 8015428:	2b00      	cmp	r3, #0
 801542a:	bfb8      	it	lt
 801542c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015430:	3402      	adds	r4, #2
 8015432:	9305      	str	r3, [sp, #20]
 8015434:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80154fc <_svfiprintf_r+0x1f8>
 8015438:	7821      	ldrb	r1, [r4, #0]
 801543a:	2203      	movs	r2, #3
 801543c:	4650      	mov	r0, sl
 801543e:	f7ea ff4f 	bl	80002e0 <memchr>
 8015442:	b138      	cbz	r0, 8015454 <_svfiprintf_r+0x150>
 8015444:	9b04      	ldr	r3, [sp, #16]
 8015446:	eba0 000a 	sub.w	r0, r0, sl
 801544a:	2240      	movs	r2, #64	; 0x40
 801544c:	4082      	lsls	r2, r0
 801544e:	4313      	orrs	r3, r2
 8015450:	3401      	adds	r4, #1
 8015452:	9304      	str	r3, [sp, #16]
 8015454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015458:	4825      	ldr	r0, [pc, #148]	; (80154f0 <_svfiprintf_r+0x1ec>)
 801545a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801545e:	2206      	movs	r2, #6
 8015460:	f7ea ff3e 	bl	80002e0 <memchr>
 8015464:	2800      	cmp	r0, #0
 8015466:	d038      	beq.n	80154da <_svfiprintf_r+0x1d6>
 8015468:	4b22      	ldr	r3, [pc, #136]	; (80154f4 <_svfiprintf_r+0x1f0>)
 801546a:	bb1b      	cbnz	r3, 80154b4 <_svfiprintf_r+0x1b0>
 801546c:	9b03      	ldr	r3, [sp, #12]
 801546e:	3307      	adds	r3, #7
 8015470:	f023 0307 	bic.w	r3, r3, #7
 8015474:	3308      	adds	r3, #8
 8015476:	9303      	str	r3, [sp, #12]
 8015478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801547a:	4433      	add	r3, r6
 801547c:	9309      	str	r3, [sp, #36]	; 0x24
 801547e:	e768      	b.n	8015352 <_svfiprintf_r+0x4e>
 8015480:	fb0c 3202 	mla	r2, ip, r2, r3
 8015484:	460c      	mov	r4, r1
 8015486:	2001      	movs	r0, #1
 8015488:	e7a6      	b.n	80153d8 <_svfiprintf_r+0xd4>
 801548a:	2300      	movs	r3, #0
 801548c:	3401      	adds	r4, #1
 801548e:	9305      	str	r3, [sp, #20]
 8015490:	4619      	mov	r1, r3
 8015492:	f04f 0c0a 	mov.w	ip, #10
 8015496:	4620      	mov	r0, r4
 8015498:	f810 2b01 	ldrb.w	r2, [r0], #1
 801549c:	3a30      	subs	r2, #48	; 0x30
 801549e:	2a09      	cmp	r2, #9
 80154a0:	d903      	bls.n	80154aa <_svfiprintf_r+0x1a6>
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d0c6      	beq.n	8015434 <_svfiprintf_r+0x130>
 80154a6:	9105      	str	r1, [sp, #20]
 80154a8:	e7c4      	b.n	8015434 <_svfiprintf_r+0x130>
 80154aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80154ae:	4604      	mov	r4, r0
 80154b0:	2301      	movs	r3, #1
 80154b2:	e7f0      	b.n	8015496 <_svfiprintf_r+0x192>
 80154b4:	ab03      	add	r3, sp, #12
 80154b6:	9300      	str	r3, [sp, #0]
 80154b8:	462a      	mov	r2, r5
 80154ba:	4b0f      	ldr	r3, [pc, #60]	; (80154f8 <_svfiprintf_r+0x1f4>)
 80154bc:	a904      	add	r1, sp, #16
 80154be:	4638      	mov	r0, r7
 80154c0:	f3af 8000 	nop.w
 80154c4:	1c42      	adds	r2, r0, #1
 80154c6:	4606      	mov	r6, r0
 80154c8:	d1d6      	bne.n	8015478 <_svfiprintf_r+0x174>
 80154ca:	89ab      	ldrh	r3, [r5, #12]
 80154cc:	065b      	lsls	r3, r3, #25
 80154ce:	f53f af2d 	bmi.w	801532c <_svfiprintf_r+0x28>
 80154d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80154d4:	b01d      	add	sp, #116	; 0x74
 80154d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154da:	ab03      	add	r3, sp, #12
 80154dc:	9300      	str	r3, [sp, #0]
 80154de:	462a      	mov	r2, r5
 80154e0:	4b05      	ldr	r3, [pc, #20]	; (80154f8 <_svfiprintf_r+0x1f4>)
 80154e2:	a904      	add	r1, sp, #16
 80154e4:	4638      	mov	r0, r7
 80154e6:	f000 f9bd 	bl	8015864 <_printf_i>
 80154ea:	e7eb      	b.n	80154c4 <_svfiprintf_r+0x1c0>
 80154ec:	0801b404 	.word	0x0801b404
 80154f0:	0801b40e 	.word	0x0801b40e
 80154f4:	00000000 	.word	0x00000000
 80154f8:	08015251 	.word	0x08015251
 80154fc:	0801b40a 	.word	0x0801b40a

08015500 <__sfputc_r>:
 8015500:	6893      	ldr	r3, [r2, #8]
 8015502:	3b01      	subs	r3, #1
 8015504:	2b00      	cmp	r3, #0
 8015506:	b410      	push	{r4}
 8015508:	6093      	str	r3, [r2, #8]
 801550a:	da08      	bge.n	801551e <__sfputc_r+0x1e>
 801550c:	6994      	ldr	r4, [r2, #24]
 801550e:	42a3      	cmp	r3, r4
 8015510:	db01      	blt.n	8015516 <__sfputc_r+0x16>
 8015512:	290a      	cmp	r1, #10
 8015514:	d103      	bne.n	801551e <__sfputc_r+0x1e>
 8015516:	f85d 4b04 	ldr.w	r4, [sp], #4
 801551a:	f7ff bc7a 	b.w	8014e12 <__swbuf_r>
 801551e:	6813      	ldr	r3, [r2, #0]
 8015520:	1c58      	adds	r0, r3, #1
 8015522:	6010      	str	r0, [r2, #0]
 8015524:	7019      	strb	r1, [r3, #0]
 8015526:	4608      	mov	r0, r1
 8015528:	f85d 4b04 	ldr.w	r4, [sp], #4
 801552c:	4770      	bx	lr

0801552e <__sfputs_r>:
 801552e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015530:	4606      	mov	r6, r0
 8015532:	460f      	mov	r7, r1
 8015534:	4614      	mov	r4, r2
 8015536:	18d5      	adds	r5, r2, r3
 8015538:	42ac      	cmp	r4, r5
 801553a:	d101      	bne.n	8015540 <__sfputs_r+0x12>
 801553c:	2000      	movs	r0, #0
 801553e:	e007      	b.n	8015550 <__sfputs_r+0x22>
 8015540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015544:	463a      	mov	r2, r7
 8015546:	4630      	mov	r0, r6
 8015548:	f7ff ffda 	bl	8015500 <__sfputc_r>
 801554c:	1c43      	adds	r3, r0, #1
 801554e:	d1f3      	bne.n	8015538 <__sfputs_r+0xa>
 8015550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015554 <_vfiprintf_r>:
 8015554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015558:	460d      	mov	r5, r1
 801555a:	b09d      	sub	sp, #116	; 0x74
 801555c:	4614      	mov	r4, r2
 801555e:	4698      	mov	r8, r3
 8015560:	4606      	mov	r6, r0
 8015562:	b118      	cbz	r0, 801556c <_vfiprintf_r+0x18>
 8015564:	6a03      	ldr	r3, [r0, #32]
 8015566:	b90b      	cbnz	r3, 801556c <_vfiprintf_r+0x18>
 8015568:	f7ff fa96 	bl	8014a98 <__sinit>
 801556c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801556e:	07d9      	lsls	r1, r3, #31
 8015570:	d405      	bmi.n	801557e <_vfiprintf_r+0x2a>
 8015572:	89ab      	ldrh	r3, [r5, #12]
 8015574:	059a      	lsls	r2, r3, #22
 8015576:	d402      	bmi.n	801557e <_vfiprintf_r+0x2a>
 8015578:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801557a:	f7ff fd58 	bl	801502e <__retarget_lock_acquire_recursive>
 801557e:	89ab      	ldrh	r3, [r5, #12]
 8015580:	071b      	lsls	r3, r3, #28
 8015582:	d501      	bpl.n	8015588 <_vfiprintf_r+0x34>
 8015584:	692b      	ldr	r3, [r5, #16]
 8015586:	b99b      	cbnz	r3, 80155b0 <_vfiprintf_r+0x5c>
 8015588:	4629      	mov	r1, r5
 801558a:	4630      	mov	r0, r6
 801558c:	f7ff fc7e 	bl	8014e8c <__swsetup_r>
 8015590:	b170      	cbz	r0, 80155b0 <_vfiprintf_r+0x5c>
 8015592:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015594:	07dc      	lsls	r4, r3, #31
 8015596:	d504      	bpl.n	80155a2 <_vfiprintf_r+0x4e>
 8015598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801559c:	b01d      	add	sp, #116	; 0x74
 801559e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155a2:	89ab      	ldrh	r3, [r5, #12]
 80155a4:	0598      	lsls	r0, r3, #22
 80155a6:	d4f7      	bmi.n	8015598 <_vfiprintf_r+0x44>
 80155a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80155aa:	f7ff fd41 	bl	8015030 <__retarget_lock_release_recursive>
 80155ae:	e7f3      	b.n	8015598 <_vfiprintf_r+0x44>
 80155b0:	2300      	movs	r3, #0
 80155b2:	9309      	str	r3, [sp, #36]	; 0x24
 80155b4:	2320      	movs	r3, #32
 80155b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80155ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80155be:	2330      	movs	r3, #48	; 0x30
 80155c0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8015774 <_vfiprintf_r+0x220>
 80155c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80155c8:	f04f 0901 	mov.w	r9, #1
 80155cc:	4623      	mov	r3, r4
 80155ce:	469a      	mov	sl, r3
 80155d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80155d4:	b10a      	cbz	r2, 80155da <_vfiprintf_r+0x86>
 80155d6:	2a25      	cmp	r2, #37	; 0x25
 80155d8:	d1f9      	bne.n	80155ce <_vfiprintf_r+0x7a>
 80155da:	ebba 0b04 	subs.w	fp, sl, r4
 80155de:	d00b      	beq.n	80155f8 <_vfiprintf_r+0xa4>
 80155e0:	465b      	mov	r3, fp
 80155e2:	4622      	mov	r2, r4
 80155e4:	4629      	mov	r1, r5
 80155e6:	4630      	mov	r0, r6
 80155e8:	f7ff ffa1 	bl	801552e <__sfputs_r>
 80155ec:	3001      	adds	r0, #1
 80155ee:	f000 80a9 	beq.w	8015744 <_vfiprintf_r+0x1f0>
 80155f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80155f4:	445a      	add	r2, fp
 80155f6:	9209      	str	r2, [sp, #36]	; 0x24
 80155f8:	f89a 3000 	ldrb.w	r3, [sl]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	f000 80a1 	beq.w	8015744 <_vfiprintf_r+0x1f0>
 8015602:	2300      	movs	r3, #0
 8015604:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015608:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801560c:	f10a 0a01 	add.w	sl, sl, #1
 8015610:	9304      	str	r3, [sp, #16]
 8015612:	9307      	str	r3, [sp, #28]
 8015614:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015618:	931a      	str	r3, [sp, #104]	; 0x68
 801561a:	4654      	mov	r4, sl
 801561c:	2205      	movs	r2, #5
 801561e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015622:	4854      	ldr	r0, [pc, #336]	; (8015774 <_vfiprintf_r+0x220>)
 8015624:	f7ea fe5c 	bl	80002e0 <memchr>
 8015628:	9a04      	ldr	r2, [sp, #16]
 801562a:	b9d8      	cbnz	r0, 8015664 <_vfiprintf_r+0x110>
 801562c:	06d1      	lsls	r1, r2, #27
 801562e:	bf44      	itt	mi
 8015630:	2320      	movmi	r3, #32
 8015632:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015636:	0713      	lsls	r3, r2, #28
 8015638:	bf44      	itt	mi
 801563a:	232b      	movmi	r3, #43	; 0x2b
 801563c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015640:	f89a 3000 	ldrb.w	r3, [sl]
 8015644:	2b2a      	cmp	r3, #42	; 0x2a
 8015646:	d015      	beq.n	8015674 <_vfiprintf_r+0x120>
 8015648:	9a07      	ldr	r2, [sp, #28]
 801564a:	4654      	mov	r4, sl
 801564c:	2000      	movs	r0, #0
 801564e:	f04f 0c0a 	mov.w	ip, #10
 8015652:	4621      	mov	r1, r4
 8015654:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015658:	3b30      	subs	r3, #48	; 0x30
 801565a:	2b09      	cmp	r3, #9
 801565c:	d94d      	bls.n	80156fa <_vfiprintf_r+0x1a6>
 801565e:	b1b0      	cbz	r0, 801568e <_vfiprintf_r+0x13a>
 8015660:	9207      	str	r2, [sp, #28]
 8015662:	e014      	b.n	801568e <_vfiprintf_r+0x13a>
 8015664:	eba0 0308 	sub.w	r3, r0, r8
 8015668:	fa09 f303 	lsl.w	r3, r9, r3
 801566c:	4313      	orrs	r3, r2
 801566e:	9304      	str	r3, [sp, #16]
 8015670:	46a2      	mov	sl, r4
 8015672:	e7d2      	b.n	801561a <_vfiprintf_r+0xc6>
 8015674:	9b03      	ldr	r3, [sp, #12]
 8015676:	1d19      	adds	r1, r3, #4
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	9103      	str	r1, [sp, #12]
 801567c:	2b00      	cmp	r3, #0
 801567e:	bfbb      	ittet	lt
 8015680:	425b      	neglt	r3, r3
 8015682:	f042 0202 	orrlt.w	r2, r2, #2
 8015686:	9307      	strge	r3, [sp, #28]
 8015688:	9307      	strlt	r3, [sp, #28]
 801568a:	bfb8      	it	lt
 801568c:	9204      	strlt	r2, [sp, #16]
 801568e:	7823      	ldrb	r3, [r4, #0]
 8015690:	2b2e      	cmp	r3, #46	; 0x2e
 8015692:	d10c      	bne.n	80156ae <_vfiprintf_r+0x15a>
 8015694:	7863      	ldrb	r3, [r4, #1]
 8015696:	2b2a      	cmp	r3, #42	; 0x2a
 8015698:	d134      	bne.n	8015704 <_vfiprintf_r+0x1b0>
 801569a:	9b03      	ldr	r3, [sp, #12]
 801569c:	1d1a      	adds	r2, r3, #4
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	9203      	str	r2, [sp, #12]
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	bfb8      	it	lt
 80156a6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80156aa:	3402      	adds	r4, #2
 80156ac:	9305      	str	r3, [sp, #20]
 80156ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8015784 <_vfiprintf_r+0x230>
 80156b2:	7821      	ldrb	r1, [r4, #0]
 80156b4:	2203      	movs	r2, #3
 80156b6:	4650      	mov	r0, sl
 80156b8:	f7ea fe12 	bl	80002e0 <memchr>
 80156bc:	b138      	cbz	r0, 80156ce <_vfiprintf_r+0x17a>
 80156be:	9b04      	ldr	r3, [sp, #16]
 80156c0:	eba0 000a 	sub.w	r0, r0, sl
 80156c4:	2240      	movs	r2, #64	; 0x40
 80156c6:	4082      	lsls	r2, r0
 80156c8:	4313      	orrs	r3, r2
 80156ca:	3401      	adds	r4, #1
 80156cc:	9304      	str	r3, [sp, #16]
 80156ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80156d2:	4829      	ldr	r0, [pc, #164]	; (8015778 <_vfiprintf_r+0x224>)
 80156d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80156d8:	2206      	movs	r2, #6
 80156da:	f7ea fe01 	bl	80002e0 <memchr>
 80156de:	2800      	cmp	r0, #0
 80156e0:	d03f      	beq.n	8015762 <_vfiprintf_r+0x20e>
 80156e2:	4b26      	ldr	r3, [pc, #152]	; (801577c <_vfiprintf_r+0x228>)
 80156e4:	bb1b      	cbnz	r3, 801572e <_vfiprintf_r+0x1da>
 80156e6:	9b03      	ldr	r3, [sp, #12]
 80156e8:	3307      	adds	r3, #7
 80156ea:	f023 0307 	bic.w	r3, r3, #7
 80156ee:	3308      	adds	r3, #8
 80156f0:	9303      	str	r3, [sp, #12]
 80156f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156f4:	443b      	add	r3, r7
 80156f6:	9309      	str	r3, [sp, #36]	; 0x24
 80156f8:	e768      	b.n	80155cc <_vfiprintf_r+0x78>
 80156fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80156fe:	460c      	mov	r4, r1
 8015700:	2001      	movs	r0, #1
 8015702:	e7a6      	b.n	8015652 <_vfiprintf_r+0xfe>
 8015704:	2300      	movs	r3, #0
 8015706:	3401      	adds	r4, #1
 8015708:	9305      	str	r3, [sp, #20]
 801570a:	4619      	mov	r1, r3
 801570c:	f04f 0c0a 	mov.w	ip, #10
 8015710:	4620      	mov	r0, r4
 8015712:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015716:	3a30      	subs	r2, #48	; 0x30
 8015718:	2a09      	cmp	r2, #9
 801571a:	d903      	bls.n	8015724 <_vfiprintf_r+0x1d0>
 801571c:	2b00      	cmp	r3, #0
 801571e:	d0c6      	beq.n	80156ae <_vfiprintf_r+0x15a>
 8015720:	9105      	str	r1, [sp, #20]
 8015722:	e7c4      	b.n	80156ae <_vfiprintf_r+0x15a>
 8015724:	fb0c 2101 	mla	r1, ip, r1, r2
 8015728:	4604      	mov	r4, r0
 801572a:	2301      	movs	r3, #1
 801572c:	e7f0      	b.n	8015710 <_vfiprintf_r+0x1bc>
 801572e:	ab03      	add	r3, sp, #12
 8015730:	9300      	str	r3, [sp, #0]
 8015732:	462a      	mov	r2, r5
 8015734:	4b12      	ldr	r3, [pc, #72]	; (8015780 <_vfiprintf_r+0x22c>)
 8015736:	a904      	add	r1, sp, #16
 8015738:	4630      	mov	r0, r6
 801573a:	f3af 8000 	nop.w
 801573e:	4607      	mov	r7, r0
 8015740:	1c78      	adds	r0, r7, #1
 8015742:	d1d6      	bne.n	80156f2 <_vfiprintf_r+0x19e>
 8015744:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015746:	07d9      	lsls	r1, r3, #31
 8015748:	d405      	bmi.n	8015756 <_vfiprintf_r+0x202>
 801574a:	89ab      	ldrh	r3, [r5, #12]
 801574c:	059a      	lsls	r2, r3, #22
 801574e:	d402      	bmi.n	8015756 <_vfiprintf_r+0x202>
 8015750:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015752:	f7ff fc6d 	bl	8015030 <__retarget_lock_release_recursive>
 8015756:	89ab      	ldrh	r3, [r5, #12]
 8015758:	065b      	lsls	r3, r3, #25
 801575a:	f53f af1d 	bmi.w	8015598 <_vfiprintf_r+0x44>
 801575e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015760:	e71c      	b.n	801559c <_vfiprintf_r+0x48>
 8015762:	ab03      	add	r3, sp, #12
 8015764:	9300      	str	r3, [sp, #0]
 8015766:	462a      	mov	r2, r5
 8015768:	4b05      	ldr	r3, [pc, #20]	; (8015780 <_vfiprintf_r+0x22c>)
 801576a:	a904      	add	r1, sp, #16
 801576c:	4630      	mov	r0, r6
 801576e:	f000 f879 	bl	8015864 <_printf_i>
 8015772:	e7e4      	b.n	801573e <_vfiprintf_r+0x1ea>
 8015774:	0801b404 	.word	0x0801b404
 8015778:	0801b40e 	.word	0x0801b40e
 801577c:	00000000 	.word	0x00000000
 8015780:	0801552f 	.word	0x0801552f
 8015784:	0801b40a 	.word	0x0801b40a

08015788 <_printf_common>:
 8015788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801578c:	4616      	mov	r6, r2
 801578e:	4699      	mov	r9, r3
 8015790:	688a      	ldr	r2, [r1, #8]
 8015792:	690b      	ldr	r3, [r1, #16]
 8015794:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015798:	4293      	cmp	r3, r2
 801579a:	bfb8      	it	lt
 801579c:	4613      	movlt	r3, r2
 801579e:	6033      	str	r3, [r6, #0]
 80157a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80157a4:	4607      	mov	r7, r0
 80157a6:	460c      	mov	r4, r1
 80157a8:	b10a      	cbz	r2, 80157ae <_printf_common+0x26>
 80157aa:	3301      	adds	r3, #1
 80157ac:	6033      	str	r3, [r6, #0]
 80157ae:	6823      	ldr	r3, [r4, #0]
 80157b0:	0699      	lsls	r1, r3, #26
 80157b2:	bf42      	ittt	mi
 80157b4:	6833      	ldrmi	r3, [r6, #0]
 80157b6:	3302      	addmi	r3, #2
 80157b8:	6033      	strmi	r3, [r6, #0]
 80157ba:	6825      	ldr	r5, [r4, #0]
 80157bc:	f015 0506 	ands.w	r5, r5, #6
 80157c0:	d106      	bne.n	80157d0 <_printf_common+0x48>
 80157c2:	f104 0a19 	add.w	sl, r4, #25
 80157c6:	68e3      	ldr	r3, [r4, #12]
 80157c8:	6832      	ldr	r2, [r6, #0]
 80157ca:	1a9b      	subs	r3, r3, r2
 80157cc:	42ab      	cmp	r3, r5
 80157ce:	dc26      	bgt.n	801581e <_printf_common+0x96>
 80157d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80157d4:	1e13      	subs	r3, r2, #0
 80157d6:	6822      	ldr	r2, [r4, #0]
 80157d8:	bf18      	it	ne
 80157da:	2301      	movne	r3, #1
 80157dc:	0692      	lsls	r2, r2, #26
 80157de:	d42b      	bmi.n	8015838 <_printf_common+0xb0>
 80157e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80157e4:	4649      	mov	r1, r9
 80157e6:	4638      	mov	r0, r7
 80157e8:	47c0      	blx	r8
 80157ea:	3001      	adds	r0, #1
 80157ec:	d01e      	beq.n	801582c <_printf_common+0xa4>
 80157ee:	6823      	ldr	r3, [r4, #0]
 80157f0:	6922      	ldr	r2, [r4, #16]
 80157f2:	f003 0306 	and.w	r3, r3, #6
 80157f6:	2b04      	cmp	r3, #4
 80157f8:	bf02      	ittt	eq
 80157fa:	68e5      	ldreq	r5, [r4, #12]
 80157fc:	6833      	ldreq	r3, [r6, #0]
 80157fe:	1aed      	subeq	r5, r5, r3
 8015800:	68a3      	ldr	r3, [r4, #8]
 8015802:	bf0c      	ite	eq
 8015804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015808:	2500      	movne	r5, #0
 801580a:	4293      	cmp	r3, r2
 801580c:	bfc4      	itt	gt
 801580e:	1a9b      	subgt	r3, r3, r2
 8015810:	18ed      	addgt	r5, r5, r3
 8015812:	2600      	movs	r6, #0
 8015814:	341a      	adds	r4, #26
 8015816:	42b5      	cmp	r5, r6
 8015818:	d11a      	bne.n	8015850 <_printf_common+0xc8>
 801581a:	2000      	movs	r0, #0
 801581c:	e008      	b.n	8015830 <_printf_common+0xa8>
 801581e:	2301      	movs	r3, #1
 8015820:	4652      	mov	r2, sl
 8015822:	4649      	mov	r1, r9
 8015824:	4638      	mov	r0, r7
 8015826:	47c0      	blx	r8
 8015828:	3001      	adds	r0, #1
 801582a:	d103      	bne.n	8015834 <_printf_common+0xac>
 801582c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015834:	3501      	adds	r5, #1
 8015836:	e7c6      	b.n	80157c6 <_printf_common+0x3e>
 8015838:	18e1      	adds	r1, r4, r3
 801583a:	1c5a      	adds	r2, r3, #1
 801583c:	2030      	movs	r0, #48	; 0x30
 801583e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015842:	4422      	add	r2, r4
 8015844:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015848:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801584c:	3302      	adds	r3, #2
 801584e:	e7c7      	b.n	80157e0 <_printf_common+0x58>
 8015850:	2301      	movs	r3, #1
 8015852:	4622      	mov	r2, r4
 8015854:	4649      	mov	r1, r9
 8015856:	4638      	mov	r0, r7
 8015858:	47c0      	blx	r8
 801585a:	3001      	adds	r0, #1
 801585c:	d0e6      	beq.n	801582c <_printf_common+0xa4>
 801585e:	3601      	adds	r6, #1
 8015860:	e7d9      	b.n	8015816 <_printf_common+0x8e>
	...

08015864 <_printf_i>:
 8015864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015868:	7e0f      	ldrb	r7, [r1, #24]
 801586a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801586c:	2f78      	cmp	r7, #120	; 0x78
 801586e:	4691      	mov	r9, r2
 8015870:	4680      	mov	r8, r0
 8015872:	460c      	mov	r4, r1
 8015874:	469a      	mov	sl, r3
 8015876:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801587a:	d807      	bhi.n	801588c <_printf_i+0x28>
 801587c:	2f62      	cmp	r7, #98	; 0x62
 801587e:	d80a      	bhi.n	8015896 <_printf_i+0x32>
 8015880:	2f00      	cmp	r7, #0
 8015882:	f000 80d4 	beq.w	8015a2e <_printf_i+0x1ca>
 8015886:	2f58      	cmp	r7, #88	; 0x58
 8015888:	f000 80c0 	beq.w	8015a0c <_printf_i+0x1a8>
 801588c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015890:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015894:	e03a      	b.n	801590c <_printf_i+0xa8>
 8015896:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801589a:	2b15      	cmp	r3, #21
 801589c:	d8f6      	bhi.n	801588c <_printf_i+0x28>
 801589e:	a101      	add	r1, pc, #4	; (adr r1, 80158a4 <_printf_i+0x40>)
 80158a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80158a4:	080158fd 	.word	0x080158fd
 80158a8:	08015911 	.word	0x08015911
 80158ac:	0801588d 	.word	0x0801588d
 80158b0:	0801588d 	.word	0x0801588d
 80158b4:	0801588d 	.word	0x0801588d
 80158b8:	0801588d 	.word	0x0801588d
 80158bc:	08015911 	.word	0x08015911
 80158c0:	0801588d 	.word	0x0801588d
 80158c4:	0801588d 	.word	0x0801588d
 80158c8:	0801588d 	.word	0x0801588d
 80158cc:	0801588d 	.word	0x0801588d
 80158d0:	08015a15 	.word	0x08015a15
 80158d4:	0801593d 	.word	0x0801593d
 80158d8:	080159cf 	.word	0x080159cf
 80158dc:	0801588d 	.word	0x0801588d
 80158e0:	0801588d 	.word	0x0801588d
 80158e4:	08015a37 	.word	0x08015a37
 80158e8:	0801588d 	.word	0x0801588d
 80158ec:	0801593d 	.word	0x0801593d
 80158f0:	0801588d 	.word	0x0801588d
 80158f4:	0801588d 	.word	0x0801588d
 80158f8:	080159d7 	.word	0x080159d7
 80158fc:	682b      	ldr	r3, [r5, #0]
 80158fe:	1d1a      	adds	r2, r3, #4
 8015900:	681b      	ldr	r3, [r3, #0]
 8015902:	602a      	str	r2, [r5, #0]
 8015904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015908:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801590c:	2301      	movs	r3, #1
 801590e:	e09f      	b.n	8015a50 <_printf_i+0x1ec>
 8015910:	6820      	ldr	r0, [r4, #0]
 8015912:	682b      	ldr	r3, [r5, #0]
 8015914:	0607      	lsls	r7, r0, #24
 8015916:	f103 0104 	add.w	r1, r3, #4
 801591a:	6029      	str	r1, [r5, #0]
 801591c:	d501      	bpl.n	8015922 <_printf_i+0xbe>
 801591e:	681e      	ldr	r6, [r3, #0]
 8015920:	e003      	b.n	801592a <_printf_i+0xc6>
 8015922:	0646      	lsls	r6, r0, #25
 8015924:	d5fb      	bpl.n	801591e <_printf_i+0xba>
 8015926:	f9b3 6000 	ldrsh.w	r6, [r3]
 801592a:	2e00      	cmp	r6, #0
 801592c:	da03      	bge.n	8015936 <_printf_i+0xd2>
 801592e:	232d      	movs	r3, #45	; 0x2d
 8015930:	4276      	negs	r6, r6
 8015932:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015936:	485a      	ldr	r0, [pc, #360]	; (8015aa0 <_printf_i+0x23c>)
 8015938:	230a      	movs	r3, #10
 801593a:	e012      	b.n	8015962 <_printf_i+0xfe>
 801593c:	682b      	ldr	r3, [r5, #0]
 801593e:	6820      	ldr	r0, [r4, #0]
 8015940:	1d19      	adds	r1, r3, #4
 8015942:	6029      	str	r1, [r5, #0]
 8015944:	0605      	lsls	r5, r0, #24
 8015946:	d501      	bpl.n	801594c <_printf_i+0xe8>
 8015948:	681e      	ldr	r6, [r3, #0]
 801594a:	e002      	b.n	8015952 <_printf_i+0xee>
 801594c:	0641      	lsls	r1, r0, #25
 801594e:	d5fb      	bpl.n	8015948 <_printf_i+0xe4>
 8015950:	881e      	ldrh	r6, [r3, #0]
 8015952:	4853      	ldr	r0, [pc, #332]	; (8015aa0 <_printf_i+0x23c>)
 8015954:	2f6f      	cmp	r7, #111	; 0x6f
 8015956:	bf0c      	ite	eq
 8015958:	2308      	moveq	r3, #8
 801595a:	230a      	movne	r3, #10
 801595c:	2100      	movs	r1, #0
 801595e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015962:	6865      	ldr	r5, [r4, #4]
 8015964:	60a5      	str	r5, [r4, #8]
 8015966:	2d00      	cmp	r5, #0
 8015968:	bfa2      	ittt	ge
 801596a:	6821      	ldrge	r1, [r4, #0]
 801596c:	f021 0104 	bicge.w	r1, r1, #4
 8015970:	6021      	strge	r1, [r4, #0]
 8015972:	b90e      	cbnz	r6, 8015978 <_printf_i+0x114>
 8015974:	2d00      	cmp	r5, #0
 8015976:	d04b      	beq.n	8015a10 <_printf_i+0x1ac>
 8015978:	4615      	mov	r5, r2
 801597a:	fbb6 f1f3 	udiv	r1, r6, r3
 801597e:	fb03 6711 	mls	r7, r3, r1, r6
 8015982:	5dc7      	ldrb	r7, [r0, r7]
 8015984:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015988:	4637      	mov	r7, r6
 801598a:	42bb      	cmp	r3, r7
 801598c:	460e      	mov	r6, r1
 801598e:	d9f4      	bls.n	801597a <_printf_i+0x116>
 8015990:	2b08      	cmp	r3, #8
 8015992:	d10b      	bne.n	80159ac <_printf_i+0x148>
 8015994:	6823      	ldr	r3, [r4, #0]
 8015996:	07de      	lsls	r6, r3, #31
 8015998:	d508      	bpl.n	80159ac <_printf_i+0x148>
 801599a:	6923      	ldr	r3, [r4, #16]
 801599c:	6861      	ldr	r1, [r4, #4]
 801599e:	4299      	cmp	r1, r3
 80159a0:	bfde      	ittt	le
 80159a2:	2330      	movle	r3, #48	; 0x30
 80159a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80159a8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80159ac:	1b52      	subs	r2, r2, r5
 80159ae:	6122      	str	r2, [r4, #16]
 80159b0:	f8cd a000 	str.w	sl, [sp]
 80159b4:	464b      	mov	r3, r9
 80159b6:	aa03      	add	r2, sp, #12
 80159b8:	4621      	mov	r1, r4
 80159ba:	4640      	mov	r0, r8
 80159bc:	f7ff fee4 	bl	8015788 <_printf_common>
 80159c0:	3001      	adds	r0, #1
 80159c2:	d14a      	bne.n	8015a5a <_printf_i+0x1f6>
 80159c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80159c8:	b004      	add	sp, #16
 80159ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80159ce:	6823      	ldr	r3, [r4, #0]
 80159d0:	f043 0320 	orr.w	r3, r3, #32
 80159d4:	6023      	str	r3, [r4, #0]
 80159d6:	4833      	ldr	r0, [pc, #204]	; (8015aa4 <_printf_i+0x240>)
 80159d8:	2778      	movs	r7, #120	; 0x78
 80159da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80159de:	6823      	ldr	r3, [r4, #0]
 80159e0:	6829      	ldr	r1, [r5, #0]
 80159e2:	061f      	lsls	r7, r3, #24
 80159e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80159e8:	d402      	bmi.n	80159f0 <_printf_i+0x18c>
 80159ea:	065f      	lsls	r7, r3, #25
 80159ec:	bf48      	it	mi
 80159ee:	b2b6      	uxthmi	r6, r6
 80159f0:	07df      	lsls	r7, r3, #31
 80159f2:	bf48      	it	mi
 80159f4:	f043 0320 	orrmi.w	r3, r3, #32
 80159f8:	6029      	str	r1, [r5, #0]
 80159fa:	bf48      	it	mi
 80159fc:	6023      	strmi	r3, [r4, #0]
 80159fe:	b91e      	cbnz	r6, 8015a08 <_printf_i+0x1a4>
 8015a00:	6823      	ldr	r3, [r4, #0]
 8015a02:	f023 0320 	bic.w	r3, r3, #32
 8015a06:	6023      	str	r3, [r4, #0]
 8015a08:	2310      	movs	r3, #16
 8015a0a:	e7a7      	b.n	801595c <_printf_i+0xf8>
 8015a0c:	4824      	ldr	r0, [pc, #144]	; (8015aa0 <_printf_i+0x23c>)
 8015a0e:	e7e4      	b.n	80159da <_printf_i+0x176>
 8015a10:	4615      	mov	r5, r2
 8015a12:	e7bd      	b.n	8015990 <_printf_i+0x12c>
 8015a14:	682b      	ldr	r3, [r5, #0]
 8015a16:	6826      	ldr	r6, [r4, #0]
 8015a18:	6961      	ldr	r1, [r4, #20]
 8015a1a:	1d18      	adds	r0, r3, #4
 8015a1c:	6028      	str	r0, [r5, #0]
 8015a1e:	0635      	lsls	r5, r6, #24
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	d501      	bpl.n	8015a28 <_printf_i+0x1c4>
 8015a24:	6019      	str	r1, [r3, #0]
 8015a26:	e002      	b.n	8015a2e <_printf_i+0x1ca>
 8015a28:	0670      	lsls	r0, r6, #25
 8015a2a:	d5fb      	bpl.n	8015a24 <_printf_i+0x1c0>
 8015a2c:	8019      	strh	r1, [r3, #0]
 8015a2e:	2300      	movs	r3, #0
 8015a30:	6123      	str	r3, [r4, #16]
 8015a32:	4615      	mov	r5, r2
 8015a34:	e7bc      	b.n	80159b0 <_printf_i+0x14c>
 8015a36:	682b      	ldr	r3, [r5, #0]
 8015a38:	1d1a      	adds	r2, r3, #4
 8015a3a:	602a      	str	r2, [r5, #0]
 8015a3c:	681d      	ldr	r5, [r3, #0]
 8015a3e:	6862      	ldr	r2, [r4, #4]
 8015a40:	2100      	movs	r1, #0
 8015a42:	4628      	mov	r0, r5
 8015a44:	f7ea fc4c 	bl	80002e0 <memchr>
 8015a48:	b108      	cbz	r0, 8015a4e <_printf_i+0x1ea>
 8015a4a:	1b40      	subs	r0, r0, r5
 8015a4c:	6060      	str	r0, [r4, #4]
 8015a4e:	6863      	ldr	r3, [r4, #4]
 8015a50:	6123      	str	r3, [r4, #16]
 8015a52:	2300      	movs	r3, #0
 8015a54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015a58:	e7aa      	b.n	80159b0 <_printf_i+0x14c>
 8015a5a:	6923      	ldr	r3, [r4, #16]
 8015a5c:	462a      	mov	r2, r5
 8015a5e:	4649      	mov	r1, r9
 8015a60:	4640      	mov	r0, r8
 8015a62:	47d0      	blx	sl
 8015a64:	3001      	adds	r0, #1
 8015a66:	d0ad      	beq.n	80159c4 <_printf_i+0x160>
 8015a68:	6823      	ldr	r3, [r4, #0]
 8015a6a:	079b      	lsls	r3, r3, #30
 8015a6c:	d413      	bmi.n	8015a96 <_printf_i+0x232>
 8015a6e:	68e0      	ldr	r0, [r4, #12]
 8015a70:	9b03      	ldr	r3, [sp, #12]
 8015a72:	4298      	cmp	r0, r3
 8015a74:	bfb8      	it	lt
 8015a76:	4618      	movlt	r0, r3
 8015a78:	e7a6      	b.n	80159c8 <_printf_i+0x164>
 8015a7a:	2301      	movs	r3, #1
 8015a7c:	4632      	mov	r2, r6
 8015a7e:	4649      	mov	r1, r9
 8015a80:	4640      	mov	r0, r8
 8015a82:	47d0      	blx	sl
 8015a84:	3001      	adds	r0, #1
 8015a86:	d09d      	beq.n	80159c4 <_printf_i+0x160>
 8015a88:	3501      	adds	r5, #1
 8015a8a:	68e3      	ldr	r3, [r4, #12]
 8015a8c:	9903      	ldr	r1, [sp, #12]
 8015a8e:	1a5b      	subs	r3, r3, r1
 8015a90:	42ab      	cmp	r3, r5
 8015a92:	dcf2      	bgt.n	8015a7a <_printf_i+0x216>
 8015a94:	e7eb      	b.n	8015a6e <_printf_i+0x20a>
 8015a96:	2500      	movs	r5, #0
 8015a98:	f104 0619 	add.w	r6, r4, #25
 8015a9c:	e7f5      	b.n	8015a8a <_printf_i+0x226>
 8015a9e:	bf00      	nop
 8015aa0:	0801b415 	.word	0x0801b415
 8015aa4:	0801b426 	.word	0x0801b426

08015aa8 <__sflush_r>:
 8015aa8:	898a      	ldrh	r2, [r1, #12]
 8015aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015aae:	4605      	mov	r5, r0
 8015ab0:	0710      	lsls	r0, r2, #28
 8015ab2:	460c      	mov	r4, r1
 8015ab4:	d458      	bmi.n	8015b68 <__sflush_r+0xc0>
 8015ab6:	684b      	ldr	r3, [r1, #4]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	dc05      	bgt.n	8015ac8 <__sflush_r+0x20>
 8015abc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	dc02      	bgt.n	8015ac8 <__sflush_r+0x20>
 8015ac2:	2000      	movs	r0, #0
 8015ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ac8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015aca:	2e00      	cmp	r6, #0
 8015acc:	d0f9      	beq.n	8015ac2 <__sflush_r+0x1a>
 8015ace:	2300      	movs	r3, #0
 8015ad0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015ad4:	682f      	ldr	r7, [r5, #0]
 8015ad6:	6a21      	ldr	r1, [r4, #32]
 8015ad8:	602b      	str	r3, [r5, #0]
 8015ada:	d032      	beq.n	8015b42 <__sflush_r+0x9a>
 8015adc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015ade:	89a3      	ldrh	r3, [r4, #12]
 8015ae0:	075a      	lsls	r2, r3, #29
 8015ae2:	d505      	bpl.n	8015af0 <__sflush_r+0x48>
 8015ae4:	6863      	ldr	r3, [r4, #4]
 8015ae6:	1ac0      	subs	r0, r0, r3
 8015ae8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015aea:	b10b      	cbz	r3, 8015af0 <__sflush_r+0x48>
 8015aec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015aee:	1ac0      	subs	r0, r0, r3
 8015af0:	2300      	movs	r3, #0
 8015af2:	4602      	mov	r2, r0
 8015af4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015af6:	6a21      	ldr	r1, [r4, #32]
 8015af8:	4628      	mov	r0, r5
 8015afa:	47b0      	blx	r6
 8015afc:	1c43      	adds	r3, r0, #1
 8015afe:	89a3      	ldrh	r3, [r4, #12]
 8015b00:	d106      	bne.n	8015b10 <__sflush_r+0x68>
 8015b02:	6829      	ldr	r1, [r5, #0]
 8015b04:	291d      	cmp	r1, #29
 8015b06:	d82b      	bhi.n	8015b60 <__sflush_r+0xb8>
 8015b08:	4a29      	ldr	r2, [pc, #164]	; (8015bb0 <__sflush_r+0x108>)
 8015b0a:	410a      	asrs	r2, r1
 8015b0c:	07d6      	lsls	r6, r2, #31
 8015b0e:	d427      	bmi.n	8015b60 <__sflush_r+0xb8>
 8015b10:	2200      	movs	r2, #0
 8015b12:	6062      	str	r2, [r4, #4]
 8015b14:	04d9      	lsls	r1, r3, #19
 8015b16:	6922      	ldr	r2, [r4, #16]
 8015b18:	6022      	str	r2, [r4, #0]
 8015b1a:	d504      	bpl.n	8015b26 <__sflush_r+0x7e>
 8015b1c:	1c42      	adds	r2, r0, #1
 8015b1e:	d101      	bne.n	8015b24 <__sflush_r+0x7c>
 8015b20:	682b      	ldr	r3, [r5, #0]
 8015b22:	b903      	cbnz	r3, 8015b26 <__sflush_r+0x7e>
 8015b24:	6560      	str	r0, [r4, #84]	; 0x54
 8015b26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015b28:	602f      	str	r7, [r5, #0]
 8015b2a:	2900      	cmp	r1, #0
 8015b2c:	d0c9      	beq.n	8015ac2 <__sflush_r+0x1a>
 8015b2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015b32:	4299      	cmp	r1, r3
 8015b34:	d002      	beq.n	8015b3c <__sflush_r+0x94>
 8015b36:	4628      	mov	r0, r5
 8015b38:	f7ff fa8a 	bl	8015050 <_free_r>
 8015b3c:	2000      	movs	r0, #0
 8015b3e:	6360      	str	r0, [r4, #52]	; 0x34
 8015b40:	e7c0      	b.n	8015ac4 <__sflush_r+0x1c>
 8015b42:	2301      	movs	r3, #1
 8015b44:	4628      	mov	r0, r5
 8015b46:	47b0      	blx	r6
 8015b48:	1c41      	adds	r1, r0, #1
 8015b4a:	d1c8      	bne.n	8015ade <__sflush_r+0x36>
 8015b4c:	682b      	ldr	r3, [r5, #0]
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d0c5      	beq.n	8015ade <__sflush_r+0x36>
 8015b52:	2b1d      	cmp	r3, #29
 8015b54:	d001      	beq.n	8015b5a <__sflush_r+0xb2>
 8015b56:	2b16      	cmp	r3, #22
 8015b58:	d101      	bne.n	8015b5e <__sflush_r+0xb6>
 8015b5a:	602f      	str	r7, [r5, #0]
 8015b5c:	e7b1      	b.n	8015ac2 <__sflush_r+0x1a>
 8015b5e:	89a3      	ldrh	r3, [r4, #12]
 8015b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b64:	81a3      	strh	r3, [r4, #12]
 8015b66:	e7ad      	b.n	8015ac4 <__sflush_r+0x1c>
 8015b68:	690f      	ldr	r7, [r1, #16]
 8015b6a:	2f00      	cmp	r7, #0
 8015b6c:	d0a9      	beq.n	8015ac2 <__sflush_r+0x1a>
 8015b6e:	0793      	lsls	r3, r2, #30
 8015b70:	680e      	ldr	r6, [r1, #0]
 8015b72:	bf08      	it	eq
 8015b74:	694b      	ldreq	r3, [r1, #20]
 8015b76:	600f      	str	r7, [r1, #0]
 8015b78:	bf18      	it	ne
 8015b7a:	2300      	movne	r3, #0
 8015b7c:	eba6 0807 	sub.w	r8, r6, r7
 8015b80:	608b      	str	r3, [r1, #8]
 8015b82:	f1b8 0f00 	cmp.w	r8, #0
 8015b86:	dd9c      	ble.n	8015ac2 <__sflush_r+0x1a>
 8015b88:	6a21      	ldr	r1, [r4, #32]
 8015b8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015b8c:	4643      	mov	r3, r8
 8015b8e:	463a      	mov	r2, r7
 8015b90:	4628      	mov	r0, r5
 8015b92:	47b0      	blx	r6
 8015b94:	2800      	cmp	r0, #0
 8015b96:	dc06      	bgt.n	8015ba6 <__sflush_r+0xfe>
 8015b98:	89a3      	ldrh	r3, [r4, #12]
 8015b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b9e:	81a3      	strh	r3, [r4, #12]
 8015ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015ba4:	e78e      	b.n	8015ac4 <__sflush_r+0x1c>
 8015ba6:	4407      	add	r7, r0
 8015ba8:	eba8 0800 	sub.w	r8, r8, r0
 8015bac:	e7e9      	b.n	8015b82 <__sflush_r+0xda>
 8015bae:	bf00      	nop
 8015bb0:	dfbffffe 	.word	0xdfbffffe

08015bb4 <_fflush_r>:
 8015bb4:	b538      	push	{r3, r4, r5, lr}
 8015bb6:	690b      	ldr	r3, [r1, #16]
 8015bb8:	4605      	mov	r5, r0
 8015bba:	460c      	mov	r4, r1
 8015bbc:	b913      	cbnz	r3, 8015bc4 <_fflush_r+0x10>
 8015bbe:	2500      	movs	r5, #0
 8015bc0:	4628      	mov	r0, r5
 8015bc2:	bd38      	pop	{r3, r4, r5, pc}
 8015bc4:	b118      	cbz	r0, 8015bce <_fflush_r+0x1a>
 8015bc6:	6a03      	ldr	r3, [r0, #32]
 8015bc8:	b90b      	cbnz	r3, 8015bce <_fflush_r+0x1a>
 8015bca:	f7fe ff65 	bl	8014a98 <__sinit>
 8015bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d0f3      	beq.n	8015bbe <_fflush_r+0xa>
 8015bd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015bd8:	07d0      	lsls	r0, r2, #31
 8015bda:	d404      	bmi.n	8015be6 <_fflush_r+0x32>
 8015bdc:	0599      	lsls	r1, r3, #22
 8015bde:	d402      	bmi.n	8015be6 <_fflush_r+0x32>
 8015be0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015be2:	f7ff fa24 	bl	801502e <__retarget_lock_acquire_recursive>
 8015be6:	4628      	mov	r0, r5
 8015be8:	4621      	mov	r1, r4
 8015bea:	f7ff ff5d 	bl	8015aa8 <__sflush_r>
 8015bee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015bf0:	07da      	lsls	r2, r3, #31
 8015bf2:	4605      	mov	r5, r0
 8015bf4:	d4e4      	bmi.n	8015bc0 <_fflush_r+0xc>
 8015bf6:	89a3      	ldrh	r3, [r4, #12]
 8015bf8:	059b      	lsls	r3, r3, #22
 8015bfa:	d4e1      	bmi.n	8015bc0 <_fflush_r+0xc>
 8015bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015bfe:	f7ff fa17 	bl	8015030 <__retarget_lock_release_recursive>
 8015c02:	e7dd      	b.n	8015bc0 <_fflush_r+0xc>

08015c04 <__swhatbuf_r>:
 8015c04:	b570      	push	{r4, r5, r6, lr}
 8015c06:	460c      	mov	r4, r1
 8015c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c0c:	2900      	cmp	r1, #0
 8015c0e:	b096      	sub	sp, #88	; 0x58
 8015c10:	4615      	mov	r5, r2
 8015c12:	461e      	mov	r6, r3
 8015c14:	da0d      	bge.n	8015c32 <__swhatbuf_r+0x2e>
 8015c16:	89a3      	ldrh	r3, [r4, #12]
 8015c18:	f013 0f80 	tst.w	r3, #128	; 0x80
 8015c1c:	f04f 0100 	mov.w	r1, #0
 8015c20:	bf0c      	ite	eq
 8015c22:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8015c26:	2340      	movne	r3, #64	; 0x40
 8015c28:	2000      	movs	r0, #0
 8015c2a:	6031      	str	r1, [r6, #0]
 8015c2c:	602b      	str	r3, [r5, #0]
 8015c2e:	b016      	add	sp, #88	; 0x58
 8015c30:	bd70      	pop	{r4, r5, r6, pc}
 8015c32:	466a      	mov	r2, sp
 8015c34:	f000 f862 	bl	8015cfc <_fstat_r>
 8015c38:	2800      	cmp	r0, #0
 8015c3a:	dbec      	blt.n	8015c16 <__swhatbuf_r+0x12>
 8015c3c:	9901      	ldr	r1, [sp, #4]
 8015c3e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8015c42:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8015c46:	4259      	negs	r1, r3
 8015c48:	4159      	adcs	r1, r3
 8015c4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015c4e:	e7eb      	b.n	8015c28 <__swhatbuf_r+0x24>

08015c50 <__smakebuf_r>:
 8015c50:	898b      	ldrh	r3, [r1, #12]
 8015c52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015c54:	079d      	lsls	r5, r3, #30
 8015c56:	4606      	mov	r6, r0
 8015c58:	460c      	mov	r4, r1
 8015c5a:	d507      	bpl.n	8015c6c <__smakebuf_r+0x1c>
 8015c5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015c60:	6023      	str	r3, [r4, #0]
 8015c62:	6123      	str	r3, [r4, #16]
 8015c64:	2301      	movs	r3, #1
 8015c66:	6163      	str	r3, [r4, #20]
 8015c68:	b002      	add	sp, #8
 8015c6a:	bd70      	pop	{r4, r5, r6, pc}
 8015c6c:	ab01      	add	r3, sp, #4
 8015c6e:	466a      	mov	r2, sp
 8015c70:	f7ff ffc8 	bl	8015c04 <__swhatbuf_r>
 8015c74:	9900      	ldr	r1, [sp, #0]
 8015c76:	4605      	mov	r5, r0
 8015c78:	4630      	mov	r0, r6
 8015c7a:	f7ff fa5d 	bl	8015138 <_malloc_r>
 8015c7e:	b948      	cbnz	r0, 8015c94 <__smakebuf_r+0x44>
 8015c80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015c84:	059a      	lsls	r2, r3, #22
 8015c86:	d4ef      	bmi.n	8015c68 <__smakebuf_r+0x18>
 8015c88:	f023 0303 	bic.w	r3, r3, #3
 8015c8c:	f043 0302 	orr.w	r3, r3, #2
 8015c90:	81a3      	strh	r3, [r4, #12]
 8015c92:	e7e3      	b.n	8015c5c <__smakebuf_r+0xc>
 8015c94:	89a3      	ldrh	r3, [r4, #12]
 8015c96:	6020      	str	r0, [r4, #0]
 8015c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c9c:	81a3      	strh	r3, [r4, #12]
 8015c9e:	9b00      	ldr	r3, [sp, #0]
 8015ca0:	6163      	str	r3, [r4, #20]
 8015ca2:	9b01      	ldr	r3, [sp, #4]
 8015ca4:	6120      	str	r0, [r4, #16]
 8015ca6:	b15b      	cbz	r3, 8015cc0 <__smakebuf_r+0x70>
 8015ca8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015cac:	4630      	mov	r0, r6
 8015cae:	f000 f837 	bl	8015d20 <_isatty_r>
 8015cb2:	b128      	cbz	r0, 8015cc0 <__smakebuf_r+0x70>
 8015cb4:	89a3      	ldrh	r3, [r4, #12]
 8015cb6:	f023 0303 	bic.w	r3, r3, #3
 8015cba:	f043 0301 	orr.w	r3, r3, #1
 8015cbe:	81a3      	strh	r3, [r4, #12]
 8015cc0:	89a3      	ldrh	r3, [r4, #12]
 8015cc2:	431d      	orrs	r5, r3
 8015cc4:	81a5      	strh	r5, [r4, #12]
 8015cc6:	e7cf      	b.n	8015c68 <__smakebuf_r+0x18>

08015cc8 <memmove>:
 8015cc8:	4288      	cmp	r0, r1
 8015cca:	b510      	push	{r4, lr}
 8015ccc:	eb01 0402 	add.w	r4, r1, r2
 8015cd0:	d902      	bls.n	8015cd8 <memmove+0x10>
 8015cd2:	4284      	cmp	r4, r0
 8015cd4:	4623      	mov	r3, r4
 8015cd6:	d807      	bhi.n	8015ce8 <memmove+0x20>
 8015cd8:	1e43      	subs	r3, r0, #1
 8015cda:	42a1      	cmp	r1, r4
 8015cdc:	d008      	beq.n	8015cf0 <memmove+0x28>
 8015cde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015ce2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015ce6:	e7f8      	b.n	8015cda <memmove+0x12>
 8015ce8:	4402      	add	r2, r0
 8015cea:	4601      	mov	r1, r0
 8015cec:	428a      	cmp	r2, r1
 8015cee:	d100      	bne.n	8015cf2 <memmove+0x2a>
 8015cf0:	bd10      	pop	{r4, pc}
 8015cf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015cf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015cfa:	e7f7      	b.n	8015cec <memmove+0x24>

08015cfc <_fstat_r>:
 8015cfc:	b538      	push	{r3, r4, r5, lr}
 8015cfe:	4d07      	ldr	r5, [pc, #28]	; (8015d1c <_fstat_r+0x20>)
 8015d00:	2300      	movs	r3, #0
 8015d02:	4604      	mov	r4, r0
 8015d04:	4608      	mov	r0, r1
 8015d06:	4611      	mov	r1, r2
 8015d08:	602b      	str	r3, [r5, #0]
 8015d0a:	f7ec f80a 	bl	8001d22 <_fstat>
 8015d0e:	1c43      	adds	r3, r0, #1
 8015d10:	d102      	bne.n	8015d18 <_fstat_r+0x1c>
 8015d12:	682b      	ldr	r3, [r5, #0]
 8015d14:	b103      	cbz	r3, 8015d18 <_fstat_r+0x1c>
 8015d16:	6023      	str	r3, [r4, #0]
 8015d18:	bd38      	pop	{r3, r4, r5, pc}
 8015d1a:	bf00      	nop
 8015d1c:	24008300 	.word	0x24008300

08015d20 <_isatty_r>:
 8015d20:	b538      	push	{r3, r4, r5, lr}
 8015d22:	4d06      	ldr	r5, [pc, #24]	; (8015d3c <_isatty_r+0x1c>)
 8015d24:	2300      	movs	r3, #0
 8015d26:	4604      	mov	r4, r0
 8015d28:	4608      	mov	r0, r1
 8015d2a:	602b      	str	r3, [r5, #0]
 8015d2c:	f7ec f809 	bl	8001d42 <_isatty>
 8015d30:	1c43      	adds	r3, r0, #1
 8015d32:	d102      	bne.n	8015d3a <_isatty_r+0x1a>
 8015d34:	682b      	ldr	r3, [r5, #0]
 8015d36:	b103      	cbz	r3, 8015d3a <_isatty_r+0x1a>
 8015d38:	6023      	str	r3, [r4, #0]
 8015d3a:	bd38      	pop	{r3, r4, r5, pc}
 8015d3c:	24008300 	.word	0x24008300

08015d40 <_sbrk_r>:
 8015d40:	b538      	push	{r3, r4, r5, lr}
 8015d42:	4d06      	ldr	r5, [pc, #24]	; (8015d5c <_sbrk_r+0x1c>)
 8015d44:	2300      	movs	r3, #0
 8015d46:	4604      	mov	r4, r0
 8015d48:	4608      	mov	r0, r1
 8015d4a:	602b      	str	r3, [r5, #0]
 8015d4c:	f7ec f812 	bl	8001d74 <_sbrk>
 8015d50:	1c43      	adds	r3, r0, #1
 8015d52:	d102      	bne.n	8015d5a <_sbrk_r+0x1a>
 8015d54:	682b      	ldr	r3, [r5, #0]
 8015d56:	b103      	cbz	r3, 8015d5a <_sbrk_r+0x1a>
 8015d58:	6023      	str	r3, [r4, #0]
 8015d5a:	bd38      	pop	{r3, r4, r5, pc}
 8015d5c:	24008300 	.word	0x24008300

08015d60 <_realloc_r>:
 8015d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d64:	4680      	mov	r8, r0
 8015d66:	4614      	mov	r4, r2
 8015d68:	460e      	mov	r6, r1
 8015d6a:	b921      	cbnz	r1, 8015d76 <_realloc_r+0x16>
 8015d6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015d70:	4611      	mov	r1, r2
 8015d72:	f7ff b9e1 	b.w	8015138 <_malloc_r>
 8015d76:	b92a      	cbnz	r2, 8015d84 <_realloc_r+0x24>
 8015d78:	f7ff f96a 	bl	8015050 <_free_r>
 8015d7c:	4625      	mov	r5, r4
 8015d7e:	4628      	mov	r0, r5
 8015d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d84:	f000 f81b 	bl	8015dbe <_malloc_usable_size_r>
 8015d88:	4284      	cmp	r4, r0
 8015d8a:	4607      	mov	r7, r0
 8015d8c:	d802      	bhi.n	8015d94 <_realloc_r+0x34>
 8015d8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015d92:	d812      	bhi.n	8015dba <_realloc_r+0x5a>
 8015d94:	4621      	mov	r1, r4
 8015d96:	4640      	mov	r0, r8
 8015d98:	f7ff f9ce 	bl	8015138 <_malloc_r>
 8015d9c:	4605      	mov	r5, r0
 8015d9e:	2800      	cmp	r0, #0
 8015da0:	d0ed      	beq.n	8015d7e <_realloc_r+0x1e>
 8015da2:	42bc      	cmp	r4, r7
 8015da4:	4622      	mov	r2, r4
 8015da6:	4631      	mov	r1, r6
 8015da8:	bf28      	it	cs
 8015daa:	463a      	movcs	r2, r7
 8015dac:	f7ff f941 	bl	8015032 <memcpy>
 8015db0:	4631      	mov	r1, r6
 8015db2:	4640      	mov	r0, r8
 8015db4:	f7ff f94c 	bl	8015050 <_free_r>
 8015db8:	e7e1      	b.n	8015d7e <_realloc_r+0x1e>
 8015dba:	4635      	mov	r5, r6
 8015dbc:	e7df      	b.n	8015d7e <_realloc_r+0x1e>

08015dbe <_malloc_usable_size_r>:
 8015dbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015dc2:	1f18      	subs	r0, r3, #4
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	bfbc      	itt	lt
 8015dc8:	580b      	ldrlt	r3, [r1, r0]
 8015dca:	18c0      	addlt	r0, r0, r3
 8015dcc:	4770      	bx	lr

08015dce <checkint>:
 8015dce:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8015dd2:	2b7e      	cmp	r3, #126	; 0x7e
 8015dd4:	dd10      	ble.n	8015df8 <checkint+0x2a>
 8015dd6:	2b96      	cmp	r3, #150	; 0x96
 8015dd8:	dc0c      	bgt.n	8015df4 <checkint+0x26>
 8015dda:	2201      	movs	r2, #1
 8015ddc:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8015de0:	fa02 f303 	lsl.w	r3, r2, r3
 8015de4:	1e5a      	subs	r2, r3, #1
 8015de6:	4202      	tst	r2, r0
 8015de8:	d106      	bne.n	8015df8 <checkint+0x2a>
 8015dea:	4203      	tst	r3, r0
 8015dec:	bf0c      	ite	eq
 8015dee:	2002      	moveq	r0, #2
 8015df0:	2001      	movne	r0, #1
 8015df2:	4770      	bx	lr
 8015df4:	2002      	movs	r0, #2
 8015df6:	4770      	bx	lr
 8015df8:	2000      	movs	r0, #0
 8015dfa:	4770      	bx	lr
 8015dfc:	0000      	movs	r0, r0
	...

08015e00 <powf>:
 8015e00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015e02:	ee10 1a10 	vmov	r1, s0
 8015e06:	ee10 4a90 	vmov	r4, s1
 8015e0a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8015e0e:	0062      	lsls	r2, r4, #1
 8015e10:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8015e14:	eef0 7a40 	vmov.f32	s15, s0
 8015e18:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 8015e1c:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8015e20:	d252      	bcs.n	8015ec8 <powf+0xc8>
 8015e22:	4298      	cmp	r0, r3
 8015e24:	d252      	bcs.n	8015ecc <powf+0xcc>
 8015e26:	2000      	movs	r0, #0
 8015e28:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 8015e2c:	4a9e      	ldr	r2, [pc, #632]	; (80160a8 <powf+0x2a8>)
 8015e2e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8015e32:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 8015e36:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8015e3a:	0ddb      	lsrs	r3, r3, #23
 8015e3c:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8015e40:	05db      	lsls	r3, r3, #23
 8015e42:	ed94 5b00 	vldr	d5, [r4]
 8015e46:	1ac9      	subs	r1, r1, r3
 8015e48:	ee07 1a90 	vmov	s15, r1
 8015e4c:	15db      	asrs	r3, r3, #23
 8015e4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8015e52:	eea5 6b07 	vfma.f64	d6, d5, d7
 8015e56:	ed94 5b02 	vldr	d5, [r4, #8]
 8015e5a:	ee26 2b06 	vmul.f64	d2, d6, d6
 8015e5e:	ee22 1b02 	vmul.f64	d1, d2, d2
 8015e62:	ee07 3a90 	vmov	s15, r3
 8015e66:	ed92 3b42 	vldr	d3, [r2, #264]	; 0x108
 8015e6a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015e6e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8015e72:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 8015e76:	ed92 4b44 	vldr	d4, [r2, #272]	; 0x110
 8015e7a:	eea6 3b05 	vfma.f64	d3, d6, d5
 8015e7e:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 8015e82:	eea6 5b04 	vfma.f64	d5, d6, d4
 8015e86:	ed92 4b48 	vldr	d4, [r2, #288]	; 0x120
 8015e8a:	eea6 7b04 	vfma.f64	d7, d6, d4
 8015e8e:	eeb7 6ae0 	vcvt.f64.f32	d6, s1
 8015e92:	eea2 7b05 	vfma.f64	d7, d2, d5
 8015e96:	eea3 7b01 	vfma.f64	d7, d3, d1
 8015e9a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8015e9e:	ee16 3a90 	vmov	r3, s13
 8015ea2:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8015ea6:	f248 03bf 	movw	r3, #32959	; 0x80bf
 8015eaa:	429a      	cmp	r2, r3
 8015eac:	f0c0 80b0 	bcc.w	8016010 <powf+0x210>
 8015eb0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8016088 <powf+0x288>
 8015eb4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ebc:	dd78      	ble.n	8015fb0 <powf+0x1b0>
 8015ebe:	b003      	add	sp, #12
 8015ec0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015ec4:	f000 b91a 	b.w	80160fc <__math_oflowf>
 8015ec8:	4298      	cmp	r0, r3
 8015eca:	d32d      	bcc.n	8015f28 <powf+0x128>
 8015ecc:	b952      	cbnz	r2, 8015ee4 <powf+0xe4>
 8015ece:	f481 0180 	eor.w	r1, r1, #4194304	; 0x400000
 8015ed2:	0049      	lsls	r1, r1, #1
 8015ed4:	f511 0f00 	cmn.w	r1, #8388608	; 0x800000
 8015ed8:	f240 80c8 	bls.w	801606c <powf+0x26c>
 8015edc:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8015ee0:	b003      	add	sp, #12
 8015ee2:	bd30      	pop	{r4, r5, pc}
 8015ee4:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8015ee8:	d105      	bne.n	8015ef6 <powf+0xf6>
 8015eea:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8015eee:	0064      	lsls	r4, r4, #1
 8015ef0:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8015ef4:	e7f0      	b.n	8015ed8 <powf+0xd8>
 8015ef6:	0049      	lsls	r1, r1, #1
 8015ef8:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 8015efc:	d8ee      	bhi.n	8015edc <powf+0xdc>
 8015efe:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8015f02:	d1eb      	bne.n	8015edc <powf+0xdc>
 8015f04:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
 8015f08:	f000 80b0 	beq.w	801606c <powf+0x26c>
 8015f0c:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
 8015f10:	ea6f 0404 	mvn.w	r4, r4
 8015f14:	bf34      	ite	cc
 8015f16:	2100      	movcc	r1, #0
 8015f18:	2101      	movcs	r1, #1
 8015f1a:	0fe4      	lsrs	r4, r4, #31
 8015f1c:	42a1      	cmp	r1, r4
 8015f1e:	f040 80a8 	bne.w	8016072 <powf+0x272>
 8015f22:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8015f26:	e7db      	b.n	8015ee0 <powf+0xe0>
 8015f28:	004d      	lsls	r5, r1, #1
 8015f2a:	1e6a      	subs	r2, r5, #1
 8015f2c:	429a      	cmp	r2, r3
 8015f2e:	d31c      	bcc.n	8015f6a <powf+0x16a>
 8015f30:	2900      	cmp	r1, #0
 8015f32:	ee20 0a00 	vmul.f32	s0, s0, s0
 8015f36:	da0f      	bge.n	8015f58 <powf+0x158>
 8015f38:	ee10 0a90 	vmov	r0, s1
 8015f3c:	f7ff ff47 	bl	8015dce <checkint>
 8015f40:	2801      	cmp	r0, #1
 8015f42:	d109      	bne.n	8015f58 <powf+0x158>
 8015f44:	eeb1 0a40 	vneg.f32	s0, s0
 8015f48:	b945      	cbnz	r5, 8015f5c <powf+0x15c>
 8015f4a:	2c00      	cmp	r4, #0
 8015f4c:	dac8      	bge.n	8015ee0 <powf+0xe0>
 8015f4e:	b003      	add	sp, #12
 8015f50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015f54:	f000 b8d8 	b.w	8016108 <__math_divzerof>
 8015f58:	2000      	movs	r0, #0
 8015f5a:	e7f5      	b.n	8015f48 <powf+0x148>
 8015f5c:	2c00      	cmp	r4, #0
 8015f5e:	dabf      	bge.n	8015ee0 <powf+0xe0>
 8015f60:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015f64:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8015f68:	e7ba      	b.n	8015ee0 <powf+0xe0>
 8015f6a:	2900      	cmp	r1, #0
 8015f6c:	da1e      	bge.n	8015fac <powf+0x1ac>
 8015f6e:	ee10 0a90 	vmov	r0, s1
 8015f72:	f7ff ff2c 	bl	8015dce <checkint>
 8015f76:	b920      	cbnz	r0, 8015f82 <powf+0x182>
 8015f78:	b003      	add	sp, #12
 8015f7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015f7e:	f000 b8d5 	b.w	801612c <__math_invalidf>
 8015f82:	1e43      	subs	r3, r0, #1
 8015f84:	4258      	negs	r0, r3
 8015f86:	4158      	adcs	r0, r3
 8015f88:	0400      	lsls	r0, r0, #16
 8015f8a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8015f8e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8015f92:	f4bf af49 	bcs.w	8015e28 <powf+0x28>
 8015f96:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80160ac <powf+0x2ac>
 8015f9a:	ee27 0a87 	vmul.f32	s0, s15, s14
 8015f9e:	ee10 3a10 	vmov	r3, s0
 8015fa2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015fa6:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8015faa:	e73d      	b.n	8015e28 <powf+0x28>
 8015fac:	2000      	movs	r0, #0
 8015fae:	e7ee      	b.n	8015f8e <powf+0x18e>
 8015fb0:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8016090 <powf+0x290>
 8015fb4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fbc:	dd10      	ble.n	8015fe0 <powf+0x1e0>
 8015fbe:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8015fc2:	2800      	cmp	r0, #0
 8015fc4:	d158      	bne.n	8016078 <powf+0x278>
 8015fc6:	9300      	str	r3, [sp, #0]
 8015fc8:	eddd 7a00 	vldr	s15, [sp]
 8015fcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015fd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015fd4:	eef4 7a47 	vcmp.f32	s15, s14
 8015fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fdc:	f47f af6f 	bne.w	8015ebe <powf+0xbe>
 8015fe0:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8016098 <powf+0x298>
 8015fe4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fec:	d804      	bhi.n	8015ff8 <powf+0x1f8>
 8015fee:	b003      	add	sp, #12
 8015ff0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015ff4:	f000 b876 	b.w	80160e4 <__math_uflowf>
 8015ff8:	ed9f 7b29 	vldr	d7, [pc, #164]	; 80160a0 <powf+0x2a0>
 8015ffc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016004:	d504      	bpl.n	8016010 <powf+0x210>
 8016006:	b003      	add	sp, #12
 8016008:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801600c:	f000 b870 	b.w	80160f0 <__math_may_uflowf>
 8016010:	4b27      	ldr	r3, [pc, #156]	; (80160b0 <powf+0x2b0>)
 8016012:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8016016:	ed93 5b40 	vldr	d5, [r3, #256]	; 0x100
 801601a:	ee36 7b05 	vadd.f64	d7, d6, d5
 801601e:	ee17 2a10 	vmov	r2, s14
 8016022:	ee37 7b45 	vsub.f64	d7, d7, d5
 8016026:	f002 011f 	and.w	r1, r2, #31
 801602a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801602e:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8016032:	ee27 4b07 	vmul.f64	d4, d7, d7
 8016036:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 801603a:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 801603e:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8016042:	eea7 6b05 	vfma.f64	d6, d7, d5
 8016046:	686d      	ldr	r5, [r5, #4]
 8016048:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 801604c:	1882      	adds	r2, r0, r2
 801604e:	2300      	movs	r3, #0
 8016050:	1918      	adds	r0, r3, r4
 8016052:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 8016056:	eea7 0b05 	vfma.f64	d0, d7, d5
 801605a:	ec41 0b17 	vmov	d7, r0, r1
 801605e:	eea6 0b04 	vfma.f64	d0, d6, d4
 8016062:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016066:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801606a:	e739      	b.n	8015ee0 <powf+0xe0>
 801606c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016070:	e736      	b.n	8015ee0 <powf+0xe0>
 8016072:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80160b4 <powf+0x2b4>
 8016076:	e733      	b.n	8015ee0 <powf+0xe0>
 8016078:	9301      	str	r3, [sp, #4]
 801607a:	eddd 7a01 	vldr	s15, [sp, #4]
 801607e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8016082:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016086:	e7a5      	b.n	8015fd4 <powf+0x1d4>
 8016088:	ffd1d571 	.word	0xffd1d571
 801608c:	405fffff 	.word	0x405fffff
 8016090:	ffa3aae2 	.word	0xffa3aae2
 8016094:	405fffff 	.word	0x405fffff
 8016098:	00000000 	.word	0x00000000
 801609c:	c062c000 	.word	0xc062c000
 80160a0:	00000000 	.word	0x00000000
 80160a4:	c062a000 	.word	0xc062a000
 80160a8:	0801b580 	.word	0x0801b580
 80160ac:	4b000000 	.word	0x4b000000
 80160b0:	0801b438 	.word	0x0801b438
 80160b4:	00000000 	.word	0x00000000

080160b8 <with_errnof>:
 80160b8:	b513      	push	{r0, r1, r4, lr}
 80160ba:	4604      	mov	r4, r0
 80160bc:	ed8d 0a01 	vstr	s0, [sp, #4]
 80160c0:	f7fe ff8a 	bl	8014fd8 <__errno>
 80160c4:	ed9d 0a01 	vldr	s0, [sp, #4]
 80160c8:	6004      	str	r4, [r0, #0]
 80160ca:	b002      	add	sp, #8
 80160cc:	bd10      	pop	{r4, pc}

080160ce <xflowf>:
 80160ce:	b130      	cbz	r0, 80160de <xflowf+0x10>
 80160d0:	eef1 7a40 	vneg.f32	s15, s0
 80160d4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80160d8:	2022      	movs	r0, #34	; 0x22
 80160da:	f7ff bfed 	b.w	80160b8 <with_errnof>
 80160de:	eef0 7a40 	vmov.f32	s15, s0
 80160e2:	e7f7      	b.n	80160d4 <xflowf+0x6>

080160e4 <__math_uflowf>:
 80160e4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80160ec <__math_uflowf+0x8>
 80160e8:	f7ff bff1 	b.w	80160ce <xflowf>
 80160ec:	10000000 	.word	0x10000000

080160f0 <__math_may_uflowf>:
 80160f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80160f8 <__math_may_uflowf+0x8>
 80160f4:	f7ff bfeb 	b.w	80160ce <xflowf>
 80160f8:	1a200000 	.word	0x1a200000

080160fc <__math_oflowf>:
 80160fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016104 <__math_oflowf+0x8>
 8016100:	f7ff bfe5 	b.w	80160ce <xflowf>
 8016104:	70000000 	.word	0x70000000

08016108 <__math_divzerof>:
 8016108:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8016128 <__math_divzerof+0x20>
 801610c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8016110:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016114:	2800      	cmp	r0, #0
 8016116:	f04f 0022 	mov.w	r0, #34	; 0x22
 801611a:	fe47 7a27 	vseleq.f32	s15, s14, s15
 801611e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8016122:	f7ff bfc9 	b.w	80160b8 <with_errnof>
 8016126:	bf00      	nop
 8016128:	00000000 	.word	0x00000000

0801612c <__math_invalidf>:
 801612c:	eef0 7a40 	vmov.f32	s15, s0
 8016130:	ee30 7a40 	vsub.f32	s14, s0, s0
 8016134:	eef4 7a67 	vcmp.f32	s15, s15
 8016138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801613c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8016140:	d602      	bvs.n	8016148 <__math_invalidf+0x1c>
 8016142:	2021      	movs	r0, #33	; 0x21
 8016144:	f7ff bfb8 	b.w	80160b8 <with_errnof>
 8016148:	4770      	bx	lr
	...

0801614c <_init>:
 801614c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801614e:	bf00      	nop
 8016150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016152:	bc08      	pop	{r3}
 8016154:	469e      	mov	lr, r3
 8016156:	4770      	bx	lr

08016158 <_fini>:
 8016158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801615a:	bf00      	nop
 801615c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801615e:	bc08      	pop	{r3}
 8016160:	469e      	mov	lr, r3
 8016162:	4770      	bx	lr
